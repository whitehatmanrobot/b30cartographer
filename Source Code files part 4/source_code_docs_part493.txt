urns>true if the validation message contents should be replaced with the client validation error; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationMessageId">
      <summary>Gets or sets the validator message ID.</summary>
      <returns>The validator message ID.</returns>
    </member>
    <member name="P:System.Web.Mvc.FieldValidationMetadata.ValidationRules">
      <summary>Gets the client validation rules.</summary>
      <returns>The client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.FileContentResult">
      <summary>Sends the contents of a binary file to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.#ctor(System.Byte[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileContentResult" /> class by using the specified file contents and content type.</summary>
      <param name="fileContents">The byte array to send to the response.</param>
      <param name="contentType">The content type to use for the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileContents" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileContentResult.FileContents">
      <summary>The binary content to send to the response.</summary>
      <returns>The file contents.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileContentResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file content to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FilePathResult">
      <summary>Sends the contents of a file to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilePathResult" /> class by using the specified file name and content type.</summary>
      <param name="fileName">The name of the file to send to the response.</param>
      <param name="contentType">The content type of the response.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fileName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FilePathResult.FileName">
      <summary>Gets or sets the path of the file that is sent to the response.</summary>
      <returns>The path of the file that is sent to the response.</returns>
    </member>
    <member name="M:System.Web.Mvc.FilePathResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FileResult">
      <summary>Represents a base class that is used to send binary file content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileResult" /> class.</summary>
      <param name="contentType">The type of the content.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="contentType" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.ContentType">
      <summary>Gets the content type to use for the response.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileResult.FileDownloadName">
      <summary>Gets or sets the content-disposition header so that a file-download dialog box is displayed in the browser with the specified file name.</summary>
      <returns>The name of the file.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.FileStreamResult">
      <summary>Sends binary content to the response by using a <see cref="T:System.IO.Stream" /> instance.</summary>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.#ctor(System.IO.Stream,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FileStreamResult" /> class.</summary>
      <param name="fileStream">The stream to send to the response.</param>
      <param name="contentType">The content type to use for the response.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="fileStream" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.FileStreamResult.FileStream">
      <summary>Gets the stream that will be sent to the response.</summary>
      <returns>The file stream.</returns>
    </member>
    <member name="M:System.Web.Mvc.FileStreamResult.WriteFile(System.Web.HttpResponseBase)">
      <summary>Writes the file to the response.</summary>
      <param name="response">The response.</param>
    </member>
    <member name="T:System.Web.Mvc.Filter">
      <summary>Represents a metadata class that contains a reference to the implementation of one or more of the filter interfaces, the filter's order, and the filter's scope.</summary>
    </member>
    <member name="M:System.Web.Mvc.Filter.#ctor(System.Object,System.Web.Mvc.FilterScope,System.Nullable{System.Int32})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Filter" /> class.</summary>
      <param name="instance">The instance.</param>
      <param name="scope">The scope.</param>
      <param name="order">The order.</param>
    </member>
    <member name="F:System.Web.Mvc.Filter.DefaultOrder">
      <summary>Represents a constant that is used to specify the default ordering of filters.</summary>
    </member>
    <member name="P:System.Web.Mvc.Filter.Instance">
      <summary>Gets the instance of this class.</summary>
      <returns>The instance of this class.</returns>
    </member>
    <member name="P:System.Web.Mvc.Filter.Order">
      <summary>Gets the order in which the filter is applied.</summary>
      <returns>The order in which the filter is applied.</returns>
    </member>
    <member name="P:System.Web.Mvc.Filter.Scope">
      <summary>Gets the scope ordering of the filter.</summary>
      <returns>The scope ordering of the filter.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterAttribute">
      <summary>Represents the base class for action and result filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.AllowMultiple">
      <summary>Gets or sets a value that indicates whether more than one instance of the filter attribute can be specified.</summary>
      <returns>true if more than one instance of the filter attribute can be specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterAttribute.Order">
      <summary>Gets or sets the order in which the action filters are executed.</summary>
      <returns>The order in which the action filters are executed.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterAttributeFilterProvider">
      <summary>Defines a filter provider for filter attributes.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttributeFilterProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterAttributeFilterProvider" /> class and optionally caches attribute instances.</summary>
      <param name="cacheAttributeInstances">true to cache attribute instances; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetActionAttributes(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets a collection of custom action attributes.</summary>
      <returns>A collection of custom action attributes.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetControllerAttributes(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Gets a collection of controller attributes.</summary>
      <returns>A collection of controller attributes.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterAttributeFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Aggregates the filters from all of the filter providers into one collection.</summary>
      <returns>The collection filters from all of the filter providers.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.FilterInfo">
      <summary>Encapsulates information about the available action filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterInfo.#ctor(System.Collections.Generic.IEnumerable{System.Web.Mvc.Filter})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterInfo" /> class using the specified filters collection.</summary>
      <param name="filters">The filters collection.</param>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ActionFilters">
      <summary>Gets all the action filters in the application.</summary>
      <returns>The action filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.AuthorizationFilters">
      <summary>Gets all the authorization filters in the application.</summary>
      <returns>The authorization filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ExceptionFilters">
      <summary>Gets all the exception filters in the application.</summary>
      <returns>The exception filters.</returns>
    </member>
    <member name="P:System.Web.Mvc.FilterInfo.ResultFilters">
      <summary>Gets all the result filters in the application.</summary>
      <returns>The result filters.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterProviderCollection">
      <summary>Represents the collection of filter providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IFilterProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FilterProviderCollection" /> class using the filter providers collection.</summary>
      <param name="providers">The filter providers collection.</param>
    </member>
    <member name="M:System.Web.Mvc.FilterProviderCollection.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Returns the collection of filter providers.</summary>
      <returns>The collection of filter providers.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.FilterProviders">
      <summary>Provides a registration point for filters.</summary>
    </member>
    <member name="P:System.Web.Mvc.FilterProviders.Providers">
      <summary>Provides a registration point for filters.</summary>
      <returns>The collection of filters.</returns>
    </member>
    <member name="T:System.Web.Mvc.FilterScope">
      <summary>Defines values that specify the order in which ASP.NET MVC filters run within the same filter type and filter order.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.First">
      <summary>Specifies first.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Global">
      <summary>Specifies an order before <see cref="F:System.Web.Mvc.FilterScope.Controller" /> and after <see cref="F:System.Web.Mvc.FilterScope.First" />.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Controller">
      <summary>Specifies an order before <see cref="F:System.Web.Mvc.FilterScope.Action" /> and after <see cref="F:System.Web.Mvc.FilterScope.Global" />.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Action">
      <summary>Specifies an order before <see cref="F:System.Web.Mvc.FilterScope.Last" /> and after <see cref="F:System.Web.Mvc.FilterScope.Controller" />.</summary>
    </member>
    <member name="F:System.Web.Mvc.FilterScope.Last">
      <summary>Specifies last.</summary>
    </member>
    <member name="T:System.Web.Mvc.FormCollection">
      <summary>Contains the form value providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormCollection" /> class.</summary>
      <param name="collection">The collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.GetValue(System.String)">
      <summary>Gets the specified value provider.</summary>
      <returns>The value provider.</returns>
      <param name="name">The name of the value provider to get.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>Gets a value that indicates whether the value provider contains an entry that has the specified prefix.</summary>
      <returns>true if the value provider contains an entry that has the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to look for.</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>Gets a value from a value provider using the specified key.</summary>
      <returns>A value from a value provider.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Web.Mvc.FormCollection.ToValueProvider">
      <summary>Returns a dictionary that contains the value providers.</summary>
      <returns>A dictionary of value providers.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormContext">
      <summary>Encapsulates information that is required in order to validate and process the input data from an HTML form.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormContext" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FieldValidators">
      <summary>Gets the field validators for the form.</summary>
      <returns>A dictionary of field validators for the form.</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.FormId">
      <summary>Gets or sets the form identifier.</summary>
      <returns>The form identifier.</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetJsonValidationMetadata">
      <summary>Returns a serialized object that contains the form identifier and field-validation values for the form.</summary>
      <returns>A serialized object that contains the form identifier and field-validation values for the form.</returns>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String)">
      <summary>Returns the validation value for the specified input field.</summary>
      <returns>The value to validate the field input with.</returns>
      <param name="fieldName">The name of the field to retrieve the validation value for.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fieldName" /> parameter is either null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.GetValidationMetadataForField(System.String,System.Boolean)">
      <summary>Returns the validation value for the specified input field and a value that indicates what to do if the validation value is not found.</summary>
      <returns>The value to validate the field input with.</returns>
      <param name="fieldName">The name of the field to retrieve the validation value for.</param>
      <param name="createIfNotFound">true to create a validation value if one is not found; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="fieldName" /> parameter is either null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.FormContext.RenderedField(System.String)">
      <summary>Returns a value that indicates whether the specified field has been rendered in the form.</summary>
      <returns>true if the field has been rendered; otherwise, false.</returns>
      <param name="fieldName">The field name.</param>
    </member>
    <member name="M:System.Web.Mvc.FormContext.RenderedField(System.String,System.Boolean)">
      <summary>Sets a value that indicates whether the specified field has been rendered in the form.</summary>
      <param name="fieldName">The field name.</param>
      <param name="value">true to specify that the field has been rendered in the form; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ReplaceValidationSummary">
      <summary>Determines whether client validation errors should be dynamically added to the validation summary.</summary>
      <returns>true if client validation errors should be added to the validation summary; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.FormContext.ValidationSummaryId">
      <summary>Gets or sets the identifier for the validation summary.</summary>
      <returns>The identifier for the validation summary.</returns>
    </member>
    <member name="T:System.Web.Mvc.FormMethod">
      <summary>Enumerates the HTTP request types for a form.</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Get">
      <summary>Specifies a GET request.</summary>
    </member>
    <member name="F:System.Web.Mvc.FormMethod.Post">
      <summary>Specifies a POST request.</summary>
    </member>
    <member name="T:System.Web.Mvc.FormValueProvider">
      <summary>Represents a value provider for form values that are contained in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.FormValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of a form-value provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.FormValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.FormValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a form-value provider object for the specified controller context.</summary>
      <returns>A form-value provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.GlobalFilterCollection">
      <summary>Represents a class that contains all the global filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.GlobalFilterCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Add(System.Object)">
      <summary>Adds the specified filter to the global filter collection.</summary>
      <param name="filter">The filter.</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Add(System.Object,System.Int32)">
      <summary>Adds the specified filter to the global filter collection using the specified filter run order.</summary>
      <param name="filter">The filter.</param>
      <param name="order">The filter run order.</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Clear">
      <summary>Removes all filters from the global filter collection.</summary>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Contains(System.Object)">
      <summary>Determines whether a filter is in the global filter collection.</summary>
      <returns>true if <paramref name="filter" /> is found in the global filter collection; otherwise, false.</returns>
      <param name="filter">The filter.</param>
    </member>
    <member name="P:System.Web.Mvc.GlobalFilterCollection.Count">
      <summary>Gets the number of filters in the global filter collection.</summary>
      <returns>The number of filters in the global filter collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the global filter collection.</summary>
      <returns>An enumerator that iterates through the global filter collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.Remove(System.Object)">
      <summary>Removes all the filters that match the specified filter.</summary>
      <param name="filter">The filter to remove.</param>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code. </summary>
      <returns>An enumerator that iterates through the global filter collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.GlobalFilterCollection.System#Web#Mvc#IFilterProvider#GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>This API supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <returns>An enumerator that iterates through the global filter collection.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.GlobalFilters">
      <summary>Represents the global filter collection.</summary>
    </member>
    <member name="P:System.Web.Mvc.GlobalFilters.Filters">
      <summary>Gets or sets the global filter collection.</summary>
      <returns>The global filter collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorAttribute">
      <summary>Represents an attribute that is used to handle an exception that is thrown by an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HandleErrorAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.ExceptionType">
      <summary>Gets or sets the type of the exception.</summary>
      <returns>The type of the exception.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.Master">
      <summary>Gets or sets the master view for displaying exception information.</summary>
      <returns>The master view.</returns>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an exception occurs.</summary>
      <param name="filterContext">The action-filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.TypeId">
      <summary>Gets the unique identifier for this attribute.</summary>
      <returns>The unique identifier for this attribute.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorAttribute.View">
      <summary>Gets or sets the page view for displaying exception information.</summary>
      <returns>The page view.</returns>
    </member>
    <member name="T:System.Web.Mvc.HandleErrorInfo">
      <summary>Encapsulates information for handling an error that was thrown by an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.HandleErrorInfo.#ctor(System.Exception,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HandleErrorInfo" /> class.</summary>
      <param name="exception">The exception.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="controllerName" /> or <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ActionName">
      <summary>Gets or sets the name of the action that was executing when the exception was thrown.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.ControllerName">
      <summary>Gets or sets the name of the controller that contains the action method that threw the exception.</summary>
      <returns>The name of the controller.</returns>
    </member>
    <member name="P:System.Web.Mvc.HandleErrorInfo.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="T:System.Web.Mvc.HiddenInputAttribute">
      <summary>Represents an attribute that is used to indicate whether a property or field value should be rendered as a hidden input element.</summary>
    </member>
    <member name="M:System.Web.Mvc.HiddenInputAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HiddenInputAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.HiddenInputAttribute.DisplayValue">
      <summary>Gets or sets a value that indicates whether to display the value of the hidden input element.</summary>
      <returns>true if the value should be displayed; otherwise, false.</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper">
      <summary>Represents support for rendering HTML controls in a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> or the <paramref name="viewDataContainer" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The route collection.</param>
      <exception cref="T:System.ArgumentNullException">One or more parameters is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AnonymousObjectToHtmlAttributes(System.Object)">
      <summary>Replaces underscore characters (_) with hyphens (-) in the specified HTML attributes.</summary>
      <returns>The HTML attributes with underscore characters replaced by hyphens.</returns>
      <param name="htmlAttributes">The HTML attributes.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String)">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
      <param name="salt">The salt value, which can be any non-empty string.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AntiForgeryToken(System.String,System.String,System.String)">
      <summary>Generates a hidden form field (anti-forgery token) that is validated when the form is submitted. The field value is generated using the specified salt value, domain, and path.</summary>
      <returns>The generated form field (anti-forgery token).</returns>
      <param name="salt">The salt value, which can be any non-empty string.</param>
      <param name="domain">The application domain.</param>
      <param name="path">The virtual path.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.Object)">
      <summary>Converts the specified attribute object to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.</returns>
      <param name="value">The object to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.AttributeEncode(System.String)">
      <summary>Converts the specified attribute string to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string. If the value parameter is null or empty, this method returns an empty string.</returns>
      <param name="value">The string to encode.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ClientValidationEnabled">
      <summary>Gets or sets a value that indicates whether client validation is enabled.</summary>
      <returns>true if enable client validation is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation">
      <summary>Enables input validation that is performed by using client script in the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableClientValidation(System.Boolean)">
      <summary>Enables or disables client validation.</summary>
      <param name="enabled">true to enable client validation; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableUnobtrusiveJavaScript">
      <summary>Enables unobtrusive JavaScript.</summary>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.EnableUnobtrusiveJavaScript(System.Boolean)">
      <summary>Enables or disables unobtrusive JavaScript.</summary>
      <param name="enabled">true to enable unobtrusive JavaScript; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.Object)">
      <summary>Converts the value of the specified object to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string.</returns>
      <param name="value">The object to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Encode(System.String)">
      <summary>Converts the specified string to an HTML-encoded string.</summary>
      <returns>The HTML-encoded string.</returns>
      <param name="value">The string to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String)">
      <summary>Creates an HTML element ID using the specified element name.</summary>
      <returns>The ID of the HTML element.</returns>
      <param name="name">The name of the HTML element.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateIdFromName(System.String,System.String)">
      <summary>Creates an HTML element ID using the specified element name and a string that replaces dots in the name.</summary>
      <returns>The ID of the HTML element.</returns>
      <param name="name">The name of the HTML element.</param>
      <param name="idAttributeDotReplacement">The string that replaces dots (.) in the <paramref name="name" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter or the <paramref name="idAttributeDotReplacement" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified action method, and enables the user to specify the communication protocol, name of the host, and a URL fragment.</summary>
      <returns>An HTML element that links to the specified action method.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.</param>
      <param name="hostName">The name of the host.</param>
      <param name="fragment">The fragment identifier.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified action method.</summary>
      <returns>An HTML element that links to the specified action method.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified URL route, and enables the user to specify the communication protocol, name of the host, and a URL fragment.</summary>
      <returns>An HTML element that links to the specified URL route.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The communication protocol, such as HTTP or HTTPS. If this parameter is null, the protocol defaults to HTTP.</param>
      <param name="hostName">The name of the host.</param>
      <param name="fragment">The fragment identifier.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GenerateRouteLink(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Generates an HTML anchor element (a element) that links to the specified URL route.</summary>
      <returns>An HTML element that links to the specified URL route.</returns>
      <param name="requestContext">The context of the HTTP request.</param>
      <param name="routeCollection">The collection of URL routes.</param>
      <param name="linkText">The text caption to display for the link.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetFormMethodString(System.Web.Mvc.FormMethod)">
      <summary>Returns the HTTP method that handles form input (GET or POST) as a string.</summary>
      <returns>The form method string, either "get" or "post".</returns>
      <param name="method">The HTTP method that handles the form.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetInputTypeString(System.Web.Mvc.InputType)">
      <summary>Returns the HTML input control type as a string.</summary>
      <returns>The input type string ("checkbox", "hidden", "password", "radio", or "text").</returns>
      <param name="inputType">The enumerated input type.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String)">
      <summary>Gets the collection of unobtrusive JavaScript validation attributes using the specified HTML name attribute.</summary>
      <returns>The collection of unobtrusive JavaScript validation attributes.</returns>
      <param name="name">The HTML name attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.GetUnobtrusiveValidationAttributes(System.String,System.Web.Mvc.ModelMetadata)">
      <summary>Gets the collection of unobtrusive JavaScript validation attributes using the specified HTML name attribute and model metadata.</summary>
      <returns>The collection of unobtrusive JavaScript validation attributes.</returns>
      <param name="name">The HTML name attribute.</param>
      <param name="metadata">The model metadata.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.String)">
      <summary>Returns a hidden input element that identifies the override method for the specified HTTP data-transfer method that was used by the client.</summary>
      <returns>The override method that uses the HTTP data-transfer method that was used by the client.</returns>
      <param name="httpMethod">The HTTP data-transfer method that was used by the client (DELETE, HEAD, or PUT).</param>
      <exception cref="T:System.ArgumentException">The <paramref name="httpVerb" /> parameter is not "PUT", "DELETE", or "HEAD".</exception>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.HttpMethodOverride(System.Web.Mvc.HttpVerbs)">
      <summary>Returns a hidden input element that identifies the override method for the specified verb that represents the HTTP data-transfer method used by the client.</summary>
      <returns>The override method that uses the verb that represents the HTTP data-transfer method used by the client.</returns>
      <param name="httpVerb">The verb that represents the HTTP data-transfer method used by the client.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="httpVerb" /> parameter is not "PUT", "DELETE", or "HEAD".</exception>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.IdAttributeDotReplacement">
      <summary>Gets or sets the character that replaces periods in the ID attribute of an element.</summary>
      <returns>The character that replaces periods in the ID attribute of an element.</returns>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper.Raw(System.String)">
      <summary>Returns markup that is not HTML encoded.</summary>
      <returns>The HTML markup without encoding.</returns>
      <param name="value">The HTML markup.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.RouteCollection">
      <summary>Gets or sets the collection of routes for the application.</summary>
      <returns>The collection of routes for the application.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.UnobtrusiveJavaScriptEnabled">
      <summary>Gets or sets a value that indicates whether unobtrusive JavaScript is enabled.</summary>
      <returns>true if unobtrusive JavaScript is enabled; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputCssClassName">
      <summary>The name of the CSS class that is used to style an input field when a validation error occurs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationInputValidCssClassName">
      <summary>The name of the CSS class that is used to style an input field when the input is valid.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageCssClassName">
      <summary>The name of the CSS class that is used to style the error message when a validation error occurs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationMessageValidCssClassName">
      <summary>The name of the CSS class that is used to style the validation message when the input is valid.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryCssClassName">
      <summary>The name of the CSS class that is used to style validation summary error messages.</summary>
    </member>
    <member name="F:System.Web.Mvc.HtmlHelper.ValidationSummaryValidCssClassName">
      <summary>The name of the CSS class that is used to style the validation summary when the input is valid.</summary>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewContext">
      <summary>Gets or sets the context information about the view.</summary>
      <returns>The context of the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewData">
      <summary>Gets the current view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper.ViewDataContainer">
      <summary>Gets or sets the view data container.</summary>
      <returns>The view data container.</returns>
    </member>
    <member name="T:System.Web.Mvc.HtmlHelper`1">
      <summary>Represents support for rendering HTML controls in a strongly typed view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> class by using the specified view context and view data container.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
    </member>
    <member name="M:System.Web.Mvc.HtmlHelper`1.#ctor(System.Web.Mvc.ViewContext,System.Web.Mvc.IViewDataContainer,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HtmlHelper`1" /> class by using the specified view context, view data container, and route collection.</summary>
      <param name="viewContext">The view context.</param>
      <param name="viewDataContainer">The view data container.</param>
      <param name="routeCollection">The route collection.</param>
    </member>
    <member name="P:System.Web.Mvc.HtmlHelper`1.ViewData">
      <summary>Gets the strongly typed view data dictionary.</summary>
      <returns>The strongly typed view data dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpDeleteAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP DELETE requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpDeleteAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpDeleteAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP DELETE request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProvider">
      <summary>Represents a value provider to use with values that come from a collection of HTTP files.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpFileCollectionValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of an HTTP file collection value provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpFileCollectionValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpFileCollectionValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value provider object for the specified controller context.</summary>
      <returns>An HTTP file collection value provider.</returns>
      <param name="controllerContext">An object that encapsulates information about the HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpGetAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP GET requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpGetAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpGetAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP GET request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpNotFoundResult">
      <summary>Defines an object that is used to indicate that the requested resource was not found.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpNotFoundResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpNotFoundResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpNotFoundResult" /> class using a status description.</summary>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP POST requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPostAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP POST request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpPostedFileBaseModelBinder">
      <summary>Binds a model to a posted file.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPostedFileBaseModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPostedFileBaseModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model.</summary>
      <returns>The bound value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
      <exception cref="T:System.ArgumentNullException">One or both parameters are null.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpPutAttribute">
      <summary>Represents an attribute that is used to restrict an action method so that the method handles only HTTP PUT requests.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpPutAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpPutAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether a request is a valid HTTP PUT request.</summary>
      <returns>true if the request is valid; otherwise, false.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="methodInfo">Encapsulates information about a method, such as its type, return type, and arguments.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpRequestExtensions">
      <summary>Extends the <see cref="T:System.Web.HttpRequestBase" /> class that contains the HTTP values that were sent by a client during a Web request.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpRequestExtensions.GetHttpMethodOverride(System.Web.HttpRequestBase)">
      <summary>Retrieves the HTTP data-transfer method override that was used by the client.</summary>
      <returns>The HTTP data-transfer method override that was used by the client.</returns>
      <param name="request">An object that contains the HTTP values that were sent by a client during a Web request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="request" /> parameter is null.</exception>
      <exception cref="T:System.NotImplementedException">The HTTP data-transfer method override was not implemented.</exception>
    </member>
    <member name="T:System.Web.Mvc.HttpStatusCodeResult">
      <summary>Provides a way to return an action result with a specific HTTP response status code and description.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> class using a status code.</summary>
      <param name="statusCode">The status code.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.#ctor(System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpStatusCodeResult" /> class using a status code and status description.</summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:System.Web.Mvc.HttpStatusCodeResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context in which the result is executed. The context information includes the controller, HTTP content, request context, and route data.</param>
    </member>
    <member name="P:System.Web.Mvc.HttpStatusCodeResult.StatusCode">
      <summary>Gets the HTTP status code.</summary>
      <returns>The HTTP status code.</returns>
    </member>
    <member name="P:System.Web.Mvc.HttpStatusCodeResult.StatusDescription">
      <summary>Gets the HTTP status description.</summary>
      <returns>the HTTP status description.</returns>
    </member>
    <member name="T:System.Web.Mvc.HttpUnauthorizedResult">
      <summary>Represents the result of an unauthorized HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.HttpUnauthorizedResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.HttpUnauthorizedResult" /> class using the status description.</summary>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="T:System.Web.Mvc.HttpVerbs">
      <summary>Enumerates the HTTP verbs.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Get">
      <summary>Retrieves the information or entity that is identified by the URI of the request.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Post">
      <summary>Posts a new entity as an addition to a URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Put">
      <summary>Replaces an entity that is identified by a URI.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Delete">
      <summary>Requests that a specified URI be deleted.</summary>
    </member>
    <member name="F:System.Web.Mvc.HttpVerbs.Head">
      <summary>Retrieves the message headers for the information or entity that is identified by the URI of the request.</summary>
    </member>
    <member name="T:System.Web.Mvc.IActionFilter">
      <summary>Defines the methods that are used in an action filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>Called after the action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>Called before an action method executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IActionInvoker">
      <summary>Defines the contract for an action invoker, which is used to invoke an action in response to an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.IActionInvoker.InvokeAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Invokes the specified action by using the specified controller context.</summary>
      <returns>true if the action was found; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="T:System.Web.Mvc.IAuthorizationFilter">
      <summary>Defines the methods that are required for an authorization filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IAuthorizationFilter.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IClientValidatable">
      <summary>Provides a way for the ASP.NET MVC validation framework to discover at run time whether a validator has support for client validation.</summary>
    </member>
    <member name="M:System.Web.Mvc.IClientValidatable.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>When implemented in a class, returns client validation rules for that class.</summary>
      <returns>The client validation rules for this validator.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.IController">
      <summary>Defines the methods that are required for a controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.IController.Execute(System.Web.Routing.RequestContext)">
      <summary>Executes the specified request context.</summary>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerActivator">
      <summary>Provides fine-grained control over how controllers are instantiated using dependency injection.</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerActivator.Create(System.Web.Routing.RequestContext,System.Type)">
      <summary>When implemented in a class, creates a controller.</summary>
      <returns>The created controller.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerType">The controller type.</param>
    </member>
    <member name="T:System.Web.Mvc.IControllerFactory">
      <summary>Defines the methods that are required for a controller factory.</summary>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.CreateController(System.Web.Routing.RequestContext,System.String)">
      <summary>Creates the specified controller by using the specified request context.</summary>
      <returns>The controller.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.GetControllerSessionBehavior(System.Web.Routing.RequestContext,System.String)">
      <summary>Gets the controller's session behavior.</summary>
      <returns>The controller's session behavior.</returns>
      <param name="requestContext">The request context.</param>
      <param name="controllerName">The name of the controller whose session behavior you want to get.</param>
    </member>
    <member name="M:System.Web.Mvc.IControllerFactory.ReleaseController(System.Web.Mvc.IController)">
      <summary>Releases the specified controller.</summary>
      <param name="controller">The controller.</param>
    </member>
    <member name="T:System.Web.Mvc.IDependencyResolver">
      <summary>Defines the methods that simplify service location and dependency resolution.</summary>
    </member>
    <member name="M:System.Web.Mvc.IDependencyResolver.GetService(System.Type)">
      <summary>Resolves singly registered services that support arbitrary object creation.</summary>
      <returns>The requested service or object.</returns>
      <param name="serviceType">The type of the requested service or object.</param>
    </member>
    <member name="M:System.Web.Mvc.IDependencyResolver.GetServices(System.Type)">
      <summary>Resolves multiply registered services.</summary>
      <returns>The requested services.</returns>
      <param name="serviceType">The type of the requested services.</param>
    </member>
    <member name="T:System.Web.Mvc.IExceptionFilter">
      <summary>Defines the methods that are required for an exception filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>Called when an exception occurs.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IFilterProvider">
      <summary>Provides an interface for finding filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.IFilterProvider.GetFilters(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor)">
      <summary>Returns an enumerator that contains all the <see cref="T:System.Web.Mvc.IFilterProvider" /> instances in the service locator.</summary>
      <returns>The enumerator that contains all the <see cref="T:System.Web.Mvc.IFilterProvider" /> instances in the service locator.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
    </member>
    <member name="T:System.Web.Mvc.IMetadataAware">
      <summary>Provides an interface for exposing attributes to the <see cref="T:System.Web.Mvc.AssociatedMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.IMetadataAware.OnMetadataCreated(System.Web.Mvc.ModelMetadata)">
      <summary>When implemented in a class, provides metadata to the model metadata creation process.</summary>
      <param name="metadata">The model metadata.</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinder">
      <summary>Defines the methods that are required for a model binder.</summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model to a value by using the specified controller context and binding context.</summary>
      <returns>The bound value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="T:System.Web.Mvc.IModelBinderProvider">
      <summary>Defines methods that enable dynamic implementations of model binding for classes that implement the <see cref="T:System.Web.Mvc.IModelBinder" /> interface. </summary>
    </member>
    <member name="M:System.Web.Mvc.IModelBinderProvider.GetBinder(System.Type)">
      <summary>Returns the model binder for the specified type.</summary>
      <returns>The model binder for the specified type.</returns>
      <param name="modelType">The type of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.IMvcFilter">
      <summary>Defines members that specify the order of filters and whether multiple filters are allowed.</summary>
    </member>
    <member name="P:System.Web.Mvc.IMvcFilter.AllowMultiple">
      <summary>When implemented in a class, gets or sets a value that indicates whether multiple filters are allowed.</summary>
      <returns>true if multiple filters are allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.IMvcFilter.Order">
      <summary>When implemented in a class, gets the filter order.</summary>
      <returns>The filter order.</returns>
    </member>
    <member name="T:System.Web.Mvc.InputType">
      <summary>Enumerates the types of input controls.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.CheckBox">
      <summary>A check box.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Hidden">
      <summary>A hidden field.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Password">
      <summary>A password box.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Radio">
      <summary>A radio button.</summary>
    </member>
    <member name="F:System.Web.Mvc.InputType.Text">
      <summary>A text box.</summary>
    </member>
    <member name="T:System.Web.Mvc.IResultFilter">
      <summary>Defines the methods that are required for a result filter.</summary>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>Called after an action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.IResultFilter.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before an action result executes.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="T:System.Web.Mvc.IRouteWithArea">
      <summary>Associates a route with an area in an ASP.NET MVC application.</summary>
    </member>
    <member name="P:System.Web.Mvc.IRouteWithArea.Area">
      <summary>Gets the name of the area to associate the route with.</summary>
      <returns>The name of the area to associate the route with.</returns>
    </member>
    <member name="T:System.Web.Mvc.ITempDataProvider">
      <summary>Defines the contract for temporary-data providers that store data that is viewed on the next request.</summary>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>Loads the temporary data.</summary>
      <returns>The temporary data.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ITempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Saves the temporary data.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="values">The values.</param>
    </member>
    <member name="T:System.Web.Mvc.IUnvalidatedValueProvider">
      <summary>Represents an <see cref="T:System.Web.Mvc.IValueProvider" /> interface that can skip request validation.</summary>
    </member>
    <member name="M:System.Web.Mvc.IUnvalidatedValueProvider.GetValue(System.String,System.Boolean)">
      <summary>Retrieves the value of the object that is associated with the specified key.</summary>
      <returns>The value of the object for the specified key.</returns>
      <param name="key">The key.</param>
      <param name="skipValidation">true if validation should be skipped; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.IValueProvider">
      <summary>Defines the methods that are required for a value provider in ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.IValueProvider.GetValue(System.String)">
      <summary>Retrieves a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
    </member>
    <member name="T:System.Web.Mvc.IView">
      <summary>Defines the methods that are required for a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.IView.Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
      <summary>Renders the specified view context by using the specified the writer object.</summary>
      <param name="viewContext">The view context.</param>
      <param name="writer">The writer object.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewDataContainer">
      <summary>Defines the methods that are required for a view data dictionary.</summary>
    </member>
    <member name="P:System.Web.Mvc.IViewDataContainer.ViewData">
      <summary>Gets or sets the view data dictionary.</summary>
      <returns>The view data dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.IViewEngine">
      <summary>Defines the methods that are required for a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="useCache">true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>Finds the specified view by using the specified controller context.</summary>
      <returns>The page view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master.</param>
      <param name="useCache">true to specify that the view engine returns the cached view, if a cached view exists; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>Releases the specified view by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="view">The view.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewLocationCache">
      <summary>Defines the methods that are required in order to cache view locations in memory.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.GetViewLocation(System.Web.HttpContextBase,System.String)">
      <summary>Gets the view location by using the specified HTTP context and the cache key.</summary>
      <returns>The view location.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
    </member>
    <member name="M:System.Web.Mvc.IViewLocationCache.InsertViewLocation(System.Web.HttpContextBase,System.String,System.String)">
      <summary>Inserts the specified view location into the cache by using the specified HTTP context and the cache key.</summary>
      <param name="httpContext">The HTTP context.</param>
      <param name="key">The cache key.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="T:System.Web.Mvc.IViewPageActivator">
      <summary>Provides fine-grained control over how view pages are instantiated using dependency injection.</summary>
    </member>
    <member name="M:System.Web.Mvc.IViewPageActivator.Create(System.Web.Mvc.ControllerContext,System.Type)">
      <returns>The created view page.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="type">The type of the controller.</param>
    </member>
    <member name="T:System.Web.Mvc.JavaScriptResult">
      <summary>Sends JavaScript content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JavaScriptResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.JavaScriptResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.JavaScriptResult.Script">
      <summary>Gets or sets the script.</summary>
      <returns>The script.</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonRequestBehavior">
      <summary>Specifies whether HTTP GET requests from the client are allowed.</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.AllowGet">
      <summary>HTTP GET requests from the client are allowed.</summary>
    </member>
    <member name="F:System.Web.Mvc.JsonRequestBehavior.DenyGet">
      <summary>HTTP GET requests from the client are not allowed.</summary>
    </member>
    <member name="T:System.Web.Mvc.JsonResult">
      <summary>Represents a class that is used to send JSON-formatted content to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JsonResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentEncoding">
      <summary>Gets or sets the content encoding.</summary>
      <returns>The content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.ContentType">
      <summary>Gets or sets the type of the content.</summary>
      <returns>The type of the content.</returns>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.Data">
      <summary>Gets or sets the data.</summary>
      <returns>The data.</returns>
    </member>
    <member name="M:System.Web.Mvc.JsonResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.JsonResult.JsonRequestBehavior">
      <summary>Gets or sets a value that indicates whether HTTP GET requests from the client are allowed.</summary>
      <returns>A value that indicates whether HTTP GET requests from the client are allowed.</returns>
    </member>
    <member name="T:System.Web.Mvc.JsonValueProviderFactory">
      <summary>Enables action methods to send and receive JSON-formatted text and to model-bind the JSON text to parameters of action methods.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.JsonValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.JsonValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a JSON value-provider object for the specified controller context.</summary>
      <returns>A JSON value-provider object for the specified controller context.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.LinqBinaryModelBinder">
      <summary>Maps a browser request to a LINQ <see cref="T:System.Data.Linq.Binary" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.LinqBinaryModelBinder" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.LinqBinaryModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
      <summary>Binds the model by using the specified controller context and binding context.</summary>
      <returns>The bound data object. If the model cannot be bound, this method returns null.</returns>
      <param name="controllerContext">The context within which the controller operates. The context information includes the controller, HTTP content, request context, and route data.</param>
      <param name="bindingContext">The context within which the model is bound. The context includes information such as the model object, model name, model type, property filter, and value provider.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderAttribute">
      <summary>Represents an attribute that is used to associate a model type to a model-builder type.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderAttribute" /> class.</summary>
      <param name="binderType">The type of the binder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="binderType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderAttribute.BinderType">
      <summary>Gets or sets the type of the binder.</summary>
      <returns>The type of the binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderAttribute.GetBinder">
      <summary>Retrieves an instance of the model binder.</summary>
      <returns>A reference to an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</returns>
      <exception cref="T:System.InvalidOperationException">An error occurred while an instance of the model binder was being created.</exception>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderDictionary">
      <summary>Represents a class that contains all model binders for the application, listed by binder type.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Adds the specified item to the model binder dictionary.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Add(System.Type,System.Web.Mvc.IModelBinder)">
      <summary>Adds the specified item to the model binder dictionary using the specified key.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Clear">
      <summary>Removes all items from the model binder dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Determines whether the model binder dictionary contains a specified value.</summary>
      <returns>true if <paramref name="item" /> is found in the model binder dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.ContainsKey(System.Type)">
      <summary>Determines whether the model binder dictionary contains an element that has the specified key.</summary>
      <returns>true if the model binder dictionary contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder}[],System.Int32)">
      <summary>Copies the elements of the model binder dictionary to an array, starting at a specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination array. -or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Count">
      <summary>Gets the number of elements in the model binder dictionary.</summary>
      <returns>The number of elements in the model binder dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.DefaultBinder">
      <summary>Gets or sets the default model binder.</summary>
      <returns>The default model binder.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type)">
      <summary>Retrieves the model binder for the specified type.</summary>
      <returns>The model binder.</returns>
      <param name="modelType">The type of the model to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetBinder(System.Type,System.Boolean)">
      <summary>Retrieves the model binder for the specified type or retrieves the default model binder.</summary>
      <returns>The model binder.</returns>
      <param name="modelType">The type of the model to retrieve.</param>
      <param name="fallbackToDefault">true to retrieve the default model binder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the model binder dictionary is read-only.</summary>
      <returns>true if the model binder dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Item(System.Type)">
      <summary>Gets or sets the specified key in an object that implements the <see cref="T:System.Web.Mvc.IModelBinder" /> interface.</summary>
      <returns>The key for the specified item.</returns>
      <param name="key">The item key.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Keys">
      <summary>Gets a collection that contains the keys in the model binder dictionary.</summary>
      <returns>A collection that contains the keys in the model binder dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.Type,System.Web.Mvc.IModelBinder})">
      <summary>Removes the first occurrence of the specified element from the model binder dictionary.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the model binder dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the model binder dictionary.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.Remove(System.Type)">
      <summary>Removes the element that has the specified key from the model binder dictionary.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the model binder dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderDictionary.TryGetValue(System.Type,System.Web.Mvc.IModelBinder@)">
      <summary>Gets the value that is associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderDictionary.Values">
      <summary>Gets a collection that contains the values in the model binder dictionary.</summary>
      <returns>A collection that contains the values in the model binder dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderProviderCollection">
      <summary>Provides a container for model binder providers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IModelBinderProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> class using a list of model binder providers.</summary>
      <param name="list">A list of model binder providers.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.GetBinder(System.Type)">
      <summary>Returns a model binder of the specified type.</summary>
      <returns>A model binder of the specified type.</returns>
      <param name="modelType">The type of the model binder.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IModelBinderProvider)">
      <summary>Inserts a model binder provider into the <see cref="T:System.Web.Mvc.ModelBinderProviderCollection" /> at the specified index.</summary>
      <param name="index">The index.</param>
      <param name="item">The model binder provider.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelBinderProviderCollection.SetItem(System.Int32,System.Web.Mvc.IModelBinderProvider)">
      <summary>Replaces the model binder provider element at the specified index.</summary>
      <param name="index">The index.</param>
      <param name="item">The model binder provider.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelBinderProviders">
      <summary>Provides a container for model binder providers.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinderProviders.BinderProviders">
      <summary>Provides a registration point for model binder providers for applications that do not use dependency injection.</summary>
      <returns>The model binder provider collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBinders">
      <summary>Provides global access to the model binders for the application.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelBinders.Binders">
      <summary>Gets the model binders for the application.</summary>
      <returns>The model binders for the application.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelBindingContext">
      <summary>Provides the context in which a model binder functions.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBindingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelBindingContext.#ctor(System.Web.Mvc.ModelBindingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelBindingContext" /> class using the binding context.</summary>
      <param name="bindingContext">The binding context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>Gets or sets a value that indicates whether the binder should use an empty prefix.</summary>
      <returns>true if the binder should use an empty prefix; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.Model">
      <summary>Gets or sets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelMetadata">
      <summary>Gets or sets the model metadata.</summary>
      <returns>The model metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelName">
      <summary>Gets or sets the name of the model.</summary>
      <returns>The name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelState">
      <summary>Gets or sets the state of the model.</summary>
      <returns>The state of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ModelType">
      <summary>Gets or sets the type of the model.</summary>
      <returns>The type of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyFilter">
      <summary>Gets or sets the property filter.</summary>
      <returns>The property filter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.PropertyMetadata">
      <summary>Gets the property metadata.</summary>
      <returns>The property metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelBindingContext.ValueProvider">
      <summary>Gets or sets the value provider.</summary>
      <returns>The value provider.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationEqualToRule">
      <summary>Provides a container for an equality validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationEqualToRule.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationEqualToRule" /> class.</summary>
      <param name="errorMessage">The error message.</param>
      <param name="other">The model value used for equality comparison.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRangeRule">
      <summary>Provides a container for a range-validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRangeRule.#ctor(System.String,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRangeRule" /> class.</summary>
      <param name="errorMessage">The error message.</param>
      <param name="minValue">The minimum value.</param>
      <param name="maxValue">The maximum value.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRegexRule">
      <summary>Provides a container for a regular-expression client validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRegexRule.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRegexRule" /> class.</summary>
      <param name="errorMessage">The error message to display when the regular expression validation fails.</param>
      <param name="pattern">The regular expression.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRemoteRule">
      <summary>Provides a container for a remote validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRemoteRule.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRemoteRule" /> class.</summary>
      <param name="errorMessage">The error message.</param>
      <param name="url">The URL for the validation parameters.</param>
      <param name="httpMethod">The HTTP method for the validation parameters.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRequiredRule">
      <summary>Provides a container for client validation for required field.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRequiredRule.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRule" /> class.</summary>
      <param name="errorMessage">The error message to display when a value for the required field is not provided.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationRule">
      <summary>Provides a base class container for a client validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationRule.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationRule" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ErrorMessage">
      <summary>Gets or sets the error message for the client validation rule.</summary>
      <returns>The error message for the client validation rule.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ValidationParameters">
      <summary>Gets the list of validation parameters.</summary>
      <returns>A list of validation parameters.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelClientValidationRule.ValidationType">
      <summary>Gets or sets the validation type.</summary>
      <returns>The validation type.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelClientValidationStringLengthRule">
      <summary>Provides a container for a string-length validation rule that is sent to the browser.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelClientValidationStringLengthRule.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelClientValidationStringLengthRule" /> class.</summary>
      <param name="errorMessage">The validation error message.</param>
      <param name="minimumLength">The minimum length of the string.</param>
      <param name="maximumLength">The maximum length of the string.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelError">
      <summary>Represents an error that occurs during model binding.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified exception.</summary>
      <param name="exception">The exception.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.Exception,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified exception and error message.</summary>
      <param name="exception">The exception.</param>
      <param name="errorMessage">The error message.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelError.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelError" /> class by using the specified error message.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelError.ErrorMessage">
      <summary>Gets or sets the error message.</summary>
      <returns>The error message.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelError.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelErrorCollection">
      <summary>A collection of <see cref="T:System.Web.Mvc.ModelError" /> instances.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelErrorCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.Exception)">
      <summary>Adds the specified <see cref="T:System.Exception" /> object to the model-error collection.</summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelErrorCollection.Add(System.String)">
      <summary>Adds the specified error message to the model-error collection.</summary>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadata">
      <summary>Provides a container for common metadata, for the <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> class, and for the <see cref="T:System.Web.Mvc.ModelValidator" /> class for a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.#ctor(System.Web.Mvc.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelMetadata" /> class.</summary>
      <param name="provider">The provider.</param>
      <param name="containerType">The type of the container.</param>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
      <param name="propertyName">The name of the model.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.AdditionalValues">
      <summary>Gets a dictionary that contains additional metadata about the model.</summary>
      <returns>A dictionary that contains additional metadata about the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ContainerType">
      <summary>Gets or sets the type of the container for the model.</summary>
      <returns>The type of the container for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ConvertEmptyStringToNull">
      <summary>Gets or sets a value that indicates whether empty strings that are posted back in forms should be converted to null.</summary>
      <returns>true if empty strings that are posted back in forms should be converted to null; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DataTypeName">
      <summary>Gets or sets meta information about the data type. </summary>
      <returns>Meta information about the data type. </returns>
    </member>
    <member name="F:System.Web.Mvc.ModelMetadata.DefaultOrder">
      <summary>The default order value, which is 10000.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Description">
      <summary>Gets or sets the description of the model.</summary>
      <returns>The description of the model. The default value is null.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayFormatString">
      <summary>Gets or sets the display format string for the model.</summary>
      <returns>The display format string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.DisplayName">
      <summary>Gets or sets the display name of the model.</summary>
      <returns>The display name of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.EditFormatString">
      <summary>Gets or sets the edit format string of the model.</summary>
      <returns>The edit format string of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromLambdaExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Web.Mvc.ViewDataDictionary{``0})">
      <summary>Returns the metadata from the <see cref="T:System.Linq.Expressions.Expression" /> parameter for the model.</summary>
      <returns>The metadata.</returns>
      <param name="expression">An expression that identifies the model.</param>
      <param name="viewData">The view data dictionary.</param>
      <typeparam name="TParameter">The type of the parameter.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.FromStringExpression(System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Gets the metadata from the expression parameter for the model.</summary>
      <returns>The metadata for the model.</returns>
      <param name="expression">An expression that identifies the model.</param>
      <param name="viewData">The view data dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetDisplayName">
      <summary>Gets the display name for the model.</summary>
      <returns>The display name for the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetSimpleDisplayText">
      <summary>Returns the simple description of the model.</summary>
      <returns>The simple description of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadata.GetValidators(System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of validators for the model.</summary>
      <returns>A list of validators for the model.</returns>
      <param name="context">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.HideSurroundingHtml">
      <summary>Gets or sets a value that indicates whether the model object should be rendered using associated HTML elements.</summary>
      <returns>true if the associated HTML elements that contains the model object should be included with the object; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsComplexType">
      <summary>Gets or sets a value that indicates whether the model is a complex type.</summary>
      <returns>A value that indicates whether the model is considered a complex type by the MVC framework.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsNullableValueType">
      <summary>Gets a value that indicates whether the type is nullable.</summary>
      <returns>true if the type is nullable; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsReadOnly">
      <summary>Gets or sets a value that indicates whether the model is read-only.</summary>
      <returns>true if the model is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.IsRequired">
      <summary>Gets or sets a value that indicates whether the model is required.</summary>
      <returns>true if the model is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Model">
      <summary>Gets the value of the model.</summary>
      <returns>The value of the model. For more information about <see cref="T:System.Web.Mvc.ModelMetadata" />, see the entry ASP.NET MVC 2 Templates, Part 2: ModelMetadata on Brad Wilson's blog</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ModelType">
      <summary>Gets the type of the model.</summary>
      <returns>The type of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.NullDisplayText">
      <summary>Gets or sets the string to display for null values.</summary>
      <returns>The string to display for null values.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Order">
      <summary>Gets or sets a value that represents order of the current metadata.</summary>
      <returns>The order value of the current metadata.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Properties">
      <summary>Gets a collection of model metadata objects that describe the properties of the model.</summary>
      <returns>A collection of model metadata objects that describe the properties of the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.PropertyName">
      <summary>Gets the property name.</summary>
      <returns>The property name.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Provider">
      <summary>Gets or sets the provider.</summary>
      <returns>The provider.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.RequestValidationEnabled">
      <summary>Gets or sets a value that indicates whether request validation is enabled.</summary>
      <returns>true if request validation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShortDisplayName">
      <summary>Gets or sets a short display name.</summary>
      <returns>The short display name.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForDisplay">
      <summary>Gets or sets a value that indicates whether the property should be displayed in read-only views such as list and detail views.</summary>
      <returns>true if the model should be displayed in read-only views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.ShowForEdit">
      <summary>Gets or sets a value that indicates whether the model should be displayed in editable views.</summary>
      <returns>true if the model should be displayed in editable views; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.SimpleDisplayText">
      <summary>Gets or sets the simple display string for the model.</summary>
      <returns>The simple display string for the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.TemplateHint">
      <summary>Gets or sets a hint that suggests what template to use for this model.</summary>
      <returns>A hint that suggests what template to use for this model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadata.Watermark">
      <summary>Gets or sets a value that can be used as a watermark.</summary>
      <returns>The watermark.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProvider">
      <summary>Provides an abstract base class for a custom metadata provider.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.#ctor">
      <summary>When overridden in a derived class, initializes a new instance of the object that derives from the <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>Gets a <see cref="T:System.Web.Mvc.ModelMetadata" /> object for each property of a model.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for each property of a model.</returns>
      <param name="container">The container.</param>
      <param name="containerType">The type of the container.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>Gets metadata for the specified property.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for the property.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="containerType">The type of the container.</param>
      <param name="propertyName">The property to get the metadata model for.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>Gets metadata for the specified model accessor and model type.</summary>
      <returns>A <see cref="T:System.Web.Mvc.ModelMetadata" /> object for the specified model accessor and model type.</returns>
      <param name="modelAccessor">The model accessor.</param>
      <param name="modelType">The type of the model.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelMetadataProviders">
      <summary>Provides a container for the current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> instance.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelMetadataProviders.Current">
      <summary>Gets or sets the current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> object.</summary>
      <returns>The current <see cref="T:System.Web.Mvc.ModelMetadataProvider" /> object.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelState">
      <summary>Encapsulates the state of model binding to a property of an action-method argument, or to the argument itself.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelState.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelState" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Errors">
      <summary>Returns a <see cref="T:System.Web.Mvc.ModelErrorCollection" /> object that contains any errors that occurred during model binding.</summary>
      <returns>The errors.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelState.Value">
      <summary>Returns a <see cref="T:System.Web.Mvc.ValueProviderResult" /> object that encapsulates the value that was being bound during model binding.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelStateDictionary">
      <summary>Represents the state of an attempt to bind a posted form to an action method, which includes validation information.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.#ctor(System.Web.Mvc.ModelStateDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> class by using values that are copied from the specified model-state dictionary.</summary>
      <param name="dictionary">The model-state dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Adds the specified item to the model-state dictionary.</summary>
      <param name="item">The object to add to the model-state dictionary.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Add(System.String,System.Web.Mvc.ModelState)">
      <summary>Adds an element that has the specified key and value to the model-state dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already occurs in the model-state dictionary.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>Adds the specified model error to the errors collection for the model-state dictionary that is associated with the specified key.</summary>
      <param name="key">The key.</param>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>Adds the specified error message to the errors collection for the model-state dictionary that is associated with the specified key.</summary>
      <param name="key">The key.</param>
      <param name="errorMessage">The error message.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Clear">
      <summary>Removes all items from the model-state dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Determines whether the model-state dictionary contains a specific value.</summary>
      <returns>true if <paramref name="item" /> is found in the model-state dictionary; otherwise, false.</returns>
      <param name="item">The object to locate in the model-state dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.ContainsKey(System.String)">
      <summary>Determines whether the model-state dictionary contains the specified key.</summary>
      <returns>true if the model-state dictionary contains the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the model-state dictionary. </param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState}[],System.Int32)">
      <summary>Copies the elements of the model-state dictionary to an array, starting at a specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Count">
      <summary>Gets the number of key/value pairs in the collection.</summary>
      <returns>The number of key/value pairs in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.IsValid">
      <summary>Gets a value that indicates whether this instance of the model-state dictionary is valid.</summary>
      <returns>true if this instance is valid; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.IsValidField(System.String)">
      <summary>Determines whether there are any <see cref="T:System.Web.Mvc.ModelError" /> objects that are associated with or prefixed with the specified key.</summary>
      <returns>true if the model-state dictionary contains a value that is associated with the specified key; otherwise, false.</returns>
      <param name="key">The key.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Item(System.String)">
      <summary>Gets or sets the value that is associated with the specified key.</summary>
      <returns>The model state item.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Keys">
      <summary>Gets a collection that contains the keys in the dictionary.</summary>
      <returns>A collection that contains the keys of the model-state dictionary.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Merge(System.Web.Mvc.ModelStateDictionary)">
      <summary>Copies the values from the specified <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object into this dictionary, overwriting existing values if keys are the same.</summary>
      <param name="dictionary">The dictionary.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ModelState})">
      <summary>Removes the first occurrence of the specified object from the model-state dictionary.</summary>
      <returns>true if <paramref name="item" /> was successfully removed the model-state dictionary; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the model-state dictionary.</returns>
      <param name="item">The object to remove from the model-state dictionary.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the model-state dictionary.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the model-state dictionary.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The model-state dictionary is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.SetModelValue(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>Sets the value for the specified key by using the specified value provider dictionary.</summary>
      <param name="key">The key.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelStateDictionary.TryGetValue(System.String,System.Web.Mvc.ModelState@)">
      <summary>Attempts to gets the value that is associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ModelStateDictionary.Values">
      <summary>Gets a collection that contains the values in the dictionary.</summary>
      <returns>A collection that contains the values of the model-state dictionary.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidationResult">
      <summary>Provides a container for a validation result.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidationResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidationResult" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.MemberName">
      <summary>Gets or sets the name of the member.</summary>
      <returns>The name of the member.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidationResult.Message">
      <summary>Gets or sets the validation result message.</summary>
      <returns>The validation result message.</returns>
    </member>
    <member name="T:System.Web.Mvc.ModelValidator">
      <summary>Provides a base class for implementing validation logic.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Called from constructors in derived classes to initialize the <see cref="T:System.Web.Mvc.ModelValidator" /> class.</summary>
      <param name="metadata">The metadata.</param>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.ControllerContext">
      <summary>Gets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetClientValidationRules">
      <summary>When implemented in a derived class, returns metadata for client validation.</summary>
      <returns>The metadata for client validation.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.GetModelValidator(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns a composite model validator for the model.</summary>
      <returns>A composite model validator for the model.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.IsRequired">
      <summary>Gets or sets a value that indicates whether a model property is required.</summary>
      <returns>true if the model property is required; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ModelValidator.Metadata">
      <summary>Gets the metadata for the model validator.</summary>
      <returns>The metadata for the model validator.</returns>
    </member>
    <member name="M:System.Web.Mvc.ModelValidator.Validate(System.Object)">
      <summary>When implemented in a derived class, validates the object.</summary>
      <returns>A list of validation results.</returns>
      <param name="container">The container.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProvider">
      <summary>Provides a list of validators for a model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProvider.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of validators.</summary>
      <returns>A list of validators.</returns>
      <param name="metadata">The metadata.</param>
      <param name="context">The context.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviderCollection">
      <summary>Provides a container for a list of validation providers.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ModelValidatorProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ModelValidatorProviderCollection" /> class using a list of model-validation providers.</summary>
      <param name="list">A list of model-validation providers.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.GetValidators(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Returns the list of model validators.</summary>
      <returns>The list of model validators.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.InsertItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>Inserts a model-validator provider into the collection.</summary>
      <param name="index">The zero-based index at which item should be inserted.</param>
      <param name="item">The model-validator provider object to insert.</param>
    </member>
    <member name="M:System.Web.Mvc.ModelValidatorProviderCollection.SetItem(System.Int32,System.Web.Mvc.ModelValidatorProvider)">
      <summary>Replaces the model-validator provider element at the specified index.</summary>
      <param name="index">The zero-based index of the model-validator provider element to replace.</param>
      <param name="item">The new value for the model-validator provider element.</param>
    </member>
    <member name="T:System.Web.Mvc.ModelValidatorProviders">
      <summary>Provides a container for the current validation provider.</summary>
    </member>
    <member name="P:System.Web.Mvc.ModelValidatorProviders.Providers">
      <summary>Gets the model validator provider collection.</summary>
      <returns>The model validator provider collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.MultiSelectList">
      <summary>Represents a list of items that users can select more than one item from.</summary>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the specified items to include in the list.</summary>
      <param name="items">The items.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the specified items to include in the list and the selected values.</summary>
      <param name="items">The items.</param>
      <param name="selectedValues">The selected values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the items to include in the list, the data value field, and the data text field.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MultiSelectList" /> class by using the items to include in the list, the data value field, the data text field, and the selected values.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <param name="selectedValues">The selected values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="items" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataTextField">
      <summary>Gets or sets the data text field.</summary>
      <returns>The data text field.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.DataValueField">
      <summary>Gets or sets the data value field.</summary>
      <returns>The data value field.</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.Items">
      <summary>Gets or sets the items in the list.</summary>
      <returns>The items in the list.</returns>
    </member>
    <member name="P:System.Web.Mvc.MultiSelectList.SelectedValues">
      <summary>Gets or sets the selected values.</summary>
      <returns>The selected values.</returns>
    </member>
    <member name="M:System.Web.Mvc.MultiSelectList.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcFilter">
      <summary>When implemented in a derived class, provides a metadata class that contains a reference to the implementation of one or more of the filter interfaces, the filter's order, and the filter's scope.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcFilter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcFilter" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcFilter.#ctor(System.Boolean,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcFilter" /> class and specifies the order of filters and whether multiple filters are allowed.</summary>
      <param name="allowMultiple">true to specify that multiple filters of the same type are allowed; otherwise, false.</param>
      <param name="order">The filter order.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcFilter.AllowMultiple">
      <summary>Gets a value that indicates whether more than one instance of the filter attribute can be specified.</summary>
      <returns>true if more than one instance of the filter attribute is allowed; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.MvcFilter.Order">
      <summary>Gets a value that indicates the order in which a filter is applied.</summary>
      <returns>A value that indicates the order in which a filter is applied.</returns>
    </member>
    <member name="T:System.Web.Mvc.MvcHandler">
      <summary>Selects the controller that will handle an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.#ctor(System.Web.Routing.RequestContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHandler" /> class.</summary>
      <param name="requestContext">The request context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.AddVersionHeader(System.Web.HttpContextBase)">
      <summary>Adds the version header by using the specified HTTP context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state of the asynchronous object.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing using the base HTTP context.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state of the asynchronous object.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.DisableMvcResponseHeader">
      <summary>Gets or sets a value that indicates whether the MVC response header is disabled.</summary>
      <returns>true if the MVC response header is disabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.IsReusable">
      <summary>Gets a value that indicates whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="F:System.Web.Mvc.MvcHandler.MvcVersionHeaderName">
      <summary>Contains the header name of the ASP.NET MVC version.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>Processes the request by using the specified HTTP request context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.ProcessRequest(System.Web.HttpContextBase)">
      <summary>Processes the request by using the specified base HTTP request context.</summary>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.RequestContext">
      <summary>Gets the request context.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing using the base HTTP context.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="context">The HTTP context.</param>
      <param name="cb">The asynchronous callback method.</param>
      <param name="extraData">The data.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="result">The asynchronous result.</param>
    </member>
    <member name="P:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#IsReusable">
      <summary>Gets a value that indicates whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</summary>
      <returns>true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.MvcHandler.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of HTTP Web requests by a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</summary>
      <param name="httpContext">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, Request, Response, Session, and Server) that are used to service HTTP requests.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHtmlString">
      <summary>Represents an HTML-encoded string that should not be encoded again.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHtmlString" /> class.</summary>
      <param name="value">The string to create. If no value is assigned, the object is created using an empty-string value.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.Create(System.String)">
      <summary>Creates an HTML-encoded string using the specified text value.</summary>
      <returns>An HTML-encoded string.</returns>
      <param name="value">The value of the string to create .</param>
    </member>
    <member name="F:System.Web.Mvc.MvcHtmlString.Empty">
      <summary>Contains an empty HTML string.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHtmlString.IsNullOrEmpty(System.Web.Mvc.MvcHtmlString)">
      <summary>Determines whether the specified string contains content or is either null or empty.</summary>
      <returns>true if the string is null or empty; otherwise, false.</returns>
      <param name="value">The string.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcHttpHandler">
      <summary>Verifies and processes an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcHttpHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.BeginProcessRequest(System.Web.HttpContextBase,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="httpContext">The base HTTP context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
      <summary>Called by ASP.NET to begin asynchronous request processing.</summary>
      <returns>The status of the asynchronous call.</returns>
      <param name="context">The context.</param>
      <param name="cb">The asynchronous callback method.</param>
      <param name="extraData">An object that contains data.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)">
      <summary>Called by ASP.NET when asynchronous request processing has ended.</summary>
      <param name="result">The status of the asynchronous operations.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcHttpHandler.VerifyAndProcessRequest(System.Web.IHttpHandler,System.Web.HttpContextBase)">
      <summary>Verifies and processes an HTTP request.</summary>
      <param name="httpHandler">The HTTP handler.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcRouteHandler">
      <summary>Creates an object that implements the IHttpHandler interface and passes the request context to it.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcRouteHandler" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.#ctor(System.Web.Mvc.IControllerFactory)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcRouteHandler" /> class using the specified factory controller object.</summary>
      <param name="controllerFactory">The controller factory.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Returns the HTTP handler by using the specified HTTP context.</summary>
      <returns>The HTTP handler.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.GetSessionStateBehavior(System.Web.Routing.RequestContext)">
      <summary>Returns the session behavior.</summary>
      <returns>The session behavior.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="M:System.Web.Mvc.MvcRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>Returns the HTTP handler by using the specified request context.</summary>
      <returns>The HTTP handler.</returns>
      <param name="requestContext">The request context.</param>
    </member>
    <member name="T:System.Web.Mvc.MvcWebRazorHostFactory">
      <summary>Creates instances of <see cref="T:System.Web.Mvc.MvcWebPageRazorHost" /> files.</summary>
    </member>
    <member name="M:System.Web.Mvc.MvcWebRazorHostFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.MvcWebRazorHostFactory" /> class. </summary>
    </member>
    <member name="M:System.Web.Mvc.MvcWebRazorHostFactory.CreateHost(System.String,System.String)">
      <summary>Creates a Razor host.</summary>
      <returns>A Razor host.</returns>
      <param name="virtualPath">The virtual path to the target file.</param>
      <param name="physicalPath">The physical path to the target file.</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionExtensions">
      <summary>Extends a NameValueCollection object so that the collection can be copied to a specified dictionary.</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Copies the specified collection to the specified destination.</summary>
      <param name="collection">The collection.</param>
      <param name="destination">The destination.</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionExtensions.CopyTo(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)">
      <summary>Copies the specified collection to the specified destination, and optionally replaces previous entries.</summary>
      <param name="collection">The collection.</param>
      <param name="destination">The destination.</param>
      <param name="replaceEntries">true to replace previous entries; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.NameValueCollectionValueProvider">
      <summary>Represents the base class for value providers whose values come from a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> class using the specified unvalidated collection.</summary>
      <param name="collection">A collection that contains the values that are used to initialize the provider.</param>
      <param name="unvalidatedCollection">A collection that contains the values that are used to initialize the provider. This collection will not be validated.</param>
      <param name="culture">An object that contains information about the target culture.</param>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.#ctor(System.Collections.Specialized.NameValueCollection,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NameValueCollectionValueProvider" /> class.</summary>
      <param name="collection">A collection that contains the values that are used to initialize the provider.</param>
      <param name="culture">An object that contains information about the target culture.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="collection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="prefix" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.NameValueCollectionValueProvider.GetValue(System.String,System.Boolean)">
      <summary>Returns a value object using the specified key and validation directive.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key.</param>
      <param name="skipValidation">true if validation should be skipped; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.NoAsyncTimeoutAttribute">
      <summary>Provides a convenience wrapper for the <see cref="T:System.Web.Mvc.AsyncTimeoutAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.NoAsyncTimeoutAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NoAsyncTimeoutAttribute" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.NonActionAttribute">
      <summary>Represents an attribute that is used to indicate that a controller method is not an action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.NonActionAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.NonActionAttribute.IsValidForRequest(System.Web.Mvc.ControllerContext,System.Reflection.MethodInfo)">
      <summary>Determines whether the attribute marks a method that is not an action method by using the specified controller context.</summary>
      <returns>true if the attribute marks a valid non-action method; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="methodInfo">The method information.</param>
    </member>
    <member name="T:System.Web.Mvc.OutputCacheAttribute">
      <summary>Represents an attribute that is used to mark an action method whose output will be cached.</summary>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.OutputCacheAttribute" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.CacheProfile">
      <summary>Gets or sets the cache profile name.</summary>
      <returns>The cache profile name.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.ChildActionCache">
      <summary>Gets or sets the child action cache.</summary>
      <returns>The child action cache.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Duration">
      <summary>Gets or sets the cache duration, in seconds.</summary>
      <returns>The cache duration.</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.IsChildActionCacheActive(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value that indicates whether a child action cache is active.</summary>
      <returns>true if the child action cache is active; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.Location">
      <summary>Gets or sets the location.</summary>
      <returns>The location.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.NoStore">
      <summary>Gets or sets a value that indicates whether to store the cache.</summary>
      <returns>true if the cache should be stored; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code. </summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IActionFilter.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnException(System.Web.Mvc.ExceptionContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IExceptionFilter.OnException(System.Web.Mvc.ExceptionContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
      <summary>This method is an implementation of <see cref="M:System.Web.Mvc.IResultFilter.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> and supports the ASP.NET MVC infrastructure. It is not intended to be used directly from your code.</summary>
      <param name="filterContext">The filter context.</param>
    </member>
    <member name="M:System.Web.Mvc.OutputCacheAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
      <summary>Called before the action result executes.</summary>
      <param name="filterContext">The filter context, which encapsulates information for using <see cref="T:System.Web.Mvc.AuthorizeAttribute" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.SqlDependency">
      <summary>Gets or sets the SQL dependency.</summary>
      <returns>The SQL dependency.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByContentEncoding">
      <summary>Gets or sets the vary-by-content encoding.</summary>
      <returns>The vary-by-content encoding.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByCustom">
      <summary>Gets or sets the vary-by-custom value.</summary>
      <returns>The vary-by-custom value.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByHeader">
      <summary>Gets or sets the vary-by-header value.</summary>
      <returns>The vary-by-header value.</returns>
    </member>
    <member name="P:System.Web.Mvc.OutputCacheAttribute.VaryByParam">
      <summary>Gets or sets the vary-by-param value.</summary>
      <returns>The vary-by-param value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterBindingInfo">
      <summary>Encapsulates information for binding action-method parameters to a data model.</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterBindingInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ParameterBindingInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Binder">
      <summary>Gets the model binder.</summary>
      <returns>The model binder.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Exclude">
      <summary>Gets a comma-delimited list of property names for which binding is disabled.</summary>
      <returns>The exclude list.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Include">
      <summary>Gets a comma-delimited list of property names for which binding is enabled.</summary>
      <returns>The include list.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterBindingInfo.Prefix">
      <summary>Gets the prefix to use when the MVC framework binds a value to an action parameter or to a model property.</summary>
      <returns>The prefix.</returns>
    </member>
    <member name="T:System.Web.Mvc.ParameterDescriptor">
      <summary>Contains information that describes a parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ParameterDescriptor" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ActionDescriptor">
      <summary>Gets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.BindingInfo">
      <summary>Gets the binding information.</summary>
      <returns>The binding information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.DefaultValue">
      <summary>Gets the default value of the parameter.</summary>
      <returns>The default value of the parameter.</returns>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterName">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ParameterDescriptor.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.Web.Mvc.PartialViewResult">
      <summary>Represents a base class that is used to send a partial view to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.PartialViewResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.PartialViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Returns the <see cref="T:System.Web.Mvc.ViewEngineResult" /> object that is used to render the view.</summary>
      <returns>The view engine result.</returns>
      <param name="context">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the method was attempting to find the view.</exception>
    </member>
    <member name="T:System.Web.Mvc.PreApplicationStartCode">
      <summary>Provides a registration point for ASP.NET Razor pre-application start code.</summary>
    </member>
    <member name="M:System.Web.Mvc.PreApplicationStartCode.Start">
      <summary>Registers Razor pre-application start code.</summary>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProvider">
      <summary>Represents a value provider for query strings that are contained in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.QueryStringValueProvider" /> class.</summary>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.QueryStringValueProviderFactory">
      <summary>Represents a class that is responsible for creating a new instance of a query-string value-provider object.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.QueryStringValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.QueryStringValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A query-string value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.RangeAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RangeAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.RangeAttribute" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The range attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RangeAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of client validation rules for a range check.</summary>
      <returns>A list of client validation rules for a range check.</returns>
    </member>
    <member name="T:System.Web.Mvc.RazorView">
      <summary>Represents the class used to create views that have Razor syntax.</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorView" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="layoutPath">The layout or master page.</param>
      <param name="runViewStartPages">A value that indicates whether view start files should be executed before the view.</param>
      <param name="viewStartFileExtensions">The set of extensions that will be used when looking up view start files.</param>
    </member>
    <member name="M:System.Web.Mvc.RazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorView" /> class using the view page activator.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="layoutPath">The layout or master page.</param>
      <param name="runViewStartPages">A value that indicates whether view start files should be executed before the view.</param>
      <param name="viewStartFileExtensions">The set of extensions that will be used when looking up view start files.</param>
      <param name="viewPageActivator">The view page activator.</param>
    </member>
    <member name="P:System.Web.Mvc.RazorView.LayoutPath">
      <summary>Gets the layout or master page.</summary>
      <returns>The layout or master page.</returns>
    </member>
    <member name="M:System.Web.Mvc.RazorView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>Renders the specified view context by using the specified writer and <see cref="T:System.Web.Mvc.WebViewPage" /> instance.</summary>
      <param name="viewContext">The view context.</param>
      <param name="writer">The writer that is used to render the view to the response.</param>
      <param name="instance">The <see cref="T:System.Web.Mvc.WebViewPage" /> instance.</param>
    </member>
    <member name="P:System.Web.Mvc.RazorView.RunViewStartPages">
      <summary>Gets a value that indicates whether view start files should be executed before the view.</summary>
      <returns>A value that indicates whether view start files should be executed before the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.RazorView.ViewStartFileExtensions">
      <summary>Gets or sets the set of file extensions that will be used when looking up view start files.</summary>
      <returns>The set of file extensions that will be used when looking up view start files.</returns>
    </member>
    <member name="T:System.Web.Mvc.RazorViewEngine">
      <summary>Represents a view engine that is used to render a Web page that uses the ASP.NET Razor syntax.</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RazorViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)"></member>
    <member name="M:System.Web.Mvc.RazorViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates a partial view using the specified controller context and partial path.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The path to the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.RazorViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates a view by using the specified controller context and the paths of the view and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The path to the view.</param>
      <param name="masterPath">The path to the master view.</param>
    </member>
    <member name="T:System.Web.Mvc.RedirectResult">
      <summary>Controls the processing of application actions by redirecting to a specified URI.</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class.</summary>
      <param name="url">The target URL.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectResult" /> class using the specified URL and permanent-redirection flag.</summary>
      <param name="url">The URL.</param>
      <param name="permanent">A value that indicates whether the redirection should be permanent.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Permanent">
      <summary>Gets a value that indicates whether the redirection should be permanent.</summary>
      <returns>true if the redirection should be permanent; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectResult.Url">
      <summary>Gets or sets the target URL.</summary>
      <returns>The target URL.</returns>
    </member>
    <member name="T:System.Web.Mvc.RedirectToRouteResult">
      <summary>Represents a result that performs a redirection by using the specified route values dictionary.</summary>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route name and route values.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.String,System.Web.Routing.RouteValueDictionary,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route name, route values, and permanent-redirection flag.</summary>
      <param name="routeName">The name of the route.</param>
      <param name="routeValues">The route values.</param>
      <param name="permanent">A value that indicates whether the redirection should be permanent.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.#ctor(System.Web.Routing.RouteValueDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RedirectToRouteResult" /> class by using the specified route values.</summary>
      <param name="routeValues">The route values.</param>
    </member>
    <member name="M:System.Web.Mvc.RedirectToRouteResult.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>Enables processing of the result of an action method by a custom type that inherits from the <see cref="T:System.Web.Mvc.ActionResult" /> class.</summary>
      <param name="context">The context within which the result is executed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.Permanent">
      <summary>Gets a value that indicates whether the redirection should be permanent.</summary>
      <returns>true if the redirection should be permanent; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteName">
      <summary>Gets or sets the name of the route.</summary>
      <returns>The name of the route.</returns>
    </member>
    <member name="P:System.Web.Mvc.RedirectToRouteResult.RouteValues">
      <summary>Gets or sets the route values.</summary>
      <returns>The route values.</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedActionDescriptor">
      <summary>Contains information that describes a reflected action method.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.#ctor(System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedActionDescriptor" /> class.</summary>
      <param name="methodInfo">The action-method information.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
      <exception cref="T:System.ArgumentNullException">Either the <paramref name="methodInfo" /> or <paramref name="controllerDescriptor" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ActionName">
      <summary>Gets the name of the action.</summary>
      <returns>The name of the action.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the specified controller context by using the specified action-method parameters.</summary>
      <returns>The action return value.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameters" /> or <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetParameters">
      <summary>Retrieves the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.GetSelectors">
      <summary>Retrieves the action selectors.</summary>
      <returns>The action selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.MethodInfo">
      <summary>Gets or sets the action-method information.</summary>
      <returns>The action-method information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedActionDescriptor.UniqueId">
      <summary>Gets the unique ID for the reflected action descriptor using lazy initialization.</summary>
      <returns>The unique ID.</returns>
    </member>
    <member name="T:System.Web.Mvc.ReflectedControllerDescriptor">
      <summary>Contains information that describes a reflected controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedControllerDescriptor" /> class.</summary>
      <param name="controllerType">The type of the controller.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerType" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds the specified action for the specified controller context.</summary>
      <returns>The information about the action.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCanonicalActions">
      <summary>Returns the list of actions for the controller.</summary>
      <returns>A list of action descriptors for the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.ReflectedParameterDescriptor">
      <summary>Contains information that describes a reflected action-method parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.#ctor(System.Reflection.ParameterInfo,System.Web.Mvc.ActionDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ReflectedParameterDescriptor" /> class.</summary>
      <param name="parameterInfo">The parameter information.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo" /> or <paramref name="actionDescriptor" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ActionDescriptor">
      <summary>Gets the action descriptor.</summary>
      <returns>The action descriptor.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.BindingInfo">
      <summary>Gets the binding information.</summary>
      <returns>The binding information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.DefaultValue">
      <summary>Gets the default value of the reflected parameter.</summary>
      <returns>The default value of the reflected parameter.</returns>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
      <exception cref="T:System.TypeLoadException">The custom attribute type cannot be loaded.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">There is more than one attribute of type <paramref name="attributeType" /> defined for this member.</exception>
    </member>
    <member name="M:System.Web.Mvc.ReflectedParameterDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of a custom attribute type are defined for this member.</summary>
      <returns>true if the custom attribute type is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterInfo">
      <summary>Gets or sets the parameter information.</summary>
      <returns>The parameter information.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterName">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:System.Web.Mvc.ReflectedParameterDescriptor.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The type of the parameter.</returns>
    </member>
    <member name="T:System.Web.Mvc.RegularExpressionAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RegularExpressionAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RegularExpressionAttributeAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The regular expression attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RegularExpressionAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of regular-expression client validation rules.</summary>
      <returns>A list of regular-expression client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.RemoteAttribute">
      <summary>Provides an attribute that uses the jQuery validation plug-in remote validator. </summary>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class using the specified route name.</summary>
      <param name="routeName">The route name.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class using the specified action-method name and controller name.</summary>
      <param name="action">The name of the action method.</param>
      <param name="controller">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RemoteAttribute" /> class using the specified action-method name, controller name, and area name.</summary>
      <param name="action">The name of the action method.</param>
      <param name="controller">The name of the controller.</param>
      <param name="areaName">The name of the area.</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.AdditionalFields">
      <summary>Gets or sets the additional fields that are required for validation.</summary>
      <returns>The additional fields that are required for validation.</returns>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatAdditionalFieldsForClientValidation(System.String)">
      <summary>Returns a comma-delimited string of validation field names.</summary>
      <returns>A comma-delimited string of validation field names.</returns>
      <param name="property">The name of the validation property.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatErrorMessage(System.String)">
      <summary>Formats the error message that is displayed when validation fails.</summary>
      <returns>A formatted error message.</returns>
      <param name="name">A name to display with the error message.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.FormatPropertyForClientValidation(System.String)">
      <summary>Formats the property for client validation by prepending an asterisk (*) and a dot.</summary>
      <returns>The string "*." Is prepended to the property.</returns>
      <param name="property">The property.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.GetClientValidationRules(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Gets a list of client validation rules for the property.</summary>
      <returns>A list of remote client validation rules for the property.</returns>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.GetUrl(System.Web.Mvc.ControllerContext)">
      <summary>Gets the URL for the remote validation call.</summary>
      <returns>The URL for the remote validation call.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.HttpMethod">
      <summary>Gets or sets the HTTP method used for remote validation.</summary>
      <returns>The HTTP method used for remote validation. The default value is "Get".</returns>
    </member>
    <member name="M:System.Web.Mvc.RemoteAttribute.IsValid(System.Object)">
      <summary>This method always returns true.</summary>
      <returns>true</returns>
      <param name="value">The validation target.</param>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.RouteData">
      <summary>Gets the route data dictionary.</summary>
      <returns>The route data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.RouteName">
      <summary>Gets or sets the route name.</summary>
      <returns>The route name.</returns>
    </member>
    <member name="P:System.Web.Mvc.RemoteAttribute.Routes">
      <summary>Gets the route collection from the route table.</summary>
      <returns>The route collection from the route table.</returns>
    </member>
    <member name="T:System.Web.Mvc.RequiredAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiredAttributeAttribute" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The required attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.RequiredAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of required-value client validation rules.</summary>
      <returns>A list of required-value client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.RequireHttpsAttribute">
      <summary>Represents an attribute that forces an unsecured HTTP request to be re-sent over HTTPS.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)">
      <summary>Handles unsecured HTTP requests that are sent to the action method.</summary>
      <param name="filterContext">An object that encapsulates information that is required in order to use the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> attribute.</param>
      <exception cref="T:System.InvalidOperationException">The HTTP request contains an invalid transfer method override. All GET requests are considered invalid.</exception>
    </member>
    <member name="M:System.Web.Mvc.RequireHttpsAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Determines whether a request is secured (HTTPS) and, if it is not, calls the <see cref="M:System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest(System.Web.Mvc.AuthorizationContext)" /> method.</summary>
      <param name="filterContext">An object that encapsulates information that is required in order to use the <see cref="T:System.Web.Mvc.RequireHttpsAttribute" /> attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutedContext">
      <summary>Provides the context for the <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)" /> method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutedContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutedContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,System.Boolean,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutedContext" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="result">The result object.</param>
      <param name="canceled">true to cancel execution; otherwise, false.</param>
      <param name="exception">The exception object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="result" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Canceled">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.ResultExecutedContext" /> instance is canceled.</summary>
      <returns>true if the instance is canceled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Exception">
      <summary>Gets or sets the exception object.</summary>
      <returns>The exception object.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.ExceptionHandled">
      <summary>Gets or sets a value that indicates whether the exception has been handled.</summary>
      <returns>true if the exception has been handled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutedContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.ResultExecutingContext">
      <summary>Provides the context for the <see cref="M:System.Web.Mvc.ActionFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)" /> method of the <see cref="T:System.Web.Mvc.ActionFilterAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutingContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ResultExecutingContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ResultExecutingContext" /> class by using the specified controller context and action result.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="result">The action result.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="result" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Cancel">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.ResultExecutingContext" /> value is "cancel".</summary>
      <returns>true if the value is "cancel"; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ResultExecutingContext.Result">
      <summary>Gets or sets the action result.</summary>
      <returns>The action result.</returns>
    </member>
    <member name="T:System.Web.Mvc.RouteCollectionExtensions">
      <summary>Extends a <see cref="T:System.Web.Routing.RouteCollection" /> object for MVC routing.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.</summary>
      <returns>An object that contains information about the route and virtual path that are the result of generating a URL in the current area.</returns>
      <param name="routes">An object that contains the routes for the applications.</param>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="name">The name of the route to use when information about the URL path is retrieved.</param>
      <param name="values">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.GetVirtualPathForArea(System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an object that contains information about the route and virtual path that are the result of generating a URL in the current area.</summary>
      <returns>An object that contains information about the route and virtual path that are the result of generating a URL in the current area.</returns>
      <param name="routes">An object that contains the routes for the applications.</param>
      <param name="requestContext">An object that encapsulates information about the requested route.</param>
      <param name="values">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String)">
      <summary>Ignores the specified URL route for the given list of available routes.</summary>
      <param name="routes">A collection of routes for the application.</param>
      <param name="url">The URL pattern for the route to ignore.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.IgnoreRoute(System.Web.Routing.RouteCollection,System.String,System.Object)">
      <summary>Ignores the specified URL route for the given list of the available routes and a list of constraints.</summary>
      <param name="routes">A collection of routes for the application.</param>
      <param name="url">The URL pattern for the route to ignore.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
      <summary>Maps the specified URL route.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
      <summary>Maps the specified URL route and sets default route values.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>Maps the specified URL route and sets default route values and constraints.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.String[])">
      <summary>Maps the specified URL route and sets default route values, constraints, and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="constraints">A set of expressions that specify values for the <paramref name="url" /> parameter.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.String[])">
      <summary>Maps the specified URL route and sets default route values and namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="defaults">An object that contains default route values.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.RouteCollectionExtensions.MapRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.String[])">
      <summary>Maps the specified URL route and sets the namespaces.</summary>
      <returns>A reference to the mapped route.</returns>
      <param name="routes">A collection of routes for the application.</param>
      <param name="name">The name of the route to map.</param>
      <param name="url">The URL pattern for the route.</param>
      <param name="namespaces">A set of namespaces for the application.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="routes" /> or <paramref name="url" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProvider">
      <summary>Represents a value provider for route data that is contained in an object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProvider.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.RouteDataValueProvider" /> class.</summary>
      <param name="controllerContext">An object that contain information about the HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.RouteDataValueProviderFactory">
      <summary>Represents a factory for creating route-data value provider objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.#ctor">
      <summary>Initialized a new instance of the <see cref="T:System.Web.Mvc.RouteDataValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.RouteDataValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.SelectList">
      <summary>Represents a list that lets users select one item.</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list.</summary>
      <param name="items">The items.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list and a selected value.</summary>
      <param name="items">The items.</param>
      <param name="selectedValue">The selected value.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list, the data value field, and the data text field.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
    </member>
    <member name="M:System.Web.Mvc.SelectList.#ctor(System.Collections.IEnumerable,System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectList" /> class by using the specified items for the list, the data value field, the data text field, and a selected value.</summary>
      <param name="items">The items.</param>
      <param name="dataValueField">The data value field.</param>
      <param name="dataTextField">The data text field.</param>
      <param name="selectedValue">The selected value.</param>
    </member>
    <member name="P:System.Web.Mvc.SelectList.SelectedValue">
      <summary>Gets the list value that was selected by the user.</summary>
      <returns>The selected value.</returns>
    </member>
    <member name="T:System.Web.Mvc.SelectListItem">
      <summary>Represents the selected item in an instance of the <see cref="T:System.Web.Mvc.SelectList" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.SelectListItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SelectListItem" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Selected">
      <summary>Gets or sets a value that indicates whether this <see cref="T:System.Web.Mvc.SelectListItem" /> is selected.</summary>
      <returns>true if the item is selected; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Text">
      <summary>Gets or sets the text of the selected item.</summary>
      <returns>The text.</returns>
    </member>
    <member name="P:System.Web.Mvc.SelectListItem.Value">
      <summary>Gets or sets the value of the selected item.</summary>
      <returns>The value.</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateAttribute">
      <summary>Specifies the session state of the controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateAttribute.#ctor(System.Web.SessionState.SessionStateBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SessionStateAttribute" /> class</summary>
      <param name="behavior">The type of the session state.</param>
    </member>
    <member name="P:System.Web.Mvc.SessionStateAttribute.Behavior">
      <summary>Get the session state behavior for the controller.</summary>
      <returns>The session state behavior for the controller.</returns>
    </member>
    <member name="T:System.Web.Mvc.SessionStateTempDataProvider">
      <summary>Provides session-state data to the current <see cref="T:System.Web.Mvc.TempDataDictionary" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.SessionStateTempDataProvider" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.LoadTempData(System.Web.Mvc.ControllerContext)">
      <summary>Loads the temporary data by using the specified controller context.</summary>
      <returns>The temporary data.</returns>
      <param name="controllerContext">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred when the session context was being retrieved.</exception>
    </member>
    <member name="M:System.Web.Mvc.SessionStateTempDataProvider.SaveTempData(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Saves the specified values in the temporary data dictionary by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="values">The values.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred the session context was being retrieved.</exception>
    </member>
    <member name="T:System.Web.Mvc.StringLengthAttributeAdapter">
      <summary>Provides an adapter for the <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> attribute.</summary>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.StringLengthAttributeAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
      <param name="attribute">The string-length attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.StringLengthAttributeAdapter.GetClientValidationRules">
      <summary>Gets a list of string-length client validation rules.</summary>
      <returns>A list of string-length client validation rules.</returns>
    </member>
    <member name="T:System.Web.Mvc.TempDataDictionary">
      <summary>Represents a set of data that persists only from one request to the next.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TempDataDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Add(System.String,System.Object)">
      <summary>Adds an element that has the specified key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance contains an element that has the specified key.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.ContainsValue(System.Object)">
      <summary>Determines whether the dictionary contains the specified value.</summary>
      <returns>true if the dictionary contains the specified value; otherwise, false.</returns>
      <param name="value">The value.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Count">
      <summary>Gets the number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.GetEnumerator">
      <summary>Gets the enumerator.</summary>
      <returns>The enumerator.</returns>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Item(System.String)">
      <summary>Gets or sets the object that has the specified key.</summary>
      <returns>The object that has the specified key.</returns>
      <param name="key">The key to access.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep">
      <summary>Marks all keys in the dictionary for retention.</summary>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Keep(System.String)">
      <summary>Marks the specified key in the dictionary for retention.</summary>
      <param name="key">The key to retain in the dictionary.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the keys of elements in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>The keys of the elements in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Load(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>Loads the specified controller context by using the specified data provider.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="tempDataProvider">The temporary data provider.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Peek(System.String)">
      <summary>Returns an object that contains the element that is associated with the specified key, without marking the key for deletion.</summary>
      <returns>An object that contains the element that is associated with the specified key.</returns>
      <param name="key">The key of the element to return.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>true if the element was removed successfully; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the <see cref="T:System.Collections.Generic.IDictionary`2" />. instance.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.Save(System.Web.Mvc.ControllerContext,System.Web.Mvc.ITempDataProvider)">
      <summary>Saves the specified controller context by using the specified data provider.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="tempDataProvider">The temporary data provider.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified key/value pair to the dictionary.</summary>
      <param name="keyValuePair">The key/value pair.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the dictionary contains the specified key/value pair; otherwise, false.</returns>
      <param name="keyValuePair">The key/value pair to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies a key/value pair to the specified array at the specified index.</summary>
      <param name="array">The target array.</param>
      <param name="index">The index.</param>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the dictionary is read-only.</summary>
      <returns>true if the dictionary is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Deletes the specified key/value pair from the dictionary.</summary>
      <returns>true if the key/value pair was removed successfully; otherwise, false.</returns>
      <param name="keyValuePair">The key/value pair.</param>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.TempDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Gets the value of the element that has the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.TempDataDictionary.Values">
      <summary>Gets the <see cref="T:System.Collections.Generic.ICollection`1" /> object that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>The values of the elements in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.TemplateInfo">
      <summary>Encapsulates information about the current template context.</summary>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.TemplateInfo" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.FormattedModelValue">
      <summary>Gets or sets the formatted model value.</summary>
      <returns>The formatted model value.</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldId(System.String)">
      <summary>Retrieves the full DOM ID of a field using the specified HTML name attribute.</summary>
      <returns>The full DOM ID.</returns>
      <param name="partialFieldName">The value of the HTML name attribute.</param>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.GetFullHtmlFieldName(System.String)">
      <summary>Retrieves the fully qualified name (including a prefix) for a field using the specified HTML name attribute.</summary>
      <returns>The prefixed name of the field.</returns>
      <param name="partialFieldName">The value of the HTML name attribute.</param>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.HtmlFieldPrefix">
      <summary>Gets or sets the HTML field prefix.</summary>
      <returns>The HTML field prefix.</returns>
    </member>
    <member name="P:System.Web.Mvc.TemplateInfo.TemplateDepth">
      <summary>Contains the number of objects that were visited by the user.</summary>
      <returns>The number of objects.</returns>
    </member>
    <member name="M:System.Web.Mvc.TemplateInfo.Visited(System.Web.Mvc.ModelMetadata)">
      <summary>Determines whether the template has been visited by the user.</summary>
      <returns>true if the template has been visited by the user; otherwise, false.</returns>
      <param name="metadata">An object that encapsulates information that describes the model.</param>
    </member>
    <member name="T:System.Web.Mvc.UrlHelper">
      <summary>Contains methods to build URLs for ASP.NET MVC within an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.UrlHelper" /> class using the specified request context.</summary>
      <param name="requestContext">An object that contains information about the current request and about the route that it matched.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.#ctor(System.Web.Routing.RequestContext,System.Web.Routing.RouteCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.UrlHelper" /> class by using the specified request context and route collection.</summary>
      <param name="requestContext">An object that contains information about the current request and about the route that it matched.</param>
      <param name="routeCollection">A collection of routes.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="requestContext" /> or the <paramref name="routeCollection" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Object)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name and controller name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Object,System.String)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, route values, and protocol to use.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL to an action method by using the specified action name, controller name, and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>Generates a fully qualified URL for an action method by using the specified action name, controller name, route values, protocol to use, and host name.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Action(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL to an action method for the specified action name and route values.</summary>
      <returns>The fully qualified URL to an action method.</returns>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Content(System.String)">
      <summary>Converts a virtual (relative) path to an application absolute path.</summary>
      <returns>The application absolute path.</returns>
      <param name="contentPath">The virtual path of the content.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.Encode(System.String)">
      <summary>Encodes special characters in a URL string into character-entity equivalents.</summary>
      <returns>An encoded URL string.</returns>
      <param name="url">The text to encode.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateContentUrl(System.String,System.Web.HttpContextBase)">
      <summary>Returns a string that contains a content URL.</summary>
      <returns>A string that contains a content URL.</returns>
      <param name="contentPath">The content path.</param>
      <param name="httpContext">The HTTP context.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>Returns a string that contains a URL.</summary>
      <returns>A string that contains a URL.</returns>
      <param name="routeName">The route name.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="protocol">The HTTP protocol.</param>
      <param name="hostName">The host name.</param>
      <param name="fragment">The fragment.</param>
      <param name="routeValues">The route values.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="requestContext">The request context.</param>
      <param name="includeImplicitMvcValues">true to include implicit MVC values; otherwise false.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.GenerateUrl(System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteCollection,System.Web.Routing.RequestContext,System.Boolean)">
      <summary>Returns a string that contains a URL.</summary>
      <returns>A string that contains a URL.</returns>
      <param name="routeName">The route name.</param>
      <param name="actionName">The action name.</param>
      <param name="controllerName">The controller name.</param>
      <param name="routeValues">The route values.</param>
      <param name="routeCollection">The route collection.</param>
      <param name="requestContext">The request context.</param>
      <param name="includeImplicitMvcValues">true to include implicit MVC values; otherwise. false.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.IsLocalUrl(System.String)">
      <summary>Returns a value that indicates whether the URL is local.</summary>
      <returns>true if the URL is local; otherwise, false.</returns>
      <param name="url">The URL.</param>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RequestContext">
      <summary>Gets information about an HTTP request that matches a defined route.</summary>
      <returns>The request context.</returns>
    </member>
    <member name="P:System.Web.Mvc.UrlHelper.RouteCollection">
      <summary>Gets a collection that contains the routes that are registered for the application.</summary>
      <returns>The route collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Object)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String)">
      <summary>Generates a fully qualified URL for the specified route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Object,System.String)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name and the protocol to use.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values by using a route name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.String,System.Web.Routing.RouteValueDictionary,System.String,System.String)">
      <summary>Generates a fully qualified URL for the specified route values by using the specified route name, protocol to use, and host name.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeName">The name of the route that is used to generate the URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
    </member>
    <member name="M:System.Web.Mvc.UrlHelper.RouteUrl(System.Web.Routing.RouteValueDictionary)">
      <summary>Generates a fully qualified URL for the specified route values.</summary>
      <returns>The fully qualified URL.</returns>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="T:System.Web.Mvc.UrlParameter">
      <summary>Represents an optional parameter that is used by the <see cref="T:System.Web.Mvc.MvcHandler" /> class during routing.</summary>
    </member>
    <member name="F:System.Web.Mvc.UrlParameter.Optional">
      <summary>Contains the read-only value for the optional parameter.</summary>
    </member>
    <member name="M:System.Web.Mvc.UrlParameter.ToString">
      <summary>Returns an empty string. This method supports the ASP.NET MVC infrastructure and is not intended to be used directly from your code.</summary>
      <returns>An empty string.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidatableObjectAdapter">
      <summary>Provides an object adapter that can be validated.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidatableObjectAdapter.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidatableObjectAdapter" /> class.</summary>
      <param name="metadata">The model metadata.</param>
      <param name="context">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ValidatableObjectAdapter.Validate(System.Object)">
      <summary>Validates the specified object.</summary>
      <returns>A list of validation results.</returns>
      <param name="container">The container.</param>
    </member>
    <member name="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute">
      <summary>Represents an attribute that is used to detect whether a server request has been tampered with.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidateAntiForgeryTokenAttribute" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValidateAntiForgeryTokenAttribute.Salt">
      <summary>Gets or sets the salt string.</summary>
      <returns>The salt string.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValidateInputAttribute">
      <summary>Represents an attribute that is used to mark action methods whose input must be validated.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValidateInputAttribute" /> class.</summary>
      <param name="enableValidation">true to enable validation.</param>
    </member>
    <member name="P:System.Web.Mvc.ValidateInputAttribute.EnableValidation">
      <summary>Gets or sets a value that indicates whether to enable validation.</summary>
      <returns>true if validation is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValidateInputAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
      <summary>Called when authorization is required.</summary>
      <param name="filterContext">The filter context.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="filterContext" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderCollection">
      <summary>Represents the collection of value-provider objects for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IValueProvider})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderCollection" /> class and registers the specified value providers.</summary>
      <param name="list">The list of value providers to register.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.GetValue(System.String,System.Boolean)">
      <summary>Returns a value object using the specified key and skip-validation parameter.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to retrieve.</param>
      <param name="skipValidation">true to specify that validation should be skipped; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.InsertItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>Inserts the specified value-provider object into the collection at the specified index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider object to insert.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderCollection.SetItem(System.Int32,System.Web.Mvc.IValueProvider)">
      <summary>Replaces the value provider at the specified index location with a new value provider.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderDictionary">
      <summary>Represents a dictionary of value providers for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.#ctor(System.Web.Mvc.ControllerContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderDictionary" /> class.</summary>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Adds the specified item to the collection of value providers.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Object)">
      <summary>Adds an element that has the specified key and value to the collection of value providers.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Add(System.String,System.Web.Mvc.ValueProviderResult)">
      <summary>Adds an element that has the specified key and value to the collection of value providers.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element that has the specified key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Clear">
      <summary>Removes all items from the collection of value providers.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Determines whether the collection of value providers contains the specified item.</summary>
      <returns>true if <paramref name="item" /> is found in the collection of value providers; otherwise, false.</returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.ContainsKey(System.String)">
      <summary>Determines whether the collection of value providers contains an element that has the specified key.</summary>
      <returns>true if the collection of value providers contains an element that has the key; otherwise, false.</returns>
      <param name="key">The key of the element to find in the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.ControllerContext">
      <summary>Gets or sets the controller context.</summary>
      <returns>The controller context.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at the specified index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination array.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.ValueProviderResult" /> object that has the specified key.</summary>
      <returns>The <see cref="T:System.Web.Mvc.ValueProviderResult" /> object.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Keys">
      <summary>Gets a collection that contains the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" /> instance.</summary>
      <returns>A collection that contains the keys of the object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Mvc.ValueProviderResult})">
      <summary>Removes the first occurrence of the specified item from the collection of value providers.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the collection.</returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" /> instance.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.Remove(System.String)">
      <summary>Removes the element that has the specified key from the collection of value providers.</summary>
      <returns>true if the element was successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the collection.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through a collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#ContainsPrefix(System.String)">
      <summary>Determines whether the collection contains the specified prefix.</summary>
      <returns>true if the collection contains the specified prefix; otherwise, false.</returns>
      <param name="prefix">The prefix to search for.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.System#Web#Mvc#IValueProvider#GetValue(System.String)">
      <summary>Returns a value object using the specified key.</summary>
      <returns>The value object for the specified key.</returns>
      <param name="key">The key of the value object to return.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderDictionary.TryGetValue(System.String,System.Web.Mvc.ValueProviderResult@)">
      <summary>Gets the value of the element that has the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the element to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderDictionary.Values">
      <summary>Gets a collection that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</summary>
      <returns>A collection of the values in the object that implements the <see cref="T:System.Collections.Generic.IDictionary`2" /> interface.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactories">
      <summary>Represents a container for value-provider factory objects.</summary>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderFactories.Factories">
      <summary>Gets the collection of value-provider factories for the application.</summary>
      <returns>The collection of value-provider factory objects.</returns>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactory">
      <summary>Represents a factory for creating value-provider objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactory" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactory.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns a value-provider object for the specified controller context.</summary>
      <returns>A value-provider object.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderFactoryCollection">
      <summary>Represents the collection of value-provider factories for the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.ValueProviderFactory})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderFactoryCollection" /> class using the specified list of value-provider factories.</summary>
      <param name="list">A list of value-provider factories to initialize the collection with.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.GetValueProvider(System.Web.Mvc.ControllerContext)">
      <summary>Returns the value-provider factory for the specified controller context.</summary>
      <returns>The value-provider factory object for the specified controller context.</returns>
      <param name="controllerContext">An object that encapsulates information about the current HTTP request.</param>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.InsertItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>Inserts the specified value-provider factory object at the specified index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider factory object to insert.</param>
      <exception cref="ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderFactoryCollection.SetItem(System.Int32,System.Web.Mvc.ValueProviderFactory)">
      <summary>Sets the specified value-provider factory object at the given index location.</summary>
      <param name="index">The zero-based index location at which to insert the value provider into the collection.</param>
      <param name="item">The value-provider factory object to set.</param>
      <exception cref="ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ValueProviderResult">
      <summary>Represents the result of binding a value (such as from a form post or query string) to an action-method argument property, or to the argument itself.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ValueProviderResult" /> class by using the specified raw value, attempted value, and culture information.</summary>
      <param name="rawValue">The raw value.</param>
      <param name="attemptedValue">The attempted value.</param>
      <param name="culture">The culture.</param>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.AttemptedValue">
      <summary>Gets or sets the raw value that is converted to a string for display.</summary>
      <returns>The raw value.</returns>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type)">
      <summary>Converts the value that is encapsulated by this result to the specified type.</summary>
      <returns>The converted value.</returns>
      <param name="type">The target type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>Converts the value that is encapsulated by this result to the specified type by using the specified culture information.</summary>
      <returns>The converted value.</returns>
      <param name="type">The target type.</param>
      <param name="culture">The culture to use in the conversion.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="type" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.Culture">
      <summary>Gets or sets the culture.</summary>
      <returns>The culture.</returns>
    </member>
    <member name="P:System.Web.Mvc.ValueProviderResult.RawValue">
      <summary>Gets or set the raw value that is supplied by the value provider.</summary>
      <returns>The raw value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewContext">
      <summary>Encapsulates information that is related to rendering a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewContext" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.#ctor(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView,System.Web.Mvc.ViewDataDictionary,System.Web.Mvc.TempDataDictionary,System.IO.TextWriter)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewContext" /> class by using the specified controller context, view, view data dictionary, temporary data dictionary, and text writer.</summary>
      <param name="controllerContext">Encapsulates information about the HTTP request.</param>
      <param name="view">The view to render.</param>
      <param name="viewData">The dictionary that contains the data that is required in order to render the view.</param>
      <param name="tempData">The dictionary that contains temporary data for the view.</param>
      <param name="writer">The text writer object that is used to write HTML output.</param>
      <exception cref="T:System.ArgumentNullException">One of the parameters is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ClientValidationEnabled">
      <summary>Gets or sets a value that indicates whether client-side validation is enabled.</summary>
      <returns>true if client-side validation is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.FormContext">
      <summary>Gets or sets an object that encapsulates information that is required in order to validate and process the input data from an HTML form.</summary>
      <returns>An object that encapsulates information that is required in order to validate and process the input data from an HTML form.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewContext.OutputClientValidation">
      <summary>Writes the client validation information to the HTTP response.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.TempData">
      <summary>Gets data that is associated with this request and that is available for only one request.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.UnobtrusiveJavaScriptEnabled">
      <summary>Gets or sets a value that indicates whether unobtrusive JavaScript is enabled.</summary>
      <returns>true if unobtrusive JavaScript is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.View">
      <summary>Gets an object that implements the <see cref="T:System.Web.Mvc.IView" /> interface to render in the browser.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.ViewData">
      <summary>Gets the view data that is passed to the view.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewContext.Writer">
      <summary>Gets or sets the text writer object that is used to write HTML output.</summary>
      <returns>The object that is used to write the HTML output.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary">
      <summary>Represents a container that is used to pass data between a controller and a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class by using the specified model.</summary>
      <param name="model">The model.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> class by using the specified dictionary.</summary>
      <param name="dictionary">The dictionary.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified item to the collection.</summary>
      <param name="item">The object to add to the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Add(System.String,System.Object)">
      <summary>Adds an element to the collection using the specified key and value .</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> object is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" /> object.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Clear">
      <summary>Removes all items from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> object is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the collection contains the specified item.</summary>
      <returns>true if <paramref name="item" /> is found in the collection; otherwise, false.</returns>
      <param name="item">The object to locate in the collection.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.ContainsKey(System.String)">
      <summary>Determines whether the collection contains an element that has the specified key.</summary>
      <returns>true if the collection contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the element to locate in the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the collection to an array, starting at a particular index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the collection. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- <paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or- The number of elements in the source collection is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or- Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Count">
      <summary>Gets the number of elements in the collection.</summary>
      <returns>The number of elements in the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String)">
      <summary>Evaluates the specified expression.</summary>
      <returns>The results of the evaluation.</returns>
      <param name="expression">The expression.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Eval(System.String,System.String)">
      <summary>Evaluates the specified expression by using the specified format.</summary>
      <returns>The results of the evaluation.</returns>
      <param name="expression">The expression.</param>
      <param name="format">The format.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.GetViewDataInfo(System.String)">
      <summary>Returns information about the view data as defined by the <paramref name="expression" /> parameter.</summary>
      <returns>An object that contains the view data information that is defined by the <paramref name="expression" /> parameter.</returns>
      <param name="expression">A set of key/value pairs that define the view-data information to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is either null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Item(System.String)">
      <summary>Gets or sets the item that is associated with the specified key.</summary>
      <returns>The value of the selected item.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Keys">
      <summary>Gets a collection that contains the keys of this dictionary.</summary>
      <returns>A collection that contains the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Model">
      <summary>Gets or sets the model that is associated with the view data.</summary>
      <returns>The model that is associated with the view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelMetadata">
      <summary>Gets or sets information about the model.</summary>
      <returns>Information about the model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.ModelState">
      <summary>Gets the state of the model.</summary>
      <returns>The state of the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes the first occurrence of a specified object from the collection.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the collection; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the collection.</returns>
      <param name="item">The object to remove from the collection.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.Remove(System.String)">
      <summary>Removes the element from the collection using the specified key.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original collection.</returns>
      <param name="key">The key of the element to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.SetModel(System.Object)">
      <summary>Sets the data model to use for the view.</summary>
      <param name="value">The data model to use for the view.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.TemplateInfo">
      <summary>Gets or sets an object that encapsulates information about the current template context.</summary>
      <returns>An object that contains information about the current template.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary.TryGetValue(System.String,System.Object@)">
      <summary>Attempts to retrieve the value that is associated with the specified key.</summary>
      <returns>true if the collection contains an element with the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, the value that is associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary.Values">
      <summary>Gets a collection that contains the values in this dictionary.</summary>
      <returns>A collection that contains the values of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewDataDictionary`1">
      <summary>Represents a container that is used to pass strongly typed data between a controller and a view.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(System.Web.Mvc.ViewDataDictionary)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class by using the specified view data dictionary.</summary>
      <param name="viewDataDictionary">An existing view data dictionary to copy into this instance.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> class by using the specified model.</summary>
      <param name="model">The data model to use for the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.Model">
      <summary>Gets or sets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataDictionary`1.ModelMetadata">
      <summary>Gets or sets information about the model.</summary>
      <returns>Information about the model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewDataDictionary`1.SetModel(System.Object)">
      <summary>Sets the data model to use for the view.</summary>
      <param name="value">The data model to use for the view.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the model was being set.</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewDataInfo">
      <summary>Encapsulates information about the current template content that is used to develop templates and about HTML helpers that interact with templates.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewDataInfo" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewDataInfo.#ctor(System.Func{System.Object})">
      <summary>Initializes a new instance of the T:System.Web.Mvc.ViewDataInfo class and associates a delegate for accessing the view data information.</summary>
      <param name="valueAccessor">A delegate that defines how the view data information is accessed.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Container">
      <summary>Gets or sets the object that contains the values to be displayed by the template.</summary>
      <returns>The object that contains the values to be displayed by the template.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.PropertyDescriptor">
      <summary>Gets or sets the description of the property to be displayed by the template.</summary>
      <returns>The description of the property to be displayed by the template.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewDataInfo.Value">
      <summary>Gets or sets the current value to be displayed by the template.</summary>
      <returns>The current value to be displayed by the template.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineCollection">
      <summary>Represents a collection of view engines that are available to the application.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineCollection" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.#ctor(System.Collections.Generic.IList{System.Web.Mvc.IViewEngine})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineCollection" /> class by using the specified list of view engines.</summary>
      <param name="list">The list that is wrapped by the new collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindPartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="partialViewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.FindView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Finds the specified view by using the specified controller context and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.InsertItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>Inserts an element into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineCollection.SetItem(System.Int32,System.Web.Mvc.IViewEngine)">
      <summary>Replaces the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to replace.</param>
      <param name="item">The new value for the element at the specified index. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is greater than the number of items in the collection.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="item" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.ViewEngineResult">
      <summary>Represents the result of locating a view engine.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineResult" /> class by using the specified searched locations.</summary>
      <param name="searchedLocations">The searched locations.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="searchedLocations" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewEngineResult.#ctor(System.Web.Mvc.IView,System.Web.Mvc.IViewEngine)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewEngineResult" /> class by using the specified view and view engine.</summary>
      <param name="view">The view.</param>
      <param name="viewEngine">The view engine.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="view " />or <paramref name="viewEngine" /> parameter is null.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.SearchedLocations">
      <summary>Gets or sets the searched locations.</summary>
      <returns>The searched locations.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.View">
      <summary>Gets or sets the view.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewEngineResult.ViewEngine">
      <summary>Gets or sets the view engine.</summary>
      <returns>The view engine.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewEngines">
      <summary>Represents a collection of view engines that are available to the application.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewEngines.Engines">
      <summary>Gets the view engines.</summary>
      <returns>The view engines.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage">
      <summary>Represents the information that is needed to build a master view page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewMasterPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Ajax">
      <summary>Gets the AJAX script for the master page.</summary>
      <returns>The AJAX script for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Html">
      <summary>Gets the HTML for the master page.</summary>
      <returns>The HTML for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Model">
      <summary>Gets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.TempData">
      <summary>Gets the temporary data.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Url">
      <summary>Gets the URL.</summary>
      <returns>The URL.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewBag">
      <summary>Gets the dynamic view-bag dictionary.</summary>
      <returns>The dynamic view-bag dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewContext">
      <summary>Gets the view context.</summary>
      <returns>The view context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.ViewData">
      <summary>Gets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage.Writer">
      <summary>Gets the writer that is used to render the master page.</summary>
      <returns>The writer that is used to render the master page.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewMasterPage`1">
      <summary>Represents the information that is required in order to build a strongly typed master view page.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewMasterPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewMasterPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Ajax">
      <summary>Gets the AJAX script for the master page.</summary>
      <returns>The AJAX script for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Html">
      <summary>Gets the HTML for the master page.</summary>
      <returns>The HTML for the master page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.Model">
      <summary>Gets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewMasterPage`1.ViewData">
      <summary>Gets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage">
      <summary>Represents the properties and methods that are needed to render a view as a Web Forms page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML in Ajax scenarios.</summary>
      <returns>The Ajax helper object that is associated with the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The HTML helper object that is associated with the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.InitHelpers">
      <summary>Initializes the <see cref="P:System.Web.Mvc.ViewPage.Ajax" />, <see cref="P:System.Web.Mvc.ViewPage.Html" />, and <see cref="P:System.Web.Mvc.ViewPage.Url" /> properties.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.MasterLocation">
      <summary>Gets or sets the path of the master view.</summary>
      <returns>The path of the master view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.OnPreInit(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Web.UI.Page.PreInit" /> event at the beginning of page initialization.</summary>
      <param name="e">The event data.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.ProcessRequest(System.Web.HttpContext)">
      <summary>Enables processing of the specified HTTP request by the ASP.NET MVC framework.</summary>
      <param name="context">An object that encapsulates HTTP-specific information about the current HTTP request.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.Render(System.Web.UI.HtmlTextWriter)">
      <summary>Initializes the <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the page content to be rendered.</summary>
      <param name="writer">The object that receives the page content.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.RenderView(System.Web.Mvc.ViewContext)">
      <summary>Renders the view page to the response using the specified view context.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetTextWriter(System.IO.TextWriter)">
      <summary>Sets the text writer that is used to render the view to the response.</summary>
      <param name="textWriter">The writer that is used to render the view to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data dictionary for the associated view.</summary>
      <param name="viewData">A dictionary of data to pass to the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.TempData">
      <summary>Gets the temporary data to pass to the view.</summary>
      <returns>The temporary data to pass to the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Url">
      <summary>Gets or sets the URL of the rendered page.</summary>
      <returns>The URL of the rendered page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewContext">
      <summary>Gets or sets the information that is used to render the view.</summary>
      <returns>The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage.Writer">
      <summary>Gets the text writer that is used to render the view to the response.</summary>
      <returns>The text writer that is used to render the view to the response.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewPage`1">
      <summary>Represents the information that is required in order to render a strongly typed view as a Web Forms page.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper`1" /> object that supports rendering HTML in Ajax scenarios.</summary>
      <returns>The Ajax helper object that is associated with the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that provides support for rendering elements.</summary>
      <returns>The HTML helper object that is associated with the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.InitHelpers">
      <summary>Instantiates and initializes the <see cref="P:System.Web.Mvc.ViewPage`1.Ajax" /> and <see cref="P:System.Web.Mvc.ViewPage`1.Html" /> properties.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.Model">
      <summary>Gets the <see cref="P:System.Web.Mvc.ViewDataDictionary`1.Model" /> property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> object.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data dictionary for the associated view.</summary>
      <param name="viewData">A dictionary of data to pass to the view.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewPage`1.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResult">
      <summary>Represents a class that is used to render a view by using an <see cref="T:System.Web.Mvc.IView" /> instance that is returned by an <see cref="T:System.Web.Mvc.IViewEngine" /> object.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewResult" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResult.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Searches the registered view engines and returns the object that is used to render the view.</summary>
      <returns>The object that is used to render the view.</returns>
      <param name="context">The controller context.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while the method was searching for the view.</exception>
    </member>
    <member name="P:System.Web.Mvc.ViewResult.MasterName">
      <summary>Gets the name of the master view (such as a master page or template) to use when the view is rendered.</summary>
      <returns>The name of the master view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewResultBase">
      <summary>Represents a base class that is used to provide the model to the view and then render the view to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewResultBase" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.ExecuteResult(System.Web.Mvc.ControllerContext)">
      <summary>When called by the action invoker, renders the view to the response.</summary>
      <param name="context">The context that the result is executed in.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="context" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.ViewResultBase.FindView(System.Web.Mvc.ControllerContext)">
      <summary>Returns the <see cref="T:System.Web.Mvc.ViewEngineResult" /> object that is used to render the view.</summary>
      <returns>The view engine.</returns>
      <param name="context">The context.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.Model">
      <summary>Gets the view data model.</summary>
      <returns>The view data model.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.TempData">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.TempDataDictionary" /> object for this result.</summary>
      <returns>The temporary data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.View">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.IView" /> object that is rendered to the response.</summary>
      <returns>The view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewData">
      <summary>Gets or sets the view data <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object for this result.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewEngineCollection">
      <summary>Gets or sets the collection of view engines that are associated with this result.</summary>
      <returns>The collection of view engines.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewResultBase.ViewName">
      <summary>Gets or sets the name of the view to render.</summary>
      <returns>The name of the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewStartPage">
      <summary>Provides an abstract class that can be used to implement a view start (master) page.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewStartPage.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Web.Mvc.ViewStartPage" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.Html">
      <summary>When implemented in a derived class, gets the HTML markup for the view start page.</summary>
      <returns>The HTML markup for the view start page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.Url">
      <summary>When implemented in a derived class, gets the URL for the view start page.</summary>
      <returns>The URL for the view start page.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewStartPage.ViewContext">
      <summary>When implemented in a derived class, gets the view context for the view start page.</summary>
      <returns>The view context for the view start page.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl">
      <summary>Provides a container for <see cref="T:System.Web.Mvc.TemplateInfo" /> objects.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewTemplateUserControl" /> class.</summary>
    </member>
    <member name="T:System.Web.Mvc.ViewTemplateUserControl`1">
      <summary>Provides a container for <see cref="T:System.Web.Mvc.TemplateInfo" /> objects.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewTemplateUserControl`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewTemplateUserControl`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewTemplateUserControl`1.FormattedModelValue">
      <summary>Gets the formatted value.</summary>
      <returns>The formatted value.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewType">
      <summary>Represents the type of a view.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewType" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewType.TypeName">
      <summary>Gets or sets the name of the type.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl">
      <summary>Represents the information that is needed to build a user control.</summary>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewUserControl" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Ajax">
      <summary>Gets the AJAX script for the view.</summary>
      <returns>The AJAX script for the view.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.EnsureViewData">
      <summary>Ensures that view data is added to the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object of the user control if the view data exists.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Html">
      <summary>Gets the HTML for the view.</summary>
      <returns>The HTML for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Model">
      <summary>Gets the model.</summary>
      <returns>The model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.RenderView(System.Web.Mvc.ViewContext)">
      <summary>Renders the view by using the specified view context.</summary>
      <param name="viewContext">The view context.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetTextWriter(System.IO.TextWriter)">
      <summary>Sets the text writer that is used to render the view to the response.</summary>
      <param name="textWriter">The writer that is used to render the view to the response.</param>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view-data dictionary by using the specified view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.TempData">
      <summary>Gets the temporary-data dictionary.</summary>
      <returns>The temporary-data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Url">
      <summary>Gets the URL for the view.</summary>
      <returns>The URL for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewContext">
      <summary>Gets or sets the view context.</summary>
      <returns>The view context.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewData">
      <summary>Gets or sets the view-data dictionary.</summary>
      <returns>The view-data dictionary.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.ViewDataKey">
      <summary>Gets or sets the view-data key.</summary>
      <returns>The view-data key.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl.Writer">
      <summary>Gets the writer that is used to render the view to the response.</summary>
      <returns>The writer that is used to render the view to the response.</returns>
    </member>
    <member name="T:System.Web.Mvc.ViewUserControl`1">
      <summary>Represents the information that is required in order to build a strongly typed user control.</summary>
      <typeparam name="TModel">The type of the model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.ViewUserControl`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Ajax">
      <summary>Gets the AJAX script for the view.</summary>
      <returns>The AJAX script for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Html">
      <summary>Gets the HTML for the view.</summary>
      <returns>The HTML for the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.Model">
      <summary>Gets the model.</summary>
      <returns>A reference to the data model.</returns>
    </member>
    <member name="M:System.Web.Mvc.ViewUserControl`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data for the view.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.ViewUserControl`1.ViewData">
      <summary>Gets or sets the view data.</summary>
      <returns>The view data.</returns>
    </member>
    <member name="T:System.Web.Mvc.VirtualPathProviderViewEngine">
      <summary>Represents an abstract base-class implementation of the <see cref="T:System.Web.Mvc.IViewEngine" /> interface.</summary>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.VirtualPathProviderViewEngine" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaMasterLocationFormats">
      <summary>Gets or sets the area-enabled master location formats.</summary>
      <returns>The area-enabled master location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaPartialViewLocationFormats">
      <summary>Gets or sets the area-enabled partial-view location formats.</summary>
      <returns>The area-enabled partial-view location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.AreaViewLocationFormats">
      <summary>Gets or sets the area-enabled view location formats.</summary>
      <returns>The area-enabled view location formats.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates the specified partial view by using the specified controller context.</summary>
      <returns>A reference to the partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The partial path for the new partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates the specified view by using the controller context, path of the view, and path of the master view.</summary>
      <returns>A reference to the view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The path of the view.</param>
      <param name="masterPath">The path of the master view.</param>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FileExists(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Returns a value that indicates whether the file is in the specified path by using the specified controller context.</summary>
      <returns>true if the file is in the specified path; otherwise, false.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="virtualPath">The virtual path.</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.FileExtensions">
      <summary>Gets or sets the file-name extensions that are used to locate a view.</summary>
      <returns>The file-name extensions that are used to locate a view.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
      <summary>Finds the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="useCache">true to use the cached partial view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="partialViewName" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
      <summary>Finds the specified view by using the specified controller context and master view name.</summary>
      <returns>The page view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewName">The name of the view.</param>
      <param name="masterName">The name of the master view.</param>
      <param name="useCache">true to use the cached view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="controllerContext" /> parameter is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="viewName" /> parameter is null or empty.</exception>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.MasterLocationFormats">
      <summary>Gets or sets the master location formats.</summary>
      <returns>The master location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.PartialViewLocationFormats">
      <summary>Gets or sets the partial-view location formats.</summary>
      <returns>The partial-view location formats.</returns>
    </member>
    <member name="M:System.Web.Mvc.VirtualPathProviderViewEngine.ReleaseView(System.Web.Mvc.ControllerContext,System.Web.Mvc.IView)">
      <summary>Releases the specified view by using the specified controller context.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="view">The view to release.</param>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationCache">
      <summary>Gets or sets the view location cache.</summary>
      <returns>The view location cache.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.ViewLocationFormats">
      <summary>Gets or sets the view location formats.</summary>
      <returns>The view location formats.</returns>
    </member>
    <member name="P:System.Web.Mvc.VirtualPathProviderViewEngine.VirtualPathProvider">
      <summary>Gets or sets the virtual path provider.</summary>
      <returns>The virtual path provider.</returns>
    </member>
    <member name="T:System.Web.Mvc.WebFormView">
      <summary>Represents the information that is needed to build a Web Forms page in ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class using the controller context and view path.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class using the controller context, view path, and the path to the master page.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The path to the master page.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormView" /> class using the controller context, view path, the path to the master page, and a <see cref="T:System.Web.Mvc.IViewPageActivator" /> instance.</summary>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The path to the master page.</param>
      <param name="viewPageActivator">An instance of the view page activator interface.</param>
    </member>
    <member name="P:System.Web.Mvc.WebFormView.MasterPath">
      <summary>Gets or sets the master path.</summary>
      <returns>The master path.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebFormView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
      <summary>Renders the view to the response.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render the view, which includes the controller context, form context, the temporary data, and the view data for the associated view.</param>
      <param name="writer">The text writer object that is used to write HTML output.</param>
      <param name="instance">The view page instance.</param>
    </member>
    <member name="T:System.Web.Mvc.WebFormViewEngine">
      <summary>Represents a view engine that is used to render a Web Forms page to the response.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormViewEngine" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebFormViewEngine" /> class using the specified view page activator.</summary>
      <param name="viewPageActivator">An instance of a class that implements the <see cref="T:System.Web.Mvc.IViewPageActivator" /> interface.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Creates the specified partial view by using the specified controller context.</summary>
      <returns>The partial view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="partialPath">The partial path.</param>
    </member>
    <member name="M:System.Web.Mvc.WebFormViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
      <summary>Creates the specified view by using the specified controller context and the paths of the view and master view.</summary>
      <returns>The view.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="viewPath">The view path.</param>
      <param name="masterPath">The master-view path.</param>
    </member>
    <member name="T:System.Web.Mvc.WebViewPage">
      <summary>Represents the properties and methods that are needed in order to render a view that uses ASP.NET Razor syntax.</summary>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebViewPage" /> class. </summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML using Ajax. </summary>
      <returns>The <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML using Ajax.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.ConfigurePage(System.Web.WebPages.WebPageBase)">
      <summary>Sets the view context and view data for the page.</summary>
      <param name="parentPage">The parent page.</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Context">
      <summary>Gets the <see cref="T:System.Web.HttpContext" /> object that is associated with the page.</summary>
      <returns>The <see cref="T:System.Web.HttpContext" /> object that is associated with the page.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.ExecutePageHierarchy">
      <summary>Runs the page hierarchy for the ASP.NET Razor execution pipeline.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.InitHelpers">
      <summary>Initializes the <see cref="T:System.Web.Mvc.AjaxHelper" />, <see cref="T:System.Web.Mvc.HtmlHelper" />, and <see cref="T:System.Web.Mvc.UrlHelper" /> classes.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.TempData">
      <summary>Gets the temporary data to pass to the view.</summary>
      <returns>The temporary data to pass to the view.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.Url">
      <summary>Gets or sets the URL of the rendered page.</summary>
      <returns>The URL of the rendered page.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewBag">
      <summary>Gets the view bag.</summary>
      <returns>The view bag.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewContext">
      <summary>Gets or sets the information that is used to render the view.</summary>
      <returns>The information that is used to render the view, which includes the form context, the temporary data, and the view data of the associated view.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.WebViewPage`1">
      <summary>Represents the properties and methods that are needed in order to render a view that uses ASP.NET Razor syntax.</summary>
      <typeparam name="TModel">The type of the view data model.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.WebViewPage`1" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Ajax">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML markup using Ajax.</summary>
      <returns>The <see cref="T:System.Web.Mvc.AjaxHelper" /> object that is used to render HTML markup using Ajax.</returns>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Html">
      <summary>Gets or sets the <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</summary>
      <returns>The <see cref="T:System.Web.Mvc.HtmlHelper" /> object that is used to render HTML elements.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.InitHelpers">
      <summary>Initializes the <see cref="T:System.Web.Mvc.AjaxHelper" />, <see cref="T:System.Web.Mvc.HtmlHelper" />, and <see cref="T:System.Web.Mvc.UrlHelper" /> classes.</summary>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.Model">
      <summary>Gets the Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <returns>The Model property of the associated <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</returns>
    </member>
    <member name="M:System.Web.Mvc.WebViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
      <summary>Sets the view data.</summary>
      <param name="viewData">The view data.</param>
    </member>
    <member name="P:System.Web.Mvc.WebViewPage`1.ViewData">
      <summary>Gets or sets a dictionary that contains data to pass between the controller and the view.</summary>
      <returns>A dictionary that contains data to pass between the controller and the view.</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxExtensions">
      <summary>Represents support for ASP.NET AJAX within an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.ActionLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. </summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="actionName">The name of the action method that will handle the request.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element..</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginForm(System.Web.Mvc.AjaxHelper,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.BeginRouteForm(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response using the specified routing information.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper)">
      <summary>Returns an HTML script element that contains a reference to a globalization script that defines the culture information.</summary>
      <returns>A script element whose src attribute is set to the globalization script, as in the following example: &lt;script type="text/javascript"     src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">The AJAX helper object that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.GlobalizationScript(System.Web.Mvc.AjaxHelper,System.Globalization.CultureInfo)">
      <summary>Returns an HTML script element that contains a reference to a globalization script that defines the specified culture information.</summary>
      <returns>An HTML script element whose src attribute is set to the globalization script, as in the following example:&lt;script type="text/javascript"    src="/MvcApplication1/Scripts/Globalization/en-US.js"&gt;&lt;/script&gt;</returns>
      <param name="ajaxHelper">The AJAX helper object that this method extends.</param>
      <param name="cultureInfo">Encapsulates information about the target culture, such as date formats.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cultureInfo" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Object,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Mvc.Ajax.AjaxOptions,System.Object)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route to use to obtain the form post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions)">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxExtensions.RouteLink(System.Web.Mvc.AjaxHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.Ajax.AjaxOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element that contains the virtual path for the specified route values; when the link is clicked, a request is made to the virtual path asynchronously by using JavaScript.</summary>
      <returns>An anchor element.</returns>
      <param name="ajaxHelper">The AJAX helper.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="ajaxOptions">An object that provides options for the asynchronous request.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Ajax.AjaxOptions">
      <summary>Represents option settings for running Ajax scripts in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Ajax.AjaxOptions" /> class.</summary>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Confirm">
      <summary>Gets or sets the message to display in a confirmation window before a request is submitted.</summary>
      <returns>The message to display in a confirmation window.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.HttpMethod">
      <summary>Gets or sets the HTTP request method ("Get" or "Post").</summary>
      <returns>The HTTP request method. The default value is "Post".</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.InsertionMode">
      <summary>Gets or sets the mode that specifies how to insert the response into the target DOM element.</summary>
      <returns>The insertion mode ("InsertAfter", "InsertBefore", or "Replace"). The default value is "Replace".</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementDuration">
      <summary>Gets or sets a value, in milliseconds, that controls the duration of the animation when showing or hiding the loading element.</summary>
      <returns>A value, in milliseconds, that controls the duration of the animation when showing or hiding the loading element.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.LoadingElementId">
      <summary>Gets or sets the id attribute of an HTML element that is displayed while the Ajax function is loading.</summary>
      <returns>The ID of the element that is displayed while the Ajax function is loading.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnBegin">
      <summary>Gets or sets the name of the JavaScript function to call immediately before the page is updated.</summary>
      <returns>The name of the JavaScript function to call before the page is updated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnComplete">
      <summary>Gets or sets the JavaScript function to call when response data has been instantiated but before the page is updated.</summary>
      <returns>The JavaScript function to call when the response data has been instantiated.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnFailure">
      <summary>Gets or sets the JavaScript function to call if the page update fails.</summary>
      <returns>The JavaScript function to call if the page update fails.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.OnSuccess">
      <summary>Gets or sets the JavaScript function to call after the page is successfully updated.</summary>
      <returns>The JavaScript function to call after the page is successfully updated.</returns>
    </member>
    <member name="M:System.Web.Mvc.Ajax.AjaxOptions.ToUnobtrusiveHtmlAttributes">
      <summary>Returns the Ajax options as a collection of HTML attributes to support unobtrusive JavaScript.</summary>
      <returns>The Ajax options as a collection of HTML attributes to support unobtrusive JavaScript.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.UpdateTargetId">
      <summary>Gets or sets the ID of the DOM element to update by using the response from the server.</summary>
      <returns>The ID of the DOM element to update.</returns>
    </member>
    <member name="P:System.Web.Mvc.Ajax.AjaxOptions.Url">
      <summary>Gets or sets the URL to make the request to.</summary>
      <returns>The URL to make the request to.</returns>
    </member>
    <member name="T:System.Web.Mvc.Ajax.InsertionMode">
      <summary>Enumerates the AJAX script insertion modes.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.Replace">
      <summary>Replace the element.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertBefore">
      <summary>Insert before the element.</summary>
    </member>
    <member name="F:System.Web.Mvc.Ajax.InsertionMode.InsertAfter">
      <summary>Insert after the element.</summary>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncActionDescriptor">
      <summary>Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncActionDescriptor" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Returns the result of an asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncActionDescriptor.Execute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Executes the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>The result of executing the asynchronous action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncControllerActionInvoker">
      <summary>Represents a class that is responsible for invoking the action methods of an asynchronous controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncControllerActionInvoker" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, action name, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethod(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, action descriptor, parameters, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters for the asynchronous action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.BeginInvokeActionMethodWithFilters(System.Web.Mvc.ControllerContext,System.Collections.Generic.IList{System.Web.Mvc.IActionFilter},System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Invokes the asynchronous action method by using the specified controller context, filters, action descriptor, parameters, callback method, and state.</summary>
      <returns>An object that contains the result of an asynchronous operation.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="filters">The filters.</param>
      <param name="actionDescriptor">The action descriptor.</param>
      <param name="parameters">The parameters for the asynchronous action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(System.IAsyncResult)">
      <summary>Cancels the action.</summary>
      <returns>true if the action was canceled; otherwise, false.</returns>
      <param name="asyncResult">The user-defined object that qualifies or contains information about an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncControllerActionInvoker.GetControllerDescriptor(System.Web.Mvc.ControllerContext)">
      <summary>Returns the controller descriptor.</summary>
      <returns>The controller descriptor.</returns>
      <param name="controllerContext">The controller context.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.AsyncManager">
      <summary>Provides asynchronous operations for the <see cref="T:System.Web.Mvc.AsyncController" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncManager" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.#ctor(System.Threading.SynchronizationContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.AsyncManager" /> class using the synchronization context.</summary>
      <param name="syncContext">The synchronization context.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Finish">
      <summary>Notifies ASP.NET that all asynchronous operations are complete.</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.AsyncManager.Finished">
      <summary>Occurs when the <see cref="M:System.Web.Mvc.Async.AsyncManager.Finish" /> method is called.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.OutstandingOperations">
      <summary>Gets the number of outstanding operations.</summary>
      <returns>The number of outstanding operations.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Parameters">
      <summary>Gets the parameters that were passed to the asynchronous completion method.</summary>
      <returns>The parameters that were passed to the asynchronous completion method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.AsyncManager.Sync(System.Action)">
      <summary>Executes a callback in the current synchronization context.</summary>
      <param name="action">The asynchronous action.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.AsyncManager.Timeout">
      <summary>Gets or sets the asynchronous timeout value, in milliseconds.</summary>
      <returns>The asynchronous timeout value, in milliseconds.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncActionInvoker">
      <summary>Defines the interface for an action invoker, which is used to invoke an asynchronous action in response to an HTTP request.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.BeginInvokeAction(System.Web.Mvc.ControllerContext,System.String,System.AsyncCallback,System.Object)">
      <summary>Invokes the specified action.</summary>
      <returns>The status of the asynchronous result.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the asynchronous action.</param>
      <param name="callback">The callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncActionInvoker.EndInvokeAction(System.IAsyncResult)">
      <summary>Cancels the asynchronous action.</summary>
      <returns>true if the asynchronous method could be canceled; otherwise, false.</returns>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncController">
      <summary>Defines the methods that are required for an asynchronous controller.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.BeginExecute(System.Web.Routing.RequestContext,System.AsyncCallback,System.Object)">
      <summary>Executes the specified request context.</summary>
      <returns>The status of the asynchronous operation.</returns>
      <param name="requestContext">The request context.</param>
      <param name="callback">The asynchronous callback method.</param>
      <param name="state">The state.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.IAsyncController.EndExecute(System.IAsyncResult)">
      <summary>Ends the asynchronous operation.</summary>
      <param name="asyncResult">The asynchronous result.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.IAsyncManagerContainer">
      <summary>Provides a container for the asynchronous manager object.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.IAsyncManagerContainer.AsyncManager">
      <summary>Gets the asynchronous manager object.</summary>
      <returns>The asynchronous manager object.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.OperationCounter">
      <summary>Provides a container that maintains a count of pending asynchronous operations.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.OperationCounter" /> class.</summary>
    </member>
    <member name="E:System.Web.Mvc.Async.OperationCounter.Completed">
      <summary>Occurs when an asynchronous method completes.</summary>
    </member>
    <member name="P:System.Web.Mvc.Async.OperationCounter.Count">
      <summary>Gets the operation count.</summary>
      <returns>The operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement">
      <summary>Reduces the operation count by 1.</summary>
      <returns>The updated operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Decrement(System.Int32)">
      <summary>Reduces the operation count by the specified value.</summary>
      <returns>The updated operation count.</returns>
      <param name="value">The number of operations to reduce the count by.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment">
      <summary>Increments the operation count by one.</summary>
      <returns>The updated operation count.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.OperationCounter.Increment(System.Int32)">
      <summary>Increments the operation count by the specified value.</summary>
      <returns>The updated operation count.</returns>
      <param name="value">The number of operations to increment the count by.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor">
      <summary>Provides information about an asynchronous action method, such as its name, controller, parameters, attributes, and filters.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.#ctor(System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.String,System.Web.Mvc.ControllerDescriptor)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor" /> class.</summary>
      <param name="asyncMethodInfo">An object that contains information about the method that begins the asynchronous operation (the method whose name ends with "Asynch").</param>
      <param name="completedMethodInfo">An object that contains information about the completion method (method whose name ends with "Completed").</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerDescriptor">The controller descriptor.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ActionName">
      <summary>Gets the name of the action method.</summary>
      <returns>The name of the action method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.AsyncMethodInfo">
      <summary>Gets the method information for the asynchronous action method.</summary>
      <returns>The method information for the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.BeginExecute(System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
      <summary>Begins running the asynchronous action method by using the specified parameters and controller context.</summary>
      <returns>An object that contains the result of an asynchronous call.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="parameters">The parameters of the action method.</param>
      <param name="callback">The callback method.</param>
      <param name="state">An object that contains information to be used by the callback method. This parameter can be null.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.CompletedMethodInfo">
      <summary>Gets the method information for the asynchronous completion method.</summary>
      <returns>The method information for the asynchronous completion method.</returns>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.ControllerDescriptor">
      <summary>Gets the controller descriptor for the asynchronous action method.</summary>
      <returns>The controller descriptor for the asynchronous action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.EndExecute(System.IAsyncResult)">
      <summary>Returns the result of an asynchronous operation.</summary>
      <returns>The result of an asynchronous operation.</returns>
      <param name="asyncResult">An object that represents the status of an asynchronous operation.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns an array of custom attributes that are defined for this member, identified by type.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes of the specified type exist.</returns>
      <param name="attributeType">The type of the custom attributes to return.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetParameters">
      <summary>Returns the parameters of the action method.</summary>
      <returns>The parameters of the action method.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.GetSelectors">
      <summary>Returns the action-method selectors.</summary>
      <returns>The action-method selectors.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Determines whether one or more instances of the specified attribute type are defined for the action member.</summary>
      <returns>true if an attribute of type that is represented by <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncActionDescriptor.UniqueId">
      <summary>Gets the lazy initialized unique ID of the instance of this class.</summary>
      <returns>The lazy initialized unique ID of the instance of this class.</returns>
    </member>
    <member name="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor">
      <summary>Encapsulates information that describes an asynchronous controller, such as its name, type, and actions.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor" /> class.</summary>
      <param name="controllerType">The type of the controller.</param>
    </member>
    <member name="P:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.ControllerType">
      <summary>Gets the type of the controller.</summary>
      <returns>The type of the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.FindAction(System.Web.Mvc.ControllerContext,System.String)">
      <summary>Finds an action method by using the specified name and controller context.</summary>
      <returns>The information about the action method.</returns>
      <param name="controllerContext">The controller context.</param>
      <param name="actionName">The name of the action.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCanonicalActions">
      <summary>Returns a list of action method descriptors in the controller.</summary>
      <returns>A list of action method descriptors in the controller.</returns>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Boolean)">
      <summary>Returns custom attributes that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Returns custom attributes of a specified type that are defined for this member, excluding named attributes.</summary>
      <returns>An array of custom attributes, or an empty array if no custom attributes exist.</returns>
      <param name="attributeType">The type of the custom attributes.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.ReflectedAsyncControllerDescriptor.IsDefined(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether one or more instances of the specified custom attribute are defined for this member.</summary>
      <returns>true if an attribute of the type represented by <paramref name="attributeType" /> is defined for this member; otherwise, false.</returns>
      <param name="attributeType">The type of the custom attribute.</param>
      <param name="inherit">true to look up the hierarchy chain for the inherited custom attribute; otherwise, false.</param>
    </member>
    <member name="T:System.Web.Mvc.Async.SynchronousOperationException">
      <summary>Represents an exception that occurred during the synchronous processing of an HTTP request in an ASP.NET MVC application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using a system-supplied message.</summary>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using the specified message.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Web.Mvc.Async.SynchronousOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Async.SynchronousOperationException" /> class using a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Web.Mvc.Html.ChildActionExtensions">
      <summary>Represents support for calling child action methods and rendering the result inline in a parent view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Invokes the specified child action method and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Invokes the specified child action method with the specified parameters and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Invokes the specified child action method using the specified controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.Action(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and returns the result as an HTML string.</summary>
      <returns>The child action result as an HTML string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method to invoke.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Invokes the specified child action method and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Invokes the specified child action method using the specified controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">An object that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="controllerName">The name of the controller that contains the action method.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ChildActionExtensions.RenderAction(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Invokes the specified child action method using the specified parameters and renders the result inline in the parent view.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the child action method to invoke.</param>
      <param name="routeValues">A dictionary that contains the parameters for a route. You can use <paramref name="routeValues" /> to provide the parameters that are bound to the action method parameters. The <paramref name="routeValues" /> parameter is merged with the original route values and overrides them.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="htmlHelper" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="actionName" /> parameter is null or empty.</exception>
      <exception cref="T:System.InvalidOperationException">The required virtual path data cannot be found.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayExtensions">
      <summary>Represents support for rendering object values as HTML.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by a string expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by a string expression, using additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template and an HTML field ID.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.Display(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the expression, using the specified template, HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns HTML markup for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a string that contains each property value in the object that is represented by the specified expression, using additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns a string that contains each property value in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" />, using the specified template.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns a string that contains each property value in the object that is represented by the specified expression, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" />, using the specified template and an HTML field ID.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression, using the template, an HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns HTML markup for each property in the model.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns HTML markup for each property in the model, using additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the model using the specified template.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the specified template and additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns HTML markup for each property in the model using the specified template and HTML field ID.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns HTML markup for each property in the model, using the specified template, an HTML field ID, and additional view data.</summary>
      <returns>The HTML markup for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template that is used to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.DisplayTextExtensions">
      <summary>Provides a way to render object values as HTML.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayText(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression.</summary>
      <returns>The HTML markup for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="name">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.DisplayTextExtensions.DisplayTextFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns HTML markup for each property in the object that is represented by the specified expression.</summary>
      <returns>The HTML markup for each property.zz 12/29/2010 1:25:49 PM</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TResult">The type of the result.</typeparam>
    </member>
    <member name="T:System.Web.Mvc.Html.EditorExtensions">
      <summary>Represents support for the HTML input element in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and HTML field name.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.Editor(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression, using the specified template.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String)">
      <summary>Returns an HTML input element for each property in the object that is represented by the <see cref="T:System.Linq.Expressions.Expression" /> expression, using the specified template and HTML field name.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the object that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an HTML input element for each property in the model.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML input element for each property in the model, using the specified template.</summary>
      <returns>An HTML input element for each property in the model and in the specified template.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using the specified template and additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an HTML input element for each property in the model, using the specified template name and HTML field name.</summary>
      <returns>An HTML input element for each property in the model and in the named template.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.EditorExtensions.EditorForModel(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an HTML input element for each property in the model, using the template name, HTML field name, and additional view data.</summary>
      <returns>An HTML input element for each property in the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="templateName">The name of the template to use to render the object.</param>
      <param name="htmlFieldName">A string that is used to disambiguate the names of HTML input elements that are rendered for properties that have the same name.</param>
      <param name="additionalViewData">An anonymous object that can contain additional view data that will be merged into the <see cref="T:System.Web.Mvc.ViewDataDictionary`1" /> instance that is created for the template.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.FormExtensions">
      <summary>Represents support for HTML in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag. </returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="actionName">The name of the action method.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by an action method.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. This object is typically created by using object initializer syntax.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.FormMethod,System.Object)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Mvc.FormMethod,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeName">The name of the route to use to obtain the form-post URL.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
      <param name="method">The HTTP method for processing the form, either GET or POST.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.BeginRouteForm(System.Web.Mvc.HtmlHelper,System.Web.Routing.RouteValueDictionary)">
      <summary>Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target.</summary>
      <returns>An opening &lt;form&gt; tag.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="routeValues">An object that contains the parameters for a route</param>
    </member>
    <member name="M:System.Web.Mvc.Html.FormExtensions.EndForm(System.Web.Mvc.HtmlHelper)">
      <summary>Renders the closing &lt;/form&gt; tag to the response. </summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.InputExtensions">
      <summary>Represents support for HTML input controls in an application.12/23/2010 12:04:24 PM zz</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a check box input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and a value to indicate whether the check box is selected.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, a value to indicate whether the check box is selected, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Boolean,System.Object)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, a value that indicates whether the check box is selected, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="isChecked">true to select the check box; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a check box input element by using the specified HTML helper, the name of the form field, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "checkbox".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.CheckBoxFor``1(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Object)">
      <summary>Returns a check box input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "checkbox" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a hidden input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Hidden(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the hidden input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.HiddenFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML hidden input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "hidden" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a password input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.Password(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "password".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the password input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.PasswordFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a password input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "password" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Boolean,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="isChecked">true to select the radio button; otherwise, false.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButton(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a radio button input element that is used to present mutually exclusive options.</summary>
      <returns>An input element whose type attribute is set to "radio".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.RadioButtonFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object,System.Object)">
      <summary>Returns a radio button input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "radio" for each property in the object that is represented by the specified expression, using the specified HTML attributes.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="value">If this radio button is selected, the value of the radio button that is submitted when the form is posted. If the value of the selected radio button in the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> or the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object matches this value, this radio button is selected.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a text input element by using the specified HTML helper and the name of the form field.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, and the value.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBox(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes.</summary>
      <returns>An input element whose type attribute is set to "text".</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field and the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> key that is used to look up the value.</param>
      <param name="value">The value of the text input element. If this value is null, the value of the element is retrieved from the <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object. If no value exists there, the value is retrieved from the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.InputExtensions.TextBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns a text input element for each property in the object that is represented by the specified expression, using the specified HTML attributes.</summary>
      <returns>An HTML input element whose type attribute is set to "text" for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentException">The <paramref name="expression" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.LabelExtensions">
      <summary>Represents support for the HTML label element in an ASP.NET MVC view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the specified expression.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.Label(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <returns>Returns <see cref="T:System.Web.Mvc.MvcHtmlString" />.</returns>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <returns>An HTML label element and the property name of the property that is represented by the expression.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the property to display.</param>
      <param name="labelText">The label text.</param>
      <typeparam name="TModel">The  type of the model.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an HTML label element and the property name of the property that is represented by the model.</summary>
      <returns>An HTML label element and the property name of the property that is represented by the model.</returns>
      <param name="html">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.LabelExtensions.LabelForModel(System.Web.Mvc.HtmlHelper,System.String)">
      <returns>Returns <see cref="T:System.Web.Mvc.MvcHtmlString" />.</returns>
    </member>
    <member name="T:System.Web.Mvc.Html.LinkExtensions">
      <summary>Represents support for HTML links in an application.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. The attributes are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="controllerName">The name of the controller.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.ActionLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="actionName">The name of the action.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route. The parameters are retrieved through reflection by examining the properties of the object. The object is typically created by using object initializer syntax.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.String,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="protocol">The protocol for the URL, such as "http" or "https".</param>
      <param name="hostName">The host name for the URL.</param>
      <param name="fragment">The URL fragment name (the anchor name).</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeName">The name of the route that is used to return a virtual path.</param>
      <param name="routeValues">An object that contains the parameters for a route. </param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary)">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.LinkExtensions.RouteLink(System.Web.Mvc.HtmlHelper,System.String,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an anchor element (a element) that contains the virtual path of the specified action.</summary>
      <returns>An anchor element (a element).</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="linkText">The inner text of the anchor element.</param>
      <param name="routeValues">An object that contains the parameters for a route.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="linkText" /> parameter is null or empty.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.MvcForm">
      <summary>Represents an HTML form element in an MVC view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.HttpResponseBase)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class using the specified HTTP response object.</summary>
      <param name="httpResponse">The HTTP response object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="httpResponse " />parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.#ctor(System.Web.Mvc.ViewContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class using the specified view context.</summary>
      <param name="viewContext">An object that encapsulates the information that is required in order to render a view.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="viewContext" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose">
      <summary>Releases all resources that are used by the current instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.Dispose(System.Boolean)">
      <summary>Releases unmanaged and, optionally, managed resources used by the current instance of the <see cref="T:System.Web.Mvc.Html.MvcForm" /> class.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.MvcForm.EndForm">
      <summary>Ends the form and disposes of all form resources.</summary>
    </member>
    <member name="T:System.Web.Mvc.Html.PartialExtensions">
      <summary>Represents the functionality to render a partial view as an HTML-encoded string.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
      <param name="model">The model for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model for the partial view.</param>
      <param name="viewData">The view data dictionary for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.PartialExtensions.Partial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view as an HTML-encoded string.</summary>
      <returns>The partial view that is rendered as an HTML-encoded string.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="partialViewName">The name of the partial view to render.</param>
      <param name="viewData">The view data dictionary for the partial view.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.RenderPartialExtensions">
      <summary>Provides support for rendering a partial view.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Renders the specified partial view by using the specified HMTL helper.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Renders the specified partial view, passing it a copy of the current <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object, but with the Model property set to the specified model.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Object,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view, replacing the partial view's ViewData property with the specified <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object and setting the Model property of the view data to the specified model.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="model">The model for the partial view.</param>
      <param name="viewData">The view data for the partial view.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(System.Web.Mvc.HtmlHelper,System.String,System.Web.Mvc.ViewDataDictionary)">
      <summary>Renders the specified partial view, replacing its ViewData property with the specified <see cref="T:System.Web.Mvc.ViewDataDictionary" /> object.</summary>
      <param name="htmlHelper">The HTML helper.</param>
      <param name="partialViewName">The name of the partial view.</param>
      <param name="viewData">The view data.</param>
    </member>
    <member name="T:System.Web.Mvc.Html.SelectExtensions">
      <summary>Represents support for making selections in a list.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper and the name of the form field.</summary>
      <returns>An HTML select element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and an option label.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownList(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns a single-selection select element using the specified HTML helper, the name of the form field, and an option label.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="optionLabel">The text for a default empty item. This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and option label.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.DropDownListFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.String,System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items, option label, and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the value.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns a multi-select select element using the specified HTML helper and the name of the form field.</summary>
      <returns>An HTML select element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HMTL attributes.</summary>
      <returns>An HTML select element with an option subelement for each item in the list..</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBox(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items.</summary>
      <returns>An HTML select element with an option subelement for each item in the list..</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="name" /> parameter is null or empty.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression and using the specified list items.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.SelectExtensions.ListBoxFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEnumerable{System.Web.Mvc.SelectListItem},System.Object)">
      <summary>Returns an HTML select element for each property in the object that is represented by the specified expression using the specified list items and HTML attributes.</summary>
      <returns>An HTML select element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to display.</param>
      <param name="selectList">A collection of <see cref="T:System.Web.Mvc.SelectListItem" /> objects that are used to populate the drop-down list.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.TextAreaExtensions">
      <summary>Represents support for HTML textarea controls.</summary>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns the specified textarea element by using the specified HTML helper and the name of the form field.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper and HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the text content.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Int32,System.Int32,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextArea(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes.</summary>
      <returns>The textarea element.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="name">The name of the form field to return.</param>
      <param name="value">The text content.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes to set for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Int32,System.Int32,System.Object)">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes and the number of rows and columns.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="rows">The number of rows.</param>
      <param name="columns">The number of columns.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.TextAreaExtensions.TextAreaFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Object)">
      <summary>Returns an HTML textarea element for each property in the object that is represented by the specified expression using the specified HTML attributes.</summary>
      <returns>An HTML textarea element for each property in the object that is represented by the expression.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes to set for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="expression" /> parameter is null.</exception>
    </member>
    <member name="T:System.Web.Mvc.Html.ValidationExtensions">
      <summary>Provides support for validating the input from an HTML form.</summary>
    </member>
    <member name="P:System.Web.Mvc.Html.ValidationExtensions.ResourceClassKey">
      <summary>Gets or sets the name of the resource file (class key) that contains localized string values.</summary>
      <returns>The name of the resource file (class key).</returns>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.Validate(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Retrieves the validation metadata for the specified model and applies each rule to the data field.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="modelName" /> parameter is null.</exception>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidateFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Retrieves the validation metadata for the specified model and applies each rule to the data field.</summary>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessage(System.Web.Mvc.HtmlHelper,System.String,System.String,System.Object)">
      <summary>Displays a validation message if an error exists for the specified field in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="modelName">The name of the property or model object that is being validated.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationMessageFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Object)">
      <summary>Returns the HTML markup for a validation-error message for each data field that is represented by the specified expression, using the specified message and HTML attributes.</summary>
      <returns>If the property or object is valid, an empty string; otherwise, a span element that contains an error message.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="expression">An expression that identifies the object that contains the properties to render.</param>
      <param name="validationMessage">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
      <typeparam name="TModel">The type of the model.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.Boolean,System.String,System.Object)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object and optionally displays only model-level errors.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="excludePropertyErrors">true to have the summary display model-level errors only, or false to have the summary display all errors.</param>
      <param name="message">The message to display with the validation summary.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String)">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HMTL helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Returns an unordered list (ul element) of validation messages that are in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">A dictionary that contains the HTML attributes for the element.</param>
    </member>
    <member name="M:System.Web.Mvc.Html.ValidationExtensions.ValidationSummary(System.Web.Mvc.HtmlHelper,System.String,System.Object)">
      <summary>Returns an unordered list (ul element) of validation messages in the <see cref="T:System.Web.Mvc.ModelStateDictionary" /> object.</summary>
      <returns>A string that contains an unordered list (ul element) of validation messages.</returns>
      <param name="htmlHelper">The HTML helper instance that this method extends.</param>
      <param name="message">The message to display if the specified field contains an error.</param>
      <param name="htmlAttributes">An object that contains the HTML attributes for the element. </param>
    </member>
    <member name="T:System.Web.Mvc.Razor.ModelSpan">
      <summary>Provides a model-aware <see cref="T:System.Web.Razor.Parser.SyntaxTree.Span" /> class for ASP.NET MVC.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.ModelSpan.#ctor(System.Web.Razor.Text.SourceLocation,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Razor.ModelSpan" /> class.</summary>
      <param name="start">The start of the span.</param>
      <param name="content">The content.</param>
      <param name="modelTypeName">The type name of the model.</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.ModelSpan.Equals(System.Object)">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Web.Mvc.Razor.ModelSpan" /> object is identical to the specified object.</summary>
      <returns>true if the current <see cref="T:System.Web.Mvc.Razor.ModelSpan" /> object is identical to the specified object; otherwise, false.</returns>
      <param name="obj">The model span object.</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.ModelSpan.GetHashCode">
      <summary>Returns the hash code of the <see cref="T:System.Web.Mvc.Razor.ModelSpan" /> object.</summary>
      <returns>The hash code of the <see cref="T:System.Web.Mvc.Razor.ModelSpan" /> object.</returns>
    </member>
    <member name="P:System.Web.Mvc.Razor.ModelSpan.ModelTypeName">
      <summary>Gets the type name of the model.</summary>
      <returns>The type name of the model.</returns>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcCSharpRazorCodeGenerator">
      <summary>Compiles ASP.NET Razor views into classes.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeGenerator.#ctor(System.String,System.String,System.String,System.Web.Razor.RazorEngineHost)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Razor.MvcCSharpRazorCodeGenerator" /> class.</summary>
      <param name="className">The class name.</param>
      <param name="rootNamespaceName">The root namespace.</param>
      <param name="sourceFileName">The name of the source file.</param>
      <param name="host">The ASP.NET Razor engine host.</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeGenerator.TryVisitSpecialSpan(System.Web.Razor.Parser.SyntaxTree.Span)">
      <summary>Returns a value that indicates whether the specified model span is an instance of <see cref="T:System.Web.Mvc.Razor.ModelSpan" />.</summary>
      <returns>true if the value of the <paramref name="span" /> parameter is an instance of <see cref="T:System.Web.Mvc.Razor.ModelSpan" />; otherwise, false.</returns>
      <param name="span">The model span.</param>
    </member>
    <member name="T:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser"></member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.#ctor"></member>
    <member name="M:System.Web.Mvc.Razor.MvcCSharpRazorCodeParser.ParseInheritsStatement(System.Web.Razor.Parser.CodeBlockInfo)"></member>
    <member name="T:System.Web.Mvc.Razor.MvcVBRazorCodeGenerator">
      <summary>Compiles ASP.NET Razor views into classes.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeGenerator.#ctor(System.String,System.String,System.String,System.Web.Razor.RazorEngineHost)"></member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeGenerator.TryVisitSpecialSpan(System.Web.Razor.Parser.SyntaxTree.Span)"></member>
    <member name="T:System.Web.Mvc.Razor.MvcVBRazorCodeParser">
      <summary>Extends the VBCodeParser class by adding support for the @model keyword.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Razor.MvcVBRazorCodeParser" /> class.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcVBRazorCodeParser.ParseInheritsStatement(System.Web.Razor.Parser.CodeBlockInfo)"></member>
    <member name="T:System.Web.Mvc.Razor.MvcWebPageRazorHost">
      <summary>Configures the ASP.NET Razor parser and code generator for a specified file.</summary>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Web.Mvc.Razor.MvcWebPageRazorHost" /> class. </summary>
      <param name="virtualPath">The virtual path of the ASP.NET Razor file.</param>
      <param name="physicalPath">The physical path of the ASP.NET Razor file.</param>
    </member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.DecorateCodeGenerator(System.Web.Razor.Generator.RazorCodeGenerator)"></member>
    <member name="M:System.Web.Mvc.Razor.MvcWebPageRazorHost.DecorateCodeParser(System.Web.Razor.Parser.ParserBase)"></member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\DBSchema\code\DBSchemaTool\Resources\Usage.xml ===
﻿<NamedArgParser xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="urn:namedargparser">
  <Usage>
    <Line>Usage:</Line>
    <Line></Line>
    <Line>  Option 1:</Line>
    <Line>    Builds the database schema and saves it to file</Line>
    <Line></Line>
    <Line>    /server:&lt;ServerName&gt;</Line>
    <Line>      [required] the SQL server to query for the schema</Line>
    <Line></Line>
    <Line>    /database:&lt;DatabaseName&gt;</Line>
    <Line>      [required] the SQL database to query for the schema</Line>
    <Line></Line>
    <Line>    /uid:&lt;UserName&gt;</Line>
    <Line>      [optional] the user name for SQL authentication</Line>
    <Line></Line>
    <Line>    /pwd:&lt;Password&gt;</Line>
    <Line>      [optional] the password for SQL authentication</Line>
    <Line></Line>
    <Line>    /config:&lt;FileName&gt;</Line>
    <Line>      [optional] the xml file to help configure the schema</Line>
    <Line></Line>
    <Line>    /saveschema[:&lt;FileNamePrefix&gt;;...]</Line>
    <Line>      [required] saves the schema to file with the optional file name prefix</Line>
    <Line></Line>
    <Line>    /timeout[:&lt;Timeout&gt;;...]</Line>
    <Line>      [optional] the sql command timeout value for each database query</Line>
    <Line></Line>
    <Line></Line>
    <Line>  Option 2:</Line>
    <Line>     Validates a data xml file against the provided schema</Line>
    <Line></Line>
    <Line>    /xsd:&lt;FileName&gt;</Line>
    <Line>      [required] the schema xsd file</Line>
    <Line></Line>
    <Line>    /validate:&lt;FileName1&gt;[;&lt;FileName2&gt;;...]</Line>
    <Line>      [required] a semi-colon delimited list of data xml files to validate</Line>
    <Line>    /validate:@&lt;FileName&gt;</Line>
    <Line>      [required] a file name containing the list of data xml files to validate</Line>
    <Line></Line>
    <Line></Line>
    <Line>  Option 3:</Line>
    <Line>     Validates a data xml file against the database schema</Line>
    <Line></Line>
    <Line>    /server:&lt;ServerName&gt;</Line>
    <Line>      [required] the SQL server to query for the schema</Line>
    <Line></Line>
    <Line>    /database:&lt;DatabaseName&gt;</Line>
    <Line>      [required] the SQL database to query for the schema</Line>
    <Line></Line>
    <Line>    /uid:&lt;UserName&gt;</Line>
    <Line>      [optional] the user name for SQL authentication</Line>
    <Line></Line>
    <Line>    /pwd:&lt;Password&gt;</Line>
    <Line>      [optional] the password for SQL authentication</Line>
    <Line></Line>
    <Line>    /config:&lt;FileName&gt;</Line>
    <Line>      [optional] the xml file to help configure the schema</Line>
    <Line></Line>
    <Line>    /validate:&lt;FileName1&gt;[;&lt;FileName2&gt;;...]</Line>
    <Line>      [required] a semi-colon delimited list of data xml files to validate</Line>
    <Line>    /validate:@&lt;FileName&gt;</Line>
    <Line>      [required] a file name containing the list of data xml files to validate</Line>
    <Line></Line>
    <Line>    /saveschema[:&lt;FileNamePrefix&gt;;...]</Line>
    <Line>      [optional] saves the schema to file with the optional file name prefix</Line>
    <Line></Line>
    <Line>    /timeout[:&lt;Timeout&gt;;...]</Line>
    <Line>      [optional] the sql command timeout value for each database query</Line>
    <Line></Line>
    <Line></Line>
    <Line>  Option 4:</Line>
    <Line>     Validates a data xml file against the database schema</Line>
    <Line>     Propagates the data xml file to the database</Line>
    <Line></Line>
    <Line>    /server:&lt;ServerName&gt;</Line>
    <Line>      [required] the SQL server to query for the schema</Line>
    <Line></Line>
    <Line>    /database:&lt;DatabaseName&gt;</Line>
    <Line>      [required] the SQL database to query for the schema</Line>
    <Line></Line>
    <Line>    /uid:&lt;UserName&gt;</Line>
    <Line>      [optional] the user name for SQL authentication</Line>
    <Line></Line>
    <Line>    /pwd:&lt;Password&gt;</Line>
    <Line>      [optional] the password for SQL authentication</Line>
    <Line></Line>
    <Line>    /config:&lt;FileName&gt;</Line>
    <Line>      [optional] the xml file to help configure the schema</Line>
    <Line></Line>
    <Line>    /execute:&lt;FileName1&gt;[;&lt;FileName2&gt;;...]</Line>
    <Line>      [required] a semi-colon delimited list of data xml files to prop</Line>
    <Line>    /execute:@&lt;FileName&gt;</Line>
    <Line>      [required] a file name containing the list of data xml files to prop</Line>
    <Line></Line>
    <Line>    /timeout[:&lt;Timeout&gt;;...]</Line>
    <Line>      [optional] the sql command timeout value for each transaction</Line>
    <Line></Line>
    <Line>    /saveschema[:&lt;FileNamePrefix&gt;;...]</Line>
    <Line>      [optional] saves the schema to file with the optional file name prefix</Line>
    <Line></Line>
    <Line></Line>
    <Line>  Option 5:</Line>
    <Line>     Selects data from the database and saves to an xml file</Line>
    <Line></Line>
    <Line>    /server:&lt;ServerName&gt;</Line>
    <Line>      [required] the SQL server to query for the schema</Line>
    <Line></Line>
    <Line>    /database:&lt;DatabaseName&gt;</Line>
    <Line>      [required] the SQL database to query for the schema</Line>
    <Line></Line>
    <Line>    /uid:&lt;UserName&gt;</Line>
    <Line>      [optional] the user name for SQL authentication</Line>
    <Line></Line>
    <Line>    /pwd:&lt;Password&gt;</Line>
    <Line>      [optional] the password for SQL authentication</Line>
    <Line></Line>
    <Line>    /config:&lt;FileName&gt;</Line>
    <Line>      [optional] the xml file to help configure the schema</Line>
    <Line></Line>
    <Line>    /type:&lt;TypeName1&gt;[;&lt;TypeName2&gt;;...]</Line>
    <Line>      [optional] a semi-colon delimited list of types to select</Line>
    <Line>    /type:@&lt;FileName&gt;</Line>
    <Line>      [optional] a file name containing the list of types to select</Line>
    <Line>    /search:&lt;FileName&gt;</Line>
    <Line>      [optional] a file name containing search conditions to select</Line>
    <Line></Line>
    <Line>    /select:&lt;FileName&gt;</Line>
    <Line>      [required] the data xml file to save the data to</Line>
    <Line></Line>
    <Line>    /timeout[:&lt;Timeout&gt;;...]</Line>
    <Line>      [optional] the sql command timeout value for each transaction</Line>
    <Line></Line>
    <Line>    /includeNullElements</Line>
    <Line>      [optional] includes null elements in the data xml file</Line>
    <Line></Line>
    <Line>    /saveschema[:&lt;FileNamePrefix&gt;;...]</Line>
    <Line>      [optional] saves the schema to file with the optional file name prefix</Line>
    <Line></Line>
    <Line></Line>
    <Line>  Option 6:</Line>
    <Line>     Deletes data from the database</Line>
    <Line></Line>
    <Line>    /server:&lt;ServerName&gt;</Line>
    <Line>      [required] the SQL server to query for the schema</Line>
    <Line></Line>
    <Line>    /database:&lt;DatabaseName&gt;</Line>
    <Line>      [required] the SQL database to query for the schema</Line>
    <Line></Line>
    <Line>    /uid:&lt;UserName&gt;</Line>
    <Line>      [optional] the user name for SQL authentication</Line>
    <Line></Line>
    <Line>    /pwd:&lt;Password&gt;</Line>
    <Line>      [optional] the password for SQL authentication</Line>
    <Line></Line>
    <Line>    /config:&lt;FileName&gt;</Line>
    <Line>      [optional] the xml file to help configure the schema</Line>
    <Line></Line>
    <Line>    /delete</Line>
    <Line>      [required]</Line>
    <Line></Line>
    <Line>    /xml:&lt;FileName1&gt;[;&lt;FileName2&gt;;...]</Line>
    <Line>      [optional] a semi-colon delimited list of data xml files to delete</Line>
    <Line>    /xml:@&lt;FileName&gt;</Line>
    <Line>      [optional] a file name containing the list of data xml files to delete</Line>
    <Line></Line>
    <Line>    or:</Line>
    <Line></Line>
    <Line>    /type:&lt;TypeName1&gt;[;&lt;TypeName2&gt;;...]</Line>
    <Line>      [optional] a semi-colon delimited list of types to delete</Line>
    <Line>    /search:&lt;FileName&gt;</Line>
    <Line>      [optional] a file name containing search conditions to delete</Line>
    <Line></Line>
    <Line>    /timeout[:&lt;Timeout&gt;;...]</Line>
    <Line>      [optional] the sql command timeout value for each transaction</Line>
    <Line></Line>
    <Line>    /saveschema[:&lt;FileNamePrefix&gt;;...]</Line>
    <Line>      [optional] saves the schema to file with the optional file name prefix</Line>
    <Line></Line>
  </Usage>
  <NamedArgGroups>
    <NamedArgGroup>
      <Name>SaveSchema</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">saveschema</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="empty">debug</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>ValidateDataAgainstXsd</Name>
      <NamedArgs>
        <Name variable="required" value="required">xsd</Name>
        <Name variable="required" value="required">validate</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>ValidateDataAgainstSchema</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">validate</Name>
        <Name variable="optional" value="required">saveschema</Name>
        <Name variable="optional" value="required">timeout</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>ExecuteData</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">execute</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>SelectDataAll</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">select</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="empty">includeNullElements</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>SelectDataSearch</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">search</Name>
        <Name variable="required" value="required">select</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="empty">includeNullElements</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>SelectDataType</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">type</Name>
        <Name variable="required" value="required">select</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="empty">includeNullElements</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>DeleteDataFile</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="optional">delete</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>DeleteDataSearch</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">search</Name>
        <Name variable="required" value="empty">delete</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
    <NamedArgGroup>
      <Name>DeleteDataType</Name>
      <NamedArgs>
        <Name variable="required" value="required">server</Name>
        <Name variable="required" value="required">database</Name>
        <Name variable="optional" value="required">uid</Name>
        <Name variable="optional" value="required">pwd</Name>
        <Name variable="optional" value="required">config</Name>
        <Name variable="required" value="required">type</Name>
        <Name variable="required" value="empty">delete</Name>
        <Name variable="optional" value="required">timeout</Name>
        <Name variable="optional" value="required">saveschema</Name>
      </NamedArgs>
    </NamedArgGroup>
  </NamedArgGroups>
</NamedArgParser>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\DirectX\Dec2006\debug\i386\DirectX for Managed Code\DevAssemblyInfo.ini ===
[Microsoft.DirectX.AudioVideoPlayback.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.Diagnostics.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.Direct3D.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.Direct3DX.Dll]
AssemblyVersion=1.0.2911.0

[Microsoft.DirectX.DirectDraw.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.DirectInput.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.DirectPlay.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.DirectSound.Dll]
AssemblyVersion=1.0.2902.0

[Microsoft.DirectX.Dll]
AssemblyVersion=1.0.2902.0
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\DirectX\Dec2006\readme.txt ===
This December 2006 distribution of DirectX was downloaded from MSDN.
Please see http://msdn.microsoft.com/directx/sdk/ for more info.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\ApplicationLauncher.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationLauncher</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.Mitm.Instrumentation.Constants.RemoteServer">
            <summary>
            Server specific constants for launched applications
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.Constants.RemoteServer.#ctor">
            <summary>
            A private constructor to ensure that no instances are created
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.RemoteServer.DefaultPipeName">
            <summary>
            The default pipe for launched applications
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable">
            <summary>
            An internal mapping of environment variable name to value
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable.#ctor(System.String,System.String)">
            <summary>
            Construct an environment variable based on a name, and contents (which must not include
            an =)
            </summary>
            <param name="name">The name of the environment variable</param>
            <param name="contents">The contents</param>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable.#ctor(System.String)">
            <summary>
            Create an environment variable from a string definition in the format name=contents
            </summary>
            <param name="definition">The definition</param>
        </member>
        <member name="P:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable.Definition">
            <summary>
            Return the environment variable, formatted as name=contents
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable.Name">
            <summary>
            Return the name of the environment variable
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable.Contents">
            <summary>
            Return the contents of the environment variable
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.ProcessTerminationEventArgs">
            <summary>
            Notification event that a process has terminated
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.ProcessTerminationEventArgs.#ctor(System.UInt32)">
            <summary>
            Constructor for the event
            </summary>
            <param name="processId">The process which has ended</param>
        </member>
        <member name="P:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.ProcessTerminationEventArgs.ProcessId">
            <summary>
            Property accessor for the terminated process
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.ProcessTerminationEventHandler">
            <summary>
            ProcessTermination Handler Definition
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.InstrumentedProcess">
            <summary>
            Helper class to launch instrumented applications
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.InstrumentedProcess.Create(System.Boolean,System.String,System.String,System.String,System.String,System.String,MS.Swi.Mitm.Instrumentation.ApplicationLauncher.EnvironmentVariable[])">
            <summary>
            Create an instrumented process via the Detours library 
            </summary>
            <param name="monitorProcess">Whether or not a monitoring thread should be launched for the process</param>
            <param name="startPath">The path the process should start in</param>
            <param name="executableName">The executable to instrument</param>
            <param name="instrumentationPath">The path to the instrumentation and Detours DLLs</param>
            <param name="instrumentationDll">The name of the instrumentation DLL</param>
            <param name="arguments">Arguments to the launched executable</param>
            <param name="instrumentationArguments">An array of arguments (note, these MUST be EnvironmentVariable objects)</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.InstrumentedProcess.Resume">
            <summary>
            Resume the paused process
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.InstrumentedProcess.Pause">
            <summary>
            Suspend the process
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.ApplicationLauncher.InstrumentedProcess.Join">
            <summary>
            Wait for the process to terminate
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation">
            <summary>
            NetworkInstrumentation specific constants for launched applications
            
            Note that these must be kept in sync with the definitions in MITMNetworkInstrumentationDefinitions.h
            in the MITM Network Instrumentation project
            
            NOTE: These REALLY should be moved out of here and into an assembly inside of the Network instrumentation
            ASAP
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.#ctor">
            <summary>
            A private constructor to ensure that no instances are created
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.MaximumEnvarNameLength">
            <summary>
            The maximum length of an environment variable name in characters (not including the null)
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.MaximumEnvarContentsLength">
            <summary>
            The maximum length of an environment variable contents in characters (not including the null)
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.MaximumEnvarStringLength">
            <summary>
            The maximum length of an environment variable string in characters (including the terminal null)
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.DefaultArgumentSeparator">
            <summary>
            The default separator character between arguments
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.DefaultDefinitionSeparator">
            <summary>
            The default separator character between definitions
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.DefaultScalingFactor">
            <summary>
            The default scaling factor for Send channel operations
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.ServerEnvarName">
            <summary>
            The environment variable name for the specified MITM server details. What is actually stored
            in this environment variable would theoretically depend on the transport layer used, however,
            the only existing case is a named pipe, and for that case, it is the pipe name.
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.DefinitionSeparatorEnvarName">
            <summary>
            The environment variable name for the separator between the IMitmProcessor and any
            IMitmMonitors (note that this is also between individual IMitmMonitors)
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.ArgumentSeparatorEnvarName">
            <summary>
            The environment variable name for the separator between the IMitmRemoteClass name and any
            arguments (note that this is also between individual arguments)
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.ScalingFactorEnvarName">
            <summary>
            The environment variable name for the scaling factor to apply to buffer sizes for Send
            channel operations
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.SendConfigurationEnvarName">
            <summary>
            The environment variable name for the MITM Send Transaction Configuration
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.RecvConfigurationEnvarName">
            <summary>
            The environment variable name for the MITM Recv Transaction Configuration
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.SslSendConfigurationEnvarName">
            <summary>
            The environment variable name for the MITM SSL Send Transaction Configuration
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.SslRecvConfigurationEnvarName">
            <summary>
            The environment variable name for the MITM Ssl Recv Transaction Configuration
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.NetworkTransactionChannels">
            <summary>
            The channels for the different types of transactions handled by the
            MITM Network Instrumentation
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.NetworkTransactionChannels.Send">
            <summary>
            Channel definition for Winsock Send Operations
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.NetworkTransactionChannels.Recv">
            <summary>
            Channel definition for Winsock Recv Operations
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.NetworkTransactionChannels.SslSend">
            <summary>
            Channel definition for SSL Encode Operations
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.NetworkTransactionChannels.SslRecv">
            <summary>
            Channel definition for SSL Decode Operations
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.NetworkTransactionChannels.Count">
            <summary>
            The count of the chanels
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.x86">
            <summary>
            Intel x86 specific constants
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.x86.#ctor">
            <summary>
            A private constructor to ensure that no instances are created
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.x86.InstrumentationDllName">
            <summary>
            The filename for the MITM Network Instrumentation DLL
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.x64">
            <summary>
            AMD/Intel x64 specific constants
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.x64.#ctor">
            <summary>
            A private constructor to ensure that no instances are created
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Instrumentation.Constants.NetworkInstrumentation.x64.InstrumentationDllName">
            <summary>
            The filename for the MITM Network Instrumentation DLL
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\FuzzerManipulations.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FuzzerManipulations</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.None">
            <summary>
            Special case to indicate that no flags are chosen
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Replacement">
            <summary>
            Replaces the source with known data
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Mutation">
            <summary>
            Mutates the data
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Generation">
            <summary>
            Generates new data algorithmically
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Smart">
            <summary>
            The attack is "smart" and is based on some knowledge implicit in the token
            or the manipulation
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Dumb">
            <summary>
            The attack is "dumb" and is based on random values
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.MaintainsState">
            <summary>
            The manipulation maintains state information of some manner, which may or may not
            be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.AcceptsArguments">
            <summary>
            The manipulation takes arguments, which may or may not be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.UsesSizeRestrictions">
            <summary>
            The manipulation uses size restrictions, which may or may not be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.UsesContentRestrictions">
            <summary>
            The manipulation uses size restrictions, which may or may not be required
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Structural">
            <summary>
            Modifies the structure of the DataMap in some manner. Note that
            structural manipulations will modify the DataMap and will make repeated fuzzing
            using the same DataMap unwise
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Encapsulation">
            <summary>
            Attacks encapsulations
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Sequential">
            <summary>
            Is designed to to cycle through an entire set of possiblities
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresState">
            <summary>
            The manipulation requires that the state information be maintained for useful results
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresArguments">
            <summary>
            The manipulation requires additional arguments
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresSizeRestrictions">
            <summary>
            The manipulation requires size restriction information
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.RequiresContentRestrictions">
            <summary>
            The manipulation requires content restriction information
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Exclusive">
            <summary>
            This attack should not be combined with another attack on the same token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.Last">
            <summary>
            This attack should be the last attack on the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.SizeIncrease">
            <summary>
            The size of the data can or will increase
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.SizeDecrease">
            <summary>
            The size of the data can or will decrease
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.KnownVulnerability">
            <summary>
            An implementation of a known vulnerability
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.BoundaryAttack">
            <summary>
            An attack on boundary conditions (often based on restrictions)
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.ConformsToSizeRestrictions">
            <summary>
            The results will conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.BreaksSizeRestrictions">
            <summary>
            The results will definitely NOT conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.ConformsToContentRestrictions">
            <summary>
            The results will conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics.BreaksContentRestrictions">
            <summary>
            The results will definitely NOT conform to size restrictions applied to the token
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult">
            <summary>
            The possible results of applying a manipulation
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.Illegal">
            <summary>
            An illegal (or unset) ManipulationResult
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.Unchanged">
            <summary>
            Nothing was changed
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.ContentsChanged">
            <summary>
            The contents of one or more tokens were altered
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.StructureChanged">
            <summary>
            The structure of the DataMap was altered
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.SequentialManipulationComplete">
            <summary>
            The sequential manipulation has exhausted its set of possible sequences, and will not
            generate new changes
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult.Cancelled">
            <summary>
            The manipulation was cancelled before it was run. This should always be seen paired with Unchanged
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails">
            <summary>
            An read-only interface to the details of a manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.Characteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.TargetDefinitionName">
            <summary>
            The name of the target definition (for specific manipulations)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.IsUniversal">
            <summary>
            Whether or not this is a Universal manipulation (i.e. one that applies to all
            definitions)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulationDetails.From">
            <summary>
            The name of the transformation that provided the data (or "" if no transformation is involved)
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute">
            <summary>
            The FuzzerManipulationAttribute defines the characteristics of any given manipulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.Get(System.Type)">
            <summary>
            Get the ManipulationAttribute for a class if it implements IFuzzerManipulation and has the
            correct attribute(s) defined
            </summary>
            <param name="classType">The type to check</param>
            <returns>The analyzer attribute(s)</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.#ctor(System.String)">
            <summary>
            Constructor to create a specific manipulation attribute
            </summary>
            <param name="targetDefinitionName">The name of the targeted token definition</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.#ctor">
            <summary>
            Constructor to create a universal manipulation attribute
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.Characteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.TargetDefinitionName">
            <summary>
            The name of the target definition (for specific manipulations)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.IsUniversal">
            <summary>
            Whether or not this is a Universal manipulation (i.e. one that applies to all
            definitions)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute.From">
            <summary>
            The name of the transformation that provided the data (or "" if no transformation is involved)
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation">
            <summary>
            IFuzzerManipulation
            
            	Any object which implements the IFuzzerManipulation interface AND defines a FuzzerManipulationAttribute
            	will be usable by the strategy library. 
            	<br/><br/>
            	IMPORTANT: Any state information must be kept in the manipulationState object, NOT in the IFuzzerManipulation object.
            	If state information is required, defaults should be populated if manipulationState is null on entry.
            	Only a default constructor should be defined.
            		
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token the attack is focused on</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation">
            <summary>
            Parent class for manipulations which only attack the contents of a token
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateValidSizeRangeInBytes(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean,System.UInt32@,System.UInt32@)">
            <summary>
            Helper function to calculate a valid size range (in bytes) for an object, taking the restrictions on both
            the data and the manipulation into account. If no restrictions apply, minimum will be zero, and the maximum
            will be a random value between 1 and 1 megabyte.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <param name="minimumSize">The calculated minimum size</param>
            <param name="maximumSize">The calculated maximum size</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateValidSizeRangeInElements(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean,System.UInt32@,System.UInt32@)">
            <summary>
            Helper function to calculate a valid size range (in bytes) for an object, taking the restrictions on both
            the data and the manipulation into account.
            
            Note that if we cannot determine the current size of the object, we
            will return the current size in elements.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <param name="minimumSize">The calculated minimum size</param>
            <param name="maximumSize">The calculated maximum size</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateTargetSizeInBytes(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Helper function to calculate the target size of the resulting object of the manipulation, conforming to
            restrictions and characteristics. Note that if we cannot determine the current size of the object, we will
            ignore the size increase and decrease flags.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <returns>The calculated size in bytes</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateTargetSizeInElements(System.Random,MS.Swi.Data.IConstDataContents,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Helper function to calculate the target size of the resulting object of the manipulation, conforming to
            restrictions and characteristics. Note that if we cannot determine the current size of the object, we
            will return the current size in elements.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <param name="allowSizeDecrease">Whether objects should be allowed to decrease in size</param>
            <param name="allowSizeIncrease">Whether objects should be allowed to increase in size</param>
            <returns>The calculated size in terms of the number of elements</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.DataManipulation.CalculateMaximumNumberOfAdditionalElements(System.Random,MS.Swi.Data.IConstDataContents,System.Object)">
            <summary>
            Calculate the maximum number of elements we could add, taking the size restrictions and current contents
            into account
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="sourceContents">The source data contents</param>
            <param name="currentObject">The current object</param>
            <returns>The maximum number of additional elements</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation">
            <summary>
            Parent class for manipulations which only attack the structure of the DataMap, focused
            around a specified token
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.StructuralManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation">
            <summary>
            Parent class for manipulations which attack the contents of a manipulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation">
            <summary>
            Parent class for manipulations which only attack the structure of the DataMap, focused
            around an Encapsulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.Manipulate(MS.Swi.Data.IConstDataContents,System.Object@,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the target token, changing the contents of the token directly as applicable
            </summary>
            <param name="targetContents">The contents being manipulated</param>
            <param name="targetObject">The value of those contents (the current value is passed in, the new value is passed out)</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of the DataMap, altering the structure of the DataMap, and focused on a 
            particular token
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetToken">The token that is the focus of the attack</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.ManipulateEncapsulation(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object},System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the contents of an encapsulation. Note that the results will be extracted from the
            provided dictionary when the manipulation is complete.
            </summary>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="contents">The dictionary of all of the contents of the encapsulation</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.EncapsulationStructuralManipulation.ManipulateEncapsulationStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation,System.Random,System.Object@,System.String[])">
            <summary>
            Manipulate the structure of an encapsulation 
            </summary>
            <param name="targetDataMap">The data map being altered</param>
            <param name="targetEncapsulation">The encapsulation being attacked</param>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="manipulationState">The manipulation state to use (or null)</param>
            <param name="manipulationParameters">The parameters for the manipulation if any</param>
            <returns>The results of the manipulation</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable">
            <summary>
            The singleton table of all the loaded manipulations
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.#cctor">
            <summary>
            Use reflection to build the manipulation table details
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.#ctor">
            <summary>
            Block individual instances
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.Reload">
            <summary>
            Reload the caches based on reflection
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindManipulationDetails(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation)">
            <summary>
            Find the details on a manipulation given the manipulation
            </summary>
            <param name="manipulation">The manipulation to use</param>
            <returns>The manipulation details, or null if they could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindManipulation(System.String)">
            <summary>
            Find the details on a manipulation by the name of the manipulation
            </summary>
            <param name="manipulationName"></param>
            <returns>The manipulation details, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindManipulationsByDefinition(MS.Swi.Data.ElementDefinition)">
            <summary>
            Find all of the manipulations that can apply to a definition by the definition name
            </summary>
            <param name="definition">The definition</param>
            <returns>The list of manipulations (this may be empty)</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindUniversalTokenManipulations">
            <summary>
            Find all the manipulations that apply to all tokens
            </summary>
            <returns>The set of matching manipulations</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.FindUniversalEncapsulationManipulations">
            <summary>
            Find all the manipulations that apply to all encapsulations
            </summary>
            <returns>The set of matching manipulations</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails">
            <summary>
            The details of a given manipulation (including an instance of it)
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails.#ctor(MS.Swi.FuzzerCommonLibrary.Manipulations.FuzzerManipulationAttribute,System.Type)">
            <summary>
            Construct the details for a manipulation
            </summary>
            <param name="attribute">The attribute</param>
            <param name="manipulationType">The manipulation type</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails.Details">
            <summary>
            The attribute associated with the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationTable.ManipulationDetails.Manipulation">
            <summary>
            The manipulation 
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\CTFInstallationManager.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CTFInstallationManager</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.InstallationManagementAttribute">
            <summary>
            The installation management attribute is used to force the integration with the FCL, as well
            as (optionally) in XCopy deployed tools, to indicate that all FCL files should be found relative to the
            installation directory of the running tool. The default is not to be an XCopy deployment
            </summary>
        </member>
        <member name="P:MS.Swi.InstallationManagementAttribute.IsXCopyDeployment">
            <summary>
            This property should only be set by the actual application using the FCL (and will in fact
            be ignored in other cases), and is used to indicate a tool that was designed to run in XCopy 
            Deployment mode. This will short-circuit any use of the registry, and instead load everything locally
            </summary>
        </member>
        <member name="T:MS.Swi.InstallationManagementImplementation">
            <summary>
            The InstallationManagementImplementation class provides installation management functionality.
            However, it is not directly invoked, rather it is used by the CTF Core wrapper class, to allow
            easy access to all of the code, without a compile time bounding
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.IsXCopyDeployment">
            <summary>
            Whether or not the executing FCL based tool is configured for XCopy deployment
            </summary>
            <returns>True if the entry application specified XCopy deployment, or if no calling entry application can be found AND there is no configured FCL directory on the machine</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.IncrementInstallationCount">
            <summary>
            Increment the installation count
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.DecrementInstallationCount">
            <summary>
            Decrement the installation count
            
            </summary>
            <returns>The installation count, or 0xffffffff if an error occurred</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.SetDirectory(System.String)">
            <summary>
            Set the directory associated with this assembly 
            </summary>
            <param name="directoryPath">The directory path</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.ClearDirectory">
            <summary>
            Clear the directory assigned to this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.RemoveConfigurationInformation">
            <summary>
            Remove the registry information for this installation
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.SetKey(System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            Set the value of a key, making sure that the key change is echoed to the WoW subsystem
            if appropriate.
            
            NOTE: This will cause a real problem if this is run from a 32 bit mode application on
            a 64 bit machine, because the 64 bit registry will get out of sync, so we need to fix that ASAP
            
            HOWEVER, this is currently exclusively run from installer tools, which will run in the
            native CLR
            </summary>
            <param name="valueName">The name of the key value</param>
            <param name="value">The value of the key</param>
            <param name="valueKind">The time to use</param>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetWoWRegistryKey">
            <summary>
            The registry key that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetRegistryKey">
            <summary>
            The registry key that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetRegistrySubKey">
            <summary>
            The registry subkey that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetWoWRegistrySubKey">
            <summary>
            The registry subkey that should be used for this installation
            </summary>
            <returns>The specific installation filename</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.HasDirectoryAssigned">
            <summary>
            Determine if the directory has been assigned for this installation
            </summary>
            <returns>True if one was assigned, false if not </returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.DefaultStorageDirectory">
            <summary>
            Build the default storage directory for the current version
            </summary>
            <returns>The calculated storage directory</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.InstallFiles(System.String,System.String[])">
            <summary>
            Install files from the source into the managed storage location. Note that this WILL
            overwrite an existing file
            </summary>
            <param name="sourceDirectory">The source directory</param>
            <param name="files">The files (including wildcards) to be installed</param>
            <returns>The set of files installed, or null if they could not all be installed</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.GetFilesInDirectory(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Get all of the files in a given directory, and load them into a dictionary, build a set
            of entries that can be constructed when the files are moved
            </summary>
            <param name="directory">The directory</param>
            <param name="fileMask">The file mask to use</param>
            <param name="directoryBase">The base of the directory (for the file set dictionary)</param>
            <param name="fileSet">The complete set of files</param>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.UninstallFiles(System.String[])">
            <summary>
            Uninstall files from the managed store location
            </summary>
            <param name="files">The files (including wildcards) to be removed</param>
            <returns>True if none of the named files remain in the storage, false if an error occurred or no storage is defined</returns>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.RemoveStorageDirectory">
            <summary>
            Remove the storage directory. Note that this does NOT clear the
            storage directory assignment, that must be done separately, but it
            does delete all of the files in the storage directory and remove
            the directory
            </summary>
        </member>
        <member name="M:MS.Swi.InstallationManagementImplementation.RemoveDirectory(System.String)">
            <summary>
            Remove a specified directory
            </summary>
            <param name="directory">The directory</param>
        </member>
        <member name="T:MS.Swi.IComInstallationManagement">
            <summary>
            The COM interface for the installation management
            </summary>
        </member>
        <member name="M:MS.Swi.IComInstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
        <member name="T:MS.Swi.ComInstallationManagement">
            <summary>
            The COM Installation Management object
            </summary>
        </member>
        <member name="M:MS.Swi.ComInstallationManagement.GetDirectory">
            <summary>
            Get the directory associated with the assembly, or null if it doesn't exist
            </summary>
            <returns>The associated directory, or null if it wasn't set</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\FuzzerAnalyzers.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FuzzerAnalyzers</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet">
            <summary>
            An ordered set of IDataAnalyzer definitions, complete with configurations, that
            specifies the order in which analyzers should be run, and whether or not sets of analyzers should
            be looped.
            
            This is used to wrap definitions for use by the actual DataAnalyzerSet, if the actual definitions should
            be preserved.
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.#ctor">
            <summary>
            Construct an empty definition set
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.#ctor(System.Xml.XmlElement)">
            <summary>
            Construct a DataAnalyzerDefinitionSet from Xml
            </summary>
            <param name="definition">The source definition</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.Parse(System.String)">
            <summary>
            Convert the Xml definition string into an actual DataAnalyzerDefinitionSet
            </summary>
            <param name="source">The source Xml string</param>
            <returns>the constructed definition set</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.ToXml(System.Xml.XmlDocument)">
            <summary>
            Convert the DataAnalyzerDefinitionSet to Xml
            </summary>
            <param name="owningDocument">The owning Xml document</param>
            <returns>The constructed Xml element</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.ToString">
            <summary>
            Turn the analyzer definition into an Xml string
            </summary>
            <returns>The string Xml</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.AppendAnalyzers(System.Boolean,MS.Swi.Mitm.RemoteClassDefinition[])">
            <summary>
            Append a new set of analyzers
            </summary>
            <param name="loopAnalyzers">Whether or not the analyzer list will loop </param>
            <param name="analyzers">The analyzers that make up the set</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.Analyzers">
            <summary>
            The analyzer lists
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList">
            <summary>
            A sub-set of the Analyzers (a logical grouping)
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList.#ctor(System.Boolean,MS.Swi.Mitm.RemoteClassDefinition[])">
            <summary>
            Create an analyzer list from a list of definitions
            </summary>
            <param name="loopAnalyzers">Whether or not the analyzer list should loop as long as data is found</param>
            <param name="definitions">The definitions</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList.#ctor(System.Xml.XmlElement)">
            <summary>
            Create an an analyzer list from XML
            </summary>
            <param name="definition">The definition node</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList.ToXml(System.Xml.XmlDocument)">
            <summary>
            Turn the analyzer definition set into an XML element
            </summary>
            <param name="owningDocument">The document the element belongs to</param>
            <returns>The constructed element</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList.Analyzers">
            <summary>
            The list of Analyzers 
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList.Loop">
            <summary>
            Whether or not this list of analyzers should loop until no analyzer finds any data
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet.DataAnalyzerDefinitionList.HasAnalyzers">
            <summary>
            Whether or not the analyzer list has any actual analyzers in it
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet">
            <summary>
            An ordered set of IDataAnalyzer references, complete with configurations, that
            specifies the order in which analyzers should be run, and whether or not sets of analyzers should
            be looped.
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.#ctor">
            <summary>
            Construct an empty DataAnalyzerSet
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.#ctor(MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerDefinitionSet)">
            <summary>
            Construct a DataAnalyzerSet based on a definition set
            </summary>
            <param name="definitions">The definitions to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.AppendAnalyzers(System.Boolean,MS.Swi.Mitm.RemoteClassDefinition[])">
            <summary>
            Append a new set of analyzers
            </summary>
            <param name="loopAnalyzers">Whether or not the analyzer list will loop </param>
            <param name="analyzers">The analyzers that make up the set</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.AppendAnalyzers(System.Boolean,System.Collections.IEnumerable)">
            <summary>
            Append a new set of analyzers
            </summary>
            <param name="loopAnalyzers">Whether or not the analyzer list will loop </param>
            <param name="analyzers">The analyzers that make up the set</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.Analyze(System.Random,System.String,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer})">
            <summary>
            Analyze the data using this set of DataAnalyzers
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="dataContext">The context to use</param>
            <param name="transformations">The transformations to apply</param>
            <param name="definitions">The definitions to apply</param>
            <param name="buffers">The raw data buffers</param>
            <returns>The constructed data map</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.DataAnalyzerList">
            <summary>
            A sub-set of the Analyzers (a logical grouping)
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.DataAnalyzerList.#ctor(System.Boolean)">
            <summary>
            Create an analyzer list
            </summary>
            <param name="loopAnalyzers">Whether or not the analyzer list should loop as long as data is found</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.DataAnalyzerList.Analyzers">
            <summary>
            The list of Analyzers 
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.DataAnalyzerList.Loop">
            <summary>
            Whether or not this list of analyzers should loop until no analyzer finds any data
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.DataAnalyzerSet.DataAnalyzerList.HasAnalyzers">
            <summary>
            Whether or not the analyzer list has any actual analyzers in it
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.IDataAnalyzer">
            <summary>
            Interface for FCL compliant data analyzers
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IDataAnalyzer.Configure(System.String[])">
            <summary>
            Configure the analyzer with a set of string options
            </summary>
            <param name="options">The option/value dictionary expressed as a series of alternating option and value strings</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IDataAnalyzer.Analyze(System.Random,System.String,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer})">
            <summary>
            Create a new data map from the raw data
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="dataContext">The context to use</param>
            <param name="transformations">The transformations to apply</param>
            <param name="definitions">The definitions to apply</param>
            <param name="buffers">The raw data buffers</param>
            <returns>The constructed data map</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IDataAnalyzer.Analyze(System.Random,System.String,MS.Swi.Data.DataMap)">
            <summary>
            Apply the analyzer to the existing data map.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="dataContext">The context</param>
            <param name="dataMap">The existing data map to be refined</param>
            <returns>True if any new data was found, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IDataAnalyzer.CanBeAdditionalAnalyzer">
            <summary>
            Whether or not this analyzer can be used for additional refinement of an existing data map
            in a meaningful way (i.e. not just returning an unchanged data map)
            </summary>
            <returns>True if it can be, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IDataAnalyzer.IsValidContext(System.String)">
            <summary>
            Determine if this is a data context that this particular analyzer understands
            </summary>
            <param name="dataContext">The data context in question</param>
            <returns>True if it is understood, false if not</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken">
            <summary>
            The RecognizedToken class is generated by the analyzer, and indicates a recognized
            data element
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.Single,System.UInt32,System.UInt32,System.String,System.String[])">
            <summary>
            A recognized token that replaces part of a source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="splitPoint">The point at which it start in the parent array or string</param>
            <param name="splitLength">The length of the token (in terms of characters or parent elements)</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.Single,System.String,System.String[])">
            <summary>
            A recognized token that completely replaces the source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.Single,System.String,MS.Swi.Data.TokenRestrictions,System.Object[],MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            A recognized token that completely replaces the source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="definitionName">The recognized definition</param>
            <param name="restrictions">The restrictions on the token (or null)</param>
            <param name="references">The references (or null). Please note that the token takes ownership of the array.</param>
            <param name="calculationDelegate">The calculation delegate (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.String,System.Single,System.UInt32,System.UInt32,System.String,System.String[])">
            <summary>
            A recognized token that replaces part of a source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="identifier">The identifier for the recognized token. Note that null means do not change the existing identifier, while the empty string clears any identifier, and any other value will be the new identifier</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="splitPoint">The point at which it start in the parent array or string</param>
            <param name="splitLength">The length of the token (in terms of characters or parent elements)</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.String,System.Single,System.String,System.String[])">
            <summary>
            A recognized token that completely replaces the source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="identifier">The identifier for the recognized token. Note that null means do not change the existing identifier, while the empty string clears any identifier</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.String,System.Single,System.String,MS.Swi.Data.TokenRestrictions,System.Object[],MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            A recognized token that completely replaces the source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="identifier">The identifier for the recognized token. Note that null means do not change the existing identifier, while the empty string clears any identifier, and any other value will be the new identifier</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="definitionName">The recognized definition</param>
            <param name="restrictions">The restrictions on the token (or null)</param>
            <param name="references">The references (or null). Please note that the token takes ownership of the array.</param>
            <param name="calculationDelegate">The calculation delegate (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.Single,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Object[],MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            A recognized token that completely replaces the source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
            <param name="restrictions">The restrictions on the token (or null)</param>
            <param name="references">The references (or null). Please note that the token takes ownership of the array.</param>
            <param name="calculationDelegate">The calculation delegate (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.String,System.Single,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Object[],MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            A recognized token that completely replaces the source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="identifier">The identifier for the recognized token. Note that null means do not change the existing identifier, while the empty string clears any identifier, and any other value will be the new identifier</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
            <param name="restrictions">The restrictions on the token (or null)</param>
            <param name="references">The references (or null). Please note that the token takes ownership of the array.</param>
            <param name="calculationDelegate">The calculation delegate (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.Single,System.UInt32,System.UInt32,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Object[],MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            A recognized token that replaces part of a source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="splitPoint">The point at which it start in the parent array or string</param>
            <param name="splitLength">The length of the token (in terms of characters or parent elements)</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
            <param name="restrictions">The restrictions on the token (or null)</param>
            <param name="references">The references (or null). Please note that the token takes ownership of the array.</param>
            <param name="calculationDelegate">The calculation delegate (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.#ctor(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.String,System.Single,System.UInt32,System.UInt32,System.String,System.String[],MS.Swi.Data.TokenRestrictions,System.Object[],MS.Swi.Data.Token.CalculateContentsDelegate)">
            <summary>
            A recognized token that replaces part of a source token
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="identifier">The identifier for the recognized token. Note that null means do not change the existing identifier, while the empty string clears any identifier, and any other value will be the new identifier</param>
            <param name="probability">The probability (between 0.0 and 1.0f) that the match is correct</param>
            <param name="splitPoint">The point at which it start in the parent array or string</param>
            <param name="splitLength">The length of the token (in terms of characters or parent elements)</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
            <param name="restrictions">The restrictions on the token (or null)</param>
            <param name="references">The references (or null). Please note that the token takes ownership of the array.</param>
            <param name="calculationDelegate">The calculation delegate (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.CalculateDistanceToParent(MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstToken,System.String,System.String[])">
            <summary>
            Calculate the distance to the parent definition
            </summary>
            <param name="definitions">The definition set used</param>
            <param name="transformations">The transformation set used</param>
            <param name="sourceToken">The source token</param>
            <param name="definitionName">The recognized definition</param>
            <param name="transformationNames">The recognized transformations (or null). Please note that the token takes ownership of the array.</param>
            <returns>The number of steps between the new definition and the parent definition</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.CalculateDistanceToDefinition(MS.Swi.Data.ElementDefinition,MS.Swi.Data.ElementDefinition)">
            <summary>
            Calculate the distance between two definitions
            </summary>
            <param name="startDefinition">The first definition</param>
            <param name="endDefinition">The definition we are searching for</param>
            <returns>The calculated distance</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.ConflictsWith(MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken)">
            <summary>
            Determine if a recognized token conflicts with another token
            </summary>
            <param name="otherToken">The token to compare against</param>
            <returns>Whether or not the tokens conflict</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.ConstructReferences(MS.Swi.Data.DataMap)">
            <summary>
            Construct the actual references
            </summary>
            <param name="sourceMap">The source map to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.CompareTo(MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken)">
            <summary>
            Compare this token to another recognized token for sorting purposes
            
            The sort order is:
            
            Parent token position (lower is better)
            Probability (higher is better)
            Splits are less than non-splits
            Among splits, go on split size (larger is better)
            Number of definitions before the ancestral definition is reached (smaller is better)
            The difference between the element names (to make this deterministic)
            Otherwise, it is a tie
            </summary>
            <param name="other">The other token</param>
            <returns>1 if this token is greater than the other, 0 if they are equal, -1 if this is less than the other</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.DefinitionName">
            <summary>
            The definition of the recognized token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.TransformationNames">
            <summary>
            The definitions of the included transformations, or null
            if there are no transformations
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.Probability">
            <summary>
            The confidence level, expressed as a probability between 0.0 and 1.0, that the 
            recognition is correct
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.Parent">
            <summary>
            The token that this will replace
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.DistanceToParent">
            <summary>
            The distance to the parent definition
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.Position">
            <summary>
            The position of the token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.CalculationDelegate">
            <summary>
            The calculation delegate for the token (or null)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.IsDerived">
            <summary>
            Is this a derived token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.IsStatic">
            <summary>
            Is this a static token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.IsSplit">
            <summary>
            Is this token a split of its parent
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.HasIdentifier">
            <summary>
            Whether or not an identifier was specified for this recognized token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.Identifier">
            <summary>
            The identifier for this recognized token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.References">
            <summary>
            The references for the recognized token, or null
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.Restrictions">
            <summary>
            The restrictions for the recognized token, or null
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.SplitPoint">
            <summary>
            The split point in the parent. Note that this is ONLY valid if the recognized
            token is a split of its parent. If it is not, this will throw an InvalidOperationException
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken.SplitLength">
            <summary>
            The length of the split (in terms of the parent elements). Note that this is ONLY valid if the recognized
            token is a split of its parent. If it is not, this will throw an InvalidOperationException
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation">
            <summary>
            The representation of a recognized encapsulation token
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.#ctor(System.Single,System.String,System.Object[])">
            <summary>
            Construct a recognized encapsulation
            </summary>
            <param name="probability">The probability that the recognition is correct (between 0.0 and 1.0f)</param>
            <param name="definitionName">The definition name of the encapsulation</param>
            <param name="references">The references for the encapsulation. Note that the encapsulation takes ownership of this array</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.#ctor(System.String,System.Single,System.String,System.Object[])">
            <summary>
            Construct a recognized encapsulation
            </summary>
            <param name="identifier">The identifier to apply to the encapsulation. A null will be silently converted to an empty string</param>
            <param name="probability">The probability that the recognition is correct (between 0.0 and 1.0f)</param>
            <param name="definitionName">The definition name of the encapsulation</param>
            <param name="references">The references for the encapsulation. Note that the encapsulation takes ownership of this array</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.ConstructReferences(MS.Swi.Data.DataMap)">
            <summary>
            Construct the actual references
            </summary>
            <param name="sourceMap">The source map to use</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.DefinitionName">
            <summary>
            The definition of the recognized token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.Probability">
            <summary>
            The confidence level, expressed as a probability between 0.0 and 1.0, that the 
            recognition is correct
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.Identifier">
            <summary>
            The identifier for this recognized token
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation.References">
            <summary>
            The references for the recognized token, or null
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer">
            <summary>
            The extensible analyzer component of the FCL, this provides the ability to use
            individual recognizers which only identify one type of data for analysis.
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.#cctor">
            <summary>
            Build the dictionary of found analyzers
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.#ctor">
            <summary>
            The FCLExtensibleDataAnalyzer class is an IDataAnalyzer that uses reflection to
            find a cloud of analyzers and apply them to the data
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.#ctor(System.Single)">
            <summary>
            The FCLExtensibleDataAnalyzer class is an IDataAnalyzer that uses reflection to
            find a cloud of analyzers and apply them to the data
            </summary>
            <param name="confidenceThreshold">The minimal confidence (expressed as a float between 0.0f and 1.0f) required for recognized data to be added</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.FindAnalyzers(MS.Swi.Data.IConstElementDefinitions)">
            <summary>
            Return the set of analyzers that map to the definitions. Note that it is entirely valid
            to have definitions that don't have a matching analyzer
            </summary>
            <param name="validDefinitions">The array list of analyzers</param>
            <returns>An array list of found analyzers</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.InsertToken(System.Collections.Generic.List{MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken},MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken)">
            <summary>
            Insert a recognized token into the right position in the list of recognized tokens
            </summary>
            <param name="tokenList">The current list</param>
            <param name="token">The newly recognized token</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.Configure(System.String[])">
            <summary>
            Configure the analyzer with a set of string options
            
            Valid Options:
            ConfidenceThreshold		Floating point value between 0.0f and 1.0f
            </summary>
            <param name="options">The option/value dictionary expressed as a series of alternating option and value strings</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.Analyze(System.Random,System.String,MS.Swi.Data.IConstDataTransformations,MS.Swi.Data.IConstElementDefinitions,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer})">
            <summary>
            Create a new data map from the raw data
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="dataContext">The context to use</param>
            <param name="transformations">The transformations to apply</param>
            <param name="definitions">The definitions to apply</param>
            <param name="buffers">The raw data buffers</param>
            <returns>The constructed data map</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.Analyze(System.Random,System.String,MS.Swi.Data.DataMap)">
            <summary>
            Apply the analyzer to the existing data map.
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <param name="dataContext">The context</param>
            <param name="dataMap">The existing data map to be refined</param>
            <returns>True if the data map was refined, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.CanBeAdditionalAnalyzer">
            <summary>
            Whether or not this analyzer can be used for additional refinement of an existing data map
            in a meaningful way (i.e. not just returning an unchanged data map)
            </summary>
            <returns>True if it can be, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.IsValidContext(System.String)">
            <summary>
            Determine if this is a data context that this particular analyzer understands
            </summary>
            <param name="dataContext">The data context in question</param>
            <returns>True if it is understood, false if not</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleDataAnalyzer.ConfidenceThreshold">
            <summary>
            The minimum confidence (expressed as a floating point value between 0.0f and 1.0f) that
            is required from a recognizer for the token to be added to the data map
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleAnalyzerComponentAttribute">
            <summary>
            The FCLExtensibleAnalyzerComponentAttribute class is used to define the characteristics of a 
            data analyzer for 
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleAnalyzerComponentAttribute.Get(System.Type)">
            <summary>
            Get the FCLExtensibleAnalyzerComponentAttribute for a class if it implements IFCLExtensibleDataAnalyzerComponent and has the
            correct attribute defined
            </summary>
            <param name="classType">The type to check</param>
            <returns>The analyzer attribute</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleAnalyzerComponentAttribute.#ctor(System.String)">
            <summary>
            All FCLExtensibleAnalyzerComponentAttributes must give a definition name for the logical
            name that the analyzer defines
            </summary>
            <param name="definitionName">The definition</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleAnalyzerComponentAttribute.#ctor">
            <summary>
            A data analyzer attribute constructor for the base data type
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleAnalyzerComponentAttribute.Defines">
            <summary>
            The token name that this analyzer defines
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Analysis.FCLExtensibleAnalyzerComponentAttribute.AssociatedDefinition">
            <summary>
            The definition this is associated with (for analyzers that force data back to
            ByteArray)
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Analysis.IFCLExtensibleDataAnalyzerComponent">
            <summary>
            IFCLExtensibleDataAnalyzerComponent objects are responsible for recognizing themselves, and for 
            doing any dynamic calculations necessary to make themselves valid.
            
            IMPORTANT: By convention, IFCLExtensibleDataAnalyzerComponent objects should be flyweight, and keep 
            NO context internally. This is because the DataAnalyzer will create a single instance
            of each of them and apply it to the tokens as necessary
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IFCLExtensibleDataAnalyzerComponent.FindTokens(System.String,MS.Swi.Data.IConstDataMap,System.Single,System.Collections.Generic.List{MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedToken}@)">
            <summary>
            Analyze a DataMap, producing a set of recognized tokens for this
            analyzer type
            </summary>
            <param name="dataContext">The context of the source of the data</param>
            <param name="dataSource">The source DataMap</param>
            <param name="confidenceThreshold">The confidence threshold for analysis</param>
            <param name="recognizedTokens">The recognized tokens, or null if none were found</param>
            <returns>True if new tokens were found, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Analysis.IFCLExtensibleDataAnalyzerComponent.FindEncapsulations(System.String,MS.Swi.Data.IConstDataMap,System.Single,System.Collections.Generic.List{MS.Swi.FuzzerCommonLibrary.Analysis.RecognizedEncapsulation}@)">
            <summary>
            Analyze a DataMap, producing a set of recognized tokens for this
            analyzer type
            </summary>
            <param name="dataContext">The context of the source of the data</param>
            <param name="dataSource">The source DataMap</param>
            <param name="confidenceThreshold">The confidence threshold for analysis</param>
            <param name="recognizedEncapsulations">The recognized elements, or null if none were found</param>
            <returns>True if new encapsulations were found, false if not</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\SWIGeneralDefinitions.xml ===
<?xml version="1.0"?>
<!-- SWI Provided General Definition Table -->
<ElementDefinitions>
  <!-- Base Data Types: Byte -->
  <ElementDefinition Name="Byte" Characteristics="Singleton" NativeType="System.Byte" />
  
	<!-- Base Data Types: Integers -->
  <ElementDefinition Name="Integer" Characteristics="Singleton" NativeType="System.Int64"/>
  <ElementDefinition Name="UnsignedInteger" Characteristics="Singleton" NativeType="System.UInt64"/>

  <!-- Base Data Types: Floating Point -->
  <ElementDefinition Name="Float" Characteristics="Singleton" NativeType="System.Double"/>
  <ElementDefinition Name="Decimal" Characteristics="Singleton" NativeType="System.Decimal"/>

  <!-- Base Data Types: Booleans -->
  <ElementDefinition Name="Boolean" Characteristics="Singleton" NativeType="System.Boolean"/>

	<!-- Base Data Types: Strings -->
  <ElementDefinition Name="Character" Characteristics="Singleton" NativeType="System.Char"/>
  <ElementDefinition Name="String" Characteristics="Severable" NativeType="System.String"/>
  <ElementDefinition Name="StringTerminator" Characteristics="Singleton" Base="Character"/>

  <!-- Derived Data Types: Paths -->
  <ElementDefinition Name="FilePath" Base="String" />

  <!-- Derived Data Types: URLs -->
  <ElementDefinition Name="Url" Base="String" />

  <!-- Derived Data Types: Sizes -->
  <ElementDefinition Name="Size" Characteristics="Singleton" Base="UnsignedInteger" />

  <!-- Derived Data Types: Offsets -->
  <ElementDefinition Name="Offset" Characteristics="Singleton" Base="Integer" />

  <!-- Derived Data Types: Counts -->
  <ElementDefinition Name="Count" Characteristics="Singleton" Base="UnsignedInteger"/>

  <!-- Derived Data Types: Indices -->
  <ElementDefinition Name="Index" Characteristics="Singleton" Base="Integer" />
  <ElementDefinition Name="UnsignedIndex" Characteristics="Singleton" Base="UnsignedInteger" />

  <!-- Encapsulation Types -->
  <!-- Sized block encapsulations have two references: 
           Size: Reference to the size token
           Contents: Reference to the contents as ByteArray -->
  <ElementDefinition Name="SizedBlock" Characteristics="Encapsulation" />

  <!-- HTTP message body -->
  <ElementDefinition Name="HTTPBody" Base="String" />

</ElementDefinitions>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FSharp\.README.TXT ===
C:\Program Files\Reference Assemblies\Microsoft\FSharp\
*
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\FuzzerStrategy.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FuzzerStrategy</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackType">
            <summary>
            How the attack is to be executed
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Strategy.AttackType.Preserve">
            <summary>
            Do nothing to this token, and market it as handled
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Strategy.AttackType.AsAncestor">
            <summary>
            Attack the token by the rules of its immediate ancestor
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Strategy.AttackType.AsComponents">
            <summary>
            Do not attack the encapsulation, instead, attack it as its member components
            </summary>
        </member>
        <member name="F:MS.Swi.FuzzerCommonLibrary.Strategy.AttackType.Attack">
            <summary>
            Attack the token with the specified attack
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription">
            <summary>
            The description of a desired attack.
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription.#ctor">
            <summary>
            The default constructor for the Xml constructors which must parse data before continuing
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription.#ctor(MS.Swi.FuzzerCommonLibrary.Strategy.AttackType,System.UInt32)">
            <summary>
            The normative constructor, for cases where the values are known at the start
            of the constructor
            </summary>
            <param name="attackType">The type of the attack</param>
            <param name="weight">The weight of the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription.SelectAttacks(MS.Swi.Data.ElementDefinition,System.String,System.Boolean,System.Boolean,System.Random)">
            <summary>
            Generate a list of attacks to be used against a target token.
            </summary>
            <param name="targetDefinition">The target definition for attacks</param>
            <param name="contentsFrom">The name of the transformation that produced these contents, if it is known, or null if unknown or inapplicable</param>
            <param name="tokenHasSizeRestrictions">Whether or not the token has size restrictions applied to it</param>
            <param name="tokenHasContentRestrictions">Whether or not the token has content restrictions applied to it</param>
            <param name="prnGenerator">The random number generator to be used when selecting which attack(s) to apply for generic attacks</param>
            <returns>A list of attacks</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription.Weight">
            <summary>
            The weight of the attack. The odds of any given attack being selected are weight/total-weight, 
            where the total weight is the sum of the weights of all possible attack descriptions. Individual
            attacks within an attack description will have equal odds.
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription.Action">
            <summary>
            The attack selected for this attack
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.ExcludedAttackDescription">
            <summary>
            The description of an excluded or deferred attack
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.ExcludedAttackDescription.#ctor(MS.Swi.FuzzerCommonLibrary.Strategy.AttackType,System.UInt32)">
            <summary>
            Construct an excluded attack (i.e. one which for whatever reason will not be performing an attack)
            </summary>
            <param name="attackType">The type of attack (cannot be AttackType.Attack)</param>
            <param name="weight">The weight applied</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.ExcludedAttackDescription.#ctor(System.Xml.XmlElement)">
            <summary>
            Construct an excluded attack (i.e. one which for whatever reason will not be performing an attack)
            from an Xml configuration
            </summary>
            <param name="attackDeclaration">The XmlNode containing the attack description</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.ExcludedAttackDescription.SelectAttacks(MS.Swi.Data.ElementDefinition,System.String,System.Boolean,System.Boolean,System.Random)">
            <summary>
            There are no attacks for an excluded attack
            </summary>
            <param name="targetDefinition">The target definition for attacks</param>
            <param name="contentsFrom">The name of the transformation that produced these contents, if it is known, or null</param>
            <param name="tokenHasSizeRestrictions">Whether or not the token has size restrictions applied to it</param>
            <param name="tokenHasContentRestrictions">Whether or not the token has content restrictions applied to it</param>
            <param name="prnGenerator">The random number generator to be used when selecting which attack(s) to apply for generic attacks</param>
            <returns>Empty list in all cases</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.ExecutedAttackDescription">
            <summary>
            Shared base class for all executed attacks, that provides the delegate definitions
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.ExecutedAttackDescription.#ctor">
            <summary>
            A default constructor to allow for the Xml constructors which have to parse data
            before being able to set their core values
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.ExecutedAttackDescription.#ctor(System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Define the characteristics for an executed attack
            </summary>
            <param name="weight">The weight of the attack</param>
            <param name="manager">The manipulation manager object to use for the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.ExecutedAttackDescription.ConstructAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,System.String[])">
            <summary>
            Construct an attack
            </summary>
            <param name="manipulation">The manipulation</param>
            <param name="characteristics">The characteristics of the manipulation</param>
            <param name="arguments">The arguments for the manipulation</param>
            <returns>The new attack</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.ExecutedAttackDescription.AttackManager">
            <summary>
            The attack manager for the specific attack
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.SpecificAttackDescription">
            <summary>
            An attack description where the manipulation has been specified by name
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SpecificAttackDescription.#ctor(System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager,System.String,System.String[])">
            <summary>
            Define a specific attack
            </summary>
            <param name="weight">The weight of the attack</param>
            <param name="manager">The attack manager object to use for the attack</param>
            <param name="manipulationName">The manipulation (by name)</param>
            <param name="argumentNames">The names of the variables in CommonStorage to be used for arguments (or null)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SpecificAttackDescription.#ctor(System.Xml.XmlElement,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Construct a specific attack based on an Xml configuration
            </summary>
            <param name="attackDeclaration">The Xml node containing the specification</param>
            <param name="attackManager">The default attack manager object to use for the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SpecificAttackDescription.ToString">
            <summary>
            AttackDescription as human readable string
            </summary>
            <returns>The description string</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SpecificAttackDescription.SelectAttacks(MS.Swi.Data.ElementDefinition,System.String,System.Boolean,System.Boolean,System.Random)">
            <summary>
            Construct the specific attack defined by this description
            </summary>
            <param name="targetDefinition">The target definition for attacks</param>
            <param name="contentsFrom">The name of the transformation that produced these contents, if it is known</param>
            <param name="tokenHasSizeRestrictions">Whether or not the token has size restrictions applied to it</param>
            <param name="tokenHasContentRestrictions">Whether or not the token has content restrictions applied to it</param>
            <param name="prnGenerator">The random number generator to be used when selecting which attack(s) to apply for generic attacks</param>
            <returns>The attack to perform</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription">
            <summary>
            An attack description where the manipulation(s) have been specified for discovery
            by reflection
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription.#ctor(System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager,System.String,System.String,System.UInt32,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics)">
            <summary>
            Construct an attack description based on characteristics
            </summary>
            <param name="weight">The weight of the attack(s)</param>
            <param name="manager">The manipulation manager object to use for the attack</param>
            <param name="targetDefinitionsStart">The first type that should be checked for matching manipulations</param>
            <param name="targetDefinitionsEnd">The last type (ancestor) that should be checked for matching manipulations</param>
            <param name="maxManipulations">The maximum number of manipulations to apply</param>
            <param name="requiredCharacteristics">The characteristics that the manipulation(s) must match</param>
            <param name="excludedCharacteristics">The characteristics that the manipulation(s) must not match</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription.#ctor(System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager,System.UInt32,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics)">
            <summary>
            Construct an attack description that applies to all definitions based on characteristics
            </summary>
            <param name="weight">The weight of the attack(s)</param>
            <param name="manager">The manipulation manager object to use for the attack</param>
            <param name="maxManipulations">The maximum number of manipulations to apply</param>
            <param name="requiredCharacteristics">The characteristics that the manipulation(s) must match</param>
            <param name="excludedCharacteristics">The characteristics that the manipulation(s) must not match</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription.#ctor(System.Xml.XmlElement,System.String,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Construct a generic attack based on an Xml configuration
            </summary>
            <param name="attackDeclaration">The Xml node containing the specification</param>
            <param name="targetDefinitionName">The the type the attack is defined for (primarily)</param>
            <param name="attackManager">The default attack manager object to use for the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription.#ctor(System.Xml.XmlElement,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Construct a generic attack based on an Xml configuration
            </summary>
            <param name="attackDeclaration">The Xml node containing the specification</param>
            <param name="attackManager">The default attack manager object to use for the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription.SelectDefinition(System.Collections.Generic.List{MS.Swi.Data.ElementDefinition},System.Random)">
            <summary>
            Select a possibly valid definition from the list
            </summary>
            <param name="validDefinitions">The set of valid definitions</param>
            <param name="prnGenerator">The random number generator to use</param>
            <returns>The definition, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.GenericAttackDescription.SelectAttacks(MS.Swi.Data.ElementDefinition,System.String,System.Boolean,System.Boolean,System.Random)">
            <summary>
            Generate the complete list of attacks to be applied to the target token, based on this
            description
            </summary>
            <param name="targetDefinition">The target definition for attacks</param>
            <param name="contentsFrom">The name of the transformation that produced these contents, if it is known</param>
            <param name="tokenHasSizeRestrictions">Whether or not the token has size restrictions applied to it</param>
            <param name="tokenHasContentRestrictions">Whether or not the token has content restrictions applied to it</param>
            <param name="prnGenerator">The random number generator to be used when selecting which attack(s) to apply for generic attacks</param>
            <returns>The attacks to perform</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription">
            <summary>
            An attack description where the manipulations have been specified for discovery by reflection,
            but are designed to be run entirely sequentially. This should be the only attack description in the
            attack list for things to work optimally
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription.#ctor(System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager,System.String,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics)">
            <summary>
            Construct an attack description based on characteristics
            </summary>
            <param name="weight">The weight of the attack(s)</param>
            <param name="manager">The manipulation manager object to use for the attack</param>
            <param name="targetDefinition">The target definition</param>
            <param name="requiredCharacteristics">The characteristics that the manipulation(s) must match</param>
            <param name="excludedCharacteristics">The characteristics that the manipulation(s) must not match</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription.#ctor(System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics)">
            <summary>
            Construct an attack description that applies to all definitions based on characteristics
            </summary>
            <param name="weight">The weight of the attack(s)</param>
            <param name="manager">The manipulation manager object to use for the attack</param>
            <param name="requiredCharacteristics">The characteristics that the manipulation(s) must match</param>
            <param name="excludedCharacteristics">The characteristics that the manipulation(s) must not match</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription.#ctor(System.Xml.XmlElement,System.String,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Construct a generic attack based on an Xml configuration
            </summary>
            <param name="attackDeclaration">The Xml node containing the specification</param>
            <param name="targetDefinitionName">The the type the attack is defined for (primarily)</param>
            <param name="attackManager">The default attack manager object to use for the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription.#ctor(System.Xml.XmlElement,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Construct a specific attack based on an Xml configuration
            </summary>
            <param name="attackDeclaration">The Xml node containing the specification</param>
            <param name="attackManager">The default attack manager object to use for the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription.SelectDefinition(System.Collections.Generic.List{MS.Swi.Data.ElementDefinition})">
            <summary>
            Select a possibly valid definition from the list
            </summary>
            <param name="validDefinitions">The set of valid definitions</param>
            <returns>The definition, or null if one could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackDescription.SelectAttacks(MS.Swi.Data.ElementDefinition,System.String,System.Boolean,System.Boolean,System.Random)">
            <summary>
            Generate the complete list of attacks to be applied to the target token, based on the 
            description. Note that this will only do a set of structural OR content manipulations, not both,
            so the strategy SHOULD specify, although this is not required
            </summary>
            <param name="targetDefinition">The target definition for attacks</param>
            <param name="contentsFrom">The name of the transformation that produced these contents, if it is known</param>
            <param name="tokenHasSizeRestrictions">Whether or not the token has size restrictions applied to it</param>
            <param name="tokenHasContentRestrictions">Whether or not the token has content restrictions applied to it</param>
            <param name="prnGenerator">The random number generator to be used when selecting which attack(s) to apply for generic attacks</param>
            <returns>The attacks to perform</returns>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager">
            <summary>
            The attack manager is a helper class that the Attack uses to preserve information and provide access
            to some forms of information during the attack itself. For example, if the manipulation states for a manipulation
            are indexed based on the contents of the token being manipulated, something needs to track that information because
            the contents will have changed after the manipulation is applied. 
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.BeginDataMapResolution">
            <summary>
            Mark the start of the fuzzing of a DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.EndDataMapResolution(System.Boolean@)">
            <summary>
            Mark the end of the DataMap fuzzing.
            </summary>
            <param name="sequentialFuzzingExhausted">Whether or not sequential fuzzing sets have been exhausted (non-sequential attack managers ignore this)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.BeginAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.Data.IConstToken)">
            <summary>
            Mark the beginning of an attack, setting any necessary internal state
            </summary>
            <param name="manipulation">The manipulation being applied</param>
            <param name="characteristics">The characteristics of the manipulation being applied</param>
            <param name="targetToken">The target token being manipulated</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.BeginAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Mark the beginning of an attack, setting any necessary internal state
            </summary>
            <param name="manipulation">The manipulation being applied</param>
            <param name="characteristics">The characteristics of the manipulation being applied</param>
            <param name="targetEncapsulation">The target encapsulation being manipulated</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.EndAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult)">
            <summary>
            Mark the end of an attack, allowing clearing of internal state to help the memory manager
            </summary>
            <param name="result">The result of the manipulation</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.Reset">
            <summary>
            Reset the attack manager, clearing all internal state
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.ShouldCancelAttack">
            <summary>
            Determine if the attack should be cancelled. Note that it must be safe to call ShouldCancelAttack()
            multiple times between BeginAttack() and EndAttack() and the result should always be the same.
            </summary>
            <returns>True if the attack should be cancelled, false otherwise</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.RandomNumberGenerator">
            <summary>
            Provide access to the random number generator for this attack
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.Seed">
            <summary>
            Provide access to the random number seed generator, or change the seed
            (which also resets the random number generator)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager.ManipulationState">
            <summary>
            Provide access to the manipulation state for this attack
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager">
            <summary>
            A default implementation of IAttackManager, which provides basic support for random 
            seeds and manipulation states. 
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.#ctor">
            <summary>
            Construct a default attack manager with an automatic random number seed,
            based on the current time
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.#ctor(System.Int32)">
            <summary>
            Construct a default attack manager with a specific seed
            </summary>
            <param name="seed">The seed value to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.BeginDataMapResolution">
            <summary>
            Mark the start of the fuzzing of a DataMap
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.EndDataMapResolution(System.Boolean@)">
            <summary>
            Mark the end of the DataMap fuzzing.
            </summary>
            <param name="sequentialFuzzingExhausted">Whether or not sequential fuzzing sets have been exhausted (non-sequential attack managers ignore this)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.BeginAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.Data.IConstToken)">
            <summary>
            Cache the information we will need for processing during the attack. In this case,
            this is a specific attack manager for this fuzzer
            </summary>
            <param name="manipulation">The manipulation being applied</param>
            <param name="characteristics">The characteristics of the manipulation being applied</param>
            <param name="targetToken">The token being attacked</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.BeginAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Cache the information we will need for processing during the attack. In this case,
            this is a specific attack manager for this fuzzer
            </summary>
            <param name="manipulation">The manipulation being applied</param>
            <param name="characteristics">The characteristics of the manipulation being applied</param>
            <param name="targetEncapsulation">The token being attacked</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.EndAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult)">
            <summary>
            Release any data being cached at the end of the attack
            </summary>
            <param name="result">The result of the manipulation</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.ClearState(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,System.Int32)">
            <summary>
            Remove the state associated with the given manipulation and signature
            </summary>
            <param name="manipulation">The manipulation</param>
            <param name="attackSignature">The attack signature of the state</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.Reset">
            <summary>
            Reset the attack manager
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.ShouldCancelAttack">
            <summary>
            Determine if the manipulation should be cancelled
            </summary>
            <returns>True if the manipulation should be cancelled, false if it should continue</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.ActiveManipulation">
            <summary>
            Provides access to the active manipulation in the current attack
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.ActiveManipulationCharacteristics">
            <summary>
            Provide access to the characteristics of the active manipulation in the current attack
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.TargetTokenPosition">
            <summary>
            Provide access to the position of the targetted token (it will be null if this is a 
            targetted Encapsulation)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.TargetAttackSignature">
            <summary>
            The attack signature of the target
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.TargetIsEncapsulation">
            <summary>
            Whether or not we are targetting an encapsulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.Seed">
            <summary>
            Provide access to the random number seed generator, or change the seed
            (which also resets the random number generator)
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.ManipulationState">
            <summary>
            The manipulation state associated with the attack
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.DefaultAttackManager.RandomNumberGenerator">
            <summary>
            Provide access to the random number generator for this attack
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager">
            <summary>
            A sequential version of the DefaultAttackManager, adding support for sequential testing
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.#ctor">
            <summary>
            Construct a sequential attack manager with an automatic random number seed,
            based on the current time
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.#ctor(System.Int32)">
            <summary>
            Construct a sequential attack manager with a specific seed
            </summary>
            <param name="seed">The seed value to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.BeginDataMapResolution">
            <summary>
            Handle the start of the DataMap resolution
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.EndDataMapResolution(System.Boolean@)">
            <summary>
            Handle the end of the DataMap Resolution
            </summary>
            <param name="sequentialFuzzingExhausted"></param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.BeginAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Begin the attack, noting the attempt
            </summary>
            <param name="manipulation">The manipulation being applied</param>
            <param name="characteristics">The characteristics of the manipulation being applied</param>
            <param name="targetEncapsulation">The token being attacked</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.BeginAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.Data.IConstToken)">
            <summary>
            Begin the attack, noting the attempt
            </summary>
            <param name="manipulation">The manipulation being applied</param>
            <param name="characteristics">The characteristics of the manipulation being applied</param>
            <param name="targetToken">The token being attacked</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.EndAttack(MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult)">
            <summary>
            Note that the attack has ended
            </summary>
            <param name="result">The result of the attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.ShouldCancelAttack">
            <summary>
            Cancel the attack if we have already run this attack to completion
            </summary>
            <returns>Override the attack if the manipulation has been run, or we ran one this session</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.SequentialAttackManager.Reset">
            <summary>
            Reset the state of the AttackManager
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.Attack">
            <summary>
            The internal representation of a specific manipulation
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.#ctor(MS.Swi.FuzzerCommonLibrary.Manipulations.IFuzzerManipulation,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationCharacteristics,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager,System.String[])">
            <summary>
            Create the manipulation definition
            </summary>
            <param name="manipulation">The manipulation to apply</param>
            <param name="characteristics">The characteristics of the manipulation</param>
            <param name="manager"> The attack manager object to use</param>
            <param name="manipulationArguments">The arguments to pass</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.Manipulate(MS.Swi.Data.IConstToken,MS.Swi.Data.IConstDataContents,System.Object@)">
            <summary>
            Apply the manipulation to the target token, using the provided parameters and arguments
            </summary>
            <param name="token">The token the object belongs to</param>
            <param name="sourceContents">The source that the object belongs to</param>
            <param name="targetObject">The target to attack (the current value on input, the new value on output)</param>
            <returns>The manipulation results</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Manipulate the structure of the data map based on the target encapsulation
            </summary>
            <param name="targetMap">The target data map</param>
            <param name="encapsulation">The central encapsulation</param>
            <returns>The manipulation results</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.ManipulateStructure(MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken)">
            <summary>
            Manipulate the structure of the data map based on the target token
            </summary>
            <param name="targetMap">The target data map</param>
            <param name="token">The central token</param>
            <returns>The manipulation results</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.Manipulate(MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object})">
            <summary>
            Apply the manipulation to the target encapsulation, using the provided parameters and arguments
            </summary>
            <param name="encapsulation">The targeted encapsulation</param>
            <param name="contents">The contents to attack</param>
            <returns>The manipulation results</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.ManipulationType">
            <summary>
            Return the type of this manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.Characteristics">
            <summary>
            The characteristics of the manipulation
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.IsStructuralAttack">
            <summary>
            Does this represent an attack on the DataMap structure
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.Attack.IsContentAttack">
            <summary>
            Does this represent an attack on contents
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackList">
            <summary>
            A list (including weights) of possible attacks, for use in the AttackStrategy
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackList.Add(MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription)">
            <summary>
            Add the attack to the list
            </summary>
            <param name="attack">The new attack</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackList.Select(System.Random)">
            <summary>
            Select an attack, based on the relative weights, and using the provided prnGenerator
            </summary>
            <param name="prnGenerator">The random number generator to use</param>
            <returns>The selected attack</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackList.AttackDescriptions">
            <summary>
            Internal accessor to the set of attacks
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackList.Count">
            <summary>
            The count of attacks
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackSet">
            <summary>
            A set of attacks for a given type, based on the identifier for the type
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackSet.HasIdentifier(System.String)">
            <summary>
            Has an attack set been defined for this identifier
            </summary>
            <param name="identifier">The identifier</param>
            <returns>Whether or not there are attacks defined for this identifier</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackSet.Item(System.String)">
            <summary>
            Return the attack list associated with the identifier, creating one of there is no 
            attack list defined
            </summary>
            <param name="identifier">The identifier</param>
            <returns>The associated attack list, or null</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackSet.AttackLists">
            <summary>
            The attack list for the attack set
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedArgs">
            <summary>
            Report that an attack has been applied to a piece of data
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedArgs.#ctor(System.Type,System.String,MS.Swi.Data.TokenPosition,MS.Swi.FuzzerCommonLibrary.Manipulations.ManipulationResult)">
            <summary>
            Define the arguments for any type of attack on a given token
            </summary>
            <param name="manipulationType">The type of attack</param>
            <param name="dataType">The name of the data type of the token being attacked</param>
            <param name="position">The position of the element that was modified</param>
            <param name="result">The result of the manipulation</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedArgs.ManipulationType">
            <summary>
            The type of manipulation applied
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedArgs.DataType">
            <summary>
            The name of the data type involved
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedArgs.Position">
            <summary>
            The position of the data type involved
            </summary>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedArgs.Result">
            <summary>
            The result of the manipulation
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackAppliedEventHandler">
            <summary>
            Delegate definition for the Attack Strategy reporting event
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.IConstAttackStrategy">
            <summary>
            The read only (i.e. true const) interface for AttackStrategy
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.IConstAttackStrategy.Apply(MS.Swi.Data.DataMap,System.Boolean@)">
            <summary>
            Apply the mapping of manipulations on to the data map
            </summary>
            <param name="source">The data map</param>
            <param name="sequentialFuzzingExhausted">Whether or not sequential fuzzing has been exhausted</param>
            <returns>The fuzzed results</returns>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.IConstAttackStrategy.AttackManager">
            <summary>
            The AttackManager configured for the Strategy
            </summary>
        </member>
        <member name="E:MS.Swi.FuzzerCommonLibrary.Strategy.IConstAttackStrategy.AttackAppliedEvent">
            <summary>
            A callback event that indicates an attack has been applied. This is primarily useful for logging.
            </summary>
        </member>
        <member name="T:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy">
            <summary>
            An attack Strategy is a mapping of attacks to token definitions, and is used to 
            process the data
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.InstantiateAttackManagerByName(System.String)">
            <summary>
            Create an attack manager by classname
            </summary>
            <param name="attackManagerName">The name of the class manager</param>
            <returns>The instantiated object, or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructor to build a strategy based on applying any available manipulations, given
            the specified odds. Odds of greater than one million will be silently truncated to one million.
            </summary>
            <param name="tokenOddsInOneMillion">The odds of a token being manipulated (in one million)</param>
            <param name="encapsulationOddsInOneMillion">The odds of an encapsulation being manipulated (in one million).
            Unmanipulated encapsulations will have their contents treated with the token rules.</param>
            <param name="maximumManipulations">The maximum number of manipulations to apply per token or encapsulation</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor(System.UInt32,System.UInt32,System.UInt32,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Constructor to build a strategy based on applying any available manipulations, given
            the specified odds. Odds of greater than one million will be silently truncated to one million.
            </summary>
            <param name="tokenOddsInOneMillion">The odds of a token being manipulated (in one million)</param>
            <param name="encapsulationOddsInOneMillion">The odds of an encapsulation being manipulated (in one million).
            Unmanipulated encapsulations will have their contents treated with the token rules.</param>
            <param name="maximumManipulations">The maximum number of manipulations to apply per token or encapsulation</param>
            <param name="attackManager">The attack manager to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor(System.Xml.XmlNode)">
            <summary>
            Xml constructor, which builds a strategy based on an Xml node.
            </summary>
            <param name="strategy">The Xml reader</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor(System.Xml.XmlNode,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Xml constructor, which builds a strategy based on an Xml node.
            </summary>
            <param name="strategy">The Xml reader</param>
            <param name="attackManager">The default attack manager to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor(System.String)">
            <summary>
            Xml constructor which builds a strategy from an Xml file definition.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The file which contains the Xml definition of the strategy</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.#ctor(System.String,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Xml constructor which builds a strategy from an Xml file definition.  The filename will be searched for first as given,
            then in the local directory, and then in the FCL installation directory.
            </summary>
            <param name="fileName">The file which contains the Xml definition of the strategy</param>
            <param name="attackManager">The default attack manager to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.XmlParseStrategy(System.Xml.XmlNode,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Xml constructor, which builds a strategy based on an Xml file.
            </summary>
            <param name="strategy">The Xml reader</param>
            <param name="attackManager">The default attack manager to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.XmlParseAttackList(System.Xml.XmlNode,System.Boolean,System.Boolean,MS.Swi.FuzzerCommonLibrary.Strategy.IAttackManager)">
            <summary>
            Parse the attack list XmlNode, adding the attacks to the current strategy. Invalid or malformed
            Xml will generate an XmlException
            </summary>
            <param name="attackList">XmlNode encapsulating the attack list</param>
            <param name="isDefaultTokenList">Whether or not the list defines the default token attacks</param>
            <param name="isDefaultEncapsulationList">Whether or not the list defines the default encapsulation attacks</param>
            <param name="attackManager">The attack manager to use</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.HasAttacksDefined(System.String,System.String)">
            <summary>
            Determine whether or not there are attacks defined for this definition name and identifier. Note that
            if there are no attacks for this identifier, but there are attacks for the default identifier (the 
            empty string) then we will use those attacks
            </summary>
            <param name="definitionName">The definition name</param>
            <param name="identifier">The identifier</param>
            <returns>True if any attacks have been defined</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.GetDefinedAttacks(System.String,System.String)">
            <summary>
            Return the defined attacks for the identifier (or the default attacks, if there are no 
            specific attacks for the identifier). Please note that this may return an empty attack list or null
            if called directly, so use HasAttacksDefined() to check before using this function.
            </summary>
            <param name="definitionName">The definition name</param>
            <param name="identifier">The identifier</param>
            <returns>The attack list or null</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.ToString">
            <summary>
            AttackStrategy as human readable string
            </summary>
            <returns>The string</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.AddAttack(System.String,System.String,MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription)">
            <summary>
            Add the attack to the attack list for that definition
            </summary>
            <param name="targetName">The target data type that the attack applies to</param>
            <param name="identifier">The identifier for the type that the attack applies to</param>
            <param name="attackDescription">The attack description</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.AddDefaultTokenAttack(MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription)">
            <summary>
            Add an attack to the default token attack list
            </summary>
            <param name="attackDescription">The attack description</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.AddDefaultEncapsulationAttack(MS.Swi.FuzzerCommonLibrary.Strategy.AttackDescription)">
            <summary>
            Add an attack to the default encapsulation attack list
            </summary>
            <param name="attackDescription">The attack description</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.Apply(MS.Swi.Data.DataMap,System.Boolean@)">
            <summary>
            Apply the mapping of manipulations on to the data map
            </summary>
            <param name="source">The data map</param>
            <param name="prnGenerator">The random number generator to use at the AttackStrategy level</param>
            <param name="sequentialFuzzingExhausted">Whether or not sequential fuzzing was exhausted (this would only apply to sequential fuzzers, all others will always return false)</param>
            <returns>The fuzzed root elements of the DataMap</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.QueryTokenAttackInformation(System.Random,MS.Swi.Data.IConstToken,MS.Swi.Data.ElementDefinition@)">
            <summary>
            Query to determine what the desired targetting is for a given token
            </summary>
            <param name="prnGenerator">The random number generator</param>
            <param name="token">The token being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>True if the target should be attacked, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.DetermineTokenAttack(System.Random,MS.Swi.Data.IConstToken,System.Collections.Generic.List{MS.Swi.Data.ElementDefinition},System.Int32,MS.Swi.Data.ElementDefinition@)">
            <summary>
            Determine what the desired attack is for a given token
            </summary>
            <param name="prnGenerator">The random number generator</param>
            <param name="token">The token being considered</param>
            <param name="targetDefinitions">The list of definitions to use when determining the attack</param>
            <param name="definitionIndex">The currently being considered definition in that list</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>True if the target should be attacked, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.QueryEncapsulationAttackInformation(System.Random,MS.Swi.Data.IConstEncapsulation,MS.Swi.Data.ElementDefinition@)">
            <summary>
            Query to determine what the desired targetting is for a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator</param>
            <param name="encapsulation">The encapsulation being considered</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>True if the target should be attacked, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.DetermineEncapsulationAttack(System.Random,MS.Swi.Data.IConstEncapsulation,System.Collections.Generic.List{MS.Swi.Data.ElementDefinition},System.Int32,MS.Swi.Data.ElementDefinition@)">
            <summary>
            Determine what the desired attack is for a given encapsulation
            </summary>
            <param name="prnGenerator">The random number generator</param>
            <param name="encapsulation">The encapsulation being considered</param>
            <param name="targetDefinitions">The list of definitions to use when determining the attack</param>
            <param name="definitionIndex">The currently being considered definition in that list</param>
            <param name="definition">The definition to be used (or null if this is unimportant)</param>
            <returns>True if the target should be attacked, false if not</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.ResolveEncapsulationContents(System.Random,MS.Swi.Data.IConstEncapsulation,MS.Swi.Data.ElementDefinition,System.Collections.Generic.Dictionary{MS.Swi.Data.IConstDataContents,System.Object})">
            <summary>
            Resolve any changes being made to the token encapsulation
            </summary>
            <param name="prnGenerator">Unused random number generator (taken from DataMapResolver)</param>
            <param name="encapsulation">The encapsulation being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="contents">The contents (which will be modified in place)</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.ResolveEncapsulationStructure(System.Random,MS.Swi.Data.DataMap,MS.Swi.Data.IConstEncapsulation)">
            <summary>
            Resolve any changes to the DataMap which are focused on the target encapsulation
            </summary>
            <param name="prnGenerator">Unused random number generator (taken from DataMapResolver)</param>
            <param name="targetMap">The target data map</param>
            <param name="encapsulation">The target encapsulation</param>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.ResolveTokenContents(System.Random,MS.Swi.Data.IConstToken,MS.Swi.Data.ElementDefinition,MS.Swi.Data.IConstDataContents,System.Object)">
            <summary>
            Resolve any changes being made to the contents
            </summary>
            <param name="prnGenerator">Unused random number generator (taken from DataMapResolver)</param>
            <param name="token">The token being attacked</param>
            <param name="contentsDefinition">The definition of the contents being attacked</param>
            <param name="source">The source of the data contents</param>
            <param name="contents">The contents</param>
            <returns>The modified contents</returns>
        </member>
        <member name="M:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.ResolveTokenStructure(System.Random,MS.Swi.Data.DataMap,MS.Swi.Data.IConstToken)">
            <summary>
            Resolve any changes to the DataMap which are focused on the target token
            </summary>
            <param name="prnGenerator">Unused random number generator (taken from DataMapResolver)</param>
            <param name="targetMap">The target data map</param>
            <param name="token">The target token</param>
        </member>
        <member name="P:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.AttackManager">
            <summary>
            The AttackManager assocaited with the Strategy
            </summary>
        </member>
        <member name="E:MS.Swi.FuzzerCommonLibrary.Strategy.AttackStrategy.AttackAppliedEvent">
            <summary>
            A callback event that indicates an attack has been applied. This is primarily useful for logging.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\SWIGeneralTransformations.xml ===
﻿<?xml version="1.0"?>
<!-- SWI Provided General Transformation Table -->
<DataTransformations>
  <DataTransformation Name="AnsiStringTransformation" ElementSize="1" Characteristics="PartialTransformationValid" SourceDefinition="ByteArray"  OutputDefinition="String" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToAnsiTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.AnsiToByteTransformation" />
  <DataTransformation Name="AnsiCharacterTransformation" ElementSize="1" SourceDefinition="ByteArray"  OutputDefinition="Character" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToAnsiCharacterTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.AnsiCharacterToByteTransformation" />
  <DataTransformation Name="UnicodeStringTransformation" ElementSize="2" Characteristics="PartialTransformationValid"  SourceDefinition="ByteArray"  OutputDefinition="String" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToUnicodeTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnicodeToByteTransformation" />
  <DataTransformation Name="UnicodeCharacterTransformation" ElementSize="2" SourceDefinition="ByteArray"  OutputDefinition="Character" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToUnicodeCharacterTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnicodeCharacterToByteTransformation" />
  <DataTransformation Name="DoubleStringTransformation" Characteristics="VariableSize" SourceDefinition="String"  OutputDefinition="Float" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.StringToDoubleTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.DoubleToStringTransformation" />
  <DataTransformation Name="DecimalStringTransformation" Characteristics="VariableSize" SourceDefinition="String"  OutputDefinition="Decimal" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.StringToDecimalTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.DecimalToStringTransformation" />
  <DataTransformation Name="DoubleByteTransformation" ElementSize="8" SourceDefinition="ByteArray"  OutputDefinition="Float" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToDoubleTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.DoubleToByteTransformation" />
  <DataTransformation Name="FloatByteTransformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="Float" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToFloatTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.FloatToByteTransformation" />
  <DataTransformation Name="DecimalByteTransformation" ElementSize="16" SourceDefinition="ByteArray"  OutputDefinition="Decimal" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToDecimalTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.DecimalToByteTransformation" />
  <DataTransformation Name="IntegerStringTransformation" Characteristics="VariableSize" SourceDefinition="String"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.StringToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToStringTransformation" />
  <DataTransformation Name="IntegerBeInt64Transformation" ElementSize="8" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeInt64ToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToBeInt64Transformation" />
  <DataTransformation Name="IntegerLeInt64Transformation" ElementSize="8" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeInt64ToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToLeInt64Transformation" />
  <DataTransformation Name="IntegerBeInt32Transformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeInt32ToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToBeInt32Transformation" />
  <DataTransformation Name="IntegerLeInt32Transformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeInt32ToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToLeInt32Transformation" />
  <DataTransformation Name="IntegerBeInt16Transformation" ElementSize="2" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeInt16ToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToBeInt16Transformation" />
  <DataTransformation Name="IntegerLeInt16Transformation" ElementSize="2" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeInt16ToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToLeInt16Transformation" />
  <DataTransformation Name="IntegerByteTransformation" ElementSize="1" SourceDefinition="ByteArray"  OutputDefinition="Integer" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.IntegerToByteTransformation" />
  <DataTransformation Name="UnsignedIntegerStringTransformation" Characteristics="VariableSize" SourceDefinition="String"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.StringToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToStringTransformation" />
  <DataTransformation Name="UnsignedIntegerBeUInt64Transformation" ElementSize="8" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeUInt64ToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToBeUInt64Transformation" />
  <DataTransformation Name="UnsignedIntegerLeUInt64Transformation" ElementSize="8" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeUInt64ToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToLeUInt64Transformation" />
  <DataTransformation Name="UnsignedIntegerBeUInt32Transformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeUInt32ToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToBeUInt32Transformation" />
  <DataTransformation Name="UnsignedIntegerLeUInt32Transformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeUInt32ToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToLeUInt32Transformation" />
  <DataTransformation Name="UnsignedIntegerBeUInt16Transformation" ElementSize="2" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeUInt16ToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToBeUInt16Transformation" />
  <DataTransformation Name="UnsignedIntegerLeUInt16Transformation" ElementSize="2" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeUInt16ToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToLeUInt16Transformation" />
  <DataTransformation Name="UnsignedIntegerByteTransformation" ElementSize="1" SourceDefinition="ByteArray"  OutputDefinition="UnsignedInteger" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToUnsignedIntegerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.UnsignedIntegerToByteTransformation" />
  <DataTransformation Name="BooleanByteTransformation" ElementSize="1" SourceDefinition="ByteArray"  OutputDefinition="Boolean" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ByteToBooleanTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BooleanToByteTransformation" />
  <DataTransformation Name="BooleanLeUInt32Transformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="Boolean" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.LeUInt32ToBooleanTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BooleanToLeUInt32Transformation" />
  <DataTransformation Name="BooleanBeUInt32Transformation" ElementSize="4" SourceDefinition="ByteArray"  OutputDefinition="Boolean" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BeUInt32ToBooleanTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.BooleanToBeUInt32Transformation" />
</DataTransformations>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\MITMServer.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MITMServer</name>
    </assembly>
    <members>
        <member name="T:MS.Swi.Mitm.Services.IProcessingMitmLogEventArgs">
            <summary>
            COM Interface to MITM Server Processing Events
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IProcessingMitmLogEventArgs.SessionId">
            <summary>
            The session ID of the event
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IProcessingMitmLogEventArgs.Command">
            <summary>
            The command being logged (i.e. Intialize, Process, Report, Unwind, Shutdown)
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IProcessingMitmLogEventArgs.Action">
            <summary>
            The action being performed in the context of the command
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IProcessingMitmLogEventArgs.Text">
            <summary>
            The human readable description of the changes
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IProcessingMitmLogEventArgs.WasDataModified">
            <summary>
            Whether or not the event modified the data passing through it at this stage
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.ProcessingMitmLogEventArgs">
            <summary>
            MITM Server Processing Log Event Data 
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.MitmLogEventArgs">
            <summary>
            Argument definitions for events logged by instances of IMitmEventLogger
            
            By convention, the summary is human readable text. The additional information, if it is set,
            exists for other plugins, which should check the type of the sender to determine the nature of the data.
            
            Additionally, by convention, to indicate the processing of an Interface Function, the function name should
            be used as the command name.
            
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.MitmLogEventArgs.#ctor(MS.Swi.Mitm.MitmLogEventArgs.EventCommand,System.String,System.String,System.Collections.Generic.List{System.String},System.Object[])">
            <summary>
            Build a complete description of the event
            </summary>
            <param name="command">The command that is being executed (i.e. Intialize, Report, Unwind, Process, Shutdown)</param>
            <param name="eventAction">Description of the action going on in the context of the event</param>
            <param name="eventDescription">Text description of the event</param>
            <param name="dataModifications">The list of modifications applied or null. This is only meaningful for Process commands</param>
            <param name="additionalData">Additional event data. By convention, this should be all of the variables that make up the actual event.</param>
        </member>
        <member name="M:MS.Swi.Mitm.MitmLogEventArgs.#ctor(MS.Swi.Mitm.MitmLogEventArgs.EventCommand,System.String,System.String)">
            <summary>
            Minimal constructor for the event that does not include additional data
            </summary>
            <param name="command">The command that is being executed (i.e. Intialize, Report, Unwind, Process, Shutdown)</param>
            <param name="eventAction">Description of the action going on in the context of the event</param>
            <param name="eventDescription">Text description of the event</param>
        </member>
        <member name="M:MS.Swi.Mitm.MitmLogEventArgs.#ctor(MS.Swi.Mitm.MitmLogEventArgs)">
            <summary>
            Copy constructor that copies the contents
            </summary>
            <param name="sourceEvent">MitmLogEventArgs to include</param>
        </member>
        <member name="P:MS.Swi.Mitm.MitmLogEventArgs.Command">
            <summary>
            Event command
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.MitmLogEventArgs.Action">
            <summary>
            Event action
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.MitmLogEventArgs.Text">
            <summary>
            Event Summary
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.MitmLogEventArgs.WasDataModified">
            <summary>
            Return whether or not this stage modified the data it received in anyway. This is
            only valid for Process events, nothing else should modify the data passing through it.
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.MitmLogEventArgs.ModificationsApplied">
            <summary>
            The list of modifications that were applied to the data, if any. This is only meaningful for
            Process operations
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.MitmLogEventArgs.EventData">
            <summary>
            The data of the event
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.MitmLogEventArgs.EventCommand">
            <summary>
            The command that is being executed during the event
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.MitmLogEventArgs.EventCommand.Initialize">
            <summary>
            Session Initialize Command
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.MitmLogEventArgs.EventCommand.Shutdown">
            <summary>
            Session Shutdown Command
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.MitmLogEventArgs.EventCommand.Process">
            <summary>
            Process Command
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.MitmLogEventArgs.EventCommand.Report">
            <summary>
            Report Command
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.MitmLogEventArgs.EventCommand.Unwind">
            <summary>
            Unwind Command
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ProcessingMitmLogEventArgs.#ctor(System.UInt32,System.Object,MS.Swi.Mitm.MitmLogEventArgs)">
            <summary>
            Constructor to build the fuzzer server details from the received event
            </summary>
            <param name="sessionId">The session ID which generated the event</param>
            <param name="processor">The processor which generated the event</param>
            <param name="eventContents">The contents of the preceeding event</param>
        </member>
        <member name="P:MS.Swi.Mitm.Services.ProcessingMitmLogEventArgs.SessionId">
            <summary>
            The Session Id associated with the message
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.ProcessingMitmLogEventArgs.ProcessorType">
            <summary>
            The type of processor that sent the message
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.ProcessingMitmLogEventArgs.MS#Swi#Mitm#Services#IProcessingMitmLogEventArgs#Command">
            <summary>
            The string name of the command (for COM interop)
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.IStatusMitmLogEventArgs">
            <summary>
            COM Interface to MITM Server Status Log Events
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IStatusMitmLogEventArgs.Message">
            <summary>
            The message of the event
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IStatusMitmLogEventArgs.SessionId">
            <summary>
            The session the event came from
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.StatusMitmLogEventArgs">
            <summary>
            MITM Server Status Log Event Contents
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.StatusMitmLogEventArgs.#ctor(System.String)">
            <summary>
            Construct a Status Log event based on a message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.StatusMitmLogEventArgs.#ctor(System.UInt32,System.String)">
            <summary>
            Construct a Status Log event based on a message and a session
            </summary>
            <param name="sessionId">The associated session ID</param>
            <param name="message">The message</param>
        </member>
        <member name="P:MS.Swi.Mitm.Services.StatusMitmLogEventArgs.Message">
            <summary>
            Accessor for the message of the event
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.StatusMitmLogEventArgs.SessionId">
            <summary>
            The session Id (or InvalidSessionId) the message is associated with
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.ProcessingLogEventHandler">
            <summary>
            Definition of the MITM Server Processing Log Handler
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.StatusLogEventHandler">
            <summary>
            Definition of the MITM Server Status Log Handler
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.IMitmServerComEvents">
            <summary>
            COM Interface to MITM Server Events
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmServerComEvents.ProcessingEvent(System.Object,MS.Swi.Mitm.Services.ProcessingMitmLogEventArgs)">
            <summary>
            The processing event handler for COM
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Contents</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmServerComEvents.StatusEvent(System.Object,MS.Swi.Mitm.Services.StatusMitmLogEventArgs)">
            <summary>
            The status event handler for COM
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Contents</param>
        </member>
        <member name="T:MS.Swi.Mitm.Services.SessionData">
            <summary>
            Information regarding any specific session
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.SessionData.#ctor(System.UInt32,System.String,System.String,System.UInt32)">
            <summary>
            Create new session data associated with the given Id
            </summary>
            <param name="sessionId">The Id</param>
            <param name="applicationMachineName">The name of the machine the application associated with this session is running on</param>
            <param name="imageName">The name (preferably with full path) of the application image</param>
            <param name="applicationPid">The process id of the application associated with this session</param>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.Id">
            <summary>
            The id of the Session
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.ApplicationMachineName">
            <summary>
            The name of the machine the application associated with this session is using
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.ApplicationImageName">
            <summary>
            The name of the image for the application associated with this session
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.ApplicationPid">
            <summary>
            The process id of the application associated with this session
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.Processor">
            <summary>
            The processor for the session (or null if no processor is defined)
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.Monitors">
            <summary>
            The monitors for the session, expressed as RemoteClassSummary objects
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.HasProcessor">
            <summary>
            Whether or not a processor is defined for this session
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.SessionData.HasMonitors">
            <summary>
            Whether or not monitors are defined for this session
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.IMitmRemoteServer">
            <summary>
            COM Interface to the MITM Server
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmRemoteServer.Configure(System.String)">
            <summary>
            Set the implementation specific configuration information
            </summary>
            <param name="configuration">The configuration</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmRemoteServer.Start">
            <summary>
            Create and start the processing thread
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmRemoteServer.StartPaused">
            <summary>
            Create and start the processing thread in a paused state
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmRemoteServer.Join">
            <summary>
            Join the processing thread if one exists
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmRemoteServer.LoadAssemblies(System.String)">
            <summary>
            Load managed assemblies found in any specific directory
            </summary>
            <param name="directory">The specified directory</param>
            <returns>True if any assemblies were loaded, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmRemoteServer.Shutdown">
            <summary>
            Shut down an actively running server
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Server">
            <summary>
            The core MITM service, the Server defines the mechanism for handling remote invocations of MITM
            commands. The Server subclasses define the implementation of the IPC used.
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.#ctor">
            <summary>
            Constructor for Server Objects
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.LoadAssemblies(System.String)">
            <summary>
            Load managed assemblies found in any specific directory. This was originally native to 
            Server, but was kept after being moved to CTFCore to provide a COM compliant interface
            for COM based tools. It was kept in Server for historical reasons.
            </summary>
            <param name="directory">The specified directory</param>
            <returns>True if assemblies were loaded, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ListProcessors">
            <summary>
            Return a list of all known processors 
            </summary>
            <returns>The list of known processors as an array of strings</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ListMonitors">
            <summary>
            Return a list of all known monitors 
            </summary>
            <returns>The list of known monitors as an array of strings</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.Usage(System.String)">
            <summary>
            Return the usage for a given class of IMitmRemoteClass. Note that this requires instantiation, as the
            C# Interface structure does not allow for static interfaces
            </summary>
            <param name="className">The name of the class</param>
            <returns>The string describing the usage or null if no usage was found</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ActivePlugIns">
            <summary>
            Construct a new arraylist containing all of the active plugins as
            IConstMitmServerPlugIn objects
            </summary>
            <returns>The array list of plugins</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.GetPlugIn(System.String)">
            <summary>
            Get a PlugIn by exact identifier
            </summary>
            <param name="identifier">The identifier</param>
            <returns>The plug in or null if it could not be found</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.GetSession(System.UInt32)">
            <summary>
            Get the session data associated with the specified session Id
            </summary>
            <param name="sessionId">The session ID</param>
            <returns>The session data</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.GetSessions(System.String,System.UInt32)">
            <summary>
            Get all sessions associated with the specific machine/process
            </summary>
            <param name="machineName">The machine the process is resident on</param>
            <param name="processId">The process id</param>
            <returns>The matching sessions</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.LoadPlugIn(System.String,MS.Swi.Mitm.RemoteClassDefinition,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Load a plugin to the server
            </summary>
            <param name="identifier">The identifier for the plugin</param>
            <param name="plugInDefinition">The definition of the plugin</param>
            <param name="errorCode">The error code</param>
            <returns>True if the plugin was loaded (or was already loaded), false if it failed</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.UnloadPlugIns(System.String)">
            <summary>
            Unload a specified plugin or plugins from the server (using the identifier as a regular expression)
            </summary>
            <param name="identifier">The identifier</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.CommandPlugIns(System.String,System.String,System.String[])">
            <summary>
            Notify the matching plugins of the command
            </summary>
            <param name="identifier">The plugin identifier (to be used as a regular expression)</param>
            <param name="command">The command to use</param>
            <param name="arguments">The arguments to the command</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.TerminateSession(System.UInt32)">
            <summary>
            Terminate a session. While equivalent to EndSession, this includes additional logging and
            should be used when the process no longer exists, but was unable to close the session cleanly
            </summary>
            <param name="sessionId">The session to terminate</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.InstantiateRemoteClass(MS.Swi.Mitm.Services.SessionData,MS.Swi.Mitm.RemoteClassDefinition,System.String,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Instantiate a remote class based on the name
            </summary>
            <param name="associatedSession">The session the class is associated with</param>
            <param name="definition">The definition of the class</param>
            <param name="requiredInterface">The required interface that the class must exhibit</param>
            <param name="errorCode">The error code</param>
            <returns>The initialized remote class, or null if the initialization failed</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.SatisfyMonitorRequirements(MS.Swi.Mitm.IMitmRemoteClass,MS.Swi.Mitm.Services.SessionData,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Attempt to satisfy the monitor requirements of a loading remote class
            </summary>
            <param name="remoteClass">The class which may or may not have required monitors </param>
            <param name="associatedSession"></param>
            <param name="errorCode">The error code of the results</param>
            <returns>True if the requirements were met, false otherwise</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.InstantiatePlugIn(System.String,MS.Swi.Mitm.RemoteClassDefinition,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Instantiate a plugin given the specified arguments
            </summary>
            <param name="identifier">The identifier to use for the plugin</param>
            <param name="plugInDefinition">The definition of the plugin</param>
            <param name="errorCode">The error code</param>
            <returns>The instantiated plugin or null</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteRequestPlugIn(System.String,MS.Swi.Mitm.RemoteClassDefinition,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Request a plug in with the specified arguments. 
            </summary>
            <param name="identifier">The identifier to use for the plugin</param>
            <param name="plugInDefinition">The definition of the plugin</param>
            <param name="errorCode">The error code</param>
            <returns>True if the plugin was instantiated or already existed, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteCommandPlugIns(System.String,System.String,System.String[])">
            <summary>
            Send a command to all matching plug ins
            </summary>
            <param name="identifier">The identifier (which will be used as a regular expression for matching)</param>
            <param name="command">The command</param>
            <param name="arguments">Any arguments to the command</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteStartSession(System.String,System.String,System.UInt32,MS.Swi.Mitm.RemoteClassDefinition,MS.Swi.Mitm.RemoteClassDefinition[],System.UInt32@,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Create a session by creating an instance of the requested processor and monitors
            </summary>
            <param name="applicationMachine">The machine name that the instrumented application is running on</param>
            <param name="imageName">The image name (preferrably with full path) of the instrumented application</param>
            <param name="applicationPid">The process id of the instrumented application</param>
            <param name="sessionProcessor">The definition of the session processor to invoke (or NULL if there isn't one)</param>
            <param name="sessionMonitors">The array of session monitors to invoke (either NULL or an empty array is valid if there are none)</param>
            <param name="sessionId">The resulting session ID in the case of success</param>
            <param name="errorCode">The error code if creation failed</param>
            <returns>True if the session was created, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteEndSession(System.UInt32)">
            <summary>
            End an existing session
            </summary>
            <param name="sessionId">The session Id</param>
            <returns>True if the session was found, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteReport(System.UInt32,System.String,System.String,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer},System.Boolean@)">
            <summary>
            Execute a report operation on the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="dataBuffers">Array of IConstDataBuffer objects containing the information</param>
            <param name="debuggingRequested">True if the monitor requests the instrumented application execute a DebugBreak()</param>
            <returns>True if the operation worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteProcess(System.UInt32,System.String,System.String,System.Collections.Generic.List{MS.Swi.Data.DataBuffer},System.Boolean@,System.Boolean@,System.Boolean@,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Execute a process operation on the specified session. Note that this will transparently 
            act the same as a report operation if no processor is defined
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="dataBuffers">Array of DataBuffer objects containing the information</param>
            <param name="processingDeferred">True if the processor decided to hold this data pending further</param>
            <param name="debuggingRequested">True if the IMitmProcessor requests that the instrumented application execute a DebugBreak()</param>
            <param name="sequentialFuzzingExhausted">True if the IMitmProcessor has determined that the sequential fuzzing sequence has been exhausted (sequential fuzzers only)</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>True if the operation worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteUnwind(System.UInt32,System.String,System.String,System.UInt32,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Execute an unwind operation on the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for the unwind</param>
            <param name="unwindSize">The number of bytes to unwind</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>
            Whether or not the unwind was successful. Processors that do not track data should always
            return true.
            </returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.ExecuteLogMessage(System.UInt32,System.String,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Log a text message received from the instrumentation (note that this does NOT check
            the sender, so it IS vulnerable to spoofing, however this is an internal testing tool)
            </summary>
            <param name="sessionId">The session ID or InvalidSessionId if it applies to more than one (or no) sessions</param>
            <param name="message">The message</param>
            <param name="errorCode">The error code</param>
            <returns>True if it worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.HandleProcessorLogEvent(System.Object,MS.Swi.Mitm.MitmLogEventArgs)">
            <summary>
            Wrap the IMitmProcessorEventLogger with the session Id and type information, and pass it
            along
            </summary>
            <param name="sender">The original source</param>
            <param name="arguments">The original arguments</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.LogStatusEvent(System.String,System.Object[])">
            <summary>
            Issue a status event to any listeners
            </summary>
            <param name="format">The format string</param>
            <param name="arguments">The arguments</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.LogStatusEvent(System.String)">
            <summary>
            Safety version for cases where the message is a simple string
            </summary>
            <param name="message">The message in question</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.LogStatusEvent(System.UInt32,System.String)">
            <summary>
            Safety version for cases where the message is a simple string
            </summary>
            <param name="sessionId">The associated session ID</param>
            <param name="message">The message in question</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Server.LogStatusEvent(System.UInt32,System.String,System.Object[])">
            <summary>
            Issue a status event to any listeners
            </summary>
            <param name="sessionId">The associated session ID</param>
            <param name="format">The format string</param>
            <param name="arguments">The arguments</param>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Server.mLock">
            <summary>
            The common lock object for the Server implementations
            </summary>
        </member>
        <member name="E:MS.Swi.Mitm.Services.Server.ProcessingEvent">
            <summary>
            Event for events generated by IMitmRemoteClass objects
            </summary>
        </member>
        <member name="E:MS.Swi.Mitm.Services.Server.StatusEvent">
            <summary>
            Event hook for server status messages
            </summary>
        </member>
        <member name="E:MS.Swi.Mitm.Services.Server.PlugInEvent">
            <summary>
            Event hook for plugin registration/unregistration events
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.LocalServer">
            <summary>
            A server providing local interfaces allowing for it to be directly called by the owning code
            </summary>
            
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.StartSession(MS.Swi.Mitm.RemoteClassDefinition,MS.Swi.Mitm.RemoteClassDefinition[],System.UInt32@,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Create a session by creating an instance of the requested processor and monitors
            </summary>
            <param name="sessionProcessor">The definition of the session processor to invoke (or NULL if there isn't one)</param>
            <param name="sessionMonitors">The array of session monitors to invoke (either NULL or an empty array is valid if there are none)</param>
            <param name="sessionId">The resulting session ID in the case of success</param>
            <param name="errorCode">The error code if creation failed</param>
            <returns>True if the session was created, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.EndSession(System.UInt32)">
            <summary>
            End an existing session
            </summary>
            <param name="sessionId">The session Id</param>
            <returns>True if the session was found, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.Report(System.UInt32,System.String,System.String,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer},System.Boolean@)">
            <summary>
            Pass data to be analyzed to the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="dataBuffers">Array of IConstDataBuffer objects containing the information</param>
            <param name="debuggingRequested">True if the monitor requests the instrumented application execute a DebugBreak()</param>
            <returns>True if the operation worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.Process(System.UInt32,System.String,System.String,System.Collections.Generic.List{MS.Swi.Data.DataBuffer},System.Boolean@,System.Boolean@,System.Boolean@,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Pass data to be processed to the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="dataBuffers">Array of Mitm.DataBuffer objects containing the information</param>
            <param name="processingDeferred">True if the processor decided to hold this data pending further</param>
            <param name="debuggingRequested">True if the IMitmProcessor requests that the instrumented application execute a DebugBreak()</param>
            <param name="sequentialFuzzingExhausted">True if the IMitmProcessor has determined that the sequential fuzzing sequence has been exhausted (sequential fuzzers only)</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>True if the operation worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.Process(System.UInt32,System.String,System.String,MS.Swi.Data.DataBuffer,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            A simplified call to pass a single buffer to be processed by the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="buffer">The DataBuffer containing the information</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>True if the operation worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.Process(System.UInt32,System.String,System.String,MS.Swi.Data.DataBuffer,System.Boolean@,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            A simplified call to pass a single buffer to be processed by the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="buffer">The DataBuffer containing the information</param>
            <param name="sequentialFuzzingExhausted">Whether or not sequential fuzzing is exhausted for sequential fuzzing schemes</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>True if the operation worked, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LocalServer.Unwind(System.UInt32,System.String,System.String,System.UInt32,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Unwind the last operation on the specified session
            </summary>
            <param name="sessionId">The session Id</param>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for the unwind</param>
            <param name="unwindSize">The number of bytes to unwind</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>
            Whether or not the unwind was successful. Processors that do not track data should always
            return true.
            </returns>
        </member>
        <member name="T:MS.Swi.Mitm.Services.RemoteServer">
            <summary>
            Parent class for all RemoteServer classes, that is, those which are designed
            to service requests from other processes
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.Configure(System.String)">
            <summary>
            Set the implementation specific configuration information
            </summary>
            <param name="configuration">The configuration</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.StartPaused">
            <summary>
            Create the processing thread, but do not start it
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.Start">
            <summary>
            Create and start the processing thread
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.Join">
            <summary>
            Join the processing thread if one exists
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.Shutdown">
            <summary>
            Shut down an actively running server
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.Process">
            <summary>
            The main processing loop of an active RemoteServer object
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RemoteServer.ShouldShutdown">
            <summary>
            Determine if the server should shutdown
            </summary>
            <returns>True if the server should shutdown, otherwise false</returns>
        </member>
        <member name="P:MS.Swi.Mitm.Services.RemoteServer.AssociatedThread">
            <summary>
            The thread associated with the server object
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.NamedPipeServer">
            <summary>
            NamedPipe based instance of the MITM Server
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.NamedPipeServer.Configure(System.String)">
            <summary>
            The named pipe implementation of Configure uses the configuration
            string to define the named pipe
            </summary>
            <param name="configuration">The name of the named pipe</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.NamedPipeServer.Process">
            <summary>
            Main processing loop for the NamedPipe server object.
            
            NOTE: This is NOT reentrant, and should never be called more than once. 
            
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.NamedPipeServer.PipeName">
            <summary>
            The name of the pipe associated with the server
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.NamedPipeServer.NativeMethods.Overlapped.#ctor(System.IntPtr)">
            <summary>
            Event specific cosntructor
            </summary>
            <param name="hApplicableEvent">The event to use</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.NamedPipeServer.NativeMethods.Overlapped.#ctor">
            <summary>
            General constructor
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.NamedPipeServer.NativeMethods.Overlapped.Reset(System.IntPtr)">
            <summary>
            Reset the overlapped structure (including the event)
            </summary>
            <param name="hApplicableEvent"></param>
        </member>
        <member name="T:MS.Swi.Mitm.Services.ClientToServerMessage">
            <summary>
            The base definition of all received messages, the ClientToServerMessage
            implements static deserialization functions, and defines the interface
            to the message processing.
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.#cctor">
            <summary>
            Build a map of the extant ClientToServer messages for translation of incoming
            packets.
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Process the message and return the appropriate ServerToClientMessage to respond with
            </summary>
            <param name="server">The server object to process against</param>
            <returns>The corresponding ServerToClientMessage that represents the response</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.Deserialize(System.Byte[])">
            <summary>
            Deserialize the byte array into a ClientToServerMessage, or return null if no such
            dereferencing was possible.
            </summary>
            <param name="buffer">The raw byte array</param>
            <returns>The instantiated ClientToServerMessage</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.DeserializeBool(System.Byte[],System.UInt32@,System.Boolean@)">
            <summary>
            Deserialize a boolean from the byte array
            </summary>
            <param name="buffer">Source data</param>
            <param name="sourceIndex">Current index into the source data</param>
            <param name="resultValue">The decoded value</param>
            <returns>True if a bool could be decoded, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.DeserializeDWORD(System.Byte[],System.UInt32@,System.UInt32@)">
            <summary>
            Deserialize a DWORD from the byte array 
            </summary>
            <param name="buffer">Source data</param>
            <param name="sourceIndex">Current index into the source data</param>
            <param name="resultValue">The decoded value</param>
            <returns>True if a DWORD could be decoded, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.DeserializeBuffer(System.Byte[],System.UInt32@,MS.Swi.Data.DataBuffer@)">
            <summary>
            Deserialize a data buffer from the byte array
            </summary>
            <param name="buffer">Source data</param>
            <param name="sourceIndex">Current index into the source data</param>
            <param name="resultValue">The decoded buffer</param>
            <returns>True if a buffer could be decoded, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.DeserializeString(System.Byte[],System.UInt32@,System.String@)">
            <summary>
            Deserialize a Unicode string from the byte array
            </summary>
            <param name="buffer">The source data</param>
            <param name="sourceIndex">Current index into the source data</param>
            <param name="resultValue">The deserialized string</param>
            <returns>True if a string could be extracted, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ClientToServerMessage.DeserializeRemoteClassDefinition(System.Byte[],System.UInt32@,MS.Swi.Mitm.RemoteClassDefinition@)">
            <summary>
            Deserialize a remote class definition (a monitor or processor)
            </summary>
            <param name="buffer">The source data</param>
            <param name="sourceIndex">Current index into the source data</param>
            <param name="resultValue">The remote class definition</param>
            <returns>True if a remote class definition was deserialized, false if not</returns>
        </member>
        <member name="T:MS.Swi.Mitm.Services.ServerToClientMessage">
            <summary>
            The base definition of all transmitted messages, the ServerToClientMessage
            defines the external serializer, and implements static serialization functions.
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ServerToClientMessage.Serialize(System.Byte[],System.UInt32@)">
            <summary>
            Serialize the message for transmission to the client.
            </summary>
            <param name="buffer">Byte buffer for serialization</param>
            <param name="sizeUsed">The amount of the buffer we used</param>
            <returns>True if the message could be serialized, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ServerToClientMessage.SerializeBool(System.Byte[],System.UInt32@,System.Boolean)">
            <summary>
            Serialize a bool into the output buffer
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="destinationIndex">The current index into the buffer</param>
            <param name="sourceValue">The bool value</param>
            <returns>True if the bool was serialized, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ServerToClientMessage.SerializeDWORD(System.Byte[],System.UInt32@,System.UInt32)">
            <summary>
            Serialize a DWORD into the output buffer
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="destinationIndex">The current index into the buffer</param>
            <param name="sourceValue">The DWORD value</param>
            <returns>True if the DWORD was serialized, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ServerToClientMessage.SerializeBuffer(System.Byte[],System.UInt32@,MS.Swi.Data.DataBuffer)">
            <summary>
            Serialize a FuzzerCore buffer into the output buffer
            </summary>
            <param name="buffer">The target buffer</param>
            <param name="destinationIndex">The current index into the buffer</param>
            <param name="sourceValue">The buffer to serialize</param>
            <returns>True if the buffer could be serialized, False if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.CommandSucceededMessage.Serialize(System.Byte[],System.UInt32@)">
            <summary>
            Serialize the message for transmission to the client.
            </summary>
            <param name="buffer">Byte buffer for serialization</param>
            <param name="sizeUsed">The amount of the buffer we used</param>
            <returns>True if the message could be serialized, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.CommandFailedMessage.Serialize(System.Byte[],System.UInt32@)">
            <summary>
            Serialize the message for transmission to the client.
            </summary>
            <param name="buffer">Byte buffer for serialization</param>
            <param name="sizeUsed">The amount of the buffer we used</param>
            <returns>True if the message could be serialized, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.SessionStartedMessage.Serialize(System.Byte[],System.UInt32@)">
            <summary>
            Serialize the message for transmission to the client.
            </summary>
            <param name="buffer">Byte buffer for serialization</param>
            <param name="sizeUsed">The amount of the buffer we used</param>
            <returns>True if the message could be serialized, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ReportModifiedDataMessage.Serialize(System.Byte[],System.UInt32@)">
            <summary>
            Serialize the message for transmission to the client.
            </summary>
            <param name="buffer">Byte buffer for serialization</param>
            <param name="sizeUsed">The amount of the buffer we used</param>
            <returns>True if the message could be serialized, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ReportProcessingDeferredMessage.Serialize(System.Byte[],System.UInt32@)">
            <summary>
            Serialize the message for transmission to the client.
            </summary>
            <param name="buffer">Byte buffer for serialization</param>
            <param name="sizeUsed">The amount of the buffer we used</param>
            <returns>True if the message could be serialized, false if not</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RequestPlugInMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.RequestPlugInMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Request a plugin with the specified characteristics
            </summary>
            <param name="server">The server to process against</param>
            <returns>Either a Command Succeeded packet, or a Command Failed packet</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.CommandPlugInsMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.CommandPlugInsMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Notify any matching plugins
            </summary>
            <param name="server">The server to process against</param>
            <returns>Either a Command Succeeded packet, or a Command Failed packet</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.StartSessionMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.StartSessionMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Create a new session using the specified class and arguments, and return the Session Id to the
            client.
            </summary>
            <param name="server">The server to process against</param>
            <returns>Either a Session Started packet, or a Command Failed packet</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.EndSessionMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="Contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.EndSessionMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Close the session down if it was active.
            </summary>
            <returns>Command Succeeded or Command Failed message</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ProcessDataMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="Contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ProcessDataMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Process the incoming data
            </summary>
            <returns>Command Succeeded or Command Failed message</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ReportDataMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="Contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.ReportDataMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Close the session down if it was active.
            </summary>
            <returns>Command Succeeded or Command Failed message</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.UnwindProcessedDataMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="Contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.UnwindProcessedDataMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Unwind the data
            </summary>
            <returns>Command Succeeded or Command Failed message</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LogMessageMessage.#ctor(System.Byte[])">
            <summary>
            Extract the message from the byte array. The protocol is defined in a separate VSD, and is
            implemented on the opposite side in MITMClient, which is used by unmanaged code.
            </summary>
            <param name="Contents">The raw byte array</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.LogMessageMessage.Process(MS.Swi.Mitm.Services.Server)">
            <summary>
            Unwind the data
            </summary>
            <returns>Command Succeeded or Command Failed message</returns>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Constants.MessageBufferSize">
            <summary>
            The maximum size for data transmitted to or from the MITM Server
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Constants.InvalidSessionId">
            <summary>
            An illegal session (or no session ID specified)
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.MitmServerPlugInEventType">
            <summary>
            Enumeration detailing what sort of plugin event has occurred
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.MitmServerPlugInEventType.None">
            <summary>
            No event occurred
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.MitmServerPlugInEventType.Registered">
            <summary>
            A plugin has been registered
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.MitmServerPlugInEventType.Unregistered">
            <summary>
            A plugin has been unregistered
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.MitmServerPlugInEventArgs">
            <summary>
            Event contents for IMitmServerPlugIn events
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.MitmServerPlugInEventArgs.#ctor(MS.Swi.Mitm.Services.MitmServerPlugInEventType,MS.Swi.Mitm.Services.IConstMitmServerPlugIn)">
            <summary>
            Construct a PlugIn event based on the type and object
            </summary>
            <param name="type">The event type</param>
            <param name="plugIn">The plugin referenced</param>
        </member>
        <member name="P:MS.Swi.Mitm.Services.MitmServerPlugInEventArgs.EventType">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.MitmServerPlugInEventArgs.PlugIn">
            <summary>
            The associated plugin
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.MitmServerPlugInEventHandler">
            <summary>
            Declaration for handlers for the MitmServerPlugIn events
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.IConstMitmServerPlugIn">
            <summary>
            A read-only interface to the IMitmServerPlugIn object, this provides only the identifier
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.IConstMitmServerPlugIn.Identifier">
            <summary>
            The common storage identifier associated with the plugin
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.IMitmServerPlugIn">
            <summary>
            The definition of MITM Server plugins. By convention, any plugin should store any information it 
            wants accessible to other components in CommonStorage, using the identifier defined for the plugin
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmServerPlugIn.Register(MS.Swi.Mitm.Services.Server,System.String,System.String[])">
            <summary>
            Register the plugin for use
            </summary>
            <param name="parentServer">The server the plugin is attached to</param>
            <param name="identifier">The identifier for this plugin interface. By convention, it should be used as identifier for any CommonStorage objects the plugin exposes</param>
            <param name="arguments">The initialization arguments</param>
            <returns>True if the plugin is now valid, false otherwise</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmServerPlugIn.Unregister">
            <summary>
            Unregister the plugin, removing it from the Server
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.IMitmServerPlugIn.Command(System.String,System.String[])">
            <summary>
            Respond to a command. The command itself is relayed by the Server 
            </summary>
            <param name="command">The command string</param>
            <param name="arguments">Any command arguments</param>
        </member>
        <member name="T:MS.Swi.Mitm.ErrorCode">
            <summary>
            Error values for remote objects
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorNone">
            <summary>
            No error occurred
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorUnknown">
            <summary>
            An unknown error occurred
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorIllegalArgument">
            <summary>
            An illegal argument was provided
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorNotInitialized">
            <summary>
            The IMitmRemoteClass was not initialized before a command was invoked
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorAlreadyInitialized">
            <summary>
            The IMitmRemoteClass was already initialized before an Initialize command was invoked
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorConflictingInstanceAlreadyExists">
            <summary>
            A requested IMitmPlugIn or IMitmMonitor with a contradictory definition already existed
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ApplicationErrorCodesStart">
            <summary>
            Start of the region of error codes reserved for use by applications which provide an
            interface to an IMitmProcessor object
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorMemFailure">
            <summary>
            Memory allocation failure in the instrumentation
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorIpcFailure">
            <summary>
            IPC failure in the instrumentation
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorUnexpectedResponse">
            <summary>
            Instrumentation received an unexpected response from the server 
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorInterfaceAlreadyActive">
            <summary>
            Attempt to reuse an active instrumentation interface
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorInterfaceNotActive">
            <summary>
            Attempt to use an inactive instrumentation interface
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorClassNotValidInterface">
            <summary>
            The requested class does not implement the required interface
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorClassNotFound">
            <summary>
            The requested class could not be found
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorClassNotInstantiated">
            <summary>
            The requested class failed instantiation for some reason
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorSessionNotActive">
            <summary>
            The session is not active
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.ErrorCode.ErrorClassNotProperlyDefined">
            <summary>
            The remote class is not properly defined
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.RemoteClassSummary">
            <summary>
            The summary for a remotely invoked class (i.e. an IMitmRemoteClass or an IMitmServerPlugIn object)
            which consists of a reference to the remotely invoked object, and the arguments that it was created
            with
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassSummary.#ctor(System.Object,MS.Swi.Mitm.RemoteClassDefinition)">
            <summary>
            The only valid constructor, it takes a remote class object and the arguments it was created
            with and caches them for further use
            </summary>
            <param name="remoteClass">The remote class</param>
            <param name="definition">The definition the class was based on</param>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassSummary.MatchesExactly(MS.Swi.Mitm.IConstRemoteClassDefinition)">
            <summary>
            Determine if the already existing object is a match for a request. Note that the arguments
            ARE case sensitive. This may well be more restrictive than the
            actual remote object, but it is more important to avoid false positives.
            </summary>
            <param name="request">The requested class to instantiate</param>
            <returns>True if the classname and all arguments match exactly</returns>
        </member>
        <member name="M:MS.Swi.Mitm.RemoteClassSummary.ConflictsWith(MS.Swi.Mitm.IConstRemoteClassDefinition)">
            <summary>
            Determine if the already existing object conflicts with the request. Note that the arguments
            ARE case sensitive. This may well be more restrictive than the
            actual remote object, but it is more important to avoid false positives.
            </summary>
            <param name="request">The requested class to instantiate</param>
            <returns>True if the classname and all arguments do not conflict with the summary object</returns>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassSummary.Instance">
            <summary>
            The instance of the remote class
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassSummary.Monitor">
            <summary>
            Return the instance as an IMitmMonitor
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassSummary.Processor">
            <summary>
            Return the instance as an IMitmProcessor
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassSummary.PlugIn">
            <summary>
            Return the instance as an IMitmServerPlugIn
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.RemoteClassSummary.Classname">
            <summary>
            The classname of the instance
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IMitmRemoteClass">
            <summary>
            The base interface for both IMitmProcessor objects and
            IMitmMonitor objects, defining the startup and shutdown
            of a remote object
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmRemoteClass.Initialize(System.String,System.UInt32,System.UInt32,System.String[],MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Initialize the remote class
            </summary>
            <param name="machineName">The machine name the remote application is on</param>
            <param name="processId">The processId of the remote application</param>
            <param name="sessionId">The sessionId of the created session</param>
            <param name="arguments">Array of arguments</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>Whether or not initialization was successful</returns>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmRemoteClass.Shutdown">
            <summary>
            Shutdown any internal information the remote class has, as this instance is not going to be used
            again without an Initialize() call.
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmRemoteClass.RequiredMonitors">
            <summary>
            The array list of IMitmMonitor objects this remote class requires. Note that the RequiredMonitors
            will be queried immediately AFTER Initializaton. 
            
            If the monitor already exists, and the arguments provided are a matching subset (in order, because
            order is important) of the arguments that were used to create it, then the existing monitor will be used.
            If the monitor already exists, but the arguments do not match, then the server will be unable to meet
            the requirements. 
            
            Otherwise, the server will attempt to create the required monitor.
            </summary>
            <returns>The link demands, or null if there are none</returns>
        </member>
        <member name="T:MS.Swi.Mitm.IMitmMonitor">
            <summary>
            IMitmProcessor
            	Interface for any Fuzzer built on top of the common Mitm
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmMonitor.Report(System.String,System.String,MS.Swi.Data.Generic.ConstList{MS.Swi.Data.IConstDataBuffer,MS.Swi.Data.DataBuffer},System.Boolean@)">
            <summary>
            Analyze a set of buffers
            </summary>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="buffers">Array of IConstDataBuffer objects containing the information</param>
            <param name="requestDebugging">True if the monitor requests the instrumented application execute a DebugBreak()</param>
        </member>
        <member name="T:MS.Swi.Mitm.IMitmProcessor">
            <summary>
            IMitmProcessor
            	Interface for any Fuzzer built on top of the common Mitm
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmProcessor.Process(System.String,System.String,System.Collections.Generic.List{MS.Swi.Data.DataBuffer},System.Boolean@,System.Boolean@,System.Boolean@,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            Process a set of buffers
            </summary>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for processing</param>
            <param name="buffers">Array of DataBuffer objects containing the information</param>
            <param name="processingDeferred">True if the processor decided to hold this data pending further</param>
            <param name="debuggingRequested">True if the IMitmProcessor requests that the instrumented application execute a DebugBreak()</param>
            <param name="sequentialFuzzingExhausted">True if the IMitmProcessor has determined that a sequential fuzzing sequence was exhausted</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns></returns>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmProcessor.Unwind(System.String,System.String,System.UInt32,MS.Swi.Mitm.ErrorCode@)">
            <summary>
            If the processor is holding data to track a history, inform it that not all of the previously
            processed data was used, and that in fact, cbSize bytes of data which had been generated by the
            fuzzer was lost. The fuzzer is responsible for handling any mapping between the native data and
            the fuzzed data.
            </summary>
            <param name="description">Description of the operation provided by the invoker</param>
            <param name="context">Context string for the unwind</param>
            <param name="unwindSize">The number of bytes to unwind</param>
            <param name="errorCode">Error code if an error occurred</param>
            <returns>
            Whether or not the unwind was successful. Processors that do not track data should always
            return true.
            </returns>
        </member>
        <member name="T:MS.Swi.Mitm.MitmLogEventHandler">
            <summary>
            Delegate definition for the IMitmEventLogger
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IMitmEventLogger">
            <summary>
            Logging interface for the fuzzer core
            </summary>
        </member>
        <member name="E:MS.Swi.Mitm.IMitmEventLogger.MitmEventLog">
            <summary>
            The event object used by the event logger
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.ArgumentDefinition">
            <summary>
            The argument definition is used to fully define an argument for any of the 
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.#ctor(System.String,System.String,System.Type,System.Object,System.Collections.ArrayList)">
            <summary>
            Define an argument that does not result in the creation of a common storage object, but instead
            is handled programmaticaly by the IMitmRemoteClass object
            </summary>
            <param name="argumentIdentifier">Argument string to match</param>
            <param name="description">Description of the argument</param>
            <param name="logicalType">Type of the value</param>
            <param name="defaultValue">Default value</param>
            <param name="validValues">An array list of valid objects. If null, any object is valid, if non-null, only values which match the list are valid</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.#ctor(System.String,System.String,System.Type,System.Object)">
            <summary>
            Define an argument that does not result in the creation of a common storage object, but instead
            is handled programmaticaly by the IMitmRemoteClass object
            </summary>
            <param name="argumentIdentifier">Argument string to match</param>
            <param name="description">Description of the argument</param>
            <param name="logicalType">Type of the value</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.#ctor(System.String,System.String,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions,System.Collections.ArrayList)">
            <summary>
            Define the argument fully
            </summary>
            <param name="argumentIdentifier">Argument string to match</param>
            <param name="description">Description of the argument</param>
            <param name="logicalName">Logical name of the value</param>
            <param name="logicalType">Type of the value</param>
            <param name="defaultValue">Default value</param>
            <param name="accessPermissions">Access flags to apply</param>
            <param name="validValues">An array list of valid objects. If null, any object is valid, if non-null, only values which match the list are valid</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.#ctor(System.String,System.String,System.String,System.Type,System.Object,System.Collections.ArrayList)">
            <summary>
            A constructor that sets the access flags to Default
            </summary>
            <param name="argumentIdentifier">Argument string to match</param>
            <param name="description">Description of the argument</param>
            <param name="logicalName">Logical name of the value</param>
            <param name="logicalType">Type of the value</param>
            <param name="defaultValue">Default value</param>
            <param name="validValues">An array list of valid objects. If null, any object is valid, if non-null, only values which match the list are valid</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.#ctor(System.String,System.String,System.String,System.Type,System.Object)">
            <summary>
            A constructor that sets the access flags to Default, and does not
            restrict valid argument values
            </summary>
            <param name="argumentIdentifier">Argument string to match</param>
            <param name="description">Description of the argument</param>
            <param name="logicalName">Logical name of the value</param>
            <param name="logicalType">Type of the value</param>
            <param name="defaultValue">Default value</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.#ctor(System.String,System.String,System.String,System.Type,System.Object,MS.Swi.CommonStorage.AccessPermissions)">
            <summary>
            A constructor that does not restrict valid argument values
            </summary>
            <param name="argumentIdentifier">Argument string to match</param>
            <param name="description">Description of the argument</param>
            <param name="logicalName">Logical name of the value</param>
            <param name="logicalType">Type of the value</param>
            <param name="defaultValue">Default value</param>
            <param name="accessPermissions">Access flags to apply</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinition.Convert(System.String,System.Object@)">
            <summary>
            Convert a string to an object, if it can be done so in a valid manner, based on this argument
            definition
            </summary>
            <param name="rawValue">The string</param>
            <param name="convertedValue">The output value</param>
            <returns>True if it could be converted, false if not</returns>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.ArgumentIdentifier">
            <summary>
            The string identifier for the argument (i.e. the name used by the caller)
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.ValidValues">
            <summary>
            The set of valid values for the argument
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.ArgumentDescription">
            <summary>
            The string description of the argument
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.LogicalName">
            <summary>
            The logical name of the CommonStorage object that maps to this argument
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.LogicalType">
            <summary>
            The Type of the CommonStorage object, or null if multiple types are valid
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.DefaultValue">
            <summary>
            The default value for this argument
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.Permissions">
            <summary>
            The permissions which should be applied to the CommonStorage logical object that
            maps to this argument
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinition.CreatesCommonStorageObject">
            <summary>
            Whether or not this argument is defined as creating a common storage object
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IConstArgumentDefinitions">
            <summary>
            The read only interface to ArgumentDefinitions
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.IConstArgumentDefinitions.Item(System.String)">
            <summary>
            Find an argument definition by identifier
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.ArgumentDefinitions">
            <summary>
            The definitions which have been specified for a given IMitmRemoteClass 
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinitions.Add(MS.Swi.Mitm.ArgumentDefinition)">
            <summary>
            Add a definition to the arguments
            </summary>
            <param name="newArgument">The new argument definition</param>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinitions.GetEnumerator">
            <summary>
            Enumerate the collection
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.ArgumentDefinitions.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate the collection
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.ArgumentDefinitions.Item(System.String)">
            <summary>
            Find an argument definition by identifier
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.IMitmUsage">
            <summary>
            Interface for help functions for the MITM core
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.IMitmUsage.Usage">
            <summary>
            Provides usage guidelines for the IMitmRemoteClass
            </summary>
            <returns>The usage text string</returns>
        </member>
        <member name="P:MS.Swi.Mitm.IMitmUsage.Description">
            <summary>
            The description of the IMitmRemoteClass
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.IMitmUsage.ArgumentDeclarations">
            <summary>
            Provide access to the arguments used/accepted by the IMitmRemoteClass
            </summary>
            <returns>The ArgumentDefinitions that the IMitmRemoteClass uses</returns>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs">
            <summary>
            Report an event from the debugging plugin
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.#ctor(MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType,System.String,System.String,System.UInt32)">
            <summary>
            Construct the debugger event
            </summary>
            <param name="eventType">The type of event</param>
            <param name="executableName">The name of the executable running</param>
            <param name="machineName">The name of the machine the process was running on</param>
            <param name="processId">The process id</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.#ctor(MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType,System.String,System.String,System.UInt32,System.String)">
            <summary>
            Construct the debugger event
            </summary>
            <param name="eventType">The type of event</param>
            <param name="executableName">The name of the executable running</param>
            <param name="machineName">The name of the machine the process was running on</param>
            <param name="processId">The process id</param>
            <param name="details">An explanation string</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.#ctor(MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType,System.String,System.String,System.UInt32,MS.Swi.Mitm.Services.Debugging.IDebugBreakpoint)">
            <summary>
            Construct the debugger event
            </summary>
            <param name="eventType">The type of event</param>
            <param name="executableName">The name of the executable running</param>
            <param name="machineName">The name of the machine the process was running on</param>
            <param name="processId">The process id</param>
            <param name="breakpoint">The event breakpoint details</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.#ctor(MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType,System.String,System.String,System.UInt32,MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning)">
            <summary>
            Construct the debugger event
            </summary>
            <param name="eventType">The type of event</param>
            <param name="executableName">The name of the executable running</param>
            <param name="machineName">The name of the machine the process was running on</param>
            <param name="processId">The process id</param>
            <param name="warning">The event warning details</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.#ctor(MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType,System.String,System.String,System.UInt32,MS.Swi.Mitm.Services.Debugging.IDebugException)">
            <summary>
            Construct the debugger event
            </summary>
            <param name="eventType">The type of event</param>
            <param name="executableName">The name of the executable running</param>
            <param name="machineName">The name of the machine the process was running on</param>
            <param name="processId">The process id</param>
            <param name="exception">The event exception details</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.#ctor(MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType,System.String,System.String,System.UInt32,System.String,MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning,MS.Swi.Mitm.Services.Debugging.IDebugBreakpoint,MS.Swi.Mitm.Services.Debugging.IDebugException)">
            <summary>
            Construct the debugger event
            </summary>
            <param name="eventType">The type of event</param>
            <param name="executableName">The name of the executable running</param>
            <param name="machineName">The name of the machine the process was running on</param>
            <param name="processId">The process id</param>
            <param name="details">An explanation string</param>
            <param name="warning">The event warning details</param>
            <param name="exception">The event exception details</param>
            <param name="breakpoint">The event breakpoint details</param>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.ExecutableName">
            <summary>
            The name of the executable
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.MachineName">
            <summary>
            The name of the machine the debugged process is resident on
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.ProcessId">
            <summary>
            The process Id of the debugged process
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.Warning">
            <summary>
            The details of a warning
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.Exception">
            <summary>
            The details of an exception
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.Breakpoint">
            <summary>
            The details of a breakpoint
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.EventType">
            <summary>
            The type of debugging event this is
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.Details">
            <summary>
            A string detailing additional information about the event
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType">
            <summary>
            The type of event being described
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessAttached">
            <summary>
            The debugger has attached to the process
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessTerminatedNormally">
            <summary>
            The process terminated normally
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessTerminatedUnexpectedly">
            <summary>
            The process went away, but no information is available
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessViolatedPerformanceEnvelope">
            <summary>
            The process violated the performance envelope that was defined for normal
            functioning
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessGeneratedException">
            <summary>
            The process terminated with an exception
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessEnteredBreakpoint">
            <summary>
            The process entered a debug breakpoint, and the debugging plugin has 
            detached from it, but left it in waiting for a debugger attachment
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessDetached">
            <summary>
            The debugger was detached from the process
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessCreateFailure">
            <summary>
            The debugger could not create the specified process
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.ProcessAttachFailure">
            <summary>
            The debugger could not attach to the specified process
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.DebuggerEngineError">
            <summary>
            The underlying debugging engine generated an error
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerEventArgs.DebuggerEventType.SessionTerminated">
            <summary>
            The debugger session is over
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.DebuggerEventDelegate">
            <summary>
            The debugger event delegate
            </summary>
            <param name="sender">The source of the debugging event</param>
            <param name="e">The event details</param>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebuggerEventRelay">
            <summary>
            The IDebuggerEventRelay object allows for direct registration of debugger events. It may not
            be the same ultimate source, but the sender will always be an IDebuggerEventSource
            </summary>
        </member>
        <member name="E:MS.Swi.Mitm.Services.Debugging.IDebuggerEventRelay.DebuggerEvent">
            <summary>
            The event for any debugging events
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebuggerEventSource">
            <summary>
            The IDebuggerEventSource is the sender object for any DebuggerEvent. Because of the way the
            event model, the event is handled in the thread context of the sender, and this allows for the
            recipient to respond directly
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebuggerEventSource.TerminateProcess">
            <summary>
            Terminate the process
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebuggerEventSource.DetachProcess">
            <summary>
            Detach the process
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebuggerEventSource.ContinueProcess(System.Boolean)">
            <summary>
            Continue the process that generated the event, if the process still exists and can be continued
            </summary>
            <param name="eventHandled">Whether or not the event is considered handled</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebuggerEventSource.GenerateDump(System.String,System.Boolean)">
            <summary>
            Generate a dump of the process that generated the event
            </summary>
            <param name="destinationFile">The destination for the minidump</param>
            <param name="fullDump">True if the debugger should generate a full dump, false if not</param>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebuggerEventSource.DebugProcess(System.String,System.String)">
            <summary>
            Send the process to the specified debugger
            </summary>
            <param name="debugger">The debugger to use</param>
            <param name="debuggerArgumentFormat">The format string for the debugger command line argument. This must take a single argument, specifically, the Process ID of the application</param>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebugStackTrace">
            <summary>
            A debugger stack trace
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugStackTrace.Hash">
            <summary>
            A hash code for the stack trace, allowing for ready bucketizing
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugStackTrace.AnalysisLimit">
            <summary>
            The maximum number of frames that will be considered for analysis
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugStackTrace.Count">
            <summary>
            A count of the number of frames in the stack trace
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugStackTrace.Item(System.Int32)">
            <summary>
            The accessor for the individual stack frame strings
            </summary>
            <param name="index">The index of stack frame</param>
            <returns>The frame string</returns>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugStackTrace.Disassembly">
            <summary>
            The accessor to provide the following code instructions
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebugRegisters">
            <summary>
            Contains the values of the registers as hexadecimal strings
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugRegisters.RegisterNames">
            <summary>
            Get the set of register names
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugRegisters.Item(System.String)">
            <summary>
            Get the register value by name
            </summary>
            <param name="registerName">The name of the register</param>
            <returns>The hexadecimal string that represents that register</returns>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebugBreakpoint">
            <summary>
            Contains the definition of a breakpoint
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugBreakpoint.Registers">
            <summary>
            The registers at the breakpoint
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugBreakpoint.Stack">
            <summary>
            The stack trace of the breakpoint
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.DebuggerPerformanceWarning">
            <summary>
            The performance warnings that the debugging engine can generate
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerPerformanceWarning.ExceededMemoryParameters">
            <summary>
            The process exceeded the memory envelope defined for it
            </summary>
        </member>
        <member name="F:MS.Swi.Mitm.Services.Debugging.DebuggerPerformanceWarning.ExceededCpuParameters">
            <summary>
            The process exceeded the CPU envelope defined for it
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning">
            <summary>
            An IDebugPerformanceWarning describes a detected potential failure
            condition that isn't an exception. Currently these are memory or CPU
            usage outside of expected bounds, which can indicate a Denial of Service
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning.Warning">
            <summary>
            The type of warning
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning.WarningDescription">
            <summary>
            The description of the warning
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning.Registers">
            <summary>
            The registers at the time of the warning
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugPerformanceWarning.Stack">
            <summary>
            The stack trace of the execution at the time of the warning
            </summary>
        </member>
        <member name="T:MS.Swi.Mitm.Services.Debugging.IDebugException">
            <summary>
            An IDebugException describes an exception detected by the debugger
            </summary>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebugException.GetParameters">
            <summary>
            The actual binary data of the exception
            </summary>
            <returns>A copy of the parameter array</returns>
        </member>
        <member name="M:MS.Swi.Mitm.Services.Debugging.IDebugException.IsFirstChanceException">
            <summary>
            Whether or not this is a first chance exception
            </summary>
            <returns>True if it is a first chance exception, false otherwise </returns>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.Exception">
            <summary>
            The type of exception
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.ExceptionDescription">
            <summary>
            The description of the exception 
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.Flags">
            <summary>
            Flags associated with the exception
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.Address">
            <summary>
            The address at which the exception occurred
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.ParameterCount">
            <summary>
            The number of parameters in the exception
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.Stack">
            <summary>
            The stack trace of the exception
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.InnerException">
            <summary>
            The inner exception (or null if no inner exception exists)
            </summary>
        </member>
        <member name="P:MS.Swi.Mitm.Services.Debugging.IDebugException.Registers">
            <summary>
            The registers at the time of the exception
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\SWIXmlTransformations.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<DataTransformations>
  <DataTransformation Name="StringToXmlDocumentTransformation" SourceDefinition="String" OutputDefinition="XmlDocumentNativeData" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.StringToXmlDocumentTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlDocumentToStringTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlDocumentToContainerTransformation" SourceDefinition="XmlDocumentNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.SwiXmlDocumentToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToSwiXmlDocumentTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlDocumentTypeToContainerTransformation" SourceDefinition="XmlDocumentTypeNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlDocumentTypeToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToXmlDocumentTypeTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlDeclarationToContainerTransformation" SourceDefinition="XmlDeclarationNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlDeclarationToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToXmlDeclarationTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlElementToContainerTransformation" SourceDefinition="XmlElementNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlElementToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToXmlElementTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlProcessingInstructionToContainerTransformation" SourceDefinition="XmlProcessingInstructionNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlProcessingInstructionToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToXmlProcessingInstructionTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlElementAttributesToContainerTransformation" SourceDefinition="XmlElementAttributesNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlElementAttributesToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToXmlElementAttributesTransformation" Characteristics="VariableSize" />
  <DataTransformation Name="XmlElementChildrenToContainerTransformation" SourceDefinition="XmlElementChildrenNativeData" OutputDefinition="Container" Transformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.XmlElementChildrenToContainerTransformation" ReverseTransformation="MS.Swi.FuzzerCommonLibrary.Analysis.Transformations.ContainerToXmlElementChildrenTransformation" Characteristics="VariableSize" />
</DataTransformations>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FCL\Libraries\SWIXmlDefinitions.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<ElementDefinitions>
  <!-- Notes:
  
      All of the native data has an Encapsulation associated with it (for the case in which you wish to act 
      directly on the data). The Encapsulation will have a single reference, NativeContents: which is a reference
      to the underlying native type of the XmlXXXNativeData type.
  -->
  
  <!-- The base FCL Xml Document Types -->
  <ElementDefinition Name="XmlDocument" Characteristics="Encapsulation"/>
  <ElementDefinition Name="XmlDocumentNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlDocument" Characteristics="Singleton" />

  <!-- The FCL Xml Raw Data Types -->
  <ElementDefinition Name="XmlCDataSection" Base="String"  Characteristics="Severable,ValidAsAncestor"/>
  <ElementDefinition Name="XmlComment" Base="String" Characteristics="Severable,ValidAsAncestor"/>
  <ElementDefinition Name="XmlSignificantWhitespace" Base="String" Characteristics="Severable,ValidAsAncestor"/>
  <ElementDefinition Name="XmlWhitespace" Base="String" Characteristics="Severable,ValidAsAncestor"/>

  <!-- The FCL Xml Declaration Types -->
  <ElementDefinition Name="XmlDeclaration" Characteristics="Encapsulation"/>  
  <ElementDefinition Name="XmlDeclarationNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlDeclaration" Characteristics="Singleton" />
  <ElementDefinition Name="XmlDeclarationVersion" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlDeclarationEncoding" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlDeclarationStandalone" Base="String" Characteristics="ValidAsAncestor"/>

  <!-- The FCL Xml Document Types -->
  <ElementDefinition Name="XmlDocumentType" Characteristics="Encapsulation"/>
  <ElementDefinition Name="XmlDocumentTypeNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlDocumentType" Characteristics ="Singleton" />
  <ElementDefinition Name="XmlDocumentTypeName" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlDocumentTypePublicId" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlDocumentTypeSystemId" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlDocumentTypeInternalSubset" Base="String" Characteristics="ValidAsAncestor"/>

  <!-- The FCL Xml Element Types -->
  <ElementDefinition Name="XmlElement" Characteristics="Encapsulation"/>
  <ElementDefinition Name="XmlElementNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlElement" Characteristics ="Singleton"/>
  <ElementDefinition Name="XmlElementPrefix" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlElementLocalName" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlElementNamespaceURI" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlElementText" Base="String" Characteristics="Severable,ValidAsAncestor"/>

  <!-- The FCL Xml Attribute Types -->
  <ElementDefinition Name="XmlElementAttributes" Characteristics="Encapsulation"/>
  <ElementDefinition Name="XmlElementAttributesNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlAttributes" Characteristics ="Singleton"/>
  <ElementDefinition Name="XmlElementAttributeLocalName" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlElementAttributePrefix" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlElementAttributeNamespaceURI" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlElementAttributeValue" Base="String" Characteristics="Severable,ValidAsAncestor"/>

  <!-- The FCL Xml Entity Reference Type -->
  <ElementDefinition Name="XmlEntityReference" Base="String" Characteristics="ValidAsAncestor"/>

  <!-- The FCL Xml Element Child List Types -->
  <ElementDefinition Name="XmlElementChildren" Characteristics="Encapsulation"/>
  <ElementDefinition Name="XmlElementChildrenNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlNodeList" Characteristics ="Singleton"/>

  <!-- The FCL Xml Processing Instruction Types -->
  <ElementDefinition Name="XmlProcessingInstruction" Characteristics="Encapsulation"/>
  <ElementDefinition Name="XmlProcessingInstructionNativeData" NativeType="MS.Swi.FuzzerCommonLibrary.Analyzers.Xml.XmlProcessingInstruction" Characteristics ="Singleton" />
  <ElementDefinition Name="XmlProcessingInstructionTarget" Base="String" Characteristics="ValidAsAncestor"/>
  <ElementDefinition Name="XmlProcessingInstructionData" Base="String" Characteristics="ValidAsAncestor"/>
</ElementDefinitions>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\fxcop\1.36\x86\Repository\Compatibility\Desktop2.0.xml ===
<?xml version="1.0" encoding="utf-8"?>
<CompatibilityEntry Name=".NET Framework 2.0"
                    Platform="Desktop" 
                    Version="2.0" 
                    Priority="2000">
  
</CompatibilityEntry>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\fxcop\1.36\x86\owners.txt ===
File,		Owner
bin\i386\corecon1.0\bin\activesyncbootstrap.dll,	DevDiv\VS\VSD
addinprocess.exe,	DevDiv\NDP\CLR
addinprocess32.exe,	DevDiv\NDP\CLR
addinutil.exe,	DevDiv\NDP\CLR
bin\i386\agentconfigutil.exe,	DevDiv\VS\TeamTest
bin\i386\al.exe,	DevDiv\VS\VCS
bin\i386\analyze.exe,	DevDiv\VS\TFS
asms\drop\msft\vc90\atl\atl90.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\atlpkg.dll,	DevDiv\VS\VC
bin\i386\atlprov.dll,	DevDiv\VS\VC
bin\i386\atltracetool8.exe,	DevDiv\VS\VC
bin\i386\authenticationfilter.dll,	DevDiv\VS\TFS
bin\i386\visualizers\original\autoexpce.dll,	DevDiv\VS\VCS
bin\i386\vc7\vcpackages\autolayt.dll,	DevDiv\VS\VC
bin\i386\vssetup\utils\autorun\mainautorun\autorun.exe,	DevDiv\VS\DTG
bin\i386\vc7\vcpackages\avvspk.dll,	DevDiv\VS\TeamDev
bin\i386\avvspkdh.dll,	DevDiv\VS\TeamDev
aximp.exe,	DevDiv\NDP\UIFX
bin\i386\vc7\vcpackages\bined.dll,	DevDiv\VS\VC
bin\i386\bissubscribe.exe,	DevDiv\VS\TFS
bin\i386\bscmake.exe,	DevDiv\VS\VC\Phoenix
bin\i386\c1.dll,	DevDiv\VS\VC
bin\i386\c1ast.dll,	DevDiv\VS\TeamDev
bin\i386\c1xx.dll,	DevDiv\VS\VC
bin\i386\c1xxast.dll,	DevDiv\VS\TeamDev
bin\i386\vc7\vcpackages\ce.dll,	DevDiv\VS\VSD
bin\i386\vspkgs\cedpdpl.dll,	DevDiv\VS\VSD
bin\i386\cedpedt.dll,	DevDiv\VS\VSD
bin\i386\cedpplg.dll,	DevDiv\VS\VSD
bin\i386\vspkgs\cedpprj.dll,	DevDiv\VS\VSD
bin\i386\cl.exe,	DevDiv\VS\VC
bin\i386\coloader80.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\compluslm.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\compsvcspkg.dll,	DevDiv\VS\DTP
bin\i386\staticanalysis\fxcop\codeanalysis.controls.dll,	DevDiv\VS\TeamDev
bin\i386\corecon1.0\bin\conman2.dll,	DevDiv\VS\VSD
bin\i386\corecon1.0\bin\conmanps.dll,	DevDiv\VS\VSD
bin\i386\vspkgs\contextp.dll,	DevDiv\VS\DTP
bin\i386\coveran.exe,	DevDiv\VS\TeamTest
bin\i386\cpde.dll,	DevDiv\VS\TeamDev
bin\i386\cppcodeprovider.dll,	DevDiv\VS\VC
bin\i386\cqconverter.exe,	DevDiv\VS\TFS
bin\i386\createds.exe,	DevDiv\VS\TFS
bin\i386\csc.exe,	DevDiv\VS\VCS
bin\i386\cscompee.dll,	DevDiv\VS\VCS
bin\i386\csformatui.dll,	DevDiv\VS\VCS
bin\i386\vc7\vcpackages\cslangsvc.dll,	DevDiv\VS\VCS
bin\i386\csm.dll,	DevDiv\VS\TeamDev
bin\i386\vc7\vcpackages\csproj.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\csspkg.dll,	DevDiv\NDP\WebTools
bin\i386\vssetup\express\vb\1033\customtext.1033.dll,	DevDiv\VS\DTG
bin\i386\cvtres.exe,	DevDiv\VS\VC\Phoenix
bin\i386\dbgautoattach.dll,	DevDiv\VS\TeamDev
bin\i386\dbgproxy.exe,	DevDiv\VS\TeamDev
bin\i386\vc7\vcpackages\dbsvc.dll,	DevDiv\VS\VC
bin\i386\ddconv.exe,	DevDiv\VS\TFS
bin\i386\ddupd.exe,	DevDiv\VS\TFS
bin\i386\vssetup\utils\deletetemp.exe,	DevDiv\VS\DTG
bin\i386\staticanalysis\fxcop\rules\designrules.dll,	DevDiv\VS\TeamDev
bin\i386\corecon1.0\bin\desktopdma.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\emulators\desqmwrapper.dll,	DevDiv\VS\VSD
bin\i386\vc7\vcpackages\devcfg.dll,	DevDiv\VS\VSD
bin\i386\devenv.exe,	DevDiv\VS\DTP
bin\i386\smartdevices\emulators\deviceemulator.exe,	DevDiv\VS\VSD
bin\i386\smartdevices\emulators\deviceemulatorbootstrap.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\emulators\deviceemulatorproxy.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\emulators\deviceemulatortabletink.dll,	DevDiv\VS\VSD
bin\i386\vc7\vcpackages\devicesdkinstcomp.dll,	DevDiv\VS\VSD
bin\i386\vc7\vcpackages\devicesdkinstshim.dll,	DevDiv\VS\VSD
bin\i386\msdnpkgs\dexplmnu.dll,	DevDiv\VS\DTP
bin\i386\dexplore.exe,	DevDiv\VS\DTP
bin\i386\diffmerge.exe,	DevDiv\VS\TFS
bin\i386\vc7\vcpackages\dip.dll,	DevDiv\VS\VSD
bin\i386\vc7\vcpackages\dircontrol.dll,	DevDiv\VS\VC
bin\i386\vspkgs\dirprj.dll,	DevDiv\VS\DTP
bin\i386\vssetup\utils\dlmgr.dll,	DevDiv\VS\DTG
bin\i386\bootstrapper\packages\dotnetfx\dotnetchk.exe,	DevDiv\VS\DTG
bin\i386\dpca.dll,	DevDiv\VS\DTG
bin\i386\vspkgs\dpdpl.dll,	DevDiv\VS\DTG
bin\i386\dpedt.dll,	DevDiv\VS\DTG
bin\i386\dpplg.dll,	DevDiv\VS\DTG
bin\i386\vspkgs\dpprj.dll,	DevDiv\VS\DTG
bin\i386\draft.presentationdesigndeveloper.dll,	DevDiv\NDP\Cider
bin\i386\draft.xamllanguageservice.dll,	DevDiv\NDP\Cider
bin\i386\dsref80.dll,	DevDiv\VS\TeamData
bin\i386\dumpbin.exe,	DevDiv\VS\VC\Phoenix
bin\i386\smartdevices\emulators\dvcemumanager.exe,	DevDiv\VS\VSD
bin\i386\ecbuild.dll,	DevDiv\VS\VC\Phoenix
bin\i386\smartdevices\debugger\bin\edbgcl.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\edbgps.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\ede.dll,	DevDiv\VS\VSD
bin\i386\editbin.exe,	DevDiv\VS\VC\Phoenix
edmgen.exe,	DevDiv\NDP\DP
bin\i386\smartdevices\debugger\bin\eee.dll,	DevDiv\VS\VSD
bin\i386\vspkgs\encmgr.dll,	DevDiv\VS\TeamDev
bin\i386\smartdevices\debugger\bin\eps.dll,	DevDiv\VS\VSD
bin\i386\errlook.exe,	DevDiv\VS\VC
bin\i386\smartdevices\debugger\bin\esymp.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\esymp_armv4_hlp.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\esymp_armv4i_hlp.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\esymp_mipsii_hlp.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\esymp_mipsiv_hlp.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\esymp_sh4_hlp.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\debugger\bin\esymp_x86_hlp.dll,	DevDiv\VS\VSD
bin\i386\vc7\vcpackages\evcprojectconversion.dll,	DevDiv\VS\VSD
bin\i386\vssetup\setupexe\expressres.dll,	DevDiv\VS\DTG
bin\i386\vssetup\setupexe\modules\expressui.dll,	DevDiv\VS\DTG
bin\i386\extwizrd.dll,	DevDiv\VS\DTP
bin\i386\extwizrd7.dll,	DevDiv\VS\DTP
bin\i386\staticanalysis\fxcop\rules\other\factoringrules.dll,	DevDiv\VS\TeamDev
bin\i386\vc7\vcpackages\feacp.dll,	DevDiv\VS\VC
bin\i386\staticanalysis\fxcop\fxcop.exe,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\fxcopcmd.exe,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\fxcopcommon.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\fxcopsdk.dll,	DevDiv\VS\TeamDev
bin\i386\msbuild\microsoft\visualstudio\v8.0\codeanalysis\fxcoptask.dll,	DevDiv\VS\TeamDev
bin\i386\compactframeworksdk\v1.0.5000\windows ce\designer\genasm.exe,	DevDiv\VS\VSD
bin\i386\vssetup\setupexe\modules\gencomp.dll,	DevDiv\VS\DTG
bin\i386\getcurrenttfsproperties.exe,	DevDiv\VS\TFS
bin\i386\glexport.exe,	DevDiv\VS\TFS
bin\i386\glimport.exe,	DevDiv\VS\TFS
bin\i386\staticanalysis\fxcop\rules\globalizationrules.dll,	DevDiv\VS\TeamDev
bin\i386\guidgen.exe,	DevDiv\VS\VC
bin\i386\vspkgs\htmdlgs.dll,	DevDiv\NDP\WebTools
bin\i386\vspkgs\htmled.dll,	DevDiv\NDP\WebTools
bin\i386\vssetup\utils\htmllite.dll,	DevDiv\VS\DTG
bin\i386\hxds.dll,	MSDN\HTML Help
bin\i386\hxvz.dll,	MSDN\HTML Help
bin\i386\iisresolver.dll,	DevDiv\VS\TeamDev
bin\i386\smartdevices\emulators\imagegen.exe,	DevDiv\VS\VSD
bin\i386\vssetup\uiwrapper\install.exe,	DevDiv\VS\DTG
bin\i386\vssetup\uiwrapper\install.res.1033.dll,	DevDiv\VS\DTG
bin\i386\vssetup\utils\installsharepoint3.exe,	DevDiv\VS\TFS
bin\i386\instanceinfo.exe,	DevDiv\VS\TFS
bin\i386\vssetup\utils\instpia11.exe,	DevDiv\VS\DTG
bin\i386\staticanalysis\fxcop\rules\interoperabilityrules.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\engines\introspectionanalysisengine.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\engines\introspectionforms.dll,	DevDiv\VS\TeamDev
bin\i386\itircl55.dll,	MSDN\HTML Help
bin\i386\jsee.dll,	DevDiv\VS\JSRT/JSDT\JScript
lc.exe,	DevDiv\NDP\UIFX
bin\i386\lib.exe,	DevDiv\VS\VC\Phoenix
bin\i386\link.exe,	DevDiv\VS\VC\Phoenix
bin\i386\lregdll.dll,	DevDiv\VS\DTG
bin\i386\vc7\vcpackages\macropicker.dll,	DevDiv\VS\VC
mage.exe,	DevDiv\NDP\UIFX
mageui.exe,	DevDiv\NDP\UIFX
bin\i386\staticanalysis\fxcop\rules\maintainabilityrules.dll,	DevDiv\VS\TeamDev
bin\i386\makehm.exe,	DevDiv\VS\VC
bin\i386\makezipexe.exe,	DevDiv\VS\DTP
bin\i386\mcee.dll,	DevDiv\VS\VC
bin\i386\metade.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\metricspackage.dll,	DevDiv\VS\TeamDev
asms\drop\msft\vc90\mfc\mfc90.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugmfc\mfc90d.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\mfc\mfc90u.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugmfc\mfc90ud.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\mfc\mfcm90.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugmfc\mfcm90d.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\mfc\mfcm90u.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugmfc\mfcm90ud.dll,	DevDiv\VS\VC
bin\i386\microsoft.build.conversion.v3.5.dll,	DevDiv\VS\DTP
bin\i386\microsoft.build.engine.dll,	DevDiv\VS\DTP
bin\i386\microsoft.build.framework.dll,	DevDiv\VS\DTP
bin\i386\microsoft.build.tasks.v3.5.dll,	DevDiv\VS\DTP
bin\i386\microsoft.build.utilities.v3.5.dll,	DevDiv\VS\DTP
bin\i386\staticanalysis\fxcop\microsoft.cci.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.compactframework.build.tasks.dll,	DevDiv\VS\VSD
bin\i386\microsoft.compactframework.design.data.dll,	DevDiv\VS\VSD
bin\i386\sdk\v2.0\compactframework\windowsce\designer\microsoft.compactframework.design.dll,	DevDiv\VS\VSD
bin\i386\microsoft.compactframework.design.model.dll,	DevDiv\VS\VSD
bin\i386\sdk\v2.0\compactframework\windowsce\designer\microsoft.compactframework.design.pocketpc.dll,	DevDiv\VS\VSD
bin\i386\sdk\v2.0\compactframework\windowsce\designer\microsoft.compactframework.design.pocketpc2004.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\sdk\compactframework\v1.0\windowsce\designer\microsoft.compactframework.design.smartphone.dll,	DevDiv\VS\VSD
bin\i386\sdk\v2.0\compactframework\windowsce\designer\microsoft.compactframework.design.smartphone2004.dll,	DevDiv\VS\VSD
bin\i386\sdk\v2.0\compactframework\windowsce\designer\microsoft.compactframework.design.windowsce.dll,	DevDiv\VS\VSD
bin\i386\microsoft.data.connectionui.dialog.dll,	DevDiv\VS\VB
microsoft.data.entity.design.dll,	DevDiv\NDP\DP
bin\i386\microsoft.jscript.authoringservices.dll,	DevDiv\VS\JSRT/JSDT\JScript
microsoft.reportdesigner.dll,	SQL
microsoft.reportviewer.common.dll,	SQL
microsoft.reportviewer.design.dll,	SQL
microsoft.reportviewer.processingobjectmodel.dll,	SQL
microsoft.reportviewer.webdesign.dll,	SQL
microsoft.reportviewer.webforms.dll,	SQL
microsoft.reportviewer.winforms.dll,	SQL
bin\i386\corecon1.0\bin\microsoft.smartdevice.connectivity.dll,	DevDiv\VS\VSD
bin\i386\corecon1.0\target\lib\delaysigned\microsoft.smartdevice.deviceagenttransport.dll,	DevDiv\VS\VSD
bin\i386\microsoft.teamfoundation.adapter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.adapter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.client.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.common.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.controls.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.server.checkinnotification.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.server.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.server.eventfilter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.server.logger.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.tasks.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.build.tasks.versioncontrol.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.client.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.common.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.common.library.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.databaseinstaller.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.officeintegration.common.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.officeintegration.excel.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.officeintegration.project.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.server.admin.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.server.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.adapter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.client.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.common.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.common.integration.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.controls.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.server.checkinnotification.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.server.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.server.eventfilter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.versioncontrol.server.proxy.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.warehouse.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.adapter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.client.cache.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.client.datastore.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.client.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.client.provision.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.client.querylanguage.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.client.ruleengine.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.controls.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.proxy.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.server.dataaccesslayer.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.server.dataservices.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.server.dll,	DevDiv\VS\TFS
bin\i386\microsoft.teamfoundation.workitemtracking.server.eventfilter.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualbasic.upgradeextensions.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualbasic.upgradesnippet.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualbasic.upgradewizard.dll,	DevDiv\VS\VB
bin\i386\vc7\vcpackages\microsoft.visualc.projectcontrols.dll,	DevDiv\VS\VC
bin\i386\microsoft.visualc.vscodeparser.dll,	DevDiv\VS\VC
bin\i386\microsoft.visualc.vscodeprovider.dll,	DevDiv\VS\VC
bin\i386\vspkgs\microsoft.visualstudio.assetsystem.host.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\microsoft.visualstudio.commonide.dll,	DevDiv\VS\DTP
microsoft.visualstudio.configuration.dll,	DevDiv\NDP\UIFX
bin\i386\microsoft.visualstudio.coverage.analysis.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.coverage.monitor.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.csharp.services.language.dll,	DevDiv\VS\VCS
bin\i386\microsoft.visualstudio.data.compatibility.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.core.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.framework.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.host.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.package.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.providers.common.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.providers.oracle.dll,	DevDiv\VS\VB
bin\i386\privateassemblies\microsoft.visualstudio.data.providers.sqleverywhere.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.providers.sqlserver.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.data.services.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.datadesign.syncdesigner.dsl.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.datadesign.syncdesigner.dslpackage.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.datatools.dll,	DevDiv\VS\VB
bin\i386\visualizers\microsoft.visualstudio.debugger.datasetvisualizer.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.debugger.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.debugger.runtime.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.debugger.runtime.impl.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.debuggervisualizers.dll,	DevDiv\VS\VCS
bin\i386\microsoft.visualstudio.deploywizard.dll,	DevDiv\VS\DTG
microsoft.visualstudio.design.dll,	DevDiv\NDP\UIFX
bin\i386\microsoft.visualstudio.diagnostics.servicemodelsink.dll,	DevDiv\VS\TeamDev
microsoft.visualstudio.dll,	DevDiv\NDP\UIFX
bin\i386\microsoft.visualstudio.editors.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.enterprise.aspnethelper.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.enterprisetools.classdesigner.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.enterprisetools.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.enterprisetools.sdmdesigners.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.enterprisetools.shell.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.enterprisetools.typesystem.dll,	DevDiv\VS\TeamArch
bin\i386\vspkgs\microsoft.visualstudio.exporttemplate.dll,	DevDiv\VS\DTP
bin\i386\microsoft.visualstudio.hostingprocess.utilities.dll,	DevDiv\VS\DTP
bin\i386\microsoft.visualstudio.hostingprocess.utilities.sync.dll,	DevDiv\VS\DTP
vssdk\vspkgs\microsoft.visualstudio.ide.toolboxcontrolsinstaller.dll,	DevDiv\VS\DTP\Ecosystem
bin\i386\microsoft.visualstudio.importprojectfolderwizard.dll,	DevDiv\VS\DTP
bin\i386\microsoft.visualstudio.modeling.artifactmapper.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.modeling.artifactmapper.vshost.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.modeling.diagrams.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.modeling.diagrams.graphobject.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.modeling.dll,	DevDiv\VS\TeamArch
bin\i386\dsltools\i386\microsoft.visualstudio.modeling.sdk.diagrams.dll,	DevDiv\VS\TeamArch
bin\i386\dsltools\i386\microsoft.visualstudio.modeling.sdk.diagrams.graphobject.dll,	DevDiv\VS\TeamArch
bin\i386\dsltools\i386\microsoft.visualstudio.modeling.sdk.dll,	DevDiv\VS\TeamArch
bin\i386\dsltools\i386\microsoft.visualstudio.modeling.sdk.shell.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.objecttestbench.dll,	DevDiv\VS\JSRT/JSDT
bin\i386\microsoft.visualstudio.officetools.designer.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.ordesigner.dsl.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.ordesigner.dslpackage.dll,	DevDiv\VS\VB
microsoft.visualstudio.package.languageservice.9.0.dll,	DevDiv\VS\DTP\Ecosystem
bin\i386\microsoft.visualstudio.performancetools.counterinfo.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.performancetools.visualization.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.profiler.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.profiler.filtering.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.profiler.filtering.test.dll,	DevDiv\VS\TeamDev
bin\i386\microsoft.visualstudio.projectconverters.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.publish.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.qualitytools.agentobject.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.checkinpolicies.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.cmi.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.codecoverage.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.commandline.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.common.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.controller.spooledjob.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.controllerobject.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.executioncommon.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.hostadapters.aspnetadapter.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.hostadapters.aspnetagent.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.linking.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.loadtest.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.loadtestexec.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.loadtestframework.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.loadtestpackage.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.loadtestui.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.msbuildtasks.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.nicservices.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.operationalstore.clienthelper.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.operationalstore.servicehelper.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.plugins.codecoverage.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.publishserver.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.recorderbar.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.recorderbarbho90.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.resource.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.testcasemanagement.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.generictest.adapter.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.generictest.objectmodel.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.generictest.tip.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.manualtest.adapter.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.manualtest.objectmodel.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.manualtest.tip.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.orderedtest.adapter.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.orderedtest.objectmodel.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.orderedtest.tip.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.tuippackage.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.unittest.adapter.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.unittest.assemblyresolver.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.unittest.objectmodel.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.unittest.tip.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tips.webloadtest.tip.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.tmi.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.unittestframework.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.vsip.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.warehouseadapter.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.warehousecommon.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.webtestframework.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.webtestplayback.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.qualitytools.wizard.testprojectwizards.dll,	DevDiv\VS\TeamTest
microsoft.visualstudio.shell.9.0.dll,	DevDiv\VS\DTP\Ecosystem
microsoft.visualstudio.shell.design.dll,	DevDiv\NDP\UIFX
bin\i386\microsoft.visualstudio.smartdevice.testhostadapter.dll,	DevDiv\VS\VSD
bin\i386\microsoft.visualstudio.smartdevice.testproject.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\testtools\delaysigned\microsoft.visualstudio.smartdevice.unittest.adapter.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\testtools\delaysigned\microsoft.visualstudio.smartdevice.unittest.adapter.resource.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\testtools\delaysigned\microsoft.visualstudio.smartdevice.unittestframework.dll,	DevDiv\VS\VSD
bin\i386\microsoft.visualstudio.smartdevice.wizard.testprojectwizards.dll,	DevDiv\VS\VSD
bin\i386\privateassemblies\microsoft.visualstudio.smartdevices.dll,	DevDiv\VS\VSD
bin\i386\microsoft.visualstudio.teamfoundation.build.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualstudio.teamfoundation.client.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualstudio.teamfoundation.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualstudio.teamfoundation.teamexplorer.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualstudio.teamfoundation.versioncontrol.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualstudio.teamfoundation.workitemtracking.dll,	DevDiv\VS\TFS
bin\i386\microsoft.visualstudio.teamsystem.common.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.teamsystem.data.dll,	DevDiv\VS\TeamData
bin\i386\microsoft.visualstudio.teamsystem.data.generators.dll,	DevDiv\VS\TeamData
bin\i386\microsoft.visualstudio.teamsystem.data.tasks.dll,	DevDiv\VS\TeamData
bin\i386\microsoft.visualstudio.teamsystem.data.unittesting.dll,	DevDiv\VS\TeamData
bin\i386\microsoft.visualstudio.teamsystem.datapackage.dll,	DevDiv\VS\TeamData
bin\i386\microsoft.visualstudio.teamsystem.integration.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.teamsystem.projecttemplates.dll,	DevDiv\VS\TeamData
bin\i386\vspkgs\microsoft.visualstudio.templatewizard.dll,	DevDiv\VS\DTP
bin\i386\microsoft.visualstudio.testtools.buildshadowstask.dll,	DevDiv\VS\TeamTest
bin\i386\microsoft.visualstudio.testtools.testgeneration.dll,	DevDiv\VS\TeamTest
bin\i386\dsltools\i386\microsoft.visualstudio.texttemplating.dll,	DevDiv\VS\TeamArch
bin\i386\dsltools\i386\microsoft.visualstudio.texttemplating.vshost.dll,	DevDiv\VS\TeamArch
bin\i386\vspkgs\microsoft.visualstudio.toolboxcontrolinstaller.dll,	DevDiv\VS\DTP
bin\i386\microsoft.visualstudio.tools.applications.adapter.v9.0.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.addinadapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.addinbase.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.common.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.contract.v9.0.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.designtime.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.designtime.v9.0.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.hostadapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.hosting.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.hosting.v9.0.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.programmingmodel.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.project.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.applications.serverdocument.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.addinadapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.addinhostadapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.addinproject.office2003.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.addinproject.office2007.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.appinfodocument.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.buildtasks.office2003.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.buildtasks.office2007.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.common.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.controls.containercontrol.dll,	DevDiv\VS\OfficeDev
bin\i386\visualizers\microsoft.visualstudio.tools.office.debugger.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.designer.office2007.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.excel.adapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.excel.addinadapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.excel.addinproxy.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.excel.contract.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.excel.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.hosting.office2003.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.outlook.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.programmingmodel.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.project.office2003.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.ribbon.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.runtime.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.word.adapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.word.addinadapter.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.word.addinproxy.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.word.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.tools.office.workflow.debugconfigwizard.dll,	DevDiv\VS\OfficeDev
bin\i386\microsoft.visualstudio.virtualtreegrid.dll,	DevDiv\VS\TeamArch
bin\i386\microsoft.visualstudio.web.application.dll,	DevDiv\NDP\WebTools
bin\i386\microsoft.visualstudio.web.dll,	DevDiv\NDP\WebTools
microsoft.visualstudio.windows.forms.dll,	DevDiv\NDP\UIFX
bin\i386\microsoft.visualstudio.wizardframework.dll,	DevDiv\VS\VB
bin\i386\microsoft.visualstudio.wpfflavor.dll,	DevDiv\VS\DTP
bin\i386\microsoft.visualstudio.xaml.dll,	DevDiv\NDP\Cider
bin\i386\microsoft.visualstudio.xmldesigner.dll,	DevDiv\VS\VB
microsoft.visualstudio.xmleditor.dll,	DevDiv\NDP\DP
bin\i386\microsoft.visualstudio.zip.dll,	DevDiv\VS\DTP
bin\i386\microsoft.vsdesigner.dll,	DevDiv\VS\VB
bin\i386\microsoft.vsdesigner.management.dll,	Windows
bin\i386\microsoft.web.design.client.dll,	DevDiv\NDP\WebTools
bin\i386\microsoft.webpublisher.dll,	DevDiv\NDP\WebTools
bin\i386\microsoft.windows.design.dll,	DevDiv\NDP\Cider
microsoft.xmleditor.dll,	DevDiv\NDP\DP
microsoft.xsldebugger.dll,	DevDiv\NDP\DP
microsoft.xsldebugproxy.exe,	DevDiv\NDP\DP
microsoft.xsldebugger.Host.exe,	DevDiv\NDP\DP
bin\i386\mkss.exe,	DevDiv\VS\TFS
bin\i386\ml.exe,	DevDiv\VS\VC\Phoenix
bin\i386\staticanalysis\fxcop\rules\mobilityrules.dll,	DevDiv\VS\TeamDev
bin\i386\mpishim.exe,	DevDiv\VS\VC
vssdk\mplex.exe,	DevDiv\VS\DTP\Ecosystem
vssdk\mppg.exe,	DevDiv\VS\DTP\Ecosystem
bin\i386\msbuild.exe,	DevDiv\VS\DTP
bin\i386\msdbg2.dll,	DevDiv\VS\TeamDev
bin\i386\msdds.dll,	DevDiv\VS\TeamData
bin\i386\msddsf.dll,	DevDiv\VS\TeamData
bin\i386\msddslm.dll,	DevDiv\VS\TeamData
bin\i386\msdia90.dll,	DevDiv\VS\VC\Phoenix
bin\i386\msdiff.dll,	DevDiv\VS\TFS
bin\i386\msdis150.dll,	DevDiv\VS\VC\Phoenix
bin\i386\msemp.dll,	DevDiv\VS\DTP
bin\i386\msenc90.dll,	DevDiv\VS\VC\Phoenix
bin\i386\vspkgs\msenv.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\msenv2p.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\msenv80p.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\msenv90p.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\msenvmnu.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\msenvp.dll,	DevDiv\VS\DTP
bin\i386\vc7\vcpackages\msgblder.dll,	DevDiv\VS\VC
bin\i386\staticanalysis\fxcop\rules\msinternalrules.dll,	DevDiv\VS\TeamDev
bin\i386\vssetup\setupexe\modules\msitosit.dll,	DevDiv\VS\DTG
bin\i386\msitss55.dll,	MSDN\HTML Help
bin\i386\msobj80.dll,	DevDiv\VS\VC\Phoenix
bin\i386\mspdb80.dll,	DevDiv\VS\VC\Phoenix
bin\i386\mspdbcore.dll,	DevDiv\VS\VC\Phoenix
bin\i386\mspdbsrv.exe,	DevDiv\VS\VC\Phoenix
bin\i386\mspft80.dll,	DevDiv\VS\TeamDev
bin\i386\mssdi98.dll,	DevDiv\VS\TeamDev
bin\i386\mstest.exe,	DevDiv\VS\TeamTest
bin\i386\vspkgs\msvb7.dll,	DevDiv\VS\VB
bin\i386\vspkgs\msvbprj.dll,	DevDiv\VS\DTP
bin\i386\msvbver.dll,	DevDiv\VS\DTG
asms\drop\msft\vc90\crt\msvcm90.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugcrt\msvcm90d.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\crt\msvcp90.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugcrt\msvcp90d.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\crt\msvcr90.dll,	DevDiv\VS\VC
asms\drop\msft\vc90\debugcrt\msvcr90d.dll,	DevDiv\VS\VC
bin\i386\msvsmon.exe,	DevDiv\VS\TeamDev
bin\i386\vspkgs\mswebprj.dll,	DevDiv\NDP\WebTools
bin\i386\staticanalysis\fxcop\rules\namingrules.dll,	DevDiv\VS\TeamDev
bin\i386\natdbgde.dll,	DevDiv\VS\TeamDev
bin\i386\natdbgee.dll,	DevDiv\VS\VC
bin\i386\nmake.exe,	DevDiv\VS\VC\Phoenix
bin\i386\pdm.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\rules\performancerules.dll,	DevDiv\VS\TeamDev
bin\i386\perfpkg.dll,	DevDiv\VS\TeamDev
peverify.exe,	DevDiv\NDP\CLR
bin\i386\pgocvt.exe,	DevDiv\VS\VC\Phoenix
bin\i386\pgodb90.dll,	DevDiv\VS\VC\Phoenix
bin\i386\pgomgr.exe,	DevDiv\VS\VC\Phoenix
bin\i386\pgort90.dll,	DevDiv\VS\VC\Phoenix
bin\i386\pgosweep.exe,	DevDiv\VS\VC\Phoenix
bin\i386\staticanalysis\fxcop\rules\portabilityrules.dll,	DevDiv\VS\TeamDev
bin\i386\presentationdesigndeveloper.dll,	DevDiv\NDP\Cider
bin\i386\presentationdesignextensibility.dll,	DevDiv\NDP\Cider
bin\i386\presentationdesignhost.dll,	DevDiv\NDP\Cider
bin\i386\presentationdesigninteraction.dll,	DevDiv\NDP\Cider
bin\i386\presentationdesignmarkup.dll,	DevDiv\NDP\Cider
bin\i386\processtemplatemanager.exe,	DevDiv\VS\TFS
bin\i386\projectaggregator.dll,	DevDiv\VS\DTP\Ecosystem
bin\i386\vc7\vcpackages\projwiz.dll,	DevDiv\VS\VSD
vssdk\protogen.exe,	DevDiv\VS\DTP\Ecosystem
bin\i386\publicize.exe,	DevDiv\VS\TeamTest
bin\i386\qtagent.exe,	DevDiv\VS\TeamTest
bin\i386\qtagentservice.exe,	DevDiv\VS\TeamTest
bin\i386\qtagentserviceui.exe,	DevDiv\VS\TeamTest
bin\i386\qtcontroller.exe,	DevDiv\VS\TeamTest
bin\i386\vc7\vcpackages\rcxdti.dll,	DevDiv\VS\VC
bin\i386\rdbgwiz.exe,	DevDiv\VS\TeamDev
bin\i386\regcap.exe,	DevDiv\VS\DTG
vssdk\regit.exe,	DevDiv\VS\DTP\Ecosystem
bin\i386\staticanalysis\fxcop\rules\reliabilityrules.dll,	DevDiv\VS\TeamDev
bin\i386\remotevssscc.dll,	DevDiv\VS\TFS
bin\i386\bootstrapper\packages\reportviewer\reportviewerchk.exe,	SQL
bin\i386\vc7\vcpackages\resedit.dll,	DevDiv\VS\VC
bin\i386\restoresx.exe,	DevDiv\VS\VB
bin\i386\1033\rsobjectsui.dll,	DevDiv\VS\VB
bin\i386\scriptle2.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\rules\securityrules.dll,	DevDiv\VS\TeamDev
bin\i386\smartdevices\emulators\serdmaasplugin.dll,	DevDiv\VS\VSD
bin\i386\bootstrapper\engine\setup.bin,	DevDiv\VS\DTG
bin\i386\vssetup\setupexe\cartman\setup.exe,	DevDiv\VS\DTG
bin\i386\vssetup\setupexe\launcher\stdlauncher\setup.exe,	DevDiv\VS\DTG
bin\i386\setupwarehouse.exe,	DevDiv\VS\TFS
sgen.exe,	DevDiv\NDP\CDF
bin\i386\shmetapdb.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\fxcop\rules\other\sidebysiderules.dll,	DevDiv\VS\TeamDev
bin\i386\vssetup\setupexe\cartman\sitsetup.dll,	DevDiv\VS\DTG
bin\i386\smartdevices\projects\smartdeviceproject.dll,	DevDiv\VS\VSD
bin\i386\smartdevices\testtools\delaysigned\smartdevicetesthost.exe,	DevDiv\VS\VSD
bin\i386\spyxx.exe,	DevDiv\VS\VC
bin\i386\spyxxhk.dll,	DevDiv\VS\VC
bin\i386\sqldbg.dll,	DevDiv\VS\TeamDev
bin\i386\sqlde.dll,	DevDiv\VS\TeamDev
bin\i386\bootstrapper\packages\sqlexpress\sqlexpresschk.exe,	DevDiv\VS\DTG
bin\i386\sqlle.dll,	DevDiv\VS\TeamDev
sqlmetal.exe,	DevDiv\VS\VCS
bin\i386\vspkgs\srcedit.dll,	DevDiv\NDP\WebTools
bin\i386\ss.exe,	DevDiv\VS\TFS
bin\i386\ssadmin.exe,	DevDiv\VS\TFS
bin\i386\ssapi.dll,	DevDiv\VS\TFS
bin\i386\ssarc.exe,	DevDiv\VS\TFS
bin\i386\ssexp.exe,	DevDiv\VS\TFS
bin\i386\ssgui.dll,	DevDiv\VS\TFS
bin\i386\ssrestor.exe,	DevDiv\VS\TFS
bin\i386\ssscc.dll,	DevDiv\VS\TFS
bin\i386\ssservice.exe,	DevDiv\VS\TFS
bin\i386\staticanalysis\stanpackage.dll,	DevDiv\VS\TeamDev
bin\i386\staticanalysis\stanpolicy.dll,	DevDiv\VS\TeamDev
system.addin.contract.dll,	DevDiv\NDP\CLR
system.addin.dll,	DevDiv\NDP\CLR
system.core.dll,	DevDiv\NDP\CLR
system.data.entity.design.dll,	DevDiv\NDP\DP
system.data.entity.dll,	DevDiv\NDP\DP
system.data.linq.dll,	DevDiv\VS\VCS
system.directoryservices.accountmanagement.dll,	DevDiv\NDP\DS
system.management.instrumentation.dll,	Windows
system.net.dll,	DevDiv\NDP\CDF\NCL
system.web.extensions.design.dll,	DevDiv\NDP\UIFX
system.web.extensions.dll,	DevDiv\NDP\UIFX
system.xml.linq.dll,	DevDiv\NDP\DP
bin\i386\corecon1.0\bin\tcpconnectionc.dll,	DevDiv\VS\VSD
bin\i386\tdnamespaceextension.dll,	DevDiv\VS\TFS
bin\i386\teambuildupgrade.exe,	DevDiv\VS\TFS
bin\i386\staticanalysis\fxcop\rules\other\testrules.dll,	DevDiv\VS\TeamDev
bin\i386\vspkgs\textmgrp.dll,	DevDiv\VS\DTP
bin\i386\dsltools\i386\texttransform.exe,	DevDiv\VS\TeamArch
bin\i386\tf.exe,	DevDiv\VS\TFS
bin\i386\tfrsconfig.exe,	DevDiv\VS\TFS
bin\i386\tfsadminutil.exe,	DevDiv\VS\TFS
bin\i386\tfsbuild.exe,	DevDiv\VS\TFS
bin\i386\tfsbuildservice.exe,	DevDiv\VS\TFS
bin\i386\tfsdb.exe,	DevDiv\VS\TFS
bin\i386\tfsdeleteproject.exe,	DevDiv\VS\TFS
bin\i386\tfserverstatusvalidator.exe,	DevDiv\VS\TFS
bin\i386\tfsfieldmapping.exe,	DevDiv\VS\TFS
bin\i386\tfsgssinit.exe,	DevDiv\VS\TFS
bin\i386\tfsofficeadd-in.dll,	DevDiv\VS\TFS
bin\i386\vspkgs\tfsprovider.dll,	DevDiv\VS\TFS
bin\i386\vspkgs\tfsproviderstub.dll,	DevDiv\VS\TFS
bin\i386\tfsquiesce.exe,	DevDiv\VS\TFS
bin\i386\tfsreg.exe,	DevDiv\VS\TFS
bin\i386\tfssecurity.exe,	DevDiv\VS\TFS
bin\i386\tfsserverscheduler.exe,	DevDiv\VS\TFS
bin\i386\vssetup\setupexe\modules\tfsui.dll,	DevDiv\VS\TFS
tlbexp.exe,	DevDiv\NDP\CLR
bin\i386\tsdevpkg.dll,	DevDiv\VS\TeamDev
bin\i386\vssetup\utils\ttool\ttool.dll,	DevDiv\VS\TFS
bin\i386\vspkgs\typelibbuilder.exe,	DevDiv\NDP\WebTools
bin\i386\undname.exe,	DevDiv\VS\VC
bin\i386\staticanalysis\fxcop\rules\usagerules.dll,	DevDiv\VS\TeamDev
usercontroltestcontainer.exe,	DevDiv\NDP\UIFX
bin\i386\1033\vb7tldui.dll,	DevDiv\VS\VB
bin\i386\vb7to8.exe,	DevDiv\VS\VB
bin\i386\vb7to8dl.dll,	DevDiv\VS\VB
bin\i386\vbc.exe,	DevDiv\VS\VB
bin\i386\vbexpress.exe,	DevDiv\VS\VB
bin\i386\vbexpresspkgs\vbexpressmnu.dll,	DevDiv\VS\VB
bin\i386\1033\vbsldui.dll,	DevDiv\VS\VB
bin\i386\1033\vbupgradeui.dll,	DevDiv\VS\VB
bin\i386\vc7\vcpackages\vcbuild.dll,	DevDiv\VS\VC\Phoenix
bin\i386\vcbuild.exe,	DevDiv\VS\VC
bin\i386\vcencbld.dll,	DevDiv\VS\VC\Phoenix
bin\i386\vcexpress.exe,	DevDiv\VS\VC
bin\i386\vcexpresspkgs\vcexpressmnu.dll,	DevDiv\VS\VC
asms\drop\msft\vc80\openmp\vcomp.dll,	DevDiv\VS\VC
asms\drop\msft\vc80\debugopenmp\vcompd.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcpkg.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcproject.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcprojectamd64platform.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcprojectconversion.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcprojectengine.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcprojectia64platform.dll,	DevDiv\VS\VC
bin\i386\vc7\vcpackages\vcprojectwceplatform.dll,	DevDiv\VS\VSD
bin\i386\vc7\vcpackages\vcpropertymanager.dll,	DevDiv\VS\VC
bin\i386\vcsexpress.exe,	DevDiv\VS\VCS
bin\i386\vcsexpresspkgs\vcsexpressmnu.dll,	DevDiv\VS\VCS
bin\i386\vdt80.dll,	DevDiv\VS\VB
bin\i386\vspkgs\vdt80p.dll,	DevDiv\VS\TeamData
bin\i386\vspkgs\vdtflav.dll,	DevDiv\VS\DTP
bin\i386\vssetup\setupexe\vs70pgres.dll,	DevDiv\VS\DTG
bin\i386\vssetup\setupexe\modules\vs70pgui.dll,	DevDiv\VS\DTG
bin\i386\vssetup\setupexe\modules\vs70uimgr.dll,	DevDiv\VS\DTG
bin\i386\vsa7director.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vsacompsvcspkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vsadirprj.dll,	DevDiv\VS\OfficeDev
bin\i386\vsaenv.exe,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vsamnu.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vsapkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vsapkgp.dll,	DevDiv\VS\OfficeDev
bin\i386\vsavb7dt.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vsavbproj.dll,	DevDiv\VS\OfficeDev
bin\i386\vssetup\setupexe\modules\vsbasereqs.dll,	DevDiv\VS\DTG
bin\i386\vscontentinstaller.exe,	DevDiv\VS\DTP
bin\i386\vspkgs\vsconverterspackage.dll,	DevDiv\VS\VB
bin\i386\VSCovControl.exe,	DevDiv\VS\TeamDev
bin\i386\vscover90.dll,	DevDiv\VS\TeamDev
bin\i386\vscovreport.exe,	DevDiv\VS\TeamDev
bin\i386\vscovview.exe,	DevDiv\VS\TeamDev
bin\i386\vscryptoinfo.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\vsdebug.dll,	DevDiv\VS\TeamDev
bin\i386\vsdiag_regwcf.exe,	DevDiv\VS\TeamDev
bin\i386\vsfilehandler.dll,	DevDiv\VS\DTP
bin\i386\vshost.exe,	DevDiv\VS\DTP
bin\i386\vshost32.exe,	DevDiv\VS\DTP
bin\i386\vsinstr.exe,	DevDiv\VS\TeamDev
bin\i386\vsjitdebugger.exe,	DevDiv\VS\TeamDev
bin\i386\vslauncher.exe,	DevDiv\VS\DTP
bin\i386\vspkgs\vslog.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\vslogp.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\vsmacros.dll,	DevDiv\VS\DTP
bin\i386\vsmsvr.exe,	DevDiv\VS\OfficeDev
bin\i386\vsmsvrp.dll,	DevDiv\VS\OfficeDev
bin\i386\vsperf90.dll,	DevDiv\VS\TeamDev
bin\i386\vsperfanalysis.dll,	DevDiv\VS\TeamDev
bin\i386\vsperfcmd.exe,	DevDiv\VS\TeamDev
bin\i386\vsperfcontrol.dll,	DevDiv\VS\TeamDev
bin\i386\vsperfdata.dll,	DevDiv\VS\TeamDev
bin\i386\vsperfdrv90.sys,	DevDiv\VS\TeamDev
bin\i386\vsperfmon.exe,	DevDiv\VS\TeamDev
bin\i386\vsperfpresentation.dll,	DevDiv\VS\TeamDev
bin\i386\vsperfreader.dll,	DevDiv\VS\TeamDev
bin\i386\vsperfreport.exe,	DevDiv\VS\TeamDev
bin\i386\vsperfsrv.exe,	DevDiv\VS\TeamDev
bin\i386\vspmsg.dll,	DevDiv\VS\TeamDev
vssdk\vsregex.exe,	DevDiv\VS\DTP\Ecosystem
bin\i386\vssetup\setupexe\modules\vsscenario.dll,	DevDiv\VS\DTG
bin\i386\vssconverter.exe,	DevDiv\VS\TFS
bin\i386\vssetup\setupexe\vsserverres.dll,	DevDiv\VS\TFS
bin\i386\vssetup\setupexe\modules\vsserverui.dll,	DevDiv\VS\TeamTest
bin\i386\vspkgs\vssln.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\vssprovider.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\vssproviderstub.dll,	DevDiv\VS\DTP
bin\i386\vsswebservice\bin\vsswebservice.dll,	DevDiv\VS\TFS
bin\i386\vsta.exe,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstaclientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstaclientpkg2007.dll,	DevDiv\VS\OfficeDev
bin\i386\vstadteprovider.dll,	DevDiv\VS\OfficeDev
bin\i386\vstapkgs\vstamnu.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstaproject.dll,	DevDiv\VS\OfficeDev
bin\i386\vstesthost.exe,	DevDiv\VS\TeamTest
bin\i386\vstlbinf.dll,	DevDiv\VS\DTP
bin\i386\vspkgs\vstoaddin2003clientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstoaddin2007clientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vstoapartmentshim.dll,	DevDiv\VS\OfficeDev
bin\i386\vstobootstrapper.exe,	DevDiv\VS\OfficeDev
bin\i386\vstoee.dll,	DevDiv\VS\OfficeDev
bin\i386\vstoexcel2003adaptor.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstoexcel2003clientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vstoexcel2007adaptor.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstoexcel2007clientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vstoinstaller.exe,	DevDiv\VS\OfficeDev
bin\i386\vstoinstallerinvoker.exe,	DevDiv\VS\OfficeDev
bin\i386\vstoloader.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstooffice2003designer.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstooffice2007designer.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstowfproject.dll,	DevDiv\VS\OfficeDev
bin\i386\vstoword2003adaptor.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstoword2003clientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vstoword2007adaptor.dll,	DevDiv\VS\OfficeDev
bin\i386\vspkgs\vstoword2007clientpkg.dll,	DevDiv\VS\OfficeDev
bin\i386\vstst-fileconverter.exe,	DevDiv\VS\TeamTest
bin\i386\vswizard.dll,	DevDiv\VS\VC
bin\i386\vwdexpress.exe,	DevDiv\NDP\WebTools
bin\i386\vwdexpresspkgs\vwdexpressmnu.dll,	DevDiv\NDP\WebTools
bin\i386\vssetup\setupexe\modules\wapui.dll,	DevDiv\VS\DTG
bin\i386\wcfhttpconfig.exe,	DevDiv\VS\TFS
bin\i386\vspkgs\webappupgrade.dll,	DevDiv\NDP\WebTools
bin\i386\webdev.webhost.dll,	DevDiv\NDP\WebTools
bin\i386\webdev.webserver.exe,	DevDiv\NDP\WebTools
bin\i386\vspkgs\webdirprj.dll,	DevDiv\NDP\WebTools
bin\i386\vspkgs\webmigration.dll,	DevDiv\NDP\WebTools
bin\i386\widbloc.exe,	DevDiv\VS\TFS
windowsformsintegration.design.dll,	DevDiv\NDP\UIFX
windowsformsintegration.package.dll,	DevDiv\NDP\UIFX
bin\i386\winfxbrowserapplicationtemplatewizard.dll,	DevDiv\VS\DTP
bin\i386\winfxcustomcontroltemplatewizard.dll,	DevDiv\VS\DTP
bin\i386\witexport.exe,	DevDiv\VS\TFS
bin\i386\witfields.exe,	DevDiv\VS\TFS
bin\i386\witimport.exe,	DevDiv\VS\TFS
bin\i386\wmiscriptutils.dll,	Windows
wsdl.exe,	DevDiv\NDP\CDF
bin\i386\wsschecker.exe,	DevDiv\VS\TFS
bin\i386\xdcmake.exe,	DevDiv\VS\VC
xsd.exe,	DevDiv\NDP\CDF
bin\i386\zipexestub.exe,	DevDiv\VS\DTP
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\fxcop\1.36\x86\CustomDictionary.xml ===
<?xml version="1.0" encoding="utf-8" ?>
<Dictionary>
  <Words>
    <!-- 
      This is a list of case-insensitive words that exist in the dictionary
      but you do not want to be recognized by IdentifiersShouldBeSpelledCorrectly.
      Do not add deprecated terms to this list, instead add these to the 
      <Deprecated> section below.
    -->
    <Unrecognized>
      <Word>cb</Word>
      <Word>ch</Word>
      <Word>csc</Word>
      <Word>elem</Word>
      <Word>gt</Word>
      <Word>idx</Word>
      <Word>img</Word>
      <Word>lg</Word>
      <Word>multi</Word>
      <Word>num</Word>
      <Word>ps</Word>
      <Word>pw</Word>
      <Word>scp</Word>
      <Word>si</Word>
      <Word>sig</Word>
      <Word>tk</Word>
      <Word>tw</Word>
      <Word>val</Word>      
    </Unrecognized>
    <!--
      This is a list of case-insensitive words that do not exist in the dictionary
      but you still want to be considered as recognized by 
      IdentifiersShouldBeSpelledCorrectly. Do not add compound words (e.g. 'FileName') 
      to this list as this will cause CompoundWordsShouldBeBeCasedCorrectly to fire on 
      usages of the compound word stating that they should be changed to their discrete equivalent 
      (for example 'FileName' -> 'Filename').
    -->
    <Recognized>
      <Word>accessor</Word>
      <Word>accessors</Word>
      <Word>acos</Word>
      <Word>aes</Word>
      <Word>aptca</Word>
      <Word>arg</Word>
      <Word>args</Word>
      <Word>asin</Word>
      <Word>asm</Word>
      <Word>aspx</Word>
      <Word>async</Word>
      <Word>atan</Word>
      <Word>baml</Word>
      <Word>bcl</Word>
      <Word>bindable</Word>
      <Word>bitrate</Word>
      <Word>blittable</Word>
      <Word>blog</Word>
      <Word>bool</Word>
      <Word>bootstrapper</Word>
      <Word>bootstrappers</Word>
      <Word>browsable</Word>
      <Word>cacheability</Word>
      <Word>callee</Word>
      <Word>callees</Word>
      <Word>canonicalize</Word>
      <Word>cdecl</Word>
      <Word>cdo</Word>
      <Word>chtml</Word>
      <Word>cim</Word>
      <Word>cloneable</Word>
      <Word>clr</Word>
      <Word>clr's</Word>
      <Word>cls</Word>
      <Word>clsid</Word>
      <Word>clsids</Word>
      <Word>cmd</Word>
      <Word>cmdlet</Word>
      <Word>cmdlets</Word>
      <Word>comparand</Word>
      <Word>concat</Word>
      <Word>config</Word>
      <Word>contravariant</Word>
      <Word>cookieless</Word>
      <Word>cos</Word>
      <Word>crm</Word>
      <Word>css</Word>
      <Word>cyclomatic</Word>
      <Word>debuggable</Word>
      <Word>decommission</Word>
      <Word>deformatter</Word>
      <Word>delegator</Word>
      <Word>dequeue</Word>
      <Word>dereferenced</Word>
      <Word>des</Word>
      <Word>deserialization</Word>
      <Word>deserialize</Word>
      <Word>deserialized</Word>
      <Word>deserializing</Word>
      <Word>dhcp</Word>
      <Word>discardable</Word>
      <Word>dll</Word>
      <Word>dns</Word>
      <Word>documentable</Word>
      <Word>dsig</Word>
      <Word>dtd</Word>
      <Word>em</Word>
      <Word>email</Word>
      <Word>emails</Word>
      <Word>emf</Word>
      <Word>encodable</Word>
      <Word>endian</Word>
      <Word>enqueue</Word>
      <Word>enum</Word>
      <Word>enums</Word>
      <Word>expando</Word>
      <Word>finalizer</Word>
      <Word>finalizers</Word>
      <Word>fixup</Word>
      <Word>fixups</Word>
      <Word>formattable</Word>
      <Word>func</Word>
      <Word>guid</Word>
      <Word>guids</Word>
      <Word>hashtable</Word>
      <Word>hashtables</Word>
      <Word>hashtable's</Word>
      <Word>hdc</Word>
      <Word>hijri</Word>
      <Word>href</Word>
      <Word>iis</Word>
      <Word>il</Word>
      <Word>ime</Word>
      <Word>initializer</Word>
      <Word>initializers</Word>
      <Word>int</Word>
      <Word>interop</Word>
      <Word>intrinsics</Word>
      <Word>ipv</Word>
      <Word>iterator</Word>
      <Word>iterators</Word>
      <Word>jit</Word>
      <Word>ldap</Word>
      <Word>linq</Word>
      <Word>localhost</Word>
      <Word>loopback</Word>
      <Word>loopbacks</Word>
      <Word>mapper</Word>
      <Word>mappers</Word>
      <Word>marshaler</Word>
      <Word>marshalers</Word>
      <Word>mdi</Word>
      <Word>mergable</Word>
      <Word>misc</Word>
      <Word>miscased</Word>
      <Word>monitorable</Word>
      <Word>oks</Word>
      <Word>mscoree</Word>
      <Word>mscorlib</Word>
      <Word>msh</Word>
      <Word>multiline</Word>
      <Word>multipanel</Word>
      <Word>multipanels</Word>
      <Word>multiview</Word>
      <Word>multiviews</Word>
      <Word>mutator</Word>
      <Word>mutators</Word>
      <Word>mutex</Word>
      <Word>mutexes</Word>
      <Word>ndpsec</Word>
      <Word>nls</Word>
      <Word>nop</Word>
      <Word>ntfs</Word>
      <Word>ntlm</Word>
      <Word>nullable</Word>
      <Word>obj</Word>
      <Word>odbc</Word>
      <Word>overridable</Word>
      <Word>pageable</Word>
      <Word>parameterless</Word>
      <Word>pdb</Word>
      <Word>persistable</Word>
      <Word>playlist</Word>
      <Word>pragma</Word>
      <Word>prepend</Word>
      <Word>prog</Word>
      <Word>ptr</Word>
      <Word>queryable</Word>
      <Word>ras</Word>
      <Word>rect</Word>
      <Word>rects</Word>
      <Word>recurse</Word>
      <Word>refactor</Word>
      <Word>reg</Word>
      <Word>regex</Word>
      <Word>remoted</Word>
      <Word>remoting</Word>
      <Word>representable</Word>
      <Word>res</Word>
      <Word>resolver</Word>
      <Word>resolvers</Word>
      <Word>rethrow</Word>
      <Word>rethrows</Word>
      <Word>rijndael</Word>
      <Word>rpc</Word>
      <Word>rtc</Word>
      <Word>rva</Word>
      <Word>sdl</Word>
      <Word>searchspace</Word>
      <Word>searchspaces</Word>
      <Word>seekable</Word>
      <Word>seq</Word>
      <Word>serializable</Word>
      <Word>serializer</Word>
      <Word>serializers</Word>
      <Word>silverlight</Word>
      <Word>smtp</Word>
      <Word>specifier</Word>
      <Word>specifiers</Word>
      <Word>spline</Word>
      <Word>sql</Word>
      <Word>ssl</Word>
      <Word>sta</Word>
      <Word>stickies</Word>
      <Word>struct</Word>
      <Word>structs</Word>
      <Word>subaddress</Word>
      <Word>subaddresses</Word>
      <Word>subclass</Word>
      <Word>subclasses</Word>
      <Word>subdirectories</Word>
      <Word>subdirectory</Word>
      <Word>subexpression</Word>
      <Word>subexpressions</Word>
      <Word>subitem</Word>
      <Word>subitems</Word>
      <Word>subkey</Word>
      <Word>subkeys</Word>
      <Word>submenu</Word>
      <Word>submenus</Word>
      <Word>subpath</Word>
      <Word>subpaths</Word>
      <Word>subsegment</Word>
      <Word>subsegments</Word>
      <Word>subtree</Word>
      <Word>subtrees</Word>
      <Word>tcp</Word>
      <Word>templated</Word>
      <Word>thunk</Word>
      <Word>thunks</Word>
      <Word>tlb</Word>
      <Word>tuple</Word>
      <Word>tuples</Word>
      <Word>udp</Word>
      <Word>udt</Word>
      <Word>unboxing</Word>
      <Word>uncategorize</Word>
      <Word>unindent</Word>
      <Word>uninitialize</Word>
      <Word>uninitialized</Word>
      <Word>uninstantiated</Word>
      <Word>unmaintainable</Word>
      <Word>unmarshal</Word>
      <Word>unregister</Word>
      <Word>unregistering</Word>
      <Word>unregisters</Word>
      <Word>unregistration</Word>
      <Word>unrepresentable</Word>
      <Word>unterminated</Word>
      <Word>untrusted</Word>
      <Word>uri</Word>
      <Word>uris</Word>
      <Word>url</Word>
      <Word>urls</Word>
      <Word>utc</Word>
      <Word>utf</Word>
      <Word>validator</Word>
      <Word>vsa</Word>
      <Word>weblog</Word>
      <Word>wiki</Word>
      <Word>wcf</Word>
      <Word>wmf</Word>
      <Word>wmi</Word>
      <Word>wml</Word>
      <Word>wpf</Word>
      <Word>wql</Word>
      <Word>wsdl</Word>
      <Word>xaml</Word>
      <Word>xhtml</Word>
      <Word>xmlns</Word>
      <Word>xor</Word>
      <Word>xrml</Word>
      <Word>xsd</Word>
      <Word>xsi</Word>
      <Word>xsl</Word>
      <Word>xslt</Word>
    </Recognized>
    <Deprecated>
      <!-- 
        This is a list of deprecated terms with their preferred alternates and is 
        used by UsePreferredTerms. The deprecated terms are case-insensitive, 
        however, make sure to pascal-case the preferred alternates. If a word 
        does not have a preferred alternate, simply leave it blank.                                           
      -->
      <Term PreferredAlternate="EnterpriseServices">complus</Term>
      <Term PreferredAlternate="Canceled">cancelled</Term>
      <Term PreferredAlternate="Indexes">indices</Term>
      <Term PreferredAlternate="LogOn">login</Term>
      <Term PreferredAlternate="LogOff">logout</Term>
      <Term PreferredAlternate="SignIn">signon</Term>
      <Term PreferredAlternate="SignOut">signoff</Term>
      <Term PreferredAlternate="Writable">writeable</Term>
      <Term PreferredAlternate="Cannot">cant</Term>
      <Term PreferredAlternate="AreNot">arent</Term>
      <Term PreferredAlternate="DoNot">dont</Term>
      <Term PreferredAlternate="DoesNot">doesnt</Term>
      <Term PreferredAlternate="DidNot">didnt</Term>
      <Term PreferredAlternate="CouldNot">couldnt</Term>
      <Term PreferredAlternate="WouldNot">wouldnt</Term>
      <Term PreferredAlternate="ShouldNot">shouldnt</Term>
      <Term PreferredAlternate="WillNot">wont</Term>
      <Term PreferredAlternate="HaveNot">havent</Term>
      <Term PreferredAlternate="HasNot">hasnt</Term>
      <Term PreferredAlternate="HadNot">hadnt</Term>
      <Term PreferredAlternate="IsNot">isnt</Term>
      <Term PreferredAlternate="WasNot">wasnt</Term>
      <Term PreferredAlternate="WereNot">werent</Term>
      <Term PreferredAlternate="">flag</Term>
      <Term PreferredAlternate="">flags</Term>
    </Deprecated>
    <Compound>
      <!-- 
        This is a list of discrete terms with their compound alternates and is used by 
        CompoundWordsShouldBeCasedCorrectly. These are words that exist in the 
        dictionary as discrete terms, however, should actually be cased as compound words. 
        For example, 'Filename' exists in the dictionary and hence the spelling rules will 
        not see it as unrecognized but its actual preferred usage is 'FileName'; adding it
        below causes CompoundWordsShouldBeCasedCorrectly to fire. The discrete terms are 
        case-insensitive, however, be sure to pascal-case the compound alternates.
        Any discrete terms added below automatically get added to the list of discrete
        exceptions to prevent CompoundWordsShouldBeCasedCorrectly from firing both on the
        compound word (for example 'WhiteSpace') and its discrete alternate (for example 
        'Whitespace').
      -->
      <Term CompoundAlternate="DataStore">datastore</Term>
      <Term CompoundAlternate="DataStores">datastores</Term>
      <Term CompoundAlternate="DataSet">dataset</Term>
      <Term CompoundAlternate="DataSets">datasets</Term>
      <Term CompoundAlternate="TextBox">textbox</Term>
      <Term CompoundAlternate="TextBoxes">textboxes</Term>
      <Term CompoundAlternate="CodePage">codepage</Term>
      <Term CompoundAlternate="CodePages">codepages</Term>
      <Term CompoundAlternate="CheckBox">checkbox</Term>
      <Term CompoundAlternate="CheckBoxes">checkboxes</Term>
      <Term CompoundAlternate="PushButton">pushbutton</Term>
      <Term CompoundAlternate="PushButtons">pushbuttons</Term>
      <Term CompoundAlternate="DropDown">dropdown</Term>
      <Term CompoundAlternate="DropDowns">dropdowns</Term>
      <Term CompoundAlternate="ToolBar">toolbar</Term>
      <Term CompoundAlternate="ToolBars">toolbars</Term>
      <Term CompoundAlternate="ScrollBar">scrollbar</Term>
      <Term CompoundAlternate="ScrollBars">scrollbars</Term>
      <Term CompoundAlternate="BitFlag">bitflag</Term>
      <Term CompoundAlternate="BitFlags">bitflags</Term>
      <Term CompoundAlternate="FileName">filename</Term>
      <Term CompoundAlternate="FileNames">filenames</Term>
      <Term CompoundAlternate="FileServer">fileserver</Term>
      <Term CompoundAlternate="FileServers">fileservers</Term>
      <Term CompoundAlternate="UserName">username</Term>
      <Term CompoundAlternate="UserNames">usernames</Term>
      <Term CompoundAlternate="HostName">hostname</Term>
      <Term CompoundAlternate="HostNames">hostnames</Term>
      <Term CompoundAlternate="FieldName">fieldname</Term>
      <Term CompoundAlternate="FieldNames">fieldnames</Term>
      <Term CompoundAlternate="PathName">pathname</Term>
      <Term CompoundAlternate="PathNames">pathnames</Term>
      <Term CompoundAlternate="WhiteSpace">whitespace</Term>
      <Term CompoundAlternate="WhiteSpaces">whitespaces</Term>
      <Term CompoundAlternate="LogOn">logon</Term>
      <Term CompoundAlternate="LogOns">logons</Term>
      <Term CompoundAlternate="LogOff">logoff</Term>
      <Term CompoundAlternate="LogOffs">logoffs</Term>
      <Term CompoundAlternate="SignIn">signin</Term>
      <Term CompoundAlternate="SignIns">signins</Term>
      <Term CompoundAlternate="SignOut">signout</Term>
      <Term CompoundAlternate="SignOuts">signouts</Term>
      <Term CompoundAlternate="FrontEnd">frontend</Term>
      <Term CompoundAlternate="FrontEnds">frontends</Term>
      <Term CompoundAlternate="BackEnd">backend</Term>
      <Term CompoundAlternate="BackEnds">backends</Term>
      <Term CompoundAlternate="SiteMap">sitemap</Term>
      <Term CompoundAlternate="SiteMaps">sitemaps</Term>
      <Term CompoundAlternate="DataType">datatype</Term>
      <Term CompoundAlternate="DataTypes">datatypes</Term>
      <Term CompoundAlternate="DesignTime">designtime</Term>
      <Term CompoundAlternate="DesignTimes">designtimes</Term>
      <Term CompoundAlternate="ReadOnly">readonly</Term>
      <Term CompoundAlternate="TrueType">truetype</Term>
      <Term CompoundAlternate="NetBios">netbios</Term>
      <Term CompoundAlternate="AutoDetect">autodetect</Term>
      <Term CompoundAlternate="AutoDetects">autodetects</Term>
      <Term CompoundAlternate="AutoScroll">autoscroll</Term>
      <Term CompoundAlternate="AutoScrolls">autoscrolls</Term>
      <Term CompoundAlternate="AutoComplete">autocomplete</Term>
      <Term CompoundAlternate="AutoCompletes">autocompletes</Term>
      <Term CompoundAlternate="AutoSave">autosave</Term>
      <Term CompoundAlternate="AutoSaves">autosaves</Term>
      <Term CompoundAlternate="JavaScript">javascript</Term>
      <Term CompoundAlternate="JScript">jscript</Term>
      <Term CompoundAlternate="VoiceView">voiceview</Term>
      <Term CompoundAlternate="AppleTalk">appletalk</Term>
      <Term CompoundAlternate="MapInfo">mapinfo</Term>
      <Term CompoundAlternate="NewLine">newline</Term>
      <Term CompoundAlternate="NewLines">newlines</Term>
      <Term CompoundAlternate="QWord">qword</Term>
      <Term CompoundAlternate="QWords">qwords</Term>
      <Term CompoundAlternate="KeySet">keyset</Term>
      <Term CompoundAlternate="KeySets">keysets</Term>
    </Compound>
    <DiscreteExceptions>
      <!--
        This is a list of case-insensitive exceptions to the CompoundWordsShouldBeCasedCorrectly 
        discrete term check. As this check works solely on the basis of whether two consecutive
        tokens exists in the dictionary, it can have a high false positive rate. For example, 
        'onset' exists in the dictionary but the user probably intended it to be 'OnSet'. 
        Adding this word below prevents this rule from firing telling the user to change 'OnSet' 
        to 'Onset'.
      -->         
      <Term>onset</Term>
      <Term>inset</Term>
      <Term>byname</Term>
      <Term>setout</Term>
      <Term>countertype</Term>
      <Term>editor</Term>
      <Term>longtime</Term>
      <Term>drawstring</Term>
      <Term>hookup</Term>
      <Term>cleanup</Term>
      <Term>breakout</Term>
      <Term>setline</Term>
      <Term>maybe</Term>
      <Term>nods</Term>
      <Term>classis</Term>
      <Term>gettable</Term>
      <Term>inform</Term>
      <Term>beset</Term>
      <Term>settable</Term>
      <Term>standalone</Term>
      <Term>threadlike</Term>
      <Term>infield</Term>
      <Term>infields</Term>
      <Term>meantime</Term>
      <Term>mackey</Term>
      <Term>jscript</Term>
      <Term>ipv</Term>        <!-- IPv4, IPv6 -->
      <Term>tooltip</Term>
      <Term>tooltips</Term>
      <Term>indispose</Term>
    </DiscreteExceptions>
  </Words>
  <Acronyms>
    <CasingExceptions>
      <Acronym>Pi</Acronym>
      <Acronym>Na</Acronym>   <!-- NaN -->
      <Acronym>NESW</Acronym> <!-- North East South West -->
      <Acronym>NWSE</Acronym> <!-- North West South East -->
    </CasingExceptions>
  </Acronyms>
</Dictionary>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FSharp\2.0\Runtime\v2.0\FSharp.Core.xml ===
<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Core</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.BuildSettings.Version">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Tail">
 <summary>Gets the tail of the list, which is a list containing all the elements of the list, excluding the first element </summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Length">
 <summary>Gets the number of items contained in the list</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Item(System.Int32)">
 <summary>Gets the element of the list at the given position.</summary>
 <remarks>Lists are represented as linked lists so this is an O(n) operation.</remarks>
 <param name="index">The index.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.IsEmpty">
 <summary>Gets a value indicating if the list contains no entries</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Head">
 <summary>Gets the first element of the list</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Empty">
 <summary>Returns an empty list of a particular type</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpList`1.Cons(`0,Microsoft.FSharp.Collections.FSharpList{`0})">
 <summary>Returns a list with <c>head</c> as its first element and <c>tail</c> as its subsequent elements</summary>
 <param name="head">A new head value for the list.</param>
 <param name="tail">The existing list.</param>
 <returns>The list with head appended to the front of tail.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.FSharpList`1">
 <summary>The type of immutable singly-linked lists.</summary>

 <remarks>Use the constructors <c>[]</c> and <c>::</c> (infix) to create values of this type, or
 the notation <c>[1;2;3]</c>. Use the values in the <c>List</c> module to manipulate 
 values of this type, or pattern match against the values directly.</remarks>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpMap`2.Item(`0)">
 <summary>Lookup an element in the map. Raise <c>KeyNotFoundException</c> if no binding
 exists in the map.</summary>
 <param name="key">The input key.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the key is not found.</exception>
 <returns>The value mapped to the key.</returns>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpMap`2.IsEmpty">
 <summary>Returns true if there are no bindings in the map.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpMap`2.Count">
 <summary>The number of bindings in the map.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.TryFind(`0)">
 <summary>Lookup an element in the map, returning a <c>Some</c> value if the element is in the domain 
 of the map and <c>None</c> if not.</summary>
 <param name="key">The input key.</param>
 <returns>The mapped value, or None if the key is not in the map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.Remove(`0)">
 <summary>Removes an element from the domain of the map. No exception is raised if the element is not present.</summary>
 <param name="key">The input key.</param>
 <returns>The resulting map.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.ContainsKey(`0)">
 <summary>Tests if an element is in the domain of the map.</summary>
 <param name="key">The input key.</param>
 <returns>True if the map contains the given key.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.Add(`0,`1)">
 <summary>Returns a new map with the binding added to the given map.</summary>
 <param name="key">The input key.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple`2{`0,`1}})">
 <summary>Builds a map that contains the bindings of the given IEnumerable.</summary>
 <param name="elements">The input sequence of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.FSharpMap`2">
 <summary>Immutable maps. Keys are ordered by F# generic comparison.</summary>
 
 <remarks>Maps based on generic comparison are efficient for small keys. They are not a suitable choice if keys are recursive data structures 
 or if keys require bespoke comparison semantics.

 All members of this class are thread-safe and may be used concurrently from multiple threads.</remarks>
</member>
<member name="T:Microsoft.FSharp.Collections.ResizeArray`1">
 <summary>An abbreviation for the CLI type <c>System.Collections.Generic.List&lt;_&gt;</c></summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Subtraction(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Returns a new set with the elements of the second set removed from the first.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>A set containing elements of the first set that are not contained in the second set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Addition(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Compute the union of the two sets.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>The union of the two input sets.</returns>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.MinimumElement">
 <summary>Returns the lowest element in the set according to the ordering being used for the set.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.MaximumElement">
 <summary>Returns the highest element in the set according to the ordering being used for the set.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.IsEmpty">
 <summary>A useful shortcut for Set.isEmpty. See the Set module for further operations on sets.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.Count">
 <summary>The number of elements in the set</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.Remove(`0)">
 <summary>A useful shortcut for Set.remove. Note this operation produces a new set
 and does not mutate the original set. The new set will share many storage
 nodes with the original. See the Set module for further operations on sets.</summary>
 <param name="value">The value to remove from the set.</param>
 <returns>The result set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a superset of <c>otherSet</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a subset of <c>otherSet</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first, and at least 
 one element of the first is not in the second.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a proper superset of <c>otherSet</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second, and at least 
 one element of the second is not in the first.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a proper subset of <c>otherSet</c>.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.Contains(`0)">
 <summary>A useful shortcut for Set.contains. See the Set module for further operations on sets.</summary>
 <param name="value">The value to check.</param>
 <returns>True if the set contains <c>value</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.Add(`0)">
 <summary>A useful shortcut for Set.add. Note this operation produces a new set
 and does not mutate the original set. The new set will share many storage
 nodes with the original. See the Set module for further operations on sets.</summary>
 <param name="value">The value to add to the set.</param>
 <returns>The result set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
 <summary>Create a set containing elements drawn from the given sequence.</summary>
 <param name="elements">The input sequence.</param>
 <returns>The result set.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.FSharpSet`1">
 <summary>Immutable sets based on binary trees, where comparison is the
 F# structural comparison function, potentially using implementations
 of the IComparable interface on key values.</summary>

 <remarks>See the Set module for further operations on sets.

 All members of this class are thread-safe and may be used concurrently from multiple threads.</remarks>
</member>
<member name="T:Microsoft.FSharp.Collections.list`1">
 <summary>An abbreviation for the type of immutable singly-linked lists. </summary>

 <remarks>Use the constructors <c>[]</c> and <c>::</c> (infix) to create values of this type, or
 the notation <c>[1;2;3]</c>. Use the values in the <c>List</c> module to manipulate 
 values of this type, or pattern match against the values directly.</remarks>
</member>
<member name="T:Microsoft.FSharp.Collections.seq`1">
 <summary>An abbreviation for the CLI type <c>System.Collections.Generic.IEnumerable&lt;_&gt;</c></summary>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)">
 <summary>Fetches an element from a 2D array. You can also use the syntax <c>array.[index1,index2]</c>.</summary>

 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>

 <returns>The value of the array at the given index.</returns>
 <exception cref="System.ArgumentException">Thrown when the indices are negative or exceed the bounds of the array.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)">
 <summary>Sets the value of an element in an array. You can also use the syntax <c>array.[index1,index2] &lt;- value</c>.</summary>

 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="value">The value to set in the array.</param>
 <exception cref="System.ArgumentException">Thrown when the indices are negative or exceed the bounds of the array.</exception> 
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])">
 <summary>Builds a new array whose elements are the same as the input array but
 where a non-zero-based input array generates a corresponding zero-based 
 output array.</summary>

 <param name="array">The input array.</param>

 <returns>The zero-based output array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}}},``0[0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer indices passed to the
 function indicates the element being transformed.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propagated to the output
 array.</remarks>

 <param name="mapping">A function that is applied to transform each element of the array.  The two integers
 provide the index of the element.</param>
 <param name="array">The input array.</param>

 <returns>An array whose elements have been transformed by the given mapping.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>

 <param name="mapping">A function that is applied to transform each item of the input array.</param>
 <param name="array">The input array.</param>

 <returns>An array whose elements have been transformed by the given mapping.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Length2``1(``0[0:,0:])">
 <summary>Returns the length of an array in the second dimension.</summary>

 <param name="array">The input array.</param>

 <returns>The length of the array in the second dimension.</returns>  
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Length1``1(``0[0:,0:])">
 <summary>Returns the length of an array in the first dimension.</summary>

 <param name="array">The input array.</param>

 <returns>The length of the array in the first dimension.</returns>  
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])">
 <summary>Applies the given function to each element of the array.  The integer indices passed to the
 function indicates the index of element.</summary>

 <param name="action">A function to apply to each element of the array with the indices available as an argument.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])">
 <summary>Applies the given function to each element of the array.</summary>

 <param name="action">A function to apply to each element of the array.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreateBased``1(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Creates a based array where the entries are initially Unchecked.defaultof&lt;'T&gt;.</summary>

 <param name="base1">The base for the first dimension of the array.</param>
 <param name="base2">The base for the second dimension of the array.</param>
 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when base1, base2, length1, or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.CreateBased``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)">
 <summary>Creates a based array whose elements are all initially the given value.</summary>

 <param name="base1">The base for the first dimension of the array.</param>
 <param name="base2">The base for the second dimension of the array.</param>
 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="initial">The value to populate the new array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when base1, base2, length1, or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.InitializeBased``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}})">
 <summary>Creates a based array given the dimensions and a generator function to compute the elements.</summary>

 <param name="base1">The base for the first dimension of the array.</param>
 <param name="base2">The base for the second dimension of the array.</param>
 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="initializer">A function to produce elements of the array given the two indices.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when base1, base2, length1, or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreate``1(System.Int32,System.Int32)">
 <summary>Creates an array where the entries are initially Unchecked.defaultof&lt;'T&gt;.</summary>

 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when length1 or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value.</summary>

 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="value">The value to populate the new array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when length1 or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}})">
 <summary>Creates an array given the dimensions and a generator function to compute the elements.</summary>

 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="initializer">A function to produce elements of the array given the two indices.</param>

 <returns>The generated array.</returns>
 <exception cref="System.ArgumentException">Thrown when either of the lengths is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Reads a range of elements from the first array and write them into the second.</summary>

 <param name="source">The source array.</param>
 <param name="sourceIndex1">The first-dimension index to begin copying from in the source array.</param>
 <param name="sourceIndex2">The second-dimension index to begin copying from in the source array.</param>
 <param name="target">The target array.</param>
 <param name="targetIndex1">The first-dimension index to begin copying into in the target array.</param>
 <param name="targetIndex2">The second-dimension index to begin copying into in the target array.</param>
 <param name="length1">The number of elements to copy across the first dimension of the arrays.</param>
 <param name="length2">The number of elements to copy across the second dimension of the arrays.</param>
 <exception cref="System.ArgumentException">Thrown when any of the indices are negative or if either of
 the counts are larger than the dimensions of the array allow.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])">
 <summary>Builds a new array whose elements are the same as the input array.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>

 <param name="array">The input array.</param>

 <returns>A copy of the input array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Base2``1(``0[0:,0:])">
 <summary>Fetches the base-index for the second dimension of the array.</summary>

 <param name="array">The input array.</param>

 <returns>The base-index of the second dimension of the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Base1``1(``0[0:,0:])">
 <summary>Fetches the base-index for the first dimension of the array.</summary>

 <param name="array">The input array.</param>

 <returns>The base-index of the first dimension of the array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.Array2DModule">
 <summary>Basic operations on 2-dimensional arrays.</summary>

 <remarks>F# and CLI multi-dimensional arrays are typically zero-based. 
 However, CLI multi-dimensional arrays used in conjunction with external
 libraries (e.g. libraries associated with Visual Basic) be 
 non-zero based, using a potentially different base for each dimension.
 The operations in this module will accept such arrays, and
 the basing on an input array will be propagated to a matching output
 array on the <c>Array2D.map</c> and <c>Array2D.mapi</c> operations.
 Non-zero-based arrays can also be created using <c>Array2D.zeroCreateBased</c>, 
 <c>Array2D.createBased</c> and <c>Array2D.initBased</c>.</remarks>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32)">
 <summary>Creates an array where the entries are initially the "default" value.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)">
 <summary>Sets the value of an element in an array. You can also 
 use the syntax 'array.[index1,index2,index3] &lt;- value'.</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <param name="value">The value to set at the given index.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}}}},``0[0:,0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer indices passed to the
 function indicates the element being transformed.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>
 <param name="mapping">The function to transform the elements at each index in the array.</param>
 <param name="array">The input array.</param>
 <returns>The array created from the transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[0:,0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>
 <param name="mapping">The function to transform each element of the array.</param>
 <param name="array">The input array.</param>
 <returns>The array created from the transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Length3``1(``0[0:,0:,0:])">
 <summary>Returns the length of an array in the third dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the third dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Length2``1(``0[0:,0:,0:])">
 <summary>Returns the length of an array in the second dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the second dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Length1``1(``0[0:,0:,0:])">
 <summary>Returns the length of an array in the first dimension  </summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the first dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])">
 <summary>Applies the given function to each element of the array. The integer indicies passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to each element of the array.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])">
 <summary>Applies the given function to each element of the array.</summary>
 <param name="action">The function to apply to each element of the array.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
 <summary>Fetches an element from a 3D array. You can also use the syntax 'array.[index1,index2,index3]'</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}}})">
 <summary>Creates an array given the dimensions and a generator function to compute the elements.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="initializer">The function to create an initial value at each index into the array.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="initial">The value of the array elements.</param>
 <returns>The created array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.Array3DModule">
 <summary>Basic operations on rank 3 arrays.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)">
 <summary>Sets the value of an element in an array. You can also 
 use the syntax 'array.[index1,index2,index3,index4] &lt;- value'.</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <param name="index4">The index along the fourth dimension.</param>
 <param name="value">The value to set.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Fetches an element from a 4D array. You can also use the syntax 'array.[index1,index2,index3,index4]'</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <param name="index4">The index along the fourth dimension.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Creates an array where the entries are initially the "default" value.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="length4">The length of the fourth dimension.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length4``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the fourth dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the fourth dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length3``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the third dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the third dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length2``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the second dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the second dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length1``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the first dimension  </summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the first dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}}}})">
 <summary>Creates an array given the dimensions and a generator function to compute the elements.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="length4">The length of the fourth dimension.</param>
 <param name="initializer">The function to create an initial value at each index in the array.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="length4">The length of the fourth dimension.</param>
 <param name="initial">The initial value for each element of the array.</param>
 <returns>The created array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.Array4DModule">
 <summary>Basic operations on rank 4 arrays. </summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])">
 <summary>Combines three arrays into an array of pairs. The three arrays must have equal lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <param name="array3">The third input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of tupled elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])">
 <summary>Combines the two arrays into an array of pairs. The two arrays must have equal lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of tupled elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple`3{``0,``1,``2}[])">
 <summary>Splits an array of triples into three arrays.</summary>
 <param name="array">The input array.</param>
 <returns>The tuple of three arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple`2{``0,``1}[])">
 <summary>Splits an array of pairs into two arrays.</summary>
 <param name="array">The input array.</param>
 <returns>The two arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the index of the first element in the array
 that satisfies the given predicate.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>The index of the first element that satisfies the predicate, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the first element for which the given function returns <c>true</c>.
 Return <c>None</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>The first element that satisfies the predicate, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])">
 <summary>Views the given array as a sequence.</summary>
 <param name="array">The input array.</param>
 <returns>The sequence of array elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])">
 <summary>Builds a list from the given array.</summary>
 <param name="array">The input array.</param>
 <returns>The list of array elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the sum of the results generated by applying the function to each element of the array.</summary>
 <param name="projection">The function to transform the array elements into the type to be summed.</param>
 <param name="array">The input array.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])">
 <summary>Returns the sum of the elements in the array.</summary>
 <param name="array">The input array.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])">
 <summary>Sorts the elements of an array by mutating the array in-place, using the given comparison function. 
 Elements are compared using Operators.compare.</summary>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},``0[])">
 <summary>Sorts the elements of an array by mutating the array in-place, using the given comparison function as the order.</summary>
 <param name="comparer">The function to compare pairs of array elements.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Sorts the elements of an array by mutating the array in-place, using the given projection for the keys. 
 Elements are compared using Operators.compare.</summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="projection">The function to transform array elements into the type that is compared.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},``0[])">
 <summary>Sorts the elements of an array, using the given comparison function as the order, returning a new array.</summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="comparer">The function to compare pairs of array elements.</param>
 <param name="array">The input array.</param>
 <returns>The sorted array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Sorts the elements of an array, using the given projection for the keys and returning a new array. 
 Elements are compared using Operators.compare.</summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="projection">The function to transform array elements into the type that is compared.</param>
 <param name="array">The input array.</param>
 <returns>The sorted array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])">
 <summary>Sorts the elements of an array, returning a new array. Elements are compared using Operators.compare. </summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="array">The input array.</param>
 <returns>The sorted array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)">
 <summary>Builds a new array that contains the given subrange specified by
 starting index and length.</summary>
 <param name="array">The input array.</param>
 <param name="startIndex">The index of the first element of the sub array.</param>
 <param name="count">The length of the sub array.</param>
 <returns>The created sub array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)">
 <summary>Sets an element of an array.</summary>
 <param name="array">The input array.</param>
 <param name="index">The input index.</param>
 <param name="value">The input value.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},``0[],``1)">
 <summary>Like <c>foldBack</c>, but return both the intermediary and final results.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="array">The input array.</param>
 <param name="state">The initial state.</param>
 <returns>The array of state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,``0[])">
 <summary>Like <c>fold</c>, but return the intermediary and final results.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="array">The input array.</param>
 <returns>The array of state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])">
 <summary>Returns a new array with the elements in reverse order.</summary>
 <param name="array">The input array.</param>
 <returns>The reversed array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0[])">
 <summary>Applies a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> 
 then computes <c>f i0 (...(f iN-1 iN))</c>.
 Raises ArgumentException if the array has size zero.</summary>
 <param name="reduction">The function to reduce a pair of elements to a single element.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The final result of the reductions.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0[])">
 <summary>Applies a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> 
 then computes <c>f (... (f i0 i1)...) iN</c>.
 Raises ArgumentException if the array has size zero.</summary>
 <param name="reduction">The function to reduce a pair of elements to a single element.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The final result of the redcutions.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,System.Int32},``0[])">
 <summary>Returns an array with all elements permuted according to the
 specified permutation.</summary>
 <param name="indexMap">The function that maps input indices to output indices.</param>
 <param name="array">The input array.</param>
 <returns>The output array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Splits the collection into two collections, containing the 
 elements for which the given predicate returns "true" and "false"
 respectively.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>A pair of arrays. The first containing the elements the predicate evaluated to true,
 and the second containing those evaluated to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new array from the given enumerable object.</summary>
 <param name="source">The input sequence.</param>
 <returns>The array of elements from the sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds an array from the given list.</summary>
 <param name="list">The input list.</param>
 <returns>The array of elements from the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the lowest of all elements of the array, compared via Operators.min on the function result.</summary>

 <remarks>Throws ArgumentException for empty arrays.</remarks>
 <param name="projection">The function to transform the elements into a type supporting comparison.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The minimum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])">
 <summary>Returns the lowest of all elements of the array, compared via Operators.min.</summary>

 <remarks>Throws ArgumentException for empty arrays</remarks>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The minimum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the greatest of all elements of the array, compared via Operators.max on the function result.</summary>

 <remarks>Throws ArgumentException for empty arrays.</remarks>
 <param name="projection">The function to transform the elements into a type supporting comparison.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])">
 <summary>Returns the greatest of all elements of the array, compared via Operators.max on the function result.</summary>

 <remarks>Throws ArgumentException for empty arrays.</remarks>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``0[])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer index passed to the
 function indicates the index of element being transformed.</summary>
 <param name="mapping">The function to transform elements and their indices.</param>
 <param name="array">The input array.</param>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``0[],``1[])">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise, also passing the index of 
 the elements. The two input arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="mapping">The function to transform pairs of input elements and their indices.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},``0[],``1[])">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise. The two input
 arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="mapping">The function to transform the pairs of the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>
 <param name="mapping">The function to transform elements of the array.</param>
 <param name="array">The input array.</param>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])">
 <summary>Returns the length of an array. You can also use property arr.Length.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])">
 <summary>Applies the given function to pair of elements drawn from matching indices in two arrays,
 also passing the index of the elements. The two arrays must have the same lengths, 
 otherwise an <c>ArgumentException</c> is raised.</summary>
 <param name="action">The function to apply to each index and pair of elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},``0[])">
 <summary>Applies the given function to each element of the array. The integer passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to each index and element.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])">
 <summary>Applies the given function to pair of elements drawn from matching indices in two arrays. The
 two arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="action">The function to apply.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[])">
 <summary>Applies the given function to each element of the array.</summary>
 <param name="action">The function to apply.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])">
 <summary>Returns true if the given array is empty, otherwise false.</summary>
 <param name="array">The input array.</param>
 <returns>True if the array is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)">
 <summary>Creates an array where the entries are initially the default value Unchecked.defaultof&lt;'T&gt;.</summary>
 <param name="count">The length of the array to create.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Creates an array given the dimension and a generator function to compute the elements.</summary>
 <param name="count">The number of elements to initialize.</param>
 <param name="initializer">The function to generate the initial values for each index.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)">
 <summary>Gets an element from an array.</summary>
 <param name="array">The input array.</param>
 <param name="index">The input index.</param>
 <returns>The value of the array at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``2}}},``0[],``1[],``2)">
 <summary>Apply a function to pairs of elements drawn from the two collections, right-to-left, 
 threading an accumulator argument through the computation. The two input
 arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <param name="state">The initial state.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc`2{``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``2,``0[],``1[])">
 <summary>Applies a function to pairs of elements drawn from the two collections, 
 left-to-right, threading an accumulator argument
 through the computation. The two input
 arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},``0[],``1)">
 <summary>Applies a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f i0 (...(f iN s))</c></summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="array">The input array.</param>
 <param name="state">The initial state.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,``0[])">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f (... (f s i0)...) iN</c></summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="array">The input array.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},``0[],``1[])">
 <summary>Tests if all corresponding elements of the array satisfy the given predicate pairwise.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns false then the overall result is 
 false and no further elements are tested. Otherwise, if one collection is longer 
 than the other then the <c>ArgumentException</c> exception is raised. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>True if all of the array elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Tests if all elements of the array satisfy the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input collection. If any application 
 returns false then the overall result is false and no further elements are tested. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>True if all of the array elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the index of the first element in the array
 that satisfies the given predicate. Raise <c>KeyNotFoundException</c> if 
 none of the elements satisy the predicate.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if <c>predicate</c>
 never returns true.</exception>
 <returns>The index of the first element in the array that satisfies the given predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the first element for which the given function returns 'true'.
 Raise <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if <c>predicate</c>
 never returns true.</exception>
 <returns>The first element for which <c>predicate</c> returns true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns "true".</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>An array containing the elements for which the given predicate returns true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},``0[],``1[])">
 <summary>Tests if any pair of corresponding elements of the arrays satisfies the given predicate.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns true then the overall result is 
 true and no further elements are tested. Otherwise, if one collections is longer 
 than the other then the <c>ArgumentException</c> exception is raised. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <returns>True if any result from <c>predicate</c> is true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Tests if any element of the array satisfies the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input array. If any application 
 returns true then the overall result is true and no further elements are tested. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>True if any result from <c>predicate</c> is true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Empty``1">
 <summary>Returns an empty array of the given type.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Applies the given function to each element of the array. Returns
 the array comprised of the results "x" for each element where
 the function returns Some(x)</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="array">The input array.</param>
 <returns>The array of results.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Applies the given function to successive elements, returning the first
 result where function returns <c>Some(x)</c> for some <c>x</c>. If the function 
 never returns <c>Some(x)</c> then <c>KeyNotFoundException</c> is raised.</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="array">The input array.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if every result from
 <c>chooser</c> is <c>None</c>.</exception>
 <returns>The first result.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)">
 <summary>Fills a range of elements of the array with the given value.</summary>
 <param name="target">The target array.</param>
 <param name="targetIndex">The index of the first element to set.</param>
 <param name="count">The number of elements to set.</param>
 <param name="value">The value to set.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Applies the given function to successive elements, returning the first
 result where function returns <c>Some(x)</c> for some <c>x</c>. If the function 
 never returns <c>Some(x)</c> then <c>None</c> is returned.</summary>
 <param name="chooser">The function to transform the array elements into options.</param>
 <param name="array">The input array.</param>
 <returns>The first transformed element that is <c>Some(x)</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value.</summary>
 <param name="count">The length of the array to create.</param>
 <param name="value">The value for the elements.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])">
 <summary>Builds a new array that contains the elements of the given array.</summary>
 <param name="array">The input array.</param>
 <returns>A copy of the input array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>Builds a new array that contains the elements of each of the given sequence of arrays.</summary>
 <param name="arrays">The input sequence of arrays.</param>
 <returns>The concatenation of the sequence of input arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1[]},``0[])">
 <summary>For each element of the array, applies the given function. Concatenates all the results and return the combined array.</summary>
 <param name="mapping">The function to create sub-arrays from the input array elements.</param>
 <param name="array">The input array.</param>
 <returns>The concatenation of the sub-arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
 <summary>Reads a range of elements from the first array and write them into the second.</summary>
 <param name="source">The source array.</param>
 <param name="sourceIndex">The starting index of the source array.</param>
 <param name="target">The target array.</param>
 <param name="targetIndex">The starting index of the target array.</param>
 <param name="count">The number of elements to copy.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the average of the elements generated by applying the function to each element of the array.</summary>
 <param name="projection">The function to transform the array elements before averaging.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when <c>array</c> is empty.</exception>
 <returns>The computed average.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])">
 <summary>Returns the average of the elements in the array.</summary>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when <c>array</c> is empty.</exception>
 <returns>The average of the elements in the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])">
 <summary>Builds a new array that contains the elements of the first array followed by the elements of the second array.</summary>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <returns>The resulting array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.ArrayModule">
 <summary>Basic operations on arrays.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}})">
 <summary>Compare using the given comparer function.</summary>
 <param name="comparer">A function to compare two values.</param>
 <returns>An object implementing IComparer using the supplied comparer.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ComparisonIdentity.Structural``1">
 <summary>Structural comparison.  Compare using Operators.compare.</summary>
</member>
<member name="T:Microsoft.FSharp.Collections.ComparisonIdentity">
 <summary>Common notions of comparison identity used with sorted data structures.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean}})">
 <summary>Hash using the given hashing and equality functions.</summary>
 <param name="hasher">A function to generate a hash code from a value.</param>
 <param name="equality">A function to test equality of two values.</param>
 <returns>An object implementing IEqualityComparer using the supplied functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.HashIdentity.Reference``1">
 <summary>Physical hashing (hash on reference identity of objects, and the contents of value types).  
 Hash using LanguagePrimitives.PhysicalEquality and LanguagePrimitives.PhysicalHash,
 That is, for value types use GetHashCode and Object.Equals (if no other optimization available),
 and for reference types use System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode and 
 reference equality.</summary>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.HashIdentity.Structural``1">
 <summary>Structural hashing.  Hash using Operators.(=) and Operators.hash.</summary>
</member>
<member name="T:Microsoft.FSharp.Collections.HashIdentity">
 <summary>Common notions of value identity used with hash tables.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})">
 <summary>Combines the three lists into a list of triples. The lists must have equal lengths.</summary>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <param name="list3">The third input list.</param>
 <returns>A single list containing triples of matching elements from the input lists.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Combines the two lists into a list of pairs. The two lists must have equal lengths.</summary>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>A single list containing pairs of matching elements from the input lists.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple`3{``0,``1,``2}})">
 <summary>Splits a list of triples into three lists.</summary>
 <param name="list">The input list.</param>
 <returns>Three lists of split elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{``0,``1}})">
 <summary>Splits a list of pairs into two lists.</summary>
 <param name="list">The input list.</param>
 <returns>Two lists of split elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the index of the first element in the list
 that satisfies the given predicate.
 Return <c>None</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>The index of the first element for which the predicate returns true, or None if
 every element evaluates to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the first element for which the given function returns <c>true.</c>.
 Return <c>None</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>The first element for which the predicate returns true, or None if
 every element evaluates to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to successive elements, returning <c>Some(x)</c> the first
 result where function returns <c>Some(x)</c> for some x. If no such element 
 exists then return <c>None</c>.</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="list">The input list.</param>
 <returns>The first resulting value or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Views the given list as a sequence.</summary>
 <param name="list">The input list.</param>
 <returns>The sequence of elements in the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds an array from the given list.</summary>
 <param name="list">The input list.</param>
 <returns>The array containing the elements of the list.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the sum of the results generated by applying the function to each element of the list.</summary>
 <param name="projection">The function to transform the list elements into the type to be summed.</param>
 <param name="list">The input list.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the sum of the elements in the list.</summary>
 <param name="list">The input list.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Sorts the given list using Operators.compare.</summary>

 <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
 <param name="list">The input list.</param>
 <returns>The sorted list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Sorts the given list using keys given by the given projection. Keys are compared using Operators.compare.</summary>

 <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
 <param name="projection">The function to transform the list elements into the type to be compared.</param>
 <param name="list">The input list.</param>
 <returns>The sorted list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Sorts the given list using the given comparison function.</summary>

 <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
 <param name="comparer">The function to compare the list elements.</param>
 <param name="list">The input list.</param>
 <returns>The sorted list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)">
 <summary>Like <c>foldBack</c>, but returns both the intermediary and final results</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="list">The input list.</param>
 <param name="state">The initial state.</param>
 <returns>The list of states.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. Take the second argument, and apply the function to it
 and the first element of the list. Then feed this result into the function along
 with the second element and so on. Returns the list of intermediate results and the final result.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="list">The input list.</param>
 <returns>The list of states.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a new list with the elements in reverse order.</summary>
 <param name="list">The input list.</param>
 <returns>The reversed list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)">
 <summary>Creates a list by calling the given generator on each index.</summary>
 <param name="count">The number of elements to replicate.</param>
 <param name="initial">The value to replicate</param>
 <returns>The generated list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f i0 (...(f iN-1 iN))</c>.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="reduction">The function to reduce two list elements to a single element.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The final reduced value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Apply a function to each element of the collection, threading an accumulator argument
 through the computation. Apply the function to the first two elements of the list.
 Then feed this result into the function along with the third element and so on. 
 Return the final result. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f (... (f i0 i1) i2 ...) iN</c>.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="reduction">The function to reduce two list elements to a single element.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The final reduced value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a list with all elements permuted according to the
 specified permutation.</summary>
 <param name="indexMap">The function to map input indices to output indices.</param>
 <param name="list">The input list.</param>
 <returns>The permutated list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to successive elements, returning the first
 result where function returns <c>Some(x)</c> for some x. If no such
 element exists then raise <c>System.Collections.Generic.KeyNotFoundException</c></summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="list">The input list.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the list is empty.</exception>
 <returns>The first resulting value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Splits the collection into two collections, containing the 
 elements for which the given predicate returns <c>true</c> and <c>false</c>
 respectively.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>A list containing the elements for which the predicate evaluated to false and a list
 containing the elements for which the predicate evaluated to true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new list from the given enumerable object.</summary>
 <param name="source">The input sequence.</param>
 <returns>The list of elements from the sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])">
 <summary>Builds a list from the given array.</summary>
 <param name="array">The input array.</param>
 <returns>The list of elements from the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)">
 <summary>Indexes into the list. The first element has index 0.</summary>
 <param name="list">The input list.</param>
 <param name="index">The index to retrieve.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the lowest of all elements of the list, compared via Operators.min on the function result</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="projection">The function to transform list elements into the type to be compared.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the lowest of all elements of the list, compared via Operators.min.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the greatest of all elements of the list, compared via Operators.max on the function result.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="projection">The function to transform the list elements into the type to be compared.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Return the greatest of all elements of the list, compared via Operators.max.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Like mapi, but mapping corresponding elements from two lists of equal length.</summary>
 <param name="mapping">The function to transform pairs of elements from the two lists and their index.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The integer index passed to the
 function indicates the index (from 0) of element being transformed.</summary>
 <param name="mapping">The function to transform elements and their indices.</param>
 <param name="list">The input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the three collections simultaneously.</summary>
 <param name="mapping">The function to transform triples of elements from the input lists.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <param name="list3">The third input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise.</summary>
 <param name="mapping">The function to transform pairs of elements from the input lists.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection.</summary>
 <param name="mapping">The function to transform elements from the input list.</param>
 <param name="list">The input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the length of the list.</summary>
 <param name="list">The input list.</param>
 <returns>The length of the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Applies the given function to two collections simultaneously. The
 collections must have identical size. The integer passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to a pair of elements from the input lists along with their index.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to each element of the collection. The integer passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to the elements of the list along with their index.</param>
 <param name="list">The input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Applies the given function to two collections simultaneously. The
 collections must have identical size.</summary>
 <param name="action">The function to apply to pairs of elements from the input lists.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to each element of the collection.</summary>
 <param name="action">The function to apply to elements from the input list.</param>
 <param name="list">The input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns true if the list contains no elements, false otherwise.</summary>
 <param name="list">The input list.</param>
 <returns>True if the list is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Creates a list by calling the given generator on each index.</summary>
 <param name="length">The length of the list to generate.</param>
 <param name="initializer">The function to generate an element from an index.</param>
 <returns>The list of generated elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the first element of the list.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The first element of the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Tests if all corresponding elements of the collection satisfy the given predicate pairwise.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns false then the overall result is 
 false and no further elements are tested. Otherwise, if one collection is longer 
 than the other then the <c>System.ArgumentException</c> exception is raised. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <exception cref="System.ArgumentException">Thrown when the input lists differ in length.</exception>
 <returns>True if all of the pairs of elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Tests if all elements of the collection satisfy the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input list. If any application 
 returns false then the overall result is false and no further elements are tested. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>True if all of the elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)">
 <summary>Applies a function to corresponding elements of two collections, threading an accumulator argument
 through the computation. The collections must have identical sizes.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> and <c>j0...jN</c>
 then computes <c>f i0 j0 (...(f iN jN s))</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <param name="state">The initial state.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then 
 computes <c>f i0 (...(f iN s))</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="list">The input list.</param>
 <param name="state">The initial state.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc`2{``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Applies a function to corresponding elements of two collections, threading an accumulator argument
 through the computation. The collections must have identical sizes.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> and <c>j0...jN</c>
 then computes <c>f (... (f s i0 j0)...) iN jN</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. Take the second argument, and apply the function to it
 and the first element of the list. Then feed this result into the function along
 with the second element and so on. Return the final result.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> then 
 computes <c>f (... (f s i0) i1 ...) iN</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="list">The input list.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns "true"</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>A list containing only the elements that satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the index of the first element in the list
 that satisfies the given predicate.
 Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown if the predicate evaluates to false for all the
 elements of the list.</exception>
 <returns>The index of the first element that satisfies the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the first element for which the given function returns <c>true</c>.
 Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if the predicate evaluates to false for
 all the elements of the list.</exception>
 <returns>The first element that satisfies the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Tests if any pair of corresponding elements of the lists satisfies the given predicate.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns true then the overall result is 
 true and no further elements are tested. Otherwise, if one collections is longer 
 than the other then the <c>System.ArgumentException</c> exception is raised. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <exception cref="System.ArgumentException">Thrown when the input lists differ in length.</exception>
 <returns>True if any pair of elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Tests if any element of the list satisfies the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input list. If any application 
 returns true then the overall result is true and no further elements are tested. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>True if any element satisfies the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Empty``1">
 <summary>Returns an empty list of the given type.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})">
 <summary>Returns a new list that contains the elements of each the lists in order.</summary>
 <param name="lists">The input sequence of lists.</param>
 <returns>The resulting concatenated list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>For each element of the list, applies the given function. Concatenates all the results and return the combined list.</summary>
 <param name="mapping">The function to transform each input element into a sublist to be concatenated.</param>
 <param name="list">The input list.</param>
 <returns>The concatenation of the transformed sublists.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to each element of the list. Returns
 the list comprised of the results <c>x</c> for each element where
 the function returns Some(x)</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="list">The input list.</param>
 <returns>The list comprising the values selected from the chooser function.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the average of the elements generated by applying the function to each element of the list.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="projection">The function to transform the list elements into the type to be averaged.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The resulting average.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the average of the elements in the list.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The resulting average.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a new list that contains the elements of the first list
 followed by elements of the second.</summary>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The resulting list.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.ListModule">
 <summary>Basic operations on lists.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns the key of the first mapping in the collection that satisfies the given predicate. 
 Returns 'None' if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>The first key for which the predicate returns true or None if the predicate evaluates to false for each key/value pair.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Evaluates the function on each mapping in the collection. Returns the key for the first mapping
 where the function returns 'true'. Raise <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if the key does not exist in the map.</exception>
 <returns>The first key for which the predicate evaluates true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Lookup an element in the map, returning a <c>Some</c> value if the element is in the domain 
 of the map and <c>None</c> if not.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <returns>The found <c>Some</c> value or <c>None</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Removes an element from the domain of the map. No exception is raised if the element is not present.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Builds two new maps, one containing the bindings for which the given predicate returns 'true',
 and the other the remaining bindings.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>A pair of maps in which the first contains the elements for which the predicate returned true
 and the second containing the elements for which the predicated returned false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Tests if an element is in the domain of the map.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <returns>True if the map contains the key.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The key passed to the
 function indicates the key of element being transformed.</summary>
 <param name="mapping">The function to transform the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The resulting map of keys and transformed values.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns true if the given predicate returns true for all of the
 bindings in the map.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>True if the predicate evaluates to true for all of the bindings in the map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Builds a new map containing only the bindings for which the given predicate returns 'true'.</summary>
 <param name="predicate">The function to test the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The filtered map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns true if the given predicate returns true for one of the
 bindings in the map.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>True if the predicate returns true for one of the key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Applies the given function to each binding in the dictionary</summary>
 <param name="action">The function to apply to each key/value pair.</param>
 <param name="table">The input map.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc`2{``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Folds over the bindings in the map </summary>
 <param name="folder">The function to update the state given the input key/value pairs.</param>
 <param name="state">The initial state.</param>
 <param name="table">The input map.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)">
 <summary>Folds over the bindings in the map.</summary>
 <param name="folder">The function to update the state given the input key/value pairs.</param>
 <param name="table">The input map.</param>
 <param name="state">The initial state.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Searches the map looking for the first element where the given function returns a <c>Some</c> value</summary>
 <param name="chooser">The function to generate options from the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The first result.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Searches the map looking for the first element where the given function returns a <c>Some</c> value.</summary>
 <param name="chooser">The function to generate options from the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The first result.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Lookup an element in the map, raising <c>KeyNotFoundException</c> if no binding
 exists in the map.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the key does not exist in the map.</exception>
 <returns>The value mapped to the given key.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Empty``2">
 <summary>The empty map.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Is the map empty?</summary>
 <param name="table">The input map.</param>
 <returns>True if the map is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns an array of all key-value pairs in the mapping.
 The array will be ordered by the keys of the map.</summary>
 <param name="table">The input map.</param>
 <returns>The array of key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns a list of all key-value pairs in the mapping.
 The list will be ordered by the keys of the map.</summary>
 <param name="table">The input map.</param>
 <returns>The list of key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Views the collection as an enumerable sequence of pairs.
 The sequence will be ordered by the keys of the map.</summary>
 <param name="table">The input map.</param>
 <returns>The sequence of key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple`2{``0,``1}})">
 <summary>Returns a new map made from the given bindings.</summary>
 <param name="elements">The input sequence of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple`2{``0,``1}[])">
 <summary>Returns a new map made from the given bindings.</summary>
 <param name="elements">The input array of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{``0,``1}})">
 <summary>Returns a new map made from the given bindings.</summary>
 <param name="elements">The input list of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns a new map with the binding added to the given map.</summary>
 <param name="key">The input key.</param>
 <param name="value">The input value.</param>
 <param name="table">The input map.</param>
 <returns>The resulting map.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.MapModule">
 <summary>Functional programming operators related to the <c>Map&lt;_,_&gt;</c> type.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
 <summary>Combines the three sequences into a list of triples. The sequences need not have equal lengths:
 when one sequence is exhausted any remaining elements in the other
 sequences are ignored.</summary>

 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>
 <param name="source3">The third input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when any of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Combines the two sequences into a list of pairs. The two sequences need not have equal lengths:
 when one sequence is exhausted any remaining elements in the other
 sequence are ignored.</summary>

 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that yields sliding windows of containing elements drawn from the input
 sequence. Each window is returned as a fresh array.</summary>

 <param name="windowSize">The number of elements in each window.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple`2{``1,``0}}},``0)">
 <summary>Returns a sequence that contains the elements generated by the given computation.
 The given initial <c>state</c> argument is passed to the element generator.
 For each IEnumerator elements in the stream are generated on-demand by applying the element
 generator, until a None value is returned by the element generator. Each call to the element
 generator returns a new residual <c>state</c>.</summary>

 <remarks>The stream will be recomputed each time an IEnumerator is requested and iterated for the Seq.

 The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="generator">A function that takes in the current state and returns an option tuple of the next
 element of the sequence and the next state value.</param>
 <param name="state">The initial state value.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that when enumerated returns at most N elements.</summary>

 <param name="count">The maximum number of items to enumerate.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to successive elements, returning the first
 result where the function returns "Some(x)".</summary>

 <param name="chooser">A function that transforms items from the input sequence into options.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the index of the first element in the sequence 
 that satisfies the given predicate. Return <c>None</c> if no such element exists.</summary>

 <param name="predicate">A function that evaluates to a Boolean when given an item in the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first element for which the given function returns <c>true</c>.
 Return <c>None</c> if no such element exists.</summary>

 <param name="predicate">A function that evaluates to a Boolean when given an item in the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a list from the given collection.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds an array from the given collection.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that, when iterated, yields elements of the underlying sequence while the 
 given predicate returns <c>true</c>, and then returns no further elements.</summary>

 <param name="predicate">A function that evaluates to false when no more items should be returned.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first N elements of the sequence.</summary>
 <remarks>Throws <c>InvalidOperationException</c>
 if the count exceeds the number of elements in the sequence. <c>Seq.truncate</c>
 returns as many items as the sequence contains instead of throwing an exception.</remarks>

 <param name="count">The number of items to take.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
 <exception cref="System.InvalidOperationException">Thrown when count exceeds the number of elements
 in the sequence.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the sum of the results generated by applying the function to each element of the sequence.</summary>
 <remarks>The generated elements are summed using the <c>+</c> operator and <c>Zero</c> property associated with the generated type.</remarks>

 <param name="projection">A function to transform items from the input sequence into the type that will be summed.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the sum of the elements in the sequence.</summary>

 <remarks>The elements are summed using the <c>+</c> operator and <c>Zero</c> property associated with the generated type.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a key-generating function to each element of a sequence and yield a sequence ordered
 by keys.  The keys are compared using generic comparison as implemented by <c>Operators.compare</c>.</summary> 
 
 <remarks>This function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.

 This is a stable sort, that is the original order of equal elements is preserved.</remarks>

 <param name="projection">A function to transform items of the input sequence into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Yields a sequence ordered by keys.</summary>
 
 <remarks>This function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.

 This is a stable sort, that is the original order of equal elements is preserved.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that, when iterated, skips elements of the underlying sequence while the 
 given predicate returns <c>true</c>, and then yields the remaining elements of the sequence.</summary>

 <param name="predicate">A function that evaluates an element of the sequence to a boolean value.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that skips N elements of the underlying sequence and then yields the
 remaining elements of the sequence.</summary>

 <param name="count">The number of items to skip.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.InvalidOperationException">Thrown when count exceeds the number of elements
 in the sequence.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)">
 <summary>Returns a sequence that yields one item only.</summary>

 <param name="value">The input item.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
 <summary>Like fold, but computes on-demand and returns the sequence of intermediary and final results.</summary>

 <param name="folder">A function that updates the state with each element from the sequence.</param>
 <param name="state">The initial state.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a function to each element of the sequence, threading an accumulator argument
 through the computation. Begin by applying the function to the first two elements.
 Then feed this result into the function along with the third element and so on.  
 Return the final result.</summary>

 <param name="reduction">A function that takes in the current accumulated result and the next
 element of the sequence to produce the next accumulated result.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new sequence object that delegates to the given sequence object. This ensures 
 the original sequence cannot be rediscovered and mutated by a type cast. For example, 
 if given an array the returned sequence will return the elements of the array, but
 you cannot cast the returned sequence object to an array.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to successive elements, returning the first
 <c>x</c> where the function returns "Some(x)".</summary>

 <param name="chooser">A function to transform each item of the input sequence into an option of the output type.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when every item of the sequence
 evaluates to <c>None</c> when the given function is applied.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence of each element in the input sequence and its predecessor, with the
 exception of the first element which is only returned as the predecessor of the second element.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Views the given list as a sequence.</summary>

 <param name="source">The input list.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])">
 <summary>Views the given array as a sequence.</summary>

 <param name="source">The input array.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Computes the nth element in the collection.</summary>

 <param name="index">The index of element to retrieve.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the lowest of all elements of the sequence, compared via Operators.min on the function result.</summary>

 <param name="projection">A function to transform items from the input sequence into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the lowest of all elements of the sequence, compared via <c>Operators.min</c>.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the greatest of all elements of the sequence, compared via Operators.max on the function result.</summary>

 <param name="projection">A function to transform items from the input sequence into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the greatest of all elements of the sequence, compared via Operators.max</summary>

 <param name="source">The input sequence.</param>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The integer index passed to the
 function indicates the index (from 0) of element being transformed.</summary>

 <param name="mapping">A function to transform items from the input sequence that also supplies the current index.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding pairs of elements from the two sequences. If one input sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</summary>

 <param name="mapping">A function to transform pairs of items from the input sequences.</param>
 <param name="source">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection.  The given function will be applied
 as elements are demanded using the <c>MoveNext</c> method on enumerators retrieved from the
 object.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="mapping">A function to transform items from the input sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the length of the sequence</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Applies the given function to two collections simultaneously. If one sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</summary>

 <param name="action">A function to apply to each pair of elements from the input sequences.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the collection. The integer passed to the
 function indicates the index of element.</summary>

 <param name="action">A function to apply to each element of the sequence that can also access the current index.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the collection.</summary>

 <param name="action">A function to apply to each element of the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Generates a new sequence which, when iterated, will return successive
 elements by calling the given function.  The results of calling the function
 will not be saved, that is the function will be reapplied as necessary to
 regenerate the elements.  The function is passed the index of the item being
 generated.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.
 Iteration can continue up to <c>Int32.MaxValue</c>.</remarks>

 <param name="initializer">A function that generates an item in the sequence from a given index.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Generates a new sequence which, when iterated, will return successive
 elements by calling the given function, up to the given count.  The results of calling the function
 will not be saved, that is the function will be reapplied as necessary to
 regenerate the elements.  The function is passed the index of the item being
 generated.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="count">The maximum number of items to generate for the sequence.</param>
 <param name="initializer">A function that generates an item in the sequence from a given index.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentException">Thrown when count is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns true if the sequence contains no elements, false otherwise.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first element of the sequence.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input does not have any elements.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a key-generating function to each element of a sequence and yields a sequence of 
 unique keys. Each unique key has also contains a sequence of all elements that match 
 to this key.</summary>
 
 <remarks>This function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.</remarks>

 <param name="projection">A function that transforms an element of the sequence into a comparable key.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Tests the all pairs of elements drawn from the two sequences satisfy the
 given predicate. If one sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</summary>

 <param name="predicate">A function to test pairs of elements from the input sequences.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Tests if all elements of the sequence satisfy the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input sequence. If any application 
 returns false then the overall result is false and no further elements are tested. 
 Otherwise, true is returned.</remarks>

 <param name="predicate">A function to test an element of the input sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> 
 then computes <c>f (... (f s i0)...) iN</c></summary>

 <param name="folder">A function that updates the state with each element from the sequence.</param>
 <param name="state">The initial state.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the index of the first element for which the given function returns <c>true</c>.</summary>

 <param name="predicate">A function to test whether the index of a particular element should be returned.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if no element returns true when
 evaluated by the predicate</exception>
 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first element for which the given function returns <c>true</c>.</summary>

 <param name="predicate">A function to test whether an item in the sequence should be returned.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if no element returns true when
 evaluated by the predicate</exception>
 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns "true".</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.

 Remember sequence is lazy, effects are delayed until it is enumerated.</remarks>

 <param name="predicate">A function to test whether each item in the input sequence should be included in the output.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>    
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Tests if any pair of corresponding elements of the input sequences satisfies the given predicate.</summary>

 <remarks>The predicate is applied to matching elements in the two sequences up to the lesser of the 
 two lengths of the collections. If any application returns true then the overall result is 
 true and no further elements are tested. Otherwise, false is returned. If one sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</remarks>

 <param name="predicate">A function to test each pair of items from the input sequences.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the two input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Tests if any element of the sequence satisfies the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input sequence. If any application 
 returns true then the overall result is true and no further elements are tested. 
 Otherwise, false is returned.</remarks>

 <param name="predicate">A function to test each item of the input sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Empty``1">
 <summary>Creates an empty sequence.</summary>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that contains no duplicate entries according to the 
 generic hash and equality comparisons on the keys returned by the given key-generating function.
 If an element occurs multiple times in the sequence then the later occurrences are discarded.</summary>

 <param name="projection">A function transforming the sequence items into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that contains no duplicate entries according to generic hash and
 equality comparisons on the entries.
 If an element occurs multiple times in the sequence then the later occurrences are discarded.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})">
 <summary>Returns a sequence that is built from the given delayed specification of a
 sequence.</summary>

 <remarks>The input function is evaluated each time an IEnumerator for the sequence 
 is requested.</remarks>

 <param name="generator">The generating function for the sequence.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a key-generating function to each element of a sequence and return a sequence yielding unique
 keys and their number of occurrences in the original sequence.</summary>
 
 <remarks>Note that this function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.</remarks>

 <param name="projection">A function transforming each item of input sequence into a key to be
 compared against the others.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})">
 <summary>Combines the given enumeration-of-enumerations as a single concatenated
 enumeration.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="sources">The input enumeration-of-enumerations.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Compares two sequences using the given comparison function, element by element.
 Returns the first non-zero result from the comparison function.  If the end of a sequence
 is reached it returns a -1 if the first sequence is shorter and a 1 if the second sequence
 is shorter.</summary>

 <param name="comparer">A function that takes an element from each sequence and returns an int.
 If it evaluates to a non-zero value iteration is stopped and that value is returned.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences
 is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the sequence and concatenates all the
 results.</summary>

 <remarks>Remember sequence is lazy, effects are delayed until it is enumerated.</remarks>

 <param name="mapping">A function to transform elements of the input sequence into the sequences
 that will then be concatenated.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the list. Return
 the list comprised of the results "x" for each element where
 the function returns Some(x).</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not
 be accessed concurrently.</remarks>

 <param name="chooser">A function to transform items of type T into options of type U.</param>
 <param name="source">The input sequence of type T.</param>

 <returns>The result sequence.</returns>
 
 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)">
 <summary>Wraps a loosely-typed System.Collections sequence as a typed sequence.</summary>

 <remarks>The use of this function usually requires a type annotation.
 An incorrect type annotation may result in runtime type
 errors.
 Individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>
 
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that corresponds to a cached version of the input sequence.
 This result sequence will have the same elements as the input sequence. The result 
 can be enumerated multiple times. The input sequence will be enumerated at most 
 once and only as far as is necessary.  Caching a sequence is typically useful when repeatedly
 evaluating items in the original sequence is computationally expensive or if
 iterating the sequence causes side-effects that the user does not want to be
 repeated multiple times.

 Enumeration of the result sequence is thread safe in the sense that multiple independent IEnumerator
 values may be used simultaneously from different threads (accesses to 
 the internal lookaside table are thread safe). Each individual IEnumerator
 is not typically thread safe and should not be accessed concurrently.</summary>

 <remarks>Once enumeration of the input sequence has started,
 it's enumerator will be kept live by this object until the enumeration has completed.
 At that point, the enumerator will be disposed. 

 The enumerator may be disposed and underlying cache storage released by 
 converting the returned sequence object to type IDisposable, and calling the Dispose method
 on this object. The sequence object may then be re-enumerated and a fresh enumerator will
 be used.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the average of the results generated by applying the function to each element 
 of the sequence.</summary>

 <remarks>The elements are averaged using the <c>+</c> operator, <c>DivideByInt</c> method and <c>Zero</c> property 
 associated with the generated type.</remarks>

 <param name="projection">A function applied to transform each element of the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence has zero elements.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the average of the elements in the sequence.</summary>

 <remarks>The elements are averaged using the <c>+</c> operator, <c>DivideByInt</c> method and <c>Zero</c> property 
 associated with the element type.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence has zero elements.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Wraps the two given enumerations as a single concatenated
 enumeration.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed
 concurrently.</remarks>

 <param name="source1">The first sequence.</param>
 <param name="source2">The second sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the two provided sequences is
 null.</exception>
</member>
<member name="T:Microsoft.FSharp.Collections.SeqModule">
 <summary>Basic operations on IEnumerables.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new set with the elements of the second set removed from the first.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The set whose elements will be removed from <c>set1</c>.</param>
 <returns>The set with the elements of <c>set2</c> removed from <c>set1</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new collection from the given enumerable object.</summary>
 <param name="elements">The input sequence.</param>
 <returns>The set containing <c>elements</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns an ordered view of the collection as an enumerable object.</summary>
 <param name="set">The input set.</param>
 <returns>An ordered sequence of the elements of <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Builds an array that contains the elements of the set in order.</summary>
 <param name="set">The input set.</param>
 <returns>An ordered array of the elements of <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])">
 <summary>Builds a set that contains the same elements as the given array.</summary>
 <param name="array">The input array.</param>
 <returns>A set containing the elements of <c>array</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Builds a list that contains the elements of the set in order.</summary>
 <param name="set">The input set.</param>
 <returns>An ordered list of the elements of <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds a set that contains the same elements as the given list.</summary>
 <param name="elements">The input list.</param>
 <returns>A set containing the elements form the input list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns the highest element in the set according to the ordering being used for the set.</summary>
 <param name="set">The input set.</param>
 <returns>The max value from the set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns the lowest element in the set according to the ordering being used for the set.</summary>
 <param name="set">The input set.</param>
 <returns>The min value from the set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new set with the given element removed. No exception is raised if 
 the set doesn't contain the given element.</summary>
 <param name="value">The element to remove.</param>
 <param name="set">The input set.</param>
 <returns>The input set with <c>value</c> removed.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Splits the set into two sets containing the elements for which the given predicate
 returns true and false respectively.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>A pair of sets with the first containing the elements for which <c>predicate</c> returns
 true and the second containing the elements for which <c>predicate</c> returns false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Applies the given function to each element of the set, in order according
 to the comparison function.</summary>
 <param name="action">The function to apply to each element.</param>
 <param name="set">The input set.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns "true" if the set is empty.</summary>
 <param name="set">The input set.</param>
 <returns>True if <c>set</c> is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})">
 <summary>Computes the union of a sequence of sets.</summary>
 <param name="sets">The sequence of sets to untion.</param>
 <returns>The union of the input sets.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Computes the union of the two sets.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>The union of <c>set1</c> and <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})">
 <summary>Computes the intersection of a sequence of sets. The sequence must be non-empty.</summary>
 <param name="sets">The sequence of sets to intersect.</param>
 <returns>The intersection of the input sets.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Computes the intersection of the two sets.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>The intersection of <c>set1</c> and <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Tests if all elements of the collection satisfy the given predicate.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> and "j0...jN"
 then computes <c>p i0 &amp;&amp; ... &amp;&amp; p iN</c>.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>True if all elements of <c>set</c> satisfy <c>predicate</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)">
 <summary>Applies the given accumulating function to all the elements of the set.</summary>
 <param name="folder">The accumulating function.</param>
 <param name="set">The input set.</param>
 <param name="state">The initial state.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Applies the given accumulating function to all the elements of the set</summary>
 <param name="folder">The accumulating function.</param>
 <param name="state">The initial state.</param>
 <param name="set">The input set.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new collection containing the results of applying the
 given function to each element of the input set.</summary>
 <param name="mapping">The function to transform elements of the input set.</param>
 <param name="set">The input set.</param>
 <returns>A set containing the transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns <c>true</c>.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>The set containing only the elements for which <c>predicate</c> returns true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Tests if any element of the collection satisfies the given predicate.
 If the input function is <c>predicate</c> and the elements are <c>i0...iN</c> 
 then computes <c>p i0 or ... or p iN</c>.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>True if any element of <c>set</c> satisfies <c>predicate</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns the number of elements in the set. Same as <c>size</c>.</summary>
 <param name="set">The input set.</param>
 <returns>The number of elements in the set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first, and at least 
 one element of the first is not in the second.</summary>
 <param name="set1">The potential superset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a proper superset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first.</summary>
 <param name="set1">The potential superset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a superset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second, and at least 
 one element of the second is not in the first.</summary>
 <param name="set1">The potential subset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a proper subset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second</summary>
 <param name="set1">The potential subset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a subset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if the given element is in the given set.</summary>
 <param name="element">The element to test.</param>
 <param name="set">The input set.</param>
 <returns>True if <c>element</c> is in <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new set with an element added to the set. No exception is raised if
 the set already contains the given element.</summary>
 <param name="value">The value to add.</param>
 <param name="set">The input set.</param>
 <returns>A new set containing <c>value</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)">
 <summary>The set containing the given element.</summary>
 <param name="value">The value for the set to contain.</param>
 <returns>The set containing <c>value</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Empty``1">
 <summary>The empty set for the type 'T.</summary>
</member>
<member name="T:Microsoft.FSharp.Collections.SetModule">
 <summary>Functional programming operators related to the <c>Set&lt;_&gt;</c> type.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken">
 <summary>Gets the default cancellation token for executing asynchronous computations.</summary>
 <returns>The default CancellationToken.</returns>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpAsync.CancellationToken">
 <summary>Creates an asynchronous computation that returns the CancellationToken governing the execution 
 of the computation.</summary>
 <remarks>In <c>async { let! token = Async.CancellationToken ...}</c> token can be used to initiate other 
 asynchronous operations that will cancel cooperatively with this workflow.</remarks>
 <returns>An asynchronous computation capable of retrieving the CancellationToken from a computation
 expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that executes <c>computation</c>.
 If this computation is cancelled before it completes then the computation generated by 
 running <c>compensation</c> is executed.</summary>
 <param name="computation">The input asynchronous computation.</param>
 <param name="compensation">The function to be run if the computation is cancelled.</param>
 <returns>An asynchronous computation that runs the compensation if the input computation
 is cancelled.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool">
 <summary>Creates an asynchronous computation that queues a work item that runs
 its continuation.</summary>
 <returns>A computation that generates a new work item in the thread pool.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread">
 <summary>Creates an asynchronous computation that creates a new thread and runs
 its continuation in that thread.</summary>
 <returns>A computation that will execute on a new thread.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(System.Threading.SynchronizationContext)">
 <summary>Creates an asynchronous computation that runs
 its continuation using syncContext.Post. If syncContext is null 
 then the asynchronous computation is equivalent to SwitchToThreadPool().</summary>
 <param name="syncContext">The synchronization context to accept the posted computation.</param>
 <returns>An asynchronous computation that uses the syncContext context to execute.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Runs an asynchronous computation, starting immediately on the current operating system
 thread. Call one of the three continuations when the operation completes.</summary>
 <remarks>If no cancellation token is provided then the default cancellation token
 is used.</remarks>
 <param name="computation">The asynchronous computation to execute.</param>
 <param name="continuation">The function called on success.</param>
 <param name="exceptionContinuation">The function called on exception.</param>
 <param name="cancellationContinuation">The function called on cancellation.</param>
 <param name="cancellationToken">The <c>CancellationToken</c> to associate with the computation.
 The default is used if this parameter is not provided.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Runs an asynchronous computation, starting immediately on the current operating system
 thread.</summary>
 <remarks>If no cancellation token is provided then the default cancellation token is used.</remarks>
 <param name="computation">The asynchronous computation to execute.</param>
 <param name="cancellationToken">The <c>CancellationToken</c> to associate with the computation.
 The default is used if this parameter is not provided.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Starts a child computation within an asynchronous workflow. 
 This allows multiple asynchronous computations to be executed simultaneously.</summary>
 
 <remarks>This method should normally be used as the immediate 
 right-hand-side of a <c>let!</c> binding in an F# asynchronous workflow, that is,
 
        async { ...
                let! completor1 = childComputation1 |> Async.StartChild  
                let! completor2 = childComputation2 |> Async.StartChild  
                ... 
                let! result1 = completor1 
                let! result2 = completor2 
                ... }
 
 When used in this way, each use of <c>StartChild</c> starts an instance of <c>childComputation</c> 
 and returns a completor object representing a computation to wait for the completion of the operation.
 When executed, the completor awaits the completion of <c>childComputation</c>.</remarks>
 <param name="computation">The child computation.</param>
 <param name="millisecondsTimeout">The timeout value in milliseconds.  If one is not provided
 then the default value of -1 corresponding to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>A new computation that waits for the input computation to finish.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Starts the asynchronous computation in the thread pool. Do not await its result.</summary>

 <remarks>If no cancellation token is provided then the default cancellation token is used.</remarks>
 <param name="computation">The computation to run asynchronously.</param>
 <param name="cancellationToken">The cancellation token to be associated with the computation.
 If one is not supplied, the default cancellation token is used.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Sleep(System.Int32)">
 <summary>Creates an asynchronous computation that will sleep for the given time. This is scheduled
 using a System.Threading.Timer object. The operation will not block operating system threads
 for the duration of the wait.</summary>
 <param name="millisecondsDueTime">The number of milliseconds to sleep.</param>
 <returns>An asynchronous computation that will sleep for the given time.</returns>
 <exception cref="System.ArgumentOutOfRangeException">Thrown when the due time is negative
 and not infinite.</exception>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Runs the asynchronous computation and await its result.</summary>

 <remarks>If an exception occurs in the asynchronous computation then an exception is re-raised by this
 function.
        
 If no cancellation token is provided then the default cancellation token is used.

 The timeout parameter is given in milliseconds.  A value of -1 is equivalent to
 System.Threading.Timeout.Infinite.</remarks>
 <param name="computation">The computation to run.</param>
 <param name="timeout">The amount of time in milliseconds to wait for the result of the
 computation before raising a <c>System.TimeoutException</c>.  If no value is provided
 for timeout then a default of -1 is used to correspond to System.Threading.Timeout.Infinite.</param>
 <param name="cancellationToken">The cancellation token to be associated with the computation.
 If one is not supplied, the default cancellation token is used.</param>
 <returns>The result of the computation.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>Creates an asynchronous computation that executes all the given asynchronous computations, 
 initially queueing each as work items and using a fork/join pattern.</summary>

 <remarks>If all child computations succeed, an array of results is passed to the success continuation.
 
 If any child computation raises an exception, then the overall computation will trigger an 
 exception, and cancel the others. 

 The overall computation will respond to cancellation while executing the child computations.
 If cancelled, the computation will cancel any remaining child computations but will still wait
 for the other child computations to complete.</remarks>
 <param name="computationList">A sequence of distinct computations to be parallelized.</param>
 <returns>A computation that returns an array of values from the sequence of input computations.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.OnCancel(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Generates a scoped, cooperative cancellation handler for use within an asynchronous workflow.</summary>

 <remarks>For example,
     <c>async { use! holder = Async.OnCancel interruption ... }</c> 
 generates an asynchronous computation where, if a cancellation happens any time during 
 the execution of the asynchronous computation in the scope of <c>holder</c>, then action 
 <c>interruption</c> is executed on the thread that is performing the cancellation. This can 
 be used to arrange for a computation to be asynchronously notified that a cancellation 
 has occurred, e.g. by setting a flag, or deregistering a pending I/O action.</remarks>
 <param name="interruption">The function that is executed on the thread performing the
 cancellation.</param>
 <returns>An asynchronous computation that triggers the interruption if it is cancelled
 before being disposed.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Creates an asynchronous computation that runs the given computation and ignores 
 its result.</summary>
 <param name="computation">The input computation.</param>
 <returns>A computation that is equivalent to the input computation, but disregards the result.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that captures the current
 success, exception and cancellation continuations. The callback must 
 eventually call exactly one of the given continuations.</summary>
 <param name="callback">The function that accepts the current success, exception, and cancellation
 continuations.</param>
 <returns>An asynchronous computation that provides the callback with the current continuations.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`5{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. This overlaod should be used if the operation is 
 qualified by three arguments. For example, 
     <c>Async.FromBeginEnd(arg1,arg2,arg3,ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="arg1">The first argument for the operation.</param>
 <param name="arg2">The second argument for the operation.</param>
 <param name="arg3">The third argument for the operation.</param>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`4{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. This overlaod should be used if the operation is 
 qualified by two arguments. For example, 
     <c>Async.FromBeginEnd(arg1,arg2,ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="arg1">The first argument for the operation.</param>
 <param name="arg2">The second argument for the operation.</param>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. This overlaod should be used if the operation is 
 qualified by one argument. For example, 
     <c>Async.FromBeginEnd(place,ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="arg">The argument for the operation.</param>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`2{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. For example, 
     <c>Async.FromBeginEnd(ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Creates an asynchronous computation that executes <c>computation</c>.
 If this computation completes successfully then return <c>Choice1Of2</c> with the returned
 value. If this computation raises an exception before it completes then return <c>Choice2Of2</c>
 with the raised exception.</summary>
 <param name="computation">The input computation that returns the type T.</param>
 <returns>A computation that returns a choice of type T or exception.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken">
 <summary>Raises the cancellation condition for the most recent set of asynchronous computations started 
 without any specific CancellationToken. Replaces the global CancellationTokenSource with a new 
 global token source for any asynchronous computations created after this point without any 
 specific CancellationToken.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Creates an asynchronous computation that will wait on the given WaitHandle.</summary>

 <remarks>The computation returns true if the handle indicated a result within the given timeout.</remarks>
 <param name="waitHandle">The <c>WaitHandle</c> that can be signalled.</param>
 <param name="millisecondsTimeout">The timeout value in milliseconds.  If one is not provided
 then the default value of -1 corresponding to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that waits on the given <c>WaitHandle</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Creates an asynchronous computation that will wait on the IAsyncResult.</summary>

 <remarks>The computation returns true if the handle indicated a result within the given timeout.</remarks>
 <param name="iar">The IAsyncResult to wait on.</param>
 <param name="millisecondsTimeout">The timeout value in milliseconds.  If one is not provided
 then the default value of -1 corresponding to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that waits on the given <c>IAsyncResult</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation that waits for a single invocation of a CLI 
 event by adding a handler to the event. Once the computation completes or is 
 cancelled, the handler is removed from the event.</summary>

 <remarks>The computation will respond to cancellation while waiting for the event. If a 
 cancellation occurs, and <c>cancelAction</c> is specified, then it is executed, and 
 the computation continues to wait for the event.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to cancel immediately.</remarks>
 <param name="event">The event to handle once.</param>
 <param name="cancelAction">An optional function to execute instead of cancelling when a
 cancellation is issued.</param>
 <returns>An asynchronous computation that waits for the event to be invoked.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>Creates three functions that can be used to implement the .NET Asynchronous 
 Programming Model (APM) for a given asynchronous computation.</summary>
 
 <remarks>The functions should normally be published as members with prefix <c>Begin</c>,
 <c>End</c> and <c>Cancel</c>, and can be used within a type definition as follows:
 <c>
   let beginAction,endAction,cancelAction = Async.AsBeginEnd (fun arg -&gt; computation)
   member x.BeginSomeOperation(arg,callback,state:obj) = beginAction(arg,callback,state)
   member x.EndSomeOperation(iar) = endAction(iar)
   member x.CancelSomeOperation(iar) = cancelAction(iar)
 </c>

 If the asynchronous computation takes no arguments, then AsBeginEnd is used as follows:
 <c>
   let beginAction,endAction,cancelAction = Async.AsBeginEnd (fun () -&gt; computation)
   member x.BeginSomeOperation(callback,state:obj) = beginAction((),callback,state)
   member x.EndSomeOperation(iar) = endAction(iar)
   member x.CancelSomeOperation(iar) = cancelAction(iar)
 </c>


 If the asynchronous computation takes two arguments, then AsBeginEnd is used as follows:
 <c>
   let beginAction,endAction,cancelAction = Async.AsBeginEnd (fun arg1 arg2 -&gt; computation)
   member x.BeginSomeOperation(arg1,arg2,callback,state:obj) = beginAction((),callback,state)
   member x.EndSomeOperation(iar) = endAction(iar)
   member x.CancelSomeOperation(iar) = cancelAction(iar)
 </c>

 In each case, the resulting API will be familiar to programmers in other CLI languages and 
 is a useful way to publish asynchronous computations in CLI components.</remarks>
 <param name="computation">A function generating the asynchronous computation to split into the traditional
 .NET Asynchronous Programming Model.</param>
 <returns>A tuple of the begin, end, and cancel members.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsync">
 <summary>This static class holds members for creating and manipulating asynchronous computations.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Zero">
 <summary>Creates an asynchronous computation that just returns <c>()</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of empty <c>else</c> branches in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <returns>An asynchronous computation that returns <c>()</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.While(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Boolean},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that runs <c>computation</c> repeatedly 
 until <c>guard()</c> becomes false.</summary>

 <remarks>A cancellation check is performed whenever the computation is executed.

 The existence of this method permits the use of <c>while</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="guard">The function to determine when to stop executing <c>computation</c>.</param>
 <param name="computation">The function to be executed.  Equivalent to the body
 of a <c>while</c> expression.</param>
 <returns>An asynchronous computation that behaves similarly to a while loop when run.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Using``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>Creates an asynchronous computation that runs <c>binder(resource)</c>. 
 The action <c>resource.Dispose()</c> is executed as this computation yields its result
 or if the asynchronous computation exits by an exception or by cancellation.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>use</c> and <c>use!</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="resource">The resource to be used and disposed.</param>
 <param name="binder">The function that takes the resource and returns an asynchronous
 computation.</param>
 <returns>An asynchronous computation that binds and eventually disposes <c>resource</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.TryWith``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{System.Exception,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>Creates an asynchronous computation that runs <c>computation</c> and returns its result.
 If an exception happens then <c>catchHandler(exn)</c> is called and the resulting computation executed instead.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>try/with</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The input computation.</param>
 <param name="catchHandler">The function to run when <c>computation</c> throws an exception.</param>
 <returns>An asynchronous computation that executes <c>computation</c> and calls <c>catchHandler</c> if an
 exception is thrown.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.TryFinally``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that runs <c>computation</c>. The action <c>compensation</c> is executed 
 after <c>computation</c> completes, whether <c>computation</c> exits normally or by an exception. If <c>compensation</c> raises an exception itself
 the original exception is discarded and the new exception becomes the overall result of the computation.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>try/finally</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The input computation.</param>
 <param name="compensation">The action to be run after <c>computation</c> completes or raises an
 exception (including cancellation).</param>
 <returns>An asynchronous computation that executes computation and compensation aftewards or
 when an exception is raised.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.ReturnFrom``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Delegates to the input computation.</summary>

 <remarks>The existence of this method permits the use of <c>return!</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The input computation.</param>
 <returns>The input computation.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Return``1(``0)">
 <summary>Creates an asynchronous computation that returns the result <c>v</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>return</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="value">The value to return from the computation.</param>
 <returns>An asynchronous computation that returns <c>value</c> when executed.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.For``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation that enumerates the sequence <c>seq</c>
 on demand and runs <c>body</c> for each element.</summary>

 <remarks>A cancellation check is performed on each iteration of the loop.

 The existence of this method permits the use of <c>for</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="sequence">The sequence to enumerate.</param>
 <param name="body">A function to take an item from the sequence and create
 an asynchronous computation.  Can be seen as the body of the <c>for</c> expression.</param>
 <returns>An asynchronous computation that will enumerate the sequence and run <c>body</c>
 for each element.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Delay``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>Creates an asynchronous computation that runs <c>generator</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.</remarks>
 <param name="generator">The function to run.</param>
 <returns>An asynchronous computation that runs <c>generator</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Combine``1(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Creates an asynchronous computation that first runs <c>computation1</c>
 and then runs <c>computation2</c>, returning the result of <c>computation2</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of expression sequencing in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation1">The first part of the sequenced computation.</param>
 <param name="computation2">The second part of the sequenced computation.</param>
 <returns>An asynchronous computation that runs both of the computations sequentially.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Bind``2(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>Creates an asynchronous computation that runs <c>computation</c>, and when 
 <c>computation</c> generates a result <c>T</c>, runs <c>binder res</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>let!</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The computation to provide an unbound result.</param>
 <param name="binder">The function to bind the result of <c>computation</c>.</param>
 <returns>An asynchronous computation that performs a monadic bind on the result
 of <c>computation</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.#ctor">
<summary>
 Generate an object used to build asynchronous computations using F# computation expressions. The value
 &apos;async&apos; is a pre-defined instance of this type.

 A cancellation check is performed when the computation is executed.
</summary>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsyncBuilder">
 <summary>The type of the <c>async</c> operator, used to build workflows for asynchronous computations.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1.Reply(`0)">
 <summary>Sends a reply to a PostAndReply message.</summary>
 <param name="value">The value to send.</param>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1">
 <summary>A handle to a capability to reply to a PostAndReply message.</summary>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsync`1">
 <summary>A compositional asynchronous computation, which, when run, will eventually produce a value 
 of type T, or else raises an exception.</summary> 

 <remarks>Asynchronous computations are normally specified using an F# computation expression.

 When run, asynchronous computations have two modes: as a work item (executing synchronous 
 code), or as a wait item (waiting for an event or I/O completion). 

 When run, asynchronous computations can be governed by CancellationToken. This can usually 
 be specified when the async computation is started. The associated CancellationTokenSource 
 may be used to cancel the asynchronous computation. Asynchronous computations built using 
 computation expressions can check the cancellation condition regularly. Synchronous 
 computations within an asynchronous computation do not automatically check this condition.</remarks> 
</member>
<member name="P:Microsoft.FSharp.Control.FSharpDelegateEvent`1.Publish">
 <summary>Publishes the event as a first class event value.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpDelegateEvent`1.Trigger(System.Object[])">
 <summary>Triggers the event using the given parameters.</summary>
 <param name="args">The parameters for the event.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpDelegateEvent`1.#ctor">
 <summary>Creates an event object suitable for implementing an arbitrary type of delegate.</summary>
 <returns>The event object.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpDelegateEvent`1">
 <summary>Event implementations for an arbitrary type of delegate.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpEvent`1.Publish">
 <summary>Publishes an observation  as a first class value.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`1.Trigger(`0)">
 <summary>Triggers an observation using the given parameters.</summary>
 <param name="arg">The event parameters.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`1.#ctor">
 <summary>Creates an observable object.</summary>
 <returns>The created event.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpEvent`1">
 <summary>Event implementations for the IEvent&lt;_&gt; type.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpEvent`2.Publish">
 <summary>Publishes the event as a first class event value.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`2.Trigger(System.Object,`1)">
 <summary>Triggers the event using the given sender object and parameters. The sender object may be <c>null</c>.</summary>
 <param name="sender">The object triggering the event.</param>
 <param name="args">The parameters for the event.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`2.#ctor">
 <summary>Creates an event object suitable for delegate types following the standard .NET Framework convention of a first 'sender' argument.</summary>
 <returns>The created event.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpEvent`2">
 <summary>Event implementations for a delegate types following the standard .NET Framework convention of a first 'sender' argument.</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Control.FSharpHandler`1">
 <summary>A delegate type associated with the F# event type <c>IEvent&lt;_&gt;</c></summary>
 <param name="obj">The object that fired the event.</param>
 <param name="args">The event arguments.</param>
</member>
<member name="M:Microsoft.FSharp.Control.IDelegateEvent`1.RemoveHandler(`0)">
 <summary>Remove a listener delegate from an event listener store.</summary>
 <param name="handler">The delegate to be removed from the event listener store.</param>
</member>
<member name="M:Microsoft.FSharp.Control.IDelegateEvent`1.AddHandler(`0)">
 <summary>Connect a handler delegate object to the event. A handler can
 be later removed using RemoveHandler. The listener will
 be invoked when the event is fired.</summary>
 <param name="handler">A delegate to be invoked when the event is fired.</param>
</member>
<member name="T:Microsoft.FSharp.Control.IDelegateEvent`1">
 <summary>First class event values for arbitrary delegate types.</summary>

 <remarks>F# gives special status to member properties compatible with type IDelegateEvent and 
 tagged with the CLIEventAttribute. In this case the F# compiler generates approriate 
 CLI metadata to make the member appear to other CLI languages as a CLI event.</remarks>
</member>
<member name="T:Microsoft.FSharp.Control.IEvent`1">
 <summary>First-class listening points (i.e. objects that permit you to register a callback
 activated when the event is triggered). </summary>
</member>
<member name="T:Microsoft.FSharp.Control.IEvent`2">
 <summary>First class event values for CLI events conforming to CLI Framework standards.</summary>
</member>
<member name="T:Microsoft.FSharp.Control.Lazy`1">
 <summary>The type of delayed computations.</summary>
 
 <remarks>Use the values in the <c>Lazy</c> module to manipulate 
 values of this type, and the notation <c>lazy expr</c> to create values
 of type <see cref="System.Lazy{T}" />.</remarks>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.DefaultTimeout(System.Int32)">
 <summary>Raises a timeout exception if a message not received in this amount of time. By default
 no timeout is used.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.remove_Error(Microsoft.FSharp.Control.FSharpHandler{System.Exception})">
 <summary>Occurs when the execution of the agent results in an exception.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Error">
 <summary>Occurs when the execution of the agent results in an exception.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.DefaultTimeout">
 <summary>Raises a timeout exception if a message not received in this amount of time. By default
 no timeout is used.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.CurrentQueueLength">
 <summary>Returns the number of unprocessed messages in the message queue of the agent.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.add_Error(Microsoft.FSharp.Control.FSharpHandler{System.Exception})">
 <summary>Occurs when the execution of the agent results in an exception.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryScan``1(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Scans for a message by looking through messages in arrival order until <c>scanner</c> 
 returns a Some value. Other messages remain in the queue.</summary>

 <remarks>This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="scanner">The function to return None if the message is to be skipped
 or Some if the message is to be processed and removed from the queue.</param>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that <c>scanner</c> built off the read message.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryReceive(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Waits for a message. This will consume the first message in arrival order.</summary> 

 <remarks>This method is for use within the body of the agent. 

 Returns None if a timeout is given and the timeout is exceeded.

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which
 corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that returns the received message or
 None if the timeout is exceeded.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryPostAndReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Like PostAndReply, but returns None if no reply within the timeout period.</summary>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>The reply from the agent or None if the timeout expires.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Start">
 <summary>Starts the agent.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Start(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpMailboxProcessor{`0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Creates and starts an agent. The <c>body</c> function is used to generate the asynchronous 
 computation executed by the agent.</summary>
 <param name="body">The function to produce an asynchronous computation that will be executed
 as the read loop for the MailboxProcessor when Start is called.</param>
 <param name="cancellationToken">An optional cancellation token for the <c>body</c>.
 Defaults to <c>Async.DefaultCancellationToken</c>.</param>
 <returns>The created MailboxProcessor.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Scan``1(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Scans for a message by looking through messages in arrival order until <c>scanner</c> 
 returns a Some value. Other messages remain in the queue.</summary>

 <remarks>Returns None if a timeout is given and the timeout is exceeded.

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="scanner">The function to return None if the message is to be skipped
 or Some if the message is to be processed and removed from the queue.</param>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that <c>scanner</c> built off the read message.</returns>
 <exception cref="System.TimeoutException">Thrown when the timeout is exceeded.</exception>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Receive(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Waits for a message. This will consume the first message in arrival order.</summary> 

 <remarks>This method is for use within the body of the agent. 

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that returns the received message.</returns>
 <exception cref="System.TimeoutException">Thrown when the timeout is exceeded.</exception>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndTryAsyncReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Like AsyncPostAndReply, but returns None if no reply within the timeout period.</summary>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that will return the reply or None if the timeout expires.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Posts a message to an agent and await a reply on the channel, synchronously.</summary>

 <remarks>The message is generated by applying <c>buildMessage</c> to a new reply channel 
 to be incorporated into the message. The receiving agent must process this 
 message and invoke the Reply method on this reply channel precisely once.</remarks>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>The reply from the agent.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndAsyncReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Posts a message to an agent and await a reply on the channel, asynchronously.</summary> 

 <remarks>The message is generated by applying <c>buildMessage</c> to a new reply channel 
 to be incorporated into the message. The receiving agent must process this 
 message and invoke the Reply method on this reply channel precisely once.</remarks>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asychronous computation that will wait for the reply from the agent.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Post(`0)">
 <summary>Posts a message to the message queue of the MailboxProcessor, asynchronously.</summary>
 <param name="message">The message to post.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.#ctor(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpMailboxProcessor{`0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Creates an agent. The <c>body</c> function is used to generate the asynchronous 
 computation executed by the agent. This function is not executed until 
 <c>Start</c> is called.</summary>
 <param name="body">The function to produce an asynchronous computation that will be executed
 as the read loop for the MailboxProcessor when Start is called.</param>
 <param name="cancellationToken">An optional cancellation token for the <c>body</c>.
 Defaults to <c>Async.DefaultCancellationToken</c>.</param>
 <returns>The created MailboxProcessor.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpMailboxProcessor`1">
 <summary>A message-processing agent which executes an asynchronous computation.</summary>

 <remarks>The agent encapsulates a message queue that supports multiple-writers and 
 a single reader agent. Writers send messages to the agent by using the Post 
 method and its variations.

 The agent may wait for messages using the Receive or TryReceive methods or
 scan through all available messages using the Scan or TryScan method.</remarks>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Control.CommonExtensions">
 <summary>A module of extension members providing asynchronous operations for some basic CLI types related to concurrency and I/O.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})">
 <summary>Returns a new event that triggers on the second and subsequent triggerings of the input event.
 The Nth triggering of the input event passes the arguments from the N-1th and Nth triggering as
 a pair. The argument passed to the N-1th triggering is held in hidden internal state until the 
 Nth triggering occurs.</summary>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that triggers on pairs of consecutive values passed from the source event.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Add``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})">
 <summary>Runs the given function each time the given event is triggered.</summary>
 <param name="callback">The function to call when the event is triggered.</param>
 <param name="sourceEvent">The input event.</param>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Scan``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})">
 <summary>Returns a new event consisting of the results of applying the given accumulating function
 to successive values triggered on the input event.  An item of internal state
 records the current value of the state parameter.  The internal state is not locked during the
 execution of the accumulation function, so care should be taken that the 
 input IEvent not triggered by multiple threads simultaneously.</summary>
 <param name="collector">The function to update the state with each event value.</param>
 <param name="state">The initial state.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that fires on the updated state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Choose``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})">
 <summary>Returns a new event which fires on a selection of messages from the original event.
 The selection function takes an original message to an optional new message.</summary>
 <param name="chooser">The function to select and transform event values to pass on.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that fires only when the chooser returns Some.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Split``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})">
 <summary>Returns a new event that listens to the original event and triggers the 
 first resulting event if the application of the function to the event arguments
 returned a Choice1Of2, and the second event if it returns a Choice2Of2.</summary>
 <param name="splitter">The function to transform event values into one of two types.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>A tuple of events.  The first fires whenever <c>splitter</c> evaluates to Choice1of1 and
 the second fires whenever <c>splitter</c> evaluates to Choice2of2.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})">
 <summary>Returns a new event that listens to the original event and triggers the 
 first resulting event if the application of the predicate to the event arguments
 returned true, and the second event if it returned false.</summary>
 <param name="predicate">The function to determine which output event to trigger.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>A tuple of events.  The first is triggered when the predicate evaluates to true
 and the second when the predicate evaluates to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})">
 <summary>Returns a new event that listens to the original event and triggers the resulting
 event only when the argument to the event passes the given function.</summary>
 <param name="predicate">The function to determine which triggers from the event to propagate.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that only passes values that pass the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Map``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})">
 <summary>Returns a new event that passes values transformed by the given function.</summary>
 <param name="map">The function to transform event values.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that passes the transformed values.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})">
 <summary>Fires the output event when either of the input events fire.</summary>
 <param name="event1">The first input event.</param>
 <param name="event2">The second input event.</param>
 <returns>An event that fires when either of the input events fire.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.EventModule">

</member>
<member name="T:Microsoft.FSharp.Control.LazyExtensions">
 <summary>Extensions related to Lazy values.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Pairwise``1(System.IObservable{``0})">
 <summary>Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
 The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as
 a pair. The argument passed to the N-1th triggering is held in hidden internal state until the 
 Nth triggering occurs.</summary>

 <remarks>For each observer, the registered intermediate observing object is not thread safe.
 That is, observations arising from the source must not be triggered concurrently 
 on different threads.</remarks>
 <param name="source">The input Observable.</param>
 <returns>An Observable that triggers on successive pairs of observations from the input Observable.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Subscribe``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
 <summary>Creates an observer which subscribes to the given observable and which calls
 the given function for each observation.</summary>
 <param name="callback">The function to be called on each observation.</param>
 <param name="source">The input Observable.</param>
 <returns>An object that will remove the callback if disposed.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Add``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
 <summary>Creates an observer which permanently subscribes to the given observable and which calls
 the given function for each observation.</summary>
 <param name="callback">The function to be called on each observation.</param>
 <param name="source">The input Observable.</param>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``0}},``0,System.IObservable{``1})">
 <summary>Returns an observable which, for each observer, allocates an item of state
 and applies the given accumulating function to successive values arising from
 the input. The returned object will trigger observations for each computed 
 state value, excluding the initial value. The returned object propagates 
 all errors arising from the source and completes when the source completes.</summary>

 <remarks>For each observer, the registered intermediate observing object is not thread safe.
 That is, observations arising from the source must not be triggered concurrently 
 on different threads.</remarks>
 <param name="collector">The function to update the state with each observation.</param>
 <param name="state">The initial state.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable that triggers on the updated state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.IObservable{``0})">
 <summary>Returns an observable which chooses a projection of observations from the source 
 using the given function. The returned object will trigger observations <c>x</c>
 for which the splitter returns <c>Some x</c>. The returned object also propagates 
 all errors arising from the source and completes when the source completes.</summary>
 <param name="chooser">The function that returns Some for observations to be propagated
 and None for observations to ignore.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable that only propagates some of the observations from the source.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Split``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},System.IObservable{``0})">
 <summary>Returns two observables which split the observations of the source by the 
 given function. The first will trigger observations <c>x</c> for which the 
 splitter returns <c>Choice1Of2 x</c>. The second will trigger observations 
 <c>y</c> for which the splitter returns <c>Choice2Of2 y</c> The splitter is 
 executed once for each subscribed observer. Both also propagate error 
 observations arising from the source and each completes when the source 
 completes.</summary>
 <param name="splitter">The function that takes an observation an transforms
 it into one of the two output Choice types.</param>
 <param name="source">The input Observable.</param>
 <returns>A tuple of Observables.  The first triggers when <c>splitter</c> returns Choice1of2
 and the second triggers when <c>splitter</c> returns Choice2of2.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.IObservable{``0})">
 <summary>Returns two observables which partition the observations of the source by 
 the given function. The first will trigger observations for those values 
 for which the predicate returns true. The second will trigger observations 
 for those values where the predicate returns false. The predicate is 
 executed once for each subscribed observer. Both also propagate all error 
 observations arising from the source and each completes when the source 
 completes.</summary>
 <param name="predicate">The function to determine which output Observable will trigger
 a particular observation.</param>
 <param name="source">The input Observable.</param>
 <returns>A tuple of Observables.  The first triggers when the predicate returns true, and
 the second triggers when the predicate returns false.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.IObservable{``0})">
 <summary>Returns an observable which filters the observations of the source 
 by the given function. The observable will see only those observations
 for which the predicate returns true. The predicate is executed once for 
 each subscribed observer. The returned object also propagates error 
 observations arising from the source and completes when the source completes.</summary>
 <param name="filter">The function to apply to observations to determine if it should
 be kept.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable that filters observations based on <c>filter</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.IObservable{``0})">
 <summary>Returns an observable which transforms the observations of the source by the 
 given function. The transformation function is executed once for each 
 subscribed observer. The returned object also propagates error observations 
 arising from the source and completes when the source completes.</summary>
 <param name="mapping">The function applied to observations from the source.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable of the type specified by <c>mapping</c>.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Merge``1(System.IObservable{``0},System.IObservable{``0})">
 <summary>Returns an observable for the merged observations from the sources. 
 The returned object propagates success and error values arising 
 from either source and completes when both the sources have completed.</summary>

 <remarks>For each observer, the registered intermediate observing object is not 
 thread safe. That is, observations arising from the sources must not 
 be triggered concurrently on different threads.</remarks>
 <param name="source1">The first Observable.</param>
 <param name="source2">The second Observable.</param>
 <returns>An Observable that propagates information from both sources.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.ObservableModule">
 <summary>Basic operations on first class event and other observable objects.</summary>
</member>
<member name="T:Microsoft.FSharp.Control.WebExtensions">
 <summary>A module of extension members providing asynchronous operations for some basic Web operations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AbstractClassAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>AbstractClassAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AbstractClassAttribute">
 <summary>Adding this attribute to class definition makes it abstract, which means it need not
 implement all its methods. Instances of abstract classes may not be constructed directly.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AllowNullLiteralAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>AllowNullLiteralAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AllowNullLiteralAttribute">
 <summary>Adding this attribute to a type lets the 'null' literal be used for the type 
 within F# code. This attribute may only be added to F#-defined class or 
 interface types.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.AutoOpenAttribute.Path">
 <summary>Indicates the namespace or module to be automatically opened when an assembly is referenced
 or an enclosing module opened.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AutoOpenAttribute.#ctor(System.String)">
 <summary>Creates an attribute used to mark a namespace or module path to be 'automatically opened' when an assembly is referenced</summary>
 <param name="path">The namespace or module to be automatically opened when an assembly is referenced
 or an enclosing module opened.</param>
 <returns>AutoOpenAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.AutoOpenAttribute.#ctor">
 <summary>Creates an attribute used to mark a module as 'automatically opened' when the enclosing namespace is opened</summary>
 <returns>AutoOpenAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AutoOpenAttribute">
 <summary>This attribute is used for two purposes. When applied to an assembly, it must be given a string
 argument, and this argument must indicate a valid module or namespace in that assembly. Source
 code files compiled with a reference to this assembly are processed in an environment
 where the given path is automatically oepned.</summary>

 <remarks>When applied to a module within an assembly, then the attribute must not be given any arguments.
 When the enclosing namespace is opened in user source code, the module is also implicitly opened.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.AutoSerializableAttribute.Value">
 <summary>The value of the attribute, indicating whether the type is automatically marked serializable or not</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AutoSerializableAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates whether the type should be serializable by default.</param>
 <returns>AutoSerializableAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AutoSerializableAttribute">
 <summary>Adding this attribute to a type with value 'false' disables the behaviour where F# makes the
 type Serializable by default.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CLIEventAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>CLIEventAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CLIEventAttribute">
 <summary>Adding this attribute to a property with event type causes it to be compiled with as a CLI
 metadata event, through a syntactic translation to a pair of 'add_EventName' and 
 'remove_EventName' methods.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`2.Choice2Of2">
 <summary>Choice 2 of 2 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`2.Choice1Of2">
 <summary>Choice 1 of 2 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`2">
 <summary>Helper types for active patterns with 2 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3.Choice3Of3">
 <summary>Choice 3 of 3 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3.Choice2Of3">
 <summary>Choice 2 of 3 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3.Choice1Of3">
 <summary>Choice 1 of 3 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3">
 <summary>Helper types for active patterns with 3 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice4Of4">
 <summary>Choice 4 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice3Of4">
 <summary>Choice 3 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice2Of4">
 <summary>Choice 2 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice1Of4">
 <summary>Choice 1 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4">
 <summary>Helper types for active patterns with 4 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice5Of5">
 <summary>Choice 5 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice4Of5">
 <summary>Choice 4 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice3Of5">
 <summary>Choice 3 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice2Of5">
 <summary>Choice 2 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice1Of5">
 <summary>Choice 1 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5">
 <summary>Helper types for active patterns with 5 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice6Of6">
 <summary>Choice 6 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice5Of6">
 <summary>Choice 5 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice4Of6">
 <summary>Choice 4 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice3Of6">
 <summary>Choice 3 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice2Of6">
 <summary>Choice 2 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice1Of6">
 <summary>Choice 1 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6">
 <summary>Helper types for active patterns with 6 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice7Of7">
 <summary>Choice 7 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice6Of7">
 <summary>Choice 6 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice5Of7">
 <summary>Choice 5 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice4Of7">
 <summary>Choice 4 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice3Of7">
 <summary>Choice 3 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice2Of7">
 <summary>Choice 2 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice1Of7">
 <summary>Choice 1 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7">
 <summary>Helper types for active patterns with 7 choices.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ClassAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ClassAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ClassAttribute">
 <summary>Adding this attribute to a type causes it to be represented using a CLI class.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ComparisonConditionalOnAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ComparisonConditionalOnAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ComparisonConditionalOnAttribute">
 <summary>This attribute is used to indicate a generic container type satisfies the F# 'comparison' 
 constraint only if a generic argument also satisfies this constraint. For example, adding 
 this attribute to parameter 'T on a type definition C&lt;'T&gt; means that a type C&lt;X&gt; only supports 
 comparison if the type X also supports comparison and all other conditions for C&lt;X&gt; to support 
 comparison are also met. The type C&lt;'T&gt; can still be used with other type arguments, but a type such 
 as C&lt;(int -> int)&gt; will not support comparison because the type (int -> int) is an F# function type 
 and does not support comparison.</summary>

 <remarks>This attribute will be ignored if it is used on the generic parameters of functions or methods.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute.Counts">
 <summary>Indicates the number of arguments in each argument group </summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute.#ctor(System.Int32[])">
 <summary>Creates an instance of the attribute</summary>
 <param name="counts">Indicates the number of arguments in each argument group.</param>
 <returns>CompilationArgumentCountsAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
 <summary>This attribute is generated automatically by the F# compiler to tag functions and members 
 that accept a partial application of some of their arguments and return a residual function</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationMappingAttribute.VariantNumber">
 <summary>Indicates the variant number of the entity, if any, in a linear sequence of elements with F# source code</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationMappingAttribute.SourceConstructFlags">
 <summary>Indicates the relationship between the compiled entity and F# source code</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationMappingAttribute.SequenceNumber">
 <summary>Indicates the sequence number of the entity, if any, in a linear sequence of elements with F# source code</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationMappingAttribute.#ctor(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32,System.Int32)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceConstructFlags">Indicates the type of source construct.</param>
 <returns>CompilationMappingAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationMappingAttribute.#ctor(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceConstructFlags">Indicates the type of source construct.</param>
 <returns>CompilationMappingAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationMappingAttribute.#ctor(Microsoft.FSharp.Core.SourceConstructFlags)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceConstructFlags">Indicates the type of source construct.</param>
 <returns>CompilationMappingAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationMappingAttribute">
 <summary>This attribute is inserted automatically by the F# compiler to tag types 
 and methods in the generated CLI code with flags indicating the correspondence 
 with original source constructs. It is used by the functions in the 
 Microsoft.FSharp.Reflection namespace to reverse-map compiled constructs to 
 their original forms. It is not intended for use from user code.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationRepresentationAttribute.Flags">
 <summary>Indicates one or more adjustments to the compiled representation of an F# type or member</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationRepresentationAttribute.#ctor(Microsoft.FSharp.Core.CompilationRepresentationFlags)">
 <summary>Creates an instance of the attribute</summary>
 <param name="flags">Indicates adjustments to the compiled representation of the type or member.</param>
 <returns>CompilationRepresentationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute">
 <summary>This attribute is used to adjust the runtime representation for a type. 
 For example, it may be used to note that the <c>null</c> representation
 may be used for a type. This affects how some constructs are compiled.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.Event">
 <summary>Compile a property as a CLI event.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.UseNullAsTrueValue">
 <summary>Permit the use of <c>null</c> as a representation for nullary discriminators in a discriminated union.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix">
 <summary>append 'Module' to the end of a module whose name clashes with a type name in the same namespace.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.Instance">
 <summary>Compile a member as 'instance' even if <c>null</c> is used as a representation for this type.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.Static">
 <summary>Compile an instance member as 'static' .</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.None">
 <summary>No special compilation representation.</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.CompilationRepresentationFlags">
 <summary>Indicates one or more adjustments to the compiled representation of an F# type or member.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationSourceNameAttribute.SourceName">
 <summary>Indicates the name of the entity in F# source code</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationSourceNameAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceName">The name of the method in source.</param>
 <returns>CompilationSourceNameAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute">
 <summary>This attribute is inserted automatically by the F# compiler to tag 
 methods which are given the 'CompiledName' attribute. It is not intended 
 for use from user code.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompiledNameAttribute.CompiledName">
 <summary>The name of the value as it appears in compiled code</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompiledNameAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="compiledName">The name to use in compiled code.</param>
 <returns>CompiledNameAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompiledNameAttribute">
 <summary>Adding this attribute to a value or function definition in an F# module changes the name used
 for the value in compiled CLI code.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsHidden(System.Boolean)">
 <summary>Indicates if the construct should always be hidden in an editing environment.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsError(System.Boolean)">
 <summary>Indicates if the message should indicate a compiler error. Error numbers less than
 10000 are considered reserved for use by the F# compiler and libraries.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.MessageNumber">
 <summary>Indicates the number associated with the message.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.Message">
 <summary>Indicates the warning message to be emitted when F# source code uses this construct</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsHidden">
 <summary>Indicates if the construct should always be hidden in an editing environment.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsError">
 <summary>Indicates if the message should indicate a compiler error. Error numbers less than
 10000 are considered reserved for use by the F# compiler and libraries.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerMessageAttribute.#ctor(System.String,System.Int32)">
 <summary>Creates an instance of the attribute.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.CompilerMessageAttribute">
 <summary>Indicates that a message should be emitted when F# source code uses this construct.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CustomComparisonAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>CustomComparisonAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CustomComparisonAttribute">
 <summary>Adding this attribute to a type indicates it is a type with a user-defined implementation of comparison.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CustomEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>CustomEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CustomEqualityAttribute">
 <summary>Adding this attribute to a type indicates it is a type with a user-defined implementation of equality.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.DefaultAugmentationAttribute.Value">
 <summary>The value of the attribute, indicating whether the type has a default augmentation or not</summary>
</member>
<member name="M:Microsoft.FSharp.Core.DefaultAugmentationAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates whether to generate helper members on the CLI class representing a discriminated
 union.</param>
 <returns>DefaultAugmentationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.DefaultAugmentationAttribute">
 <summary>Adding this attribute to a discriminated union with value false
 turns off the generation of standard helper member tester, constructor 
 and accessor members for the generated CLI class for that type.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.DefaultValueAttribute.Check">
 <summary>Indicates if a constraint is asserted that the field type supports 'null'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.DefaultValueAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="check">Indicates whether to assert that the field type supports <c>null</c>.</param>
 <returns>DefaultValueAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.DefaultValueAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>DefaultValueAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.DefaultValueAttribute">
 <summary>Adding this attribute to a field declaration means that the field is 
 not initialized. During type checking a constraint is asserted that the field type supports 'null'. 
 If the 'check' value is false then the constraint is not asserted. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.EntryPointAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>EntryPointAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.EntryPointAttribute">
 <summary>Adding this attribute to a function indicates it is the entrypoint for an application.
 If this absent is not speficied for an EXE then the initialization implicit in the
 module bindings in the last file in the compilation sequence are used as the entrypoint.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.EqualityConditionalOnAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>EqualityConditionalOnAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.EqualityConditionalOnAttribute">
 <summary>This attribute is used to indicate a generic container type satisfies the F# 'equality' 
 constraint only if a generic argument also satisfies this constraint. For example, adding 
 this attribute to parameter 'T on a type definition C&lt;'T&gt; means that a type C&lt;X&gt; only supports 
 equality if the type X also supports equality and all other conditions for C&lt;X&gt; to support 
 equality are also met. The type C&lt;'T&gt; can still be used with other type arguments, but a type such 
 as C&lt;(int -> int)&gt; will not support equality because the type (int -> int) is an F# function type 
 and does not support equality.</summary>

 <remarks>This attribute will be ignored if it is used on the generic parameters of functions or methods.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.ExperimentalAttribute.Message">
 <summary>Indicates the warning message to be emitted when F# source code uses this construct</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExperimentalAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="message">The warning message to be emitted when code uses this construct.</param>
 <returns>ExperimentalAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ExperimentalAttribute">
 <summary>This attribute is used to tag values that are part of an experimental library
 feature.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.op_Implicit(System.Converter{`0,`1})">
 <summary>Convert an value of type <c>System.Converter</c> to a F# first class function value </summary>
 <param name="converter">The input System.Converter.</param>
 <returns>An F# function of the same type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.op_Implicit(Microsoft.FSharp.Core.FSharpFunc`2{`0,`1})">
 <summary>Convert an F# first class function value to a value of type <c>System.Converter</c></summary>
 <param name="func">The input function.</param>
 <returns>A System.Converter of the function type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.ToConverter(Microsoft.FSharp.Core.FSharpFunc`2{`0,`1})">
 <summary>Convert an F# first class function value to a value of type <c>System.Converter</c></summary>
 <param name="func">The input function.</param>
 <returns>System.Converter&lt;'T,'U&gt;</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,``0}},`0,`1)">
 <summary>Invoke an F# first class function value with two curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``2(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}}},`0,`1,``0)">
 <summary>Invoke an F# first class function value with three curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``3(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}}},`0,`1,``0,``1)">
 <summary>Invoke an F# first class function value with four curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``4(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}}}},`0,`1,``0,``1,``2)">
 <summary>Invoke an F# first class function value with five curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <param name="arg5">The fifth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.Invoke(`0)">
 <summary>Invoke an F# first class function value with one argument</summary>
 <param name="func"></param>
 <returns>'U</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.FromConverter(System.Converter{`0,`1})">
 <summary>Convert an value of type <c>System.Converter</c> to a F# first class function value </summary>
 <param name="converter">The input System.Converter.</param>
 <returns>An F# function of the same type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.#ctor">
 <summary>Construct an instance of an F# first class function value </summary>
 <returns>The created F# function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpFunc`2">
 <summary>The CLI type used to represent F# function values. This type is not
 typically used directly, though may be used from other CLI languages.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.Release">
 <summary>The release number of the F# version associated with the attribute</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.Minor">
 <summary>The minor version number of the F# version associated with the attribute</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.Major">
 <summary>The major version number of the F# version associated with the attribute</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>Creates an instance of the attribute</summary>
 <param name="major">The major version number.</param>
 <param name="minor">The minor version number.</param>
 <param name="release">The release number.</param>
 <returns>FSharpInterfaceDataVersionAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute">
 <summary>This attribute is added to generated assemblies to indicate the 
 version of the data schema used to encode additional F#
 specific information in the resource attached to compiled F# libraries.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpTypeFunc.Specialize``1">
 <summary>Specialize the type function at a given type</summary>
 <returns>The specialized type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpTypeFunc.#ctor">
 <summary>Construct an instance of an F# first class type function value </summary>
 <returns>FSharpTypeFunc</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpTypeFunc">
 <summary>The CLI type used to represent F# first-class type function values. This type is for use
 by compiled F# code.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.Format`4">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
</member>
<member name="T:Microsoft.FSharp.Core.Format`5">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
 <typeparam name="Tuple">Tuple of values generated by scan or match.</typeparam>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2(System.Converter{``0,``1})">
 <summary>Convert the given Converter delegate object to an F# function value</summary>
 <param name="converter">The input Converter.</param>
 <returns>The F# function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})">
 <summary>Convert the given Action delegate object to an F# function value</summary>
 <param name="action">The input action.</param>
 <returns>The F# function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`5{``0,``1,``2,``3,``4},``5})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`4{``0,``1,``2,``3},``4})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{``0,``1,``2},``3})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`2{``0,``1},``2})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FuncConvert">
 <summary>Helper functions for converting F# first class function values to and from CLI representaions
 of functions using delegates.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.GeneralizableValueAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>GeneralizableValueAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.GeneralizableValueAttribute">
 <summary>Adding this attribute to a non-function value with generic parameters indicates that 
 uses of the construct can give rise to generic code through type inference. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.InterfaceAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>InterfaceAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.InterfaceAttribute">
 <summary>Adding this attribute to a type causes it to be represented using a CLI interface.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LiteralAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>LiteralAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.LiteralAttribute">
 <summary>Adding this attribute to a value causes it to be compiled as a CLI constant literal.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.MeasureAnnotatedAbbreviationAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>MeasureAnnotatedAbbreviationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.MeasureAnnotatedAbbreviationAttribute">
 <summary>Adding this attribute to a type causes it to be interpreted as a refined type, currently limited to measure-parameterized types.
 This may only be used under very limited conditions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.MeasureAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>MeasureAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.MeasureAttribute">
 <summary>Adding this attribute to a type causes it to be interpreted as a unit of measure.
 This may only be used under very limited conditions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NoComparisonAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>NoComparisonAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.NoComparisonAttribute">
 <summary>Adding this attribute to a type indicates it is a type where comparison is an abnormal operation.
 This means that the type does not satisfy the F# 'comparison' constraint. Within the bounds of the 
 F# type system, this helps ensure that the F# generic comparison function is not instantiated directly
 at this type. The attribute and checking does not constrain the use of comparison with base or child 
 types of this type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NoDynamicInvocationAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>NoDynamicInvocationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.NoDynamicInvocationAttribute">
 <summary>This attribute is used to tag values that may not be dynamically invoked at runtime. This is
 typically added to inlined functions whose implementations include unverifiable code. It
 causes the method body emitted for the inlined function to raise an exception if 
 dynamically invoked, rather than including the unverifiable code in the generated
 assembly.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NoEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>NoEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.NoEqualityAttribute">
 <summary>Adding this attribute to a type indicates it is a type where equality is an abnormal operation.
 This means that the type does not satisfy the F# 'equality' constraint. Within the bounds of the 
 F# type system, this helps ensure that the F# generic equality function is not instantiated directly
 at this type. The attribute and checking does not constrain the use of comparison with base or child 
 types of this type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpOption`1.Some">
 <summary>The representation of "Value of type 'T"</summary>
 <param name="Value">The input value.</param>
 <returns>An option representing the value.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpOption`1.None">
 <summary>The representation of "No value"</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.Value">
 <summary>Get the value of a 'Some' option. A NullReferenceException is raised if the option is 'None'.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.None">
 <summary>Create an option value that is a 'None' value.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.IsSome">
 <summary>Return 'true' if the option is a 'Some' value.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.IsNone">
 <summary>Return 'true' if the option is a 'None' value.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpOption`1.Some(`0)">
 <summary>Create an option value that is a 'Some' value.</summary>
 <param name="value">The input value</param>
 <returns>An option representing the value.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpOption`1">
 <summary>The type of optional values. When used from other CLI languages the
 empty option is the <c>null</c> value. </summary>

 <remarks>Use the constructors <c>Some</c> and <c>None</c> to create values of this type.
 Use the values in the <c>Option</c> module to manipulate values of this type,
 or pattern match against the values directly.

 <c>None</c> values will appear as the value <c>null</c> to other CLI languages.
 Instance methods on this type will appear as static methods to other CLI languages
 due to the use of <c>null</c> as a value representation.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.OptionalArgumentAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>OptionalArgumentAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptionalArgumentAttribute">
 <summary>This attribute is added automatically for all optional arguments.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.PrintfFormat`4.Value">
 <summary>The raw text of the format string.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfFormat`4.#ctor(System.String)">
 <summary>Construct a format string </summary>
 <param name="value">The input string.</param>
 <returns>The PrintfFormat containing the formatted result.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfFormat`4">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfFormat`5.#ctor(System.String)">
 <summary>Construct a format string</summary>
 <param name="value">The input string.</param>
 <returns>The created format string.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfFormat`5">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
 <typeparam name="Tuple">Tuple of values generated by scan or match.</typeparam>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.FSharpRef`1.contents">
<summary>
 The current value of the reference cell
</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpRef`1.Value(`0)">
 <summary>The current value of the reference cell</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpRef`1.Value">
 <summary>The current value of the reference cell</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpRef`1">
 <summary>The type of mutable references. Use the functions [:=] and [!] to get and
 set values of this type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ReferenceEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ReferenceEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ReferenceEqualityAttribute">
 <summary>Adding this attribute to a record or union type disables the automatic generation
 of overrides for 'System.Object.Equals(obj)', 'System.Object.GetHashCode()' 
 and 'System.IComparable' for the type. The type will by default use reference equality.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ReflectedDefinitionAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ReflectedDefinitionAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ReflectedDefinitionAttribute">
 <summary>Adding this attribute to the let-binding for the definition of a top-level 
 value makes the quotation expression that implements the value available
 for use at runtime.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>RequireQualifiedAccessAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute">
 <summary>This attribute is used to indicate that references to a the elements of a module, record or union 
 type require explicit qualified access.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>RequiresExplicitTypeArgumentsAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute">
 <summary>Adding this attribute to a type, value or member requires that 
 uses of the construct must explicitly instantiate any generic type parameters.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.SealedAttribute.Value">
 <summary>The value of the attribute, indicating whether the type is sealed or not.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.SealedAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates whether the class is sealed.</param>
 <returns>SealedAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.SealedAttribute.#ctor">
 <summary>Creates an instance of the attribute.</summary>
 <returns>The created attribute.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.SealedAttribute">
 <summary>Adding this attribute to class definition makes it sealed, which means it may not
 be extended or implemented.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.NonPublicRepresentation">
 <summary>Indicates that the compiled entity had private or internal representation in F# source code.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.KindMask">
 <summary>The mask of values related to the kind of the compiled entity.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Value">
 <summary>Indicates that the compiled entity is part of the representation of an F# value declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.UnionCase">
 <summary>Indicates that the compiled entity is part of the representation of an F# union case declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Module">
 <summary>Indicates that the compiled entity is part of the representation of an F# module declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Closure">
 <summary>Indicates that the compiled entity is part of the representation of an F# closure.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Exception">
 <summary>Indicates that the compiled entity is part of the representation of an F# exception declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Field">
 <summary>Indicates that the compiled entity is part of the representation of an F# record or union case field declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.ObjectType">
 <summary>Indicates that the compiled entity is part of the representation of an F# class or other object type declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.RecordType">
 <summary>Indicates that the compiled entity is part of the representation of an F# record type declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.SumType">
 <summary>Indicates that the compiled entity is part of the representation of an F# union type declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.None">
 <summary>Indicates that the compiled entity has no relationship to an element in F# source code.</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.SourceConstructFlags">
 <summary>Indicates the relationship between a compiled entity in a CLI binary and an element in F# source code.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>StructAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructAttribute">
 <summary>Adding this attribute to a type causes it to be represented using a CLI struct.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructuralComparisonAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>StructuralComparisonAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructuralComparisonAttribute">
 <summary>Adding this attribute to a record, union, exception, or struct type confirms the 
 automatic generation of implementations for 'System.IComparable' for the type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructuralEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>StructuralEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructuralEqualityAttribute">
 <summary>Adding this attribute to a record, union or struct type confirms the automatic 
 generation of overrides for 'System.Object.Equals(obj)' and 
 'System.Object.GetHashCode()' for the type. </summary>
</member>
<member name="P:Microsoft.FSharp.Core.StructuredFormatDisplayAttribute.Value">
 <summary>Indicates the text to display by default when objects of this type are displayed 
 using '%A' printf formatting patterns and other two-dimensional text-based display 
 layouts. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructuredFormatDisplayAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates the text to display when using the '%A' printf formatting.</param>
 <returns>StructuredFormatDisplayAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructuredFormatDisplayAttribute">
 <summary>This attribute is used to mark how a type is displayed by default when using 
 '%A' printf formatting patterns and other two-dimensional text-based display layouts. 
 In this version of F# the only valid values are of the form <c>PreText {PropertyName} PostText</c>.
 The property name indicates a property to evaluate and to display instead of the object itself. </summary>
</member>
<member name="T:Microsoft.FSharp.Core.Unit">
 <summary>The type 'unit', which has only one value "()". This value is special and
 always uses the representation 'null'.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.UnverifiableAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>UnverifiableAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.UnverifiableAttribute">
 <summary>This attribute is used to tag values whose use will result in the generation
 of unverifiable code. These values are inevitably marked 'inline' to ensure that
 the unverifiable constructs are not present in the actual code for the F# library,
 but are rather copied to the source code of the caller.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.VolatileFieldAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>VolatileFieldAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.VolatileFieldAttribute">
 <summary>Adding this attribute to an F# mutable binding causes the "volatile"
 prefix to be used for all accesses to the field.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.[,,,]`1">
 <summary>Four dimensional arrays, typically zero-based. Non-zero-based arrays
 can be created using methods on the System.Array type.</summary>

 <remarks>Use the values in the <c>Array4D</c> module
 to manipulate values of this type, or the notation <c>arr.[x1,x2,x3,x4]</c> to get and set array
 values.</remarks>  
</member>
<member name="T:Microsoft.FSharp.Core.[,,]`1">
 <summary>Three dimensional arrays, typically zero-based. Non-zero-based arrays
 can be created using methods on the System.Array type.</summary>

 <remarks>Use the values in the <c>Array3D</c> module
 to manipulate values of this type, or the notation <c>arr.[x1,x2,x3]</c> to get and set array
 values.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.[,]`1">
 <summary>Two dimensional arrays, typically zero-based.</summary> 

 <remarks>Use the values in the <c>Array2D</c> module
 to manipulate values of this type, or the notation <c>arr.[x,y]</c> to get/set array
 values.   

 Non-zero-based arrays can also be created using methods on the System.Array type.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.[]`1">
 <summary>Single dimensional, zero-based arrays, written <c>int[]</c>, <c>string[]</c> etc.</summary>
 <remarks>Use the values in the <c>Array</c> module to manipulate values 
 of this type, or the notation <c>arr.[x]</c> to get/set array
 values.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.array`1">
 <summary>Single dimensional, zero-based arrays, written <c>int[]</c>, <c>string[]</c> etc.</summary>
 
 <remarks>Use the values in the <c>Array</c> module to manipulate values 
 of this type, or the notation <c>arr.[x]</c> to get/set array
 values.</remarks>   
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.bool">
 <summary>An abbreviation for the CLI type <c>System.Boolean</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.byref`1">
 <summary>Represents a managed pointer in F# code.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.byte">
 <summary>An abbreviation for the CLI type <c>System.Byte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.char">
 <summary>An abbreviation for the CLI type <c>System.Char</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.decimal">
 <summary>An abbreviation for the CLI type <c>System.Decimal</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.decimal`1">
 <summary>The type of decimal numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Decimal</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.double">
 <summary>An abbreviation for the CLI type <c>System.Double</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.exn">
 <summary>An abbreviation for the CLI type <c>System.Exception</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float">
 <summary>An abbreviation for the CLI type <c>System.Double</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float32">
 <summary>An abbreviation for the CLI type <c>System.Single</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float32`1">
 <summary>The type of floating point numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Single</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float`1">
 <summary>The type of floating point numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Double</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.ilsigptr`1">
 <summary>This type is for internal use by the F# code generator.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int">
 <summary>An abbreviation for the CLI type <c>System.Int32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int16">
 <summary>An abbreviation for the CLI type <c>System.Int16</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int16`1">
 <summary>The type of 16-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Int16</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int32">
 <summary>An abbreviation for the CLI type <c>System.Int32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int64">
 <summary>An abbreviation for the CLI type <c>System.Int64</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int64`1">
 <summary>The type of 64-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Int64</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int8">
 <summary>An abbreviation for the CLI type <c>System.SByte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int`1">
 <summary>The type of 32-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Int32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.nativeint">
 <summary>An abbreviation for the CLI type <c>System.IntPtr</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.nativeptr`1">
 <summary>Represents an unmanaged pointer in F# code.</summary>

 <remarks>This type should only be used when writing F# code that interoperates
 with native code.  Use of this type in F# code may result in
 unverifiable code being generated.  Conversions to and from the 
 <c>nativeint</c> type may be required. Values of this type can be generated
 by the functions in the <c>NativeInterop.NativePtr</c> module.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.obj">
 <summary>An abbreviation for the CLI type <c>System.Object</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.option`1">
 <summary>The type of optional values. When used from other CLI languages the
 empty option is the <c>null</c> value. </summary>

 <remarks>Use the constructors <c>Some</c> and <c>None</c> to create values of this type.
 Use the values in the <c>Option</c> module to manipulate values of this type,
 or pattern match against the values directly.

 'None' values will appear as the value <c>null</c> to other CLI languages.
 Instance methods on this type will appear as static methods to other CLI languages
 due to the use of <c>null</c> as a value representation.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.ref`1">
 <summary>The type of mutable references. Use the functions [:=] and [!] to get and
 set values of this type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.sbyte">
 <summary>An abbreviation for the CLI type <c>System.SByte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.sbyte`1">
 <summary>The type of 8-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.SByte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.single">
 <summary>An abbreviation for the CLI type <c>System.Single</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.string">
 <summary>An abbreviation for the CLI type <c>System.String</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint16">
 <summary>An abbreviation for the CLI type <c>System.UInt16</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint32">
 <summary>An abbreviation for the CLI type <c>System.UInt32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint64">
 <summary>An abbreviation for the CLI type <c>System.UInt64</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint8">
 <summary>An abbreviation for the CLI type <c>System.Byte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.unativeint">
 <summary>An abbreviation for the CLI type <c>System.UIntPtr</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.unit">
 <summary>The type 'unit', which has only one value "()". This value is special and
 always uses the representation 'null'.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.MatchFailureException">
 <summary>Non-exhaustive match failures will raise the MatchFailureException exception</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.LastGenerated">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.CheckClose">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.GetFreshEnumerator">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>

 <returns>A new enumerator for the sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.GenerateNext(System.Collections.Generic.IEnumerable{`0}@)">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>

 <param name="result">A reference to the sequence.</param>

 <returns>A 0, 1, and 2 respectively indicate Stop, Yield, and Goto conditions for the sequence generator.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.Close">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.#ctor">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>

 <returns>A new sequence generator for the expression.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.CreateEvent``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.FSharpFunc`2{System.Object,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},``0})">
 <summary>Creates an anonymous event with the given handlers.</summary>

 <param name="addHandler">A function to handle adding a delegate for the event to trigger.</param>
 <param name="removeHandler">A function to handle removing a delegate that the event triggers.</param>
 <param name="createHandler">A function to produce the delegate type the event can trigger.</param>

 <returns>The initialized event.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateUsing``3(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>The F# compiler emits calls to this function to implement the <c>use</c> operator for F# sequence
 expressions.</summary>

 <param name="resource">The resource to be used and disposed.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateFromFunctions``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>The F# compiler emits calls to this function to implement the compiler-intrinsic
 conversions from untyped System.Collections.IEnumerable sequences to typed sequences.</summary>

 <param name="create">An initializer function.</param>
 <param name="moveNext">A function to iterate and test if end of sequence is reached.</param>
 <param name="current">A function to retrieve the current element.</param>

 <returns>The resulting typed sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateThenFinally``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>The F# compiler emits calls to this function to 
 implement the <c>try/finally</c> operator for F# sequence expressions.</summary>

 <param name="source">The input sequence.</param>
 <param name="compensation">A computation to be included in an enumerator's Dispose method.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateWhile``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>The F# compiler emits calls to this function to 
 implement the <c>while</c> operator for F# sequence expressions.</summary>

 <param name="guard">A function that indicates whether iteration should continue.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers">
 <summary>A group of functions used as part of the compiled representation of F# sequence expressions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.LazyPattern``1(System.Lazy{``0})">
 <summary>An active pattern to force the execution of values of type <c>Lazy&lt;_&gt;</c>.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.SpliceUntypedExpression``1(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Special prefix operator for splicing untyped expressions into quotation holes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.SpliceExpression``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
 <summary>Special prefix operator for splicing typed expressions into quotation holes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.CreateArray2D``2(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a 2D array from a sequence of sequences of elements.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.CreateDictionary``2(System.Collections.Generic.IEnumerable{System.Tuple`2{``0,``1}})">
 <summary>Builds a read-only lookup table from a sequence of key/value pairs. The key objects are indexed using generic hashing and equality.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToSByte``1(``0)">
 <summary>Converts the argument to signed byte.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>SByte.Parse()</c>  with InvariantCulture settings.
 Otherwise the operation requires and invokes a <c>ToSByte</c> method on the input type.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToByte``1(``0)">
 <summary>Converts the argument to byte.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Byte.Parse()</c> on strings and otherwise requires a <c>ToByte</c> method on the input type.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToDouble``1(``0)">
 <summary>Converts the argument to 64-bit float.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Double.Parse()</c>  with InvariantCulture settings. Otherwise the operation requires and invokes a <c>ToDouble</c> method on the input type.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToSingle``1(``0)">
 <summary>Converts the argument to 32-bit float.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Single.Parse()</c>  with InvariantCulture settings. Otherwise the operation requires and invokes a <c>ToSingle</c> method on the input type.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.ExtraTopLevelOperators.DefaultAsyncBuilder">
 <summary>Builds an aysnchronous workflow using computation expression syntax.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.CreateSet``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a set from a sequence of objects. The objects are indexed using generic comparison.</summary>
 <param name="elements">The input sequence of elements.</param>
 <returns>The created set.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatLineToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a file using the given format, and add a newline.</summary>
 <param name="textWriter">The file TextWriter.</param>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a file using the given format.</summary>
 <param name="textWriter">The file TextWriter.</param>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToStringThenFail``2(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,``1})">
 <summary>Print to a string buffer and raise an exception with the given
 result.   Helper printers must return strings.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToString``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,System.String})">
 <summary>Print to a string using the given format.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatLineToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stderr</c> using the given format, and add a newline.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stderr</c> using the given format.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatLine``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stdout</c> using the given format, and add a newline.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stdout</c> using the given format.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ExtraTopLevelOperators">

</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)">
 <summary>Divides a value by an integer.</summary>
 <param name="x">The input value.</param>
 <param name="y">The input int.</param>
 <returns>The division result.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1">
 <summary>Resolves to the one value for any primitive numeric type or any type with a static member called 'One'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1">
 <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)">
 <summary>A compiler intrinsic that implements dynamic invocations for the DivideByInt primitive.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the checked '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the checked '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1">
 <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1">
 <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)">
 <summary>Parse an uint64 according to the rules used by the overloaded 'uint64' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)">
 <summary>Parse an int64 according to the rules used by the overloaded 'int64' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)">
 <summary>Parse an uint32 according to the rules used by the overloaded 'uint32' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)">
 <summary>Parse an int32 according to the rules used by the overloaded 'int32' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure``1(System.SByte)">
 <summary>Creates an sbyte value with units-of-measure</summary>
 <param name="sbyte">The input sbyte.</param>
 <returns>The sbyte with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure``1(System.Int16)">
 <summary>Creates an int16 value with units-of-measure</summary>
 <param name="int16">The input int16.</param>
 <returns>The int16 with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure``1(System.Int64)">
 <summary>Creates an int64 value with units-of-measure</summary>
 <param name="int64">The input int64.</param>
 <returns>The int64 with units of measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure``1(System.Int32)">
 <summary>Creates an int32 value with units-of-measure</summary>
 <param name="int">The input int.</param>
 <returns>The int with units of measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure``1(System.Decimal)">
 <summary>Creates a decimal value with units-of-measure</summary>
 <param name="decimal">The input decimal.</param>
 <returns>The decimal with units of measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure``1(System.Single)">
 <summary>Creates a float32 value with units-of-measure</summary>
 <param name="float32">The input float.</param>
 <returns>The float with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure``1(System.Double)">
 <summary>Creates a float value with units-of-measure</summary>
 <param name="float">The input float.</param>
 <returns>The float with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)">
 <summary>Get the underlying value for an enum value</summary>
 <param name="enum">The input enum.</param>
 <returns>The enumeration as a value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)">
 <summary>Build an enum value from an underlying value</summary>
 <param name="value">The input value.</param>
 <returns>The value as an enumeration.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)">
 <summary>Recursively hash a part of a value according to its structure. </summary>
 <param name="comparer">The comparison function.</param>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)">
 <summary>Hash a value according to its structure. Use the given limit to restrict the hash when hashing F#
 records, lists and union types.</summary>
 <param name="limit">The limit on the number of nodes.</param>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)">
 <summary>Hash a value according to its structure. This hash is not limited by an overall node count when hashing F#
 records, lists and union types.</summary>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)">
 <summary>Make an F# hash/equality object for the given type using node-limited hashing when hashing F#
 records, lists and union types.</summary>
 <param name="limit">The input limit on the number of nodes.</param>
 <returns>System.Collections.Generic.IEqualityComparer&lt;'T&gt;</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1">
 <summary>Make an F# hash/equality object for the given type</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerCanBeNull``1">
 <summary>Make an F# comparer object for the given type, where it can be null if System.Collections.Generic.Comparer&lt;'T&gt;.Default</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1">
 <summary>Make an F# comparer object for the given type</summary>
</member>
<member name="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer">
 <summary>A static F# comparer object</summary>
</member>
<member name="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer">
 <summary>Return an F# comparer object suitable for hashing and equality. This hashing behaviour
 of the returned comparer is not limited by an overall node count when hashing F#
 records, lists and union types. This equality comparer has equivalence 
 relation semantics ([nan] = [nan]).</summary>
</member>
<member name="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer">
 <summary>Return an F# comparer object suitable for hashing and equality. This hashing behaviour
 of the returned comparer is not limited by an overall node count when hashing F#
 records, lists and union types.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)">
 <summary>The physical hash. Hashes on the object identity, except for value types,
 where we hash on the contents.</summary>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)">
 <summary>Reference/physical equality. 
 True if boxed versions of the inputs are reference-equal, OR if
 both are primitive numeric types and the implementation of Object.Equals for the type
 of the first argument returns true on the boxed versions of the inputs. </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)">
 <summary>Take the maximum of two values structurally according to the order given by GenericComparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The maximum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)">
 <summary>Take the minimum of two values structurally according to the order given by GenericComparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)">
 <summary>Compare two values. May be called as a recursive case from an implementation of System.IComparable to
 ensure consistent NaN comparison semantics.</summary>
 <param name="comp">The function to compare the values.</param>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)">
 <summary>Compare two values </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)">
 <summary>Compare two values for equality</summary>
 <param name="comp"></param>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)">
 <summary>Compare two values for equality using equivalence relation semantics ([nan] = [nan])</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)">
 <summary>Compare two values for equality using partial equivalence relation semantics ([nan] &lt;&gt; [nan])</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple5``5(System.Collections.IComparer,System.Tuple`5{``0,``1,``2,``3,``4},System.Tuple`5{``0,``1,``2,``3,``4})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple4``4(System.Collections.IComparer,System.Tuple`4{``0,``1,``2,``3},System.Tuple`4{``0,``1,``2,``3})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple3``3(System.Collections.IComparer,System.Tuple`3{``0,``1,``2},System.Tuple`3{``0,``1,``2})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple2``2(System.Collections.IComparer,System.Tuple`2{``0,``1},System.Tuple`2{``0,``1})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple5``5(System.Collections.IEqualityComparer,System.Tuple`5{``0,``1,``2,``3,``4},System.Tuple`5{``0,``1,``2,``3,``4})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple4``4(System.Collections.IEqualityComparer,System.Tuple`4{``0,``1,``2,``3},System.Tuple`4{``0,``1,``2,``3})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple3``3(System.Collections.IEqualityComparer,System.Tuple`3{``0,``1,``2},System.Tuple`3{``0,``1,``2})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple2``2(System.Collections.IEqualityComparer,System.Tuple`2{``0,``1},System.Tuple`2{``0,``1})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple5``5(System.Collections.IEqualityComparer,System.Tuple`5{``0,``1,``2,``3,``4})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple4``4(System.Collections.IEqualityComparer,System.Tuple`4{``0,``1,``2,``3})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple3``3(System.Collections.IEqualityComparer,System.Tuple`3{``0,``1,``2})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple2``2(System.Collections.IEqualityComparer,System.Tuple`2{``0,``1})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericLessOrEqualIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericGreaterOrEqualIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericGreaterThanIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericLessThanIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericEqualityWithComparerIntrinsic``1(System.Collections.IEqualityComparer,``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericEqualityERIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericEqualityIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericComparisonIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericComparisonWithComparerIntrinsic``1(System.Collections.IComparer,``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericHashWithComparerIntrinsic``1(System.Collections.IEqualityComparer,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.LimitedGenericHashIntrinsic``1(System.Int32,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericHashIntrinsic``1(``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.PhysicalEqualityIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.PhysicalHashIntrinsic``1(``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare">
 <summary>The F# compiler emits calls to some of the functions in this module as part of the compiled form of some language constructs</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray4D``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)">
<summary>
 The standard overloaded associative (4-indexed) mutation operator
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray3D``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)">
 <summary>The standard overloaded associative (3-indexed) mutation operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray2D``1(``0[0:,0:],System.Int32,System.Int32,``0)">
 <summary>The standard overloaded associative (2-indexed) mutation operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray``1(``0[],System.Int32,``0)">
 <summary>The standard overloaded associative (indexed) mutation operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray4D``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>The standard overloaded associative (4-indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray3D``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
 <summary>The standard overloaded associative (3-indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray2D``1(``0[0:,0:],System.Int32,System.Int32)">
 <summary>The standard overloaded associative (2-indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray``1(``0[],System.Int32)">
 <summary>The standard overloaded associative (indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.CheckThis``1(``0)">
 <summary>A compiler intrinsic for checking initialization soundness of recursive bindings</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.FailStaticInit">
 <summary>A compiler intrinsic for checking initialization soundness of recursive static bindings</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.FailInit">
 <summary>A compiler intrinsic for checking initialization soundness of recursive bindings</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.Dispose``1(``0)">
 <summary>A compiler intrinsic for the efficient compilation of sequence expressions</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.MakeDecimal(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
 <summary>This function implements parsing of decimal constants</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.CreateInstance``1">
 <summary>This function implements calls to default constructors
 acccessed by 'new' constraints.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetString(System.String,System.Int32)">
 <summary>Primitive used by pattern match compilation</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.TypeTestFast``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.TypeTestGeneric``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.UnboxFast``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?>' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.UnboxGeneric``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?>' operator</summary>
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions">
 <summary>The F# compiler emits calls to some of the functions in this module as part of the compiled form of some language constructs</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_IntegerAddressOf``1(``0)">
 <summary>Address-of. Uses of this value may result in the generation of unverifiable code.</summary>
 <param name="obj">The input object.</param>
 <returns>The unmanaged pointer.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_AddressOf``1(``0)">
 <summary>Address-of. Uses of this value may result in the generation of unverifiable code.</summary>
 <param name="obj">The input object.</param>
 <returns>The managed pointer.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_BooleanOr(System.Boolean,System.Boolean)">
 <summary>Binary 'or'. When used as a binary operator the right hand value is evaluated only on demand</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.Or(System.Boolean,System.Boolean)">
 <summary>Binary 'or'. When used as a binary operator the right hand value is evaluated only on demand.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_BooleanAnd(System.Boolean,System.Boolean)">
 <summary>Binary 'and'. When used as a binary operator the right hand value is evaluated only on demand</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_Amp(System.Boolean,System.Boolean)">
 <summary>Binary 'and'. When used as a binary operator the right hand value is evaluated only on demand.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators">
 <summary>The F# compiler emits calls to some of the functions in this module as part of the compiled form of some language constructs</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.ErrorStrings">
 <summary>For internal use only</summary>
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives">
 <summary>Language primitives associated with the F# language</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromStringDynamic(System.String)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromInt64Dynamic(System.Int64)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromString``1(System.String)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromInt64``1(System.Int64)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromInt32``1(System.Int32)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromOne``1">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromZero``1">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="T:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="T:Microsoft.FSharp.Core.NumericLiterals">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.KeyValuePattern``2(System.Collections.Generic.KeyValuePair{``0,``1})">
 <summary>An active pattern to match values of type <c>System.Collections.Generic.KeyValuePair</c></summary>
 <param name="keyValuePair">The input key/value pair.</param>
 <returns>A tuple containing the key and value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToChar``1(``0)">
 <summary>Converts the argument to character. Numeric inputs are converted according to the UTF-16 
 encoding for characters. String inputs must be exactly one character long. For other
 input types the operation requires an appropriate static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted char.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToDecimal``1(``0)">
 <summary>Converts the argument to System.Decimal using a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt64.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted decimal.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToString``1(``0)">
 <summary>Converts the argument to a string using <c>ToString</c>.</summary>

 <remarks>For standard integer and floating point values the <c>ToString</c> conversion 
 uses <c>CultureInfo.InvariantCulture</c>. </remarks>
 <param name="value">The input value.</param>
 <returns>The converted string.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUIntPtr``1(``0)">
 <summary>Converts the argument to unsigned native integer using a direct conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted unativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToIntPtr``1(``0)">
 <summary>Converts the argument to signed native integer. This is a direct conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted nativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToDouble``1(``0)">
 <summary>Converts the argument to 64-bit float. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Double.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted float</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToSingle``1(``0)">
 <summary>Converts the argument to 32-bit float. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Single.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted float32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUInt64``1(``0)">
 <summary>Converts the argument to unsigned 64-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt64.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt64``1(``0)">
 <summary>Converts the argument to signed 64-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int64.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUInt32``1(``0)">
 <summary>Converts the argument to unsigned 32-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt32.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt32``1(``0)">
 <summary>Converts the argument to signed 32-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int32.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToEnum``1(System.Int32)">
 <summary>Converts the argument to a particular enum type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted enum type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt``1(``0)">
 <summary>Converts the argument to signed 32-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int32.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUInt16``1(``0)">
 <summary>Converts the argument to unsigned 16-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt16.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt16``1(``0)">
 <summary>Converts the argument to signed 16-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int16.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToSByte``1(``0)">
 <summary>Converts the argument to signed byte. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>SByte.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted sbyte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToByte``1(``0)">
 <summary>Converts the argument to byte. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Byte.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted byte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.PowInteger``1(``0,System.Int32)">
 <summary>Overloaded power operator. If <c>n > 0</c> then equivalent to <c>x*...*x</c> for <c>n</c> occurrences of <c>x</c>. </summary>
 <param name="x">The input base.</param>
 <param name="n">The input exponent.</param>
 <returns>The base raised to the exponent.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Exponentiation``2(``0,``1)">
 <summary>Overloaded power operator.</summary>
 <param name="x">The input base.</param>
 <param name="y">The input exponent.</param>
 <returns>The base raised to the exponent.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Truncate``1(``0)">
 <summary>Overloaded truncate operator.</summary>
 <param name="value">The input value.</param>
 <returns>The truncated value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Tanh``1(``0)">
 <summary>Hyperbolic tangent of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The hyperbolic tangent of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Tan``1(``0)">
 <summary>Tangent of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The tangent of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sinh``1(``0)">
 <summary>Hyperbolic sine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The hyperbolic sine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sin``1(``0)">
 <summary>Sine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The sine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Cosh``1(``0)">
 <summary>Hyperbolic cosine  of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The hyperbolic cosine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Cos``1(``0)">
 <summary>Cosine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The cosine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sqrt``2(``0)">
 <summary>Square root of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The square root of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Log10``1(``0)">
 <summary>Logarithm to base 10 of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The logarithm to base 10 of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Log``1(``0)">
 <summary>Natural logarithm of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The natural logarithm of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Round``1(``0)">
 <summary>Round the given number</summary>
 <param name="value">The input value.</param>
 <returns>The nearest integer to the input value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sign``1(``0)">
 <summary>Sign of the given number</summary>
 <param name="value">The input value.</param>
 <returns>-1, 0, or 1 depending on the sign of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Floor``1(``0)">
 <summary>Floor of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The floor of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Exp``1(``0)">
 <summary>Exponential of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The exponential of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Ceiling``1(``0)">
 <summary>Ceiling of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The ceiling of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Atan2``2(``0,``0)">
 <summary>Inverse tangent of <c>x/y</c> where <c>x</c> and <c>y</c> are specified separately</summary>
 <param name="y">The y input value.</param>
 <param name="x">The x input value.</param>
 <returns>The inverse tangent of the input ratio.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Atan``1(``0)">
 <summary>Inverse tangent of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The inverse tangent of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Asin``1(``0)">
 <summary>Inverse sine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The inverse sine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Acos``1(``0)">
 <summary>Inverse cosine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The inverse cosine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Abs``1(``0)">
 <summary>Absolute value of the given number.</summary>
 <param name="value">The input value.</param>
 <returns>The absolute value of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.limitedHash``1(System.Int32,``0)">
 <summary>A generic hash function. This function has the same behaviour as 'hash', 
 however the default structural hashing for F# union, record and tuple 
 types stops when the given limit of nodes is reached. The exact behaviour of 
 the function can be adjusted on a type-by-type basis by implementing 
 GetHashCode for each type.</summary>
 <param name="limit">The limit of nodes.</param>
 <param name="obj">The input object.</param>
 <returns>The computed hash.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Hash``1(``0)">
 <summary>A generic hash function, designed to return equal hash values for items that are 
 equal according to the "=" operator. By default it will use structural hashing
 for F# union, record and tuple types, hashing the complete contents of the 
 type. The exact behaviour of the function can be adjusted on a 
 type-by-type basis by implementing GetHashCode for each type.</summary>
 <param name="obj">The input object.</param>
 <returns>The computed hash.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.SizeOf``1">
 <summary>Returns the internal size of a type in bytes. For example, <c>sizeof&lt;int&gt;</c> returns 4.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.TypeDefOf``1">
 <summary>Generate a System.Type representation for a type definition. If the
 input type is a generic type instantiation then return the 
 generic type definition associated with all such instantiations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.TypeOf``1">
 <summary>Generate a System.Type runtime representation of a static type.
 The static type is still maintained on the value returned.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Using``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>Clean up resources associated with the input object after the completion of the given function.
 Cleanup occurs even when an exception is raised by the protected
 code. </summary>
 <param name="resource">The resource to be disposed after action is called.</param>
 <param name="action">The action that accepts the resource.</param>
 <returns>The resulting value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Lock``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``1})">
 <summary>Execute the function as a mutual-exclusion region using the input value as a lock. </summary>
 <param name="lockObject">The object to be locked.</param>
 <param name="action">The action to perform during the lock.</param>
 <returns>The resulting value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_RangeStep``2(``0,``1,``0)">
 <summary>The standard overloaded skip range operator, e.g. <c>[n..skip..m]</c> for lists, <c>seq {n..skip..m}</c> for sequences</summary>
 <param name="start">The start value of the range.</param>
 <param name="step">The step value of the range.</param>
 <param name="finish">The end value of the range.</param>
 <returns>The sequence spanning the range using the specified step size.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Range``1(``0,``0)">
 <summary>The standard overloaded range operator, e.g. <c>[n..m]</c> for lists, <c>seq {n..m}</c> for sequences</summary>
 <param name="start">The start value of the range.</param>
 <param name="finish">The end value of the range.</param>
 <returns>The sequence spanning the range.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ConsoleOut``1">
 <summary>Reads the value of the property <c>System.Console.Out</c>.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ConsoleError``1">
 <summary>Reads the value of the property <c>System.Console.Error</c>. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ConsoleIn``1">
 <summary>Reads the value of the property <c>System.Console.In</c>. </summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.NaNSingle">
 <summary>Equivalent to <c>System.Single.NaN</c></summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.InfinitySingle">
 <summary>Equivalent to <c>System.Single.PositiveInfinity</c></summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.NaN">
 <summary>Equivalent to <c>System.Double.NaN</c></summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.Infinity">
 <summary>Equivalent to <c>System.Double.PositiveInfinity</c></summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Exit``1(System.Int32)">
 <summary>Exit the current hardware isolated process, if security settings permit,
 otherwise raise an exception. Calls <c>System.Environment.Exit</c>.</summary>
 <param name="exitcode">The exit code to use.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.CreateSequence``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a sequence using sequence expression syntax</summary>
 <param name="sequence">The input sequence.</param>
 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Not(System.Boolean)">
 <summary>Negate a logical value. <c>not true</c> equals <c>false</c> and <c>not false</c> equals <c>true</c></summary>
 <param name="value">The value to negate.</param>
 <returns>The result of the negation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Concatenate two lists.</summary>
 <param name="list1">The first list.</param>
 <param name="list2">The second list.</param>
 <returns>The concatenation of the lists.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Increment(Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>Increment a mutable reference cell containing an integer</summary>
 <param name="cell">The reference cell.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Decrement(Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>Decrement a mutable reference cell containing an integer</summary>
 <param name="cell">The reference cell.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Dereference``1(Microsoft.FSharp.Core.FSharpRef{``0})">
 <summary>Dereference a mutable reference cell</summary>
 <param name="cell">The cell to dereference.</param>
 <returns>The value contained in the cell.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ColonEquals``1(Microsoft.FSharp.Core.FSharpRef{``0},``0)">
 <summary>Assign to a mutable reference cell</summary>
 <param name="cell">The cell to mutate.</param>
 <param name="value">The value to set inside the cell.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Ref``1(``0)">
 <summary>Create a mutable reference cell</summary>
 <param name="value">The value to contain in the cell.</param>
 <returns>The created reference cell.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Identity``1(``0)">
 <summary>The identity function</summary>
 <param name="x">The input value.</param>
 <returns>The same value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.InvalidOp``1(System.String)">
 <summary>Throw an <c>System.InvalidOperationException</c> exception</summary>
 <param name="message">The exception message.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.NullArg``1(System.String)">
 <summary>Throw an <c>System.ArgumentNullException</c> exception</summary>
 <param name="argumentName">The argument name.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.InvalidArg``1(System.String,System.String)">
 <summary>Throw an <c>System.ArgumentException</c> exception</summary>
 <param name="argumentName">The argument name.</param>
 <param name="message">The exception message.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.FailWith``1(System.String)">
 <summary>Throw a <c>System.Exception</c> exception</summary>
 <param name="message">The exception message.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Box``1(``0)">
 <summary>Boxes a strongly typed value.</summary>
 <param name="value">The value to box.</param>
 <returns>The boxed object.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unbox``1(System.Object)">
 <summary>Unboxes a strongly typed value. This is the inverse of <c>box</c>, unbox&lt;t&gt;(box&lt;t&gt; a) equals a.</summary>
 <param name="value">The boxed value.</param>
 <returns>The unboxed result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Ignore``1(``0)">
 <summary>Ignore the passed value. This is often used to throw away results of a computation.</summary>
 <param name="value">The value to ignore.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Min``1(``0,``0)">
 <summary>Minimum based on generic comparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Max``1(``0,``0)">
 <summary>Maximum based on generic comparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The maximum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Compare``1(``0,``0)">
 <summary>Generic comparison.</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Snd``2(System.Tuple`2{``0,``1})">
 <summary>Return the second element of a tuple, <c>snd (a,b) = b</c>.</summary>
 <param name="tuple">The input tuple.</param>
 <returns>The second value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Fst``2(System.Tuple`2{``0,``1})">
 <summary>Return the first element of a tuple, <c>fst (a,b) = a</c>.</summary>
 <param name="tuple">The input tuple.</param>
 <returns>The first value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.FailurePattern(System.Exception)">
 <summary>Matches <c>System.Exception</c> objects whose runtime type is precisely <c>System.Exception</c></summary>
 <param name="error">The input exception.</param>
 <returns>A string option.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Failure(System.String)">
 <summary>Builds a <c>System.Exception</c> object.</summary>
 <param name="message">The message for the Exception.</param>
 <returns>A System.Exception.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Reraise``1">
 <summary>Rethrows an exception. This should only be used when handling an exception</summary>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Rethrow``1">
 <summary>Rethrows an exception. This should only be used when handling an exception</summary>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Raise``1(System.Exception)">
 <summary>Raises an exception</summary>
 <param name="exn">The exception to raise.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Concatenate(System.String,System.String)">
 <summary>Concatenate two strings. The operator '+' may also be used.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.DefaultArg``1(Microsoft.FSharp.Core.FSharpOption{``0},``0)">
 <summary>Used to specify a default value for an optional argument in the implementation of a function</summary>
 <param name="arg">An option representing the argument.</param>
 <param name="defaultValue">The default value of the argument.</param>
 <returns>The argument value. If it is None, the defaultValue is returned.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeLeft3``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}},``0,``1,``2)">
 <summary>Apply a function to three values, the values being a triple on the right, the function on the left</summary>
 <param name="func">The function.</param>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <param name="arg3">The third argument.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeLeft2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},``0,``1)">
 <summary>Apply a function to two values, the values being a pair on the right, the function on the left</summary>
 <param name="func">The function.</param>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeLeft``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0)">
 <summary>Apply a function to a value, the value being on the right, the function on the left</summary>
 <param name="func">The function.</param>
 <param name="arg1">The argument.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeRight3``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}})">
 <summary>Apply a function to three values, the values being a triple on the left, the function on the right</summary>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <param name="arg3">The third argument.</param>
 <param name="func">The function.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeRight2``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}})">
 <summary>Apply a function to two values, the values being a pair on the left, the function on the right</summary>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <param name="func">The function.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeRight``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>Apply a function to a value, the value being on the left, the function on the right</summary>
 <param name="arg">The argument.</param>
 <param name="func">The function.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ComposeLeft``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Core.FSharpFunc`2{``2,``0})">
 <summary>Compose two functions, the function on the right being applied first</summary>
 <param name="func2">The second function to apply.</param>
 <param name="func1">The first function to apply.</param>
 <returns>The composition of the input functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ComposeRight``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Core.FSharpFunc`2{``1,``2})">
 <summary>Compose two functions, the function on the left being applied first</summary>
 <param name="func1">The first function to apply.</param>
 <param name="func2">The second function to apply.</param>
 <returns>The composition of the input functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Inequality``1(``0,``0)">
 <summary>Structural inequality</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Equality``1(``0,``0)">
 <summary>Structural equality</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LessThanOrEqual``1(``0,``0)">
 <summary>Structural less-than-or-equal comparison</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_GreaterThanOrEqual``1(``0,``0)">
 <summary>Structural greater-than-or-equal</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_GreaterThan``1(``0,``0)">
 <summary>Structural greater-than</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LessThan``1(``0,``0)">
 <summary>Structural less-than comparison</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_UnaryPlus``1(``0)">
 <summary>Overloaded prefix=plus operator</summary>
 <param name="value">The input value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LogicalNot``1(``0)">
 <summary>Overloaded logical-NOT operator</summary>
 <param name="value">The input value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_RightShift``1(``0,System.Int32)">
 <summary>Overloaded byte-shift right operator by a specified number of bits</summary>
 <param name="value">The input value.</param>
 <param name="shift">The amount to shift.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LeftShift``1(``0,System.Int32)">
 <summary>Overloaded byte-shift left operator by a specified number of bits</summary>
 <param name="value">The input value.</param>
 <param name="shift">The amount to shift.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ExclusiveOr``1(``0,``0)">
 <summary>Overloaded logical-XOR operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_BitwiseOr``1(``0,``0)">
 <summary>Overloaded logical-OR operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_BitwiseAnd``1(``0,``0)">
 <summary>Overloaded logical-AND operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Modulus``3(``0,``1)">
 <summary>Overloaded modulo operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Division``3(``0,``1)">
 <summary>Overloaded division operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Multiply``3(``0,``1)">
 <summary>Overloaded multiplication operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Subtraction``3(``0,``1)">
 <summary>Overloaded subtraction operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Addition``3(``0,``1)">
 <summary>Overloaded addition operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_UnaryNegation``1(``0)">
 <summary>Overloaded unary negation.</summary>
 <param name="n">The value to negate.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToChar``1(``0)">
 <summary>Converts the argument to <c>char</c>. Numeric inputs are converted using a checked 
 conversion according to the UTF-16 encoding for characters. String inputs must 
 be exactly one character long. For other input types the operation requires an 
 appropriate static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted char</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUIntPtr``1(``0)">
 <summary>Converts the argument to <c>unativeint</c>. This is a direct, checked conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted unativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToIntPtr``1(``0)">
 <summary>Converts the argument to <c>nativeint</c>. This is a direct, checked conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted nativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUInt64``1(``0)">
 <summary>Converts the argument to <c>uint64</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.UInt64.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt64``1(``0)">
 <summary>Converts the argument to <c>int64</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int64.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUInt32``1(``0)">
 <summary>Converts the argument to <c>uint32</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.UInt32.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt32``1(``0)">
 <summary>Converts the argument to <c>int32</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int32.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt``1(``0)">
 <summary>Converts the argument to <c>int</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int32.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUInt16``1(``0)">
 <summary>Converts the argument to <c>uint16</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.UInt16.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt16``1(``0)">
 <summary>Converts the argument to <c>int16</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int16.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToSByte``1(``0)">
 <summary>Converts the argument to <c>sbyte</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.SByte.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted sbyte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToByte``1(``0)">
 <summary>Converts the argument to <c>byte</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Byte.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted byte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_Multiply``3(``0,``1)">
 <summary>Overloaded multiplication operator (checks for overflow)</summary>
 <param name="x">The first value.</param>
 <param name="y">The second value.</param>
 <returns>The product of the two input values.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_Addition``3(``0,``1)">
 <summary>Overloaded addition operator (checks for overflow)</summary>
 <param name="x">The first value.</param>
 <param name="y">The second value.</param>
 <returns>The sum of the two input values.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_Subtraction``3(``0,``1)">
 <summary>Overloaded subtraction operator (checks for overflow)</summary>
 <param name="x">The first value.</param>
 <param name="y">The second value.</param>
 <returns>The first value minus the second value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_UnaryNegation``1(``0)">
 <summary>Overloaded unary negation (checks for overflow)</summary>
 <param name="value">The input value.</param>
 <returns>The negated value.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.Operators.Checked">
 <summary>This module contains the basic arithmetic operations with overflow checks.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.Hash``1(``0)">
 <summary>Perform generic hashing on a value where the type of the value is not 
 statically required to satisfy the 'equality' constraint. </summary>
 <returns>The computed hash value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.Equals``1(``0,``0)">
 <summary>Perform generic equality on two values where the type of the values is not 
 statically required to satisfy the 'equality' constraint. </summary>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.Compare``1(``0,``0)">
 <summary>Perform generic comparison on two values where the type of the values is not 
 statically required to have the 'comparison' constraint. </summary>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.DefaultOf``1">
 <summary>Generate a default value for any type. This is null for reference types, 
 For structs, this is struct value where all fields have the default value. 
 This function is unsafe in the sense that some F# values do not have proper <c>null</c> values.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.Operators.Unchecked">
 <summary>This module contains basic operations which do not apply runtime and/or static checks</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowGeneric``1(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDecimal(System.Decimal,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'decimal'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDouble(System.Double,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'float'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSingle(System.Single,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'float32'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUIntPtr(System.UIntPtr,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'unativeint'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowIntPtr(System.IntPtr,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'nativeint'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt64(System.UInt64,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint64'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt64(System.Int64,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int64'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt32(System.UInt32,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint32'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt32(System.Int32,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int32'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt16(System.UInt16,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint16'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt16(System.Int16,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int16'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSByte(System.SByte,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'sbyte'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowByte(System.Byte,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'byte'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDynamic``2(``0,``1)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanhDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinhDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CoshDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CosDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SqrtDynamic``2(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Log10Dynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.LogDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SignDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RoundDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TruncateDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.FloorDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.ExpDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CeilingDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Atan2Dynamic``2(``0,``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AtanDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AsinDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AcosDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AbsDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeStepGeneric``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,``0,``1)">
 <summary>Generate a range of values using the given zero, add, start, step and stop values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeGeneric``1(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0,``0)">
 <summary>Generate a range of values using the given zero, add, start, step and stop values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeChar(System.Char,System.Char)">
 <summary>Generate a range of char values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeByte(System.Byte,System.Byte,System.Byte)">
 <summary>Generate a range of byte values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSByte(System.SByte,System.SByte,System.SByte)">
 <summary>Generate a range of sbyte values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt16(System.UInt16,System.UInt16,System.UInt16)">
 <summary>Generate a range of uint16 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt16(System.Int16,System.Int16,System.Int16)">
 <summary>Generate a range of int16 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUIntPtr(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
 <summary>Generate a range of unativeint values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeIntPtr(System.IntPtr,System.IntPtr,System.IntPtr)">
 <summary>Generate a range of nativeint values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt32(System.UInt32,System.UInt32,System.UInt32)">
 <summary>Generate a range of uint32 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt64(System.UInt64,System.UInt64,System.UInt64)">
 <summary>Generate a range of uint64 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt64(System.Int64,System.Int64,System.Int64)">
 <summary>Generate a range of int64 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSingle(System.Single,System.Single,System.Single)">
 <summary>Generate a range of float32 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeDouble(System.Double,System.Double,System.Double)">
 <summary>Generate a range of float values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt32(System.Int32,System.Int32,System.Int32)">
 <summary>Generate a range of integers</summary>  
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetStringSlice(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice from a string</summary>
 <param name="source">The source string.</param>
 <param name="start">The index of the first character of the slice.</param>
 <param name="finish">The index of the last character of the slice.</param>
 <returns>The substring from the given indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice4D``1(``0[0:,0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:,0:,0:])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <param name="start4">The start index of the fourth dimension.</param>
 <param name="finish4">The end index of the fourth dimension.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice4D``1(``0[0:,0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The source array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <param name="start4">The start index of the fourth dimension.</param>
 <param name="finish4">The end index of the fourth dimension.</param>
 <returns>The four dimensional sub array from the given indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice3D``1(``0[0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:,0:])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice3D``1(``0[0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The source array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <returns>The three dimensional sub array from the given indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2D``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2D``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The source array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <returns>The two dimensional sub array from the input indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice``1(``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start">The start index.</param>
 <param name="finish">The end index.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice``1(``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The input array.</param>
 <param name="start">The start index.</param>
 <param name="finish">The end index.</param>
 <returns>The sub array from the input indices.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.Operators.OperatorIntrinsics">
 <summary>A module of compiler intrinsic functions for efficient implementations of F# integer ranges
 and dynamic invocations of other F# operators</summary>
</member>
<member name="T:Microsoft.FSharp.Core.Operators">
 <summary>Basic F# Operators. This module is automatically opened in all F# code.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6.Invoke(`0,`1,`2,`3,`4)">
 <summary>Invoke an F# first class function value that accepts five curried arguments 
 without intervening execution</summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <param name="arg5">The fifth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{`2,Microsoft.FSharp.Core.FSharpFunc`2{`3,Microsoft.FSharp.Core.FSharpFunc`2{`4,`5}}}}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept five curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The optimized function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6.#ctor">
 <summary>Construct an optimized function value that can accept five curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6">
 <summary>The CLI type used to represent F# function values that accept five curried arguments 
 without intervening execution. This type should not typically used directly from 
 either F# code or from other CLI languages.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5.Invoke(`0,`1,`2,`3)">
 <summary>Invoke an F# first class function value that accepts four curried arguments 
 without intervening execution</summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{`2,Microsoft.FSharp.Core.FSharpFunc`2{`3,`4}}}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept four curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The optimized function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5.#ctor">
 <summary>Construct an optimized function value that can accept four curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5">
 <summary>The CLI type used to represent F# function values that accept four curried arguments 
 without intervening execution. This type should not typically used directly from 
 either F# code or from other CLI languages.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4.Invoke(`0,`1,`2)">
 <summary>Invoke an F# first class function value that accepts three curried arguments 
 without intervening execution</summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{`2,`3}}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept three curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The adapted function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4.#ctor">
 <summary>Construct an optimized function value that can accept three curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4">
 <summary>The CLI type used to represent F# function values that accept
 three iterated (curried) arguments without intervening execution. This type should not
 typically used directly from either F# code or from other CLI languages.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3.Invoke(`0,`1)">
 <summary>Invoke the optimized function value with two curried arguments </summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,`2}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept two curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The adapted function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3.#ctor">
 <summary>Construct an optimized function value that can accept two curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3">
 <summary>The CLI type used to represent F# function values that accept
 two iterated (curried) arguments without intervening execution. This type should not
 typically used directly from either F# code or from other CLI languages.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures">
 <summary>An implementation module used to hold some private implementations of function
 value invocation.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.ToList``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Convert the option to a list of length 0 or 1.</summary>
 <param name="option">The input option.</param>
 <returns>The result list.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.ToArray``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Convert the option to an array of length 0 or 1.</summary>
 <param name="option">The input option.</param>
 <returns>The result array.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Bind``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>bind f inp</c> evaluates to <c>match inp with None -> None | Some x -> f x</c></summary>
 <param name="binder">A function that takes the value of type T from an option and transforms it into
 an option containing a value of type U.</param>
 <param name="option">The input option.</param>
 <returns>An option of the output type of the binder.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>map f inp</c> evaluates to <c>match inp with None -> None | Some x -> Some (f x)</c>.</summary>
 <param name="mapping">A function to apply to the option value.</param>
 <param name="option">The input option.</param>
 <returns>An option of the input value after applying the mapping function, or None if the input is None.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>iter f inp</c> executes <c>match inp with None -> () | Some x -> f x</c>.</summary>
 <param name="action">A function to apply to the option value.</param>
 <param name="option">The input option.</param>
 <returns>Unit if the option is None, otherwise it returns the result of applying the predicate
 to the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>forall p inp" evaluates to "match inp with None -> true | Some x -> p x</c>.</summary>
 <param name="predicate">A function that evaluates to a boolean when given a value from the option type.</param>
 <param name="option">The input option.</param>
 <returns>True if the option is None, otherwise it returns the result of applying the predicate
 to the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>exists p inp</c> evaluates to <c>match inp with None -> false | Some x -> p x</c>.</summary>
 <param name="predicate">A function that evaluates to a boolean when given a value from the option type.</param>
 <param name="option">The input option.</param>
 <returns>False if the option is None, otherwise it returns the result of applying the predicate
 to the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Core.FSharpOption{``0},``1)">
 <summary><c>fold f inp s</c> evaluates to <c>match inp with None -> s | Some x -> f x s</c>.</summary>
 <param name="folder">A function to update the state data when given a value from an option.</param>
 <param name="option">The input option.</param>
 <param name="state">The initial state.</param>
 <returns>The original state if the option is None, otherwise it returns the updated state with the folder
 and the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>fold f s inp</c> evaluates to <c>match inp with None -> s | Some x -> f s x</c>.</summary>
 <param name="folder">A function to update the state data when given a value from an option.</param>
 <param name="state">The initial state.</param>
 <param name="option">The input option.</param>
 <returns>The original state if the option is None, otherwise it returns the updated state with the folder
 and the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Count``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>count inp</c> evaluates to <c>match inp with None -> 0 | Some _ -> 1</c>.</summary>
 <param name="option">The input option.</param>
 <returns>A zero if the option is None, a one otherwise.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.GetValue``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Gets the value associated with the option.</summary>
 <param name="option">The input option.</param>
 <returns>The value within the option.</returns>
 <exception href="System.ArgumentException">Thrown when the option is None.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.IsNone``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Returns true if the option is None.</summary>
 <param name="option">The input option.</param>
 <returns>True if the option is None.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.IsSome``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Returns true if the option is not None.</summary>
 <param name="option">The input option.</param>
 <returns>True if the option is not None.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptionModule">
 <summary>Basic operations on options.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.TextWriterFormat`1">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.IO.TextWriter</c>. The type parameter indicates the
 arguments and return type of the format operation.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.StringFormat`1">
 <summary>Represents a statically-analyzed format when formatting builds a string. The type parameter indicates the
 arguments and return type of the format operation.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.BuilderFormat`1">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.Text.StringBuilder</c>. The type parameter indicates the
 arguments and return type of the format operation.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.TextWriterFormat`2">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.IO.TextWriter</c>. The first type parameter indicates the
 arguments of the format operation and the last the overall return type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.StringFormat`2">
 <summary>Represents a statically-analyzed format when formatting builds a string. The first type parameter indicates the
 arguments of the format operation and the last the overall return type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.BuilderFormat`2">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.Text.StringBuilder</c>. The first type parameter indicates the
 arguments of the format operation and the last the overall return type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThenFail``2(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,``1})">
 <summary>Print to a string buffer and raise an exception with the given
 result. Helper printers must return strings.</summary>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThen``2(Microsoft.FSharp.Core.FSharpFunc`2{System.String,``0},Microsoft.FSharp.Core.PrintfFormat{``1,Microsoft.FSharp.Core.Unit,System.String,``0})">
 <summary>sprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
 <param name="continutation">The function called to generate a result from the formatted string.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatThen``2(Microsoft.FSharp.Core.FSharpFunc`2{System.String,``0},Microsoft.FSharp.Core.PrintfFormat{``1,Microsoft.FSharp.Core.Unit,System.String,``0})">
 <summary>printf, but call the given 'final' function to generate the result.
 For example, these let the printing force a flush after all output has 
 been entered onto the channel, but not before. </summary>
 <param name="continutation">The function called after formatting to generate the format result.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToTextWriterThen``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0},System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``1,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,``0})">
 <summary>fprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
 <param name="continutation">The function called after formatting to generate the format result.</param>
 <param name="textWriter">The input TextWriter.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringBuilderThen``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0},System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat{``1,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,``0})">
 <summary>bprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
 <param name="continutation">The function called after formatting to generate the format result.</param>
 <param name="builder">The input StringBuilder.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThen``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,System.String})">
 <summary>Print to a string via an internal string buffer and return 
 the result as a string. Helper printers must return strings.</summary>
 <param name="format">The input formatter.</param>
 <returns>The formatted string.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLine``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stdout, adding a newline.</summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stdout</summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLineToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stderr, adding a newline </summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stderr</summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLineToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a text writer, adding a newline</summary>
 <param name="textWriter">The TextWriter to print to.</param>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a text writer.</summary>
 <param name="textWriter">The TextWriter to print to.</param>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringBuilder``1(System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat{``0,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a <c>System.Text.StringBuilder</c></summary>
 <param name="builder">The StringBuilder to print to.</param>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule">
 <summary>Extensible printf-style formatting for numbers and other datatypes</summary>

 <remarks>Format specifications are strings with "%" markers indicating format 
 placeholders. Format placeholders consist of:
  <c>
    %[flags][width][.precision][type]
  </c>
 where the type is interpreted as follows:
  <c>
     %b:         bool, formatted as "true" or "false"
     %s:         string, formatted as its unescaped contents
     %d, %i:     any basic integer type formatted as a decimal integer, signed if the basic integer type is signed.
     %u:         any basic integer type formatted as an unsigned decimal integer
     %x, %X, %o: any basic integer type formatted as an unsigned hexadecimal 
                 (a-f)/Hexadecimal (A-F)/Octal integer
 
     %e, %E, %f, %F, %g, %G: 
                 any basic floating point type (float,float32) formatted
                 using a C-style floating point format specifications, i.e
 
     %e, %E: Signed value having the form [-]d.dddde[sign]ddd where 
                 d is a single decimal digit, dddd is one or more decimal
                 digits, ddd is exactly three decimal digits, and sign 
                 is + or -
 
     %f:     Signed value having the form [-]dddd.dddd, where dddd is one
                 or more decimal digits. The number of digits before the 
                 decimal point depends on the magnitude of the number, and 
                 the number of digits after the decimal point depends on 
                 the requested precision.
 
     %g, %G: Signed value printed in f or e format, whichever is 
                 more compact for the given value and precision.
 
 
    %M:      System.Decimal value
 
    %O:      Any value, printed by boxing the object and using it's ToString method(s)
 
    %A:      Any value, printed with the default layout settings 
 
    %a:      A general format specifier, requires two arguments:
                 (1) a function which accepts two arguments:
                     (a) a context parameter of the appropriate type for the
                         given formatting function (e.g. an #System.IO.TextWriter)
                     (b) a value to print
                         and which either outputs or returns appropriate text.
 
                 (2) the particular value to print
 
 
    %t:      A general format specifier, requires one argument:
                 (1) a function which accepts a context parameter of the
                     appropriate type for the given formatting function (e.g. 
                     an System.IO.TextWriter)and which either outputs or returns 
                     appropriate text.

  Basic integer types are:
     byte,sbyte,int16,uint16,int32,uint32,int64,uint64,nativeint,unativeint
  Basic floating point types are:
     float, float32
 </c>
 The optional width is an integer indicating the minimal width of the
 result. For instance, %6d prints an integer, prefixing it with spaces
 to fill at least 6 characters. If width is '*', then an extra integer
 argument is taken to specify the corresponding width.
 <c>
     any number
     '*': 
 </c>
 Valid flags are:
 <c>
     0: add zeros instead of spaces to make up the required width
     '-': left justify the result within the width specified
     '+': add a '+' character if the number is positive (to match a '-' sign 
          for negatives)
     ' ': add an extra space if the number is positive (to match a '-' 
              sign for negatives)
 </c>
 The printf '#' flag is invalid and a compile-time error will be reported if it is used.</remarks>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.SR">

</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Length(System.String)">
 <summary>Returns the length of the string.</summary>
 <param name="str">The input string.</param>
 <returns>The number of characters in the string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Replicate(System.Int32,System.String)">
 <summary>Returns a string by concatenating <c>count</c> instances of <c>str</c>.</summary>
 <param name="count">The number of copies of the input string will be copied.</param>
 <param name="str">The input string.</param>
 <returns>The concatenated string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Exists(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Boolean},System.String)">
 <summary>Tests if any character of the string satisfies the given predicate.</summary>
 <param name="predicate">The function to test each character of the string.</param>
 <param name="str">The input string.</param>
 <returns>True if any character returns true for the predicate and false otherwise.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.ForAll(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Boolean},System.String)">
 <summary>Tests if all characters in the string satisfy the given predicate.</summary>
 <param name="predicate">The function to test each character of the string.</param>
 <param name="str">The input string.</param>
 <returns>True if all characters return true for the predicate and false otherwise.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Initialize(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,System.String})">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each index from <c>0</c> to <c>count-1</c> and concatenating the resulting
 strings.</summary>
 <param name="count">The number of strings to initialize.</param>
 <param name="initializer">The function to take an index and produce a string to
 be concatenated with the others.</param>
 <returns>The constructed string.</returns>
 <exception cref="System.ArgumentException">Thrown when <c>count</c> is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Collect(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.String},System.String)">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each of the characters of the input string and concatenating the resulting
 strings.</summary>
 <param name="mapping">The function to produce a string from each character of the input string.</param>
 <param name="str">The input string.</param>
 <returns>The concatenated string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Char}},System.String)">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each character and index of the input string.</summary>
 <param name="mapping">The function to apply to each character and index of the string.</param>
 <param name="str">The input string.</param>
 <returns>The resulting string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Map(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Char},System.String)">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each of the characters of the input string.</summary>
 <param name="mapping">The function to apply to the characters of the string.</param>
 <param name="str">The input string.</param>
 <returns>The resulting string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Char,Microsoft.FSharp.Core.Unit}},System.String)">
 <summary>Applies the function <c>action</c> to the index of each character in the string and the
 character itself.</summary>
 <param name="action">The function to apply to each character and index of the string.</param>
 <param name="str">The input string.</param>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Iterate(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,Microsoft.FSharp.Core.Unit},System.String)">
 <summary>Applies the function <c>action</c> to each character in the string.</summary>
 <param name="action">The function to be applied to each character of the string.</param>
 <param name="str">The input string.</param>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Concat(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Returns a new string made by concatenating the given strings
 with separator <c>sep</c>, that is <c>a1 + sep + ... + sep + aN</c>.</summary>
 <param name="sep">The separator string to be inserted between the strings
 of the input sequence.</param>
 <param name="strings">The sequence of strings to be concatenated.</param>
 <returns>A new string consisting of the concatenated strings separated by
 the separation string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when strings is null.</exception>
</member>
<member name="T:Microsoft.FSharp.Core.StringModule">
 <summary>Functional programming operators for string processing.  Further string operations
 are available via the member functions on strings and other functionality in
  <a href="http://msdn2.microsoft.com/en-us/library/system.string.aspx">System.String</a> 
 and <a href="http://msdn2.microsoft.com/library/system.text.regularexpressions.aspx">System.Text.RegularExpressions</a> types.</summary>
</member>
<member name="T:Microsoft.FSharp.Math.BigNat">
<summary>
 Abstract internal type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Math.BigNatModule">

</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.StackAllocate``1(System.Int32)">
 <summary>Allocates a region of memory on the stack.</summary>
 <param name="count">The number of objects of type T to allocate.</param>
 <returns>A typed pointer to the allocated memory.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.SetPointerInlined``1(``0*,System.Int32,``0)">
 <summary>Assigns the <c>value</c> into the memory location referenced by the typed native 
 pointer computed by adding index * sizeof&lt;'T&gt; to the given input pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="index">The index by which to offset the pointer.</param>
 <param name="value">The value to assign.</param>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.WritePointerInlined``1(``0*,``0)">
 <summary>Assigns the <c>value</c> into the memory location referenced by the given typed native pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="value">The value to assign.</param>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.ReadPointerInlined``1(``0*)">
 <summary>Dereferences the given typed native pointer.</summary>
 <param name="address">The input pointer.</param>
 <returns>The value at the pointer address.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.GetPointerInlined``1(``0*,System.Int32)">
 <summary>Dereferences the typed native pointer computed by adding index * sizeof&lt;'T&gt; to the 
 given input pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="index">The index by which to offset the pointer.</param>
 <returns>The value at the pointer address.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.AddPointerInlined``1(``0*,System.Int32)">
 <summary>Returns a typed native pointer by adding index * sizeof&lt;'T&gt; to the 
 given input pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="index">The index by which to offset the pointer.</param>
 <returns>A typed pointer.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.ToNativeIntInlined``1(``0*)">
 <summary>Returns a machine address for a given typed native pointer.</summary>
 <param name="address">The input pointer.</param>
 <returns>The machine address.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.OfNativeIntInlined``1(System.IntPtr)">
 <summary>Returns a typed native pointer for a given machine address.</summary>
 <param name="address">The pointer address.</param>
 <returns>A typed pointer.</returns>
</member>
<member name="T:Microsoft.FSharp.NativeInterop.NativePtrModule">
 <summary>Contains operations on native pointers. Use of these operators may
 result in the generation of unverifiable code.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Primitives.Basics.Array">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Primitives.Basics.List">

</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpExpr`1.Raw">
 <summary>Gets the raw expression associated with this type-carrying expression</summary>
</member>
<member name="T:Microsoft.FSharp.Quotations.FSharpExpr`1">
 <summary>Type-carrying quoted expressions. Expressions are generated either
 by quotations in source text or programatically</summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpExpr.Type">
 <summary>Returns type of an expression.</summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpExpr.CustomAttributes">
 <summary>Returns the custom attributes of an expression.</summary>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.WhileLoop(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a while loop</summary>
 <param name="guard">The predicate to control the loop iteration.</param>
 <param name="body">The body of the while loop.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.VarSet(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents setting a mutable variable</summary>
 <param name="variable">The input variable.</param>
 <param name="value">The value to set.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Var(Microsoft.FSharp.Quotations.FSharpVar)">
 <summary>Builds an expression that represents a variable</summary>
 <param name="variable">The input variable.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Value``1(``0)">
 <summary>Builds an expression that represents a constant value </summary>
 <param name="value">The typed value.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Value(System.Object,System.Type)">
 <summary>Builds an expression that represents a constant value of a particular type</summary>
 <param name="value">The untyped object.</param>
 <param name="expressionType">The type of the object.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.UnionCaseTest(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Reflection.UnionCaseInfo)">
 <summary>Builds an expression that represents a test of a value is of a particular union case</summary>
 <param name="source">The expression to test.</param>
 <param name="unionCase">The description of the union case.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TypeTest(Microsoft.FSharp.Quotations.FSharpExpr,System.Type)">
 <summary>Builds an expression that represents a type test.</summary>
 <param name="source">The expression to test.</param>
 <param name="target">The target type.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TupleGet(Microsoft.FSharp.Quotations.FSharpExpr,System.Int32)">
 <summary>Builds an expression that represents getting a field of a tuple</summary>
 <param name="tuple">The input tuple.</param>
 <param name="index">The index of the tuple element to get.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TryWith(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a try/with construct for exception filtering and catching.</summary>
 <param name="body">The body of the try expression.</param>
 <param name="filterVar"></param>
 <param name="filterBody"></param>
 <param name="catchVar">The variable to bind to a caught exception.</param>
 <param name="catchBody">The expression evaluated when an exception is caught.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TryGetReflectedDefinition(System.Reflection.MethodBase)">
 <summary>Try and find a stored reflection definition for the given method. Stored reflection
 definitions are added to an F# assembly through the use of the [&lt;ReflectedDefinition&gt;] attribute.</summary>
 <param name="methodBase">The description of the method to find.</param>
 <returns>The reflection definition or None if a match could not be found.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TryFinally(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a try/finally construct </summary>
 <param name="body">The body of the try expression.</param>
 <param name="compensation">The final part of the expression to be evaluated.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Substitute(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Substitutes through the given expression using the given functions
 to map variables to new values. The functions must give consistent results
 at each application. Variable renaming may occur on the target expression
 if variable capture occurs.</summary>
 <param name="substitution">The function to map variables into expressions.</param>
 <returns>The expression with the given substitutions.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Sequential(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the sequential execution of one expression followed by another</summary>
 <param name="first">The first expression.</param>
 <param name="second">The second expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.RegisterReflectedDefinitions(System.Reflection.Assembly,System.String,System.Byte[])">
 <summary>Permits interactive environments such as F# Interactive
 to explicitly register new pickled resources that represent persisted 
 top level definitions. The string indicates a unique name for the resources
 being added. The format for the bytes is the encoding generated by the F# compiler.</summary>
 <param name="assembly">The assembly associated with the resource.</param>
 <param name="resource">The unique name for the resources being added.</param>
 <param name="serializedValue">The serialized resource to register with the environment.</param>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Quote(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a nested quotation literal</summary>
 <param name="inner">The expression being quoted.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertySet(System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents writing to a static property </summary>
 <param name="property">The description of the property.</param>
 <param name="value">The value to set.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertySet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents writing to a property of an object</summary>
 <param name="obj">The input object.</param>
 <param name="property">The description of the property.</param>
 <param name="value">The value to set.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertyGet(System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents reading a static property </summary>
 <param name="property">The description of the property.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertyGet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents reading a property of an object</summary>
 <param name="obj">The input object.</param>
 <param name="property">The description of the property.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewUnionCase(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the creation of a union case value</summary>
 <param name="unionCase">The description of the union case.</param>
 <param name="arguments">The list of arguments for the case.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewTuple(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the creation of an F# tuple value</summary>
 <param name="elements">The list of elements of the tuple.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewRecord(System.Type,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds record-construction expressions </summary>
 <param name="recordType">The type of record.</param>
 <param name="elements">The list of elements of the record.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewObject(System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the invocation of an object constructor</summary>
 <param name="constructorInfo">The description of the constructor.</param>
 <param name="arguments">The list of arguments to the constructor.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewDelegate(System.Type,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpVar},Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the creation of a delegate value for the given type</summary>
 <param name="delegateType">The type of delegate.</param>
 <param name="parameters">The parameters for the delegate.</param>
 <param name="body">The body of the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewArray(System.Type,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the creation of an array value initialized with the given elements</summary>
 <param name="elementType">The type for the elements of the array.</param>
 <param name="elements">The list of elements of the array.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.LetRecursive(Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr}},Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds recursives expressions associated with 'let rec' constructs</summary>
 <param name="bindings">The list of bindings for the let expression.</param>
 <param name="body">The sub-expression where the bindings are in scope.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Let(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds expressions associated with 'let' constructs</summary>
 <param name="letVariable">The variable in the let expression.</param>
 <param name="letExpr">The expression bound to the variable.</param>
 <param name="body">The sub-expression where the binding is in scope.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Lambda(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the constrution of an F# function value</summary>
 <param name="parameter">The parameter to the function.</param>
 <param name="body">The body of the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.IfThenElse(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds 'if ... then ... else' expressions.</summary>
 <param name="guard">The condition expression.</param>
 <param name="thenExpr">The <c>then</c> sub-expression.</param>
 <param name="elseExpr">The <c>else</c> sub-expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.GlobalVar``1(System.String)">
 <summary>Fetches or creates a new variable with the given name and type from a global pool of shared variables
 indexed by name and type. The type is given by the expicit or inferred type parameter</summary>
 <param name="name">The variable name.</param>
 <returns>The created of fetched typed global variable.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.GetFreeVars">
 <summary>Gets the free expression variables of an expression as a list.</summary>
 <returns>A sequence of the free variables in the expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.ForIntegerRangeLoop(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds a 'for i = ... to ... do ...' expression that represent loops over integer ranges</summary>
 <param name="loopVariable">The sub-expression declaring the loop variable.</param>
 <param name="start">The sub-expression setting the initial value of the loop variable.</param>
 <param name="endExpr">The sub-expression declaring the final value of the loop variable.</param>
 <param name="body">The sub-expression representing the body of the loop.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldSet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents writing to a field of an object</summary>
 <param name="obj">The input object.</param>
 <param name="fieldInfo">The description of the field to write to.</param>
 <param name="value">The value to set to the field.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldSet(System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents writing to a static field </summary>
 <param name="fieldInfo">The description of the field to write to.</param>
 <param name="value">The value to the set to the field.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldGet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo)">
 <summary>Builds an expression that represents the access of a field of an object</summary>
 <param name="obj">The input object.</param>
 <param name="fieldInfo">The description of the field to access.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldGet(System.Reflection.FieldInfo)">
 <summary>Builds an expression that represents the access of a static field</summary>
 <param name="fieldInfo">The description of the field to access.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Deserialize(System.Type,Microsoft.FSharp.Collections.FSharpList{System.Type},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},System.Byte[])">
 <summary>This function is called automatically when quotation syntax (&lt;@ @&gt;) and related typed-expression
 quotations are used. The bytes are a pickled binary representation of an unlinked form of the quoted expression,
 and the System.Type argument is any type in the assembly where the quoted
 expression occurs, i.e. it helps scope the interpretation of the cross-assembly
 references in the bytes.</summary>
 <param name="qualifyingType">A type in the assembly where the quotation occurs.</param>
 <param name="spliceTypes">The list of spliced types.</param>
 <param name="spliceExprs">The list of spliced expressions.</param>
 <param name="bytes">The serialized form of the quoted expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.DefaultValue(System.Type)">
 <summary>Builds an expression that represents the invocation of a default object constructor</summary>
 <param name="expressionType">The type on which the constructor is invoked.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Coerce(Microsoft.FSharp.Quotations.FSharpExpr,System.Type)">
 <summary>Builds an expression that represents the coercion of an expression to a type</summary>
 <param name="source">The expression to coerce.</param>
 <param name="target">The target type.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Cast``1(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Returns a new typed expression given an underlying runtime-typed expression.
 A type annotation is usually required to use this function, and 
 using an incorrect type annotation may result in a later runtime exception.</summary>
 <param name="source">The expression to cast.</param>
 <returns>The resulting typed expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Call(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents a call to an instance method associated with an object</summary>
 <param name="obj">The input object.</param>
 <param name="methodInfo">The description of the method to call.</param>
 <param name="arguments">The list of arguments to the method.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Call(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents a call to an static method or module-bound function</summary>
 <param name="methodInfo">The MethodInfo describing the method to call.</param>
 <param name="arguments">The list of arguments to the method.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Applications(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents the application of a first class function value to multiple arguments</summary>
 <param name="functionExpr">The function to apply.</param>
 <param name="arguments">The list of lists of arguments to the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Application(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the application of a first class function value to a single argument.</summary>
 <param name="functionExpr">The function to apply.</param>
 <param name="argument">The argument to the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.AddressSet(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents setting the value held at a particular address.</summary>
 <param name="target">The target expression.</param>
 <param name="value">The value to set at the address.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.AddressOf(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents getting the address of a value.</summary>
 <param name="target">The target expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="T:Microsoft.FSharp.Quotations.FSharpExpr">
 <summary>Quoted expressions annotated with System.Type values. </summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpVar.Type">
 <summary>The type associated with the variable</summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpVar.Name">
 <summary>The declared name of the variable</summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpVar.IsMutable">
 <summary>Indicates if the variable represents a mutable storage location</summary>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpVar.Global(System.String,System.Type)">
 <summary>Fetches or create a new variable with the given name and type from a global pool of shared variables
 indexed by name and type</summary>
 <param name="name">The name of the variable.</param>
 <param name="typ">The type associated with the variable.</param>
 <returns>The retrieved or created variable.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpVar.#ctor(System.String,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Creates a new variable with the given name, type and mutability</summary>
 <param name="name">The declared name of the variable.</param>
 <param name="typ">The type associated with the variable.</param>
 <param name="isMutable">Indicates if the variable represents a mutable storage location. Default is false.</param>
 <returns>The created variable.</returns>
</member>
<member name="T:Microsoft.FSharp.Quotations.FSharpVar">
 <summary>Information at the binding site of a variable</summary>
</member>
<member name="M:Microsoft.FSharp.Quotations.ExprShapeModule.RebuildShapeCombination(System.Object,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Re-build combination expressions. The first parameter should be an object
 returned by the <c>ShapeCombination</c> case of the active pattern in this module.</summary>
 <param name="shape">The input shape.</param>
 <param name="arguments">The list of arguments.</param>
 <returns>The rebuilt expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.ExprShapeModule.ShapePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern that performs a complete decomposition viewing the expression tree as a binding structure</summary>
 <param name="input">The input expression.</param>
 <returns>The decomposed Var, Lambda, or ConstApp.</returns>
</member>
<member name="T:Microsoft.FSharp.Quotations.ExprShapeModule">
 <summary>Active patterns for traversing, visiting, rebuilding and tranforming expressions in a generic way</summary>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.PropertySetterWithReflectedDefinitionPattern(System.Reflection.PropertyInfo)">
 <summary>An active pattern to recognize property setters that have an associated ReflectedDefinition</summary>
 <param name="propertyInfo">The description of the property.</param>
 <returns>The expression of the method definition if found, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.PropertyGetterWithReflectedDefinitionPattern(System.Reflection.PropertyInfo)">
 <summary>An active pattern to recognize property getters or values in modules that have an associated ReflectedDefinition</summary>
 <param name="propertyInfo">The description of the property.</param>
 <returns>The expression of the method definition if found, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.MethodWithReflectedDefinitionPattern(System.Reflection.MethodBase)">
 <summary>An active pattern to recognize methods that have an associated ReflectedDefinition</summary>
 <param name="methodBase">The description of the method.</param>
 <returns>The expression of the method definition if found, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.SpecificCallPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>A parameterized active pattern to recognize calls to a specified function or method.
 The returned elements are the optional target object (present if the target is an 
 instance method), the generic type instantation (non-empty if the target is a generic
 instantiation), and the arguments to the function or method.</summary>
 <param name="templateParameter">The input template expression to specify the method to call.</param>
 <returns>The optional target object (present if the target is an 
 instance method), the generic type instantation (non-empty if the target is a generic
 instantiation), and the arguments to the function or method.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.UInt64Pattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant unsigned int64 expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>uint64 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.Int64Pattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant int64 expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>int64 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.UInt32Pattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant unsigned int32 expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>uint32 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.Int32Pattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant int32 expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>int32 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.UInt16Pattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant unsigned int16 expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>uint16 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.Int16Pattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant int16 expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>int16 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.BytePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant byte expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>byte option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.SBytePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant signed byte expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>sbyte option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.CharPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant unicode character expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>char  option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.DoublePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant 64-bit floating point number expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>float option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.SinglePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant 32-bit floating point number expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>float32 option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.StringPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant string expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>string option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.BoolPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize constant boolean expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>bool option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.UnitPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize <c>()</c> constant expressions</summary>
 <param name="input">The input expression to match against.</param>
 <returns>unit option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.OrElsePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions of the form <c>a || b</c> </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.AndAlsoPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions of the form <c>a &amp;&amp; b</c> </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.ApplicationsPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent the application of a (possibly curried or tupled) first class function value</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr list list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.DerivedPatternsModule.LambdasPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a (possibly curried or tupled) first class function value</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Var list list * Expr) option</returns>
</member>
<member name="T:Microsoft.FSharp.Quotations.DerivedPatternsModule">
 <summary>Contains a set of derived F# active patterns to analyze F# expression objects</summary>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.VarSetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent setting a mutable variable</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Var * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.VarPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a variable</summary>
 <param name="input">The input expression to match against.</param>
 <returns>Var option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.ValuePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a constant value</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(obj * Type) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.UnionCaseTestPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a test if a value is of a particular union case</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * UnionCaseInfo) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.TypeTestPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a dynamic type test</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Type) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.TupleGetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent getting a tuple field</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * int) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.TryFinallyPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a try/finally construct </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.TryWithPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a try/with construct for exception filtering and catching </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Var * Expr * Var * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.SequentialPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent sequential exeuction of one expression followed by another</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.QuotePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent a nested quotation literal</summary>
 <param name="input">The input expression to match against.</param>
 <returns>Expr option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.PropertySetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent setting a static or instance property, or a non-function value declared in a module</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr option * PropertyInfo * Expr list * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.PropertyGetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent the read of a static or instance property, or a non-function value declared in a module</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr option * PropertyInfo * Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.NewTuplePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent construction of tuple values</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.NewUnionCasePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent construction of particular union case values</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(UnionCaseInfo * Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.NewRecordPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent construction of record values</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Type * Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.NewObjectPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent invocation of object constructors</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(ConstructorInfo * Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.NewDelegatePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent construction of delegate values</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Type * Var list * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.DefaultValuePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent invocations of a default constructor of a struct</summary>
 <param name="input">The input expression to match against.</param>
 <returns>Type option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.NewArrayPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent the construction of arrays </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Type * Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.LetRecursivePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent recursive let bindings of one or more variables</summary>
 <param name="input">The input expression to match against.</param>
 <returns>((Var * Expr) list * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.LetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent let bindings</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Var * Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.LambdaPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent first class function values</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Var * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.IfThenElsePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent conditionals</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.WhileLoopPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent while loops </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.ForIntegerRangeLoopPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent loops over integer ranges</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Var * Expr * Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.FieldSetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent setting a static or instance field </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr option * FieldInfo * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.FieldGetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent getting a static or instance field </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr option * FieldInfo) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.CoercePattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent coercions from one type to another</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Type) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.CallPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent calls to static and instance methods, and functions defined in modules</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr option * MethodInfo * Expr list) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.ApplicationPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent applications of first class function values</summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.AddressSetPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent setting the value held at an address </summary>
 <param name="input">The input expression to match against.</param>
 <returns>(Expr * Expr) option</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.PatternsModule.AddressOfPattern(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>An active pattern to recognize expressions that represent getting the address of a value</summary>
 <param name="input">The input expression to match against.</param>
 <returns>Expr option</returns>
</member>
<member name="T:Microsoft.FSharp.Quotations.PatternsModule">
 <summary>Contains a set of primitive F# active patterns to analyze F# expression objects</summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.MakeTupleType(System.Type[])">
 <summary>Returns a <c>System.Type</c> representing an F# tuple type with the given element types</summary>
 <param name="types">An array of types for the tuple elements.</param>
 <returns>The type representing the tuple containing the input elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.MakeFunctionType(System.Type,System.Type)">
 <summary>Returns a <c>System.Type</c> representing the F# function type with the given domain and range</summary>
 <param name="domain">The input type of the function.</param>
 <param name="range">The output type of the function.</param>
 <returns>The function type with the given domain and range.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.IsUnion(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Returns true if the <c>typ</c> is a representation of an F# union type or the runtime type of a value of that type</summary>
 <param name="typ">The type to check.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>True if the type check succeeds.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.IsTuple(System.Type)">
 <summary>Return true if the <c>typ</c> is a representation of an F# tuple type </summary>
 <param name="typ">The type to check.</param>
 <returns>True if the type check succeeds.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.IsRecord(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Return true if the <c>typ</c> is a representation of an F# record type </summary>
 <param name="typ">The type to check.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>True if the type check succeeds.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.IsModule(System.Type)">
 <summary>Return true if the <c>typ</c> is a <c>System.Type</c> value corresponding to the compiled form of an F# module </summary>
 <param name="typ">The type to check.</param>
 <returns>True if the type check succeeds.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.IsFunction(System.Type)">
 <summary>Return true if the <c>typ</c> is a representation of an F# function type or the runtime type of a closure implementing an F# function type</summary>
 <param name="typ">The type to check.</param>
 <returns>True if the type check succeeds.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.IsExceptionRepresentation(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Returns true if the <c>typ</c> is a representation of an F# exception declaration</summary>
 <param name="exceptionType">The type to check.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>True if the type check is an F# exception.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.GetUnionCases(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Gets the cases of a union type.</summary>

 <remarks>Assumes the given type is a union type. If not, ArgumentException is raised during pre-computation.</remarks>
 <param name="unionType">The input union type.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a union type.</exception>
 <returns>An array of descriptions of the cases of the given union type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.GetTupleElements(System.Type)">
 <summary>Gets the tuple elements from the representation of an F# tuple type.</summary>
 <param name="tupleType">The input tuple type.</param>
 <returns>An array of the types contained in the given tuple type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.GetRecordFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Reads all the fields from a record value, in declaration order</summary>

 <remarks>Assumes the given input is a record value. If not, ArgumentException is raised.</remarks>
 <param name="recordType">The input record type.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>An array of descriptions of the properties of the record type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.GetFunctionElements(System.Type)">
 <summary>Gets the domain and range types from an F# function type  or from the runtime type of a closure implementing an F# type</summary>
 <param name="functionType">The input function type.</param>
 <returns>A tuple of the domain and range types of the input function.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpType.GetExceptionFields(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Reads all the fields from an F# exception declaration, in declaration order</summary>

 <remarks>Assumes <c>exceptionType</c> is an exception representation type. If not, ArgumentException is raised.</remarks>
 <param name="exceptionType">The exception type to read.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <exception cref="System.ArgumentException">Thrown if the given type is not an exception.</exception>
 <returns>An array containing the PropertyInfo of each field in the exception.</returns>
</member>
<member name="T:Microsoft.FSharp.Reflection.FSharpType">
 <summary>Contains operations associated with constructing and analyzing F# types such as records, unions and tuples</summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Assumes the given type is a union type. 
 If not, ArgumentException is raised during pre-computation.</summary>

 <remarks>Using the computed function is more efficient than calling GetUnionCase
 because the path executed by the computed function is optimized given the knowledge that it will be
 used to read values of the given type.</remarks>
 <param name="unionType">The type of union to optimize reading.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>An optimized function to read the tags of the given union type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionTagMemberInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Precompute a property or static method for reading an integer representing the case tag of a union type.</summary>
 <param name="unionType">The type of union to read.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>The description of the union case reader.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionReader(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Precomputes a function for reading all the fields for a particular discriminator case of a union type</summary>

 <remarks>Using the computed function will typically be faster than executing a corresponding call to GetFields</remarks>
 <param name="unionCase">The description of the union case to read.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>A function to for reading the fields of the given union case.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructorInfo(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>A method that constructs objects of the given case</summary>
 <param name="unionCase">The description of the union case.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>The description of the constructor of the given union case.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeUnionConstructor(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Precomputes a function for constructing a discriminated union value for a particular union case. </summary>
 <param name="unionCase">The description of the union case.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>A function for constructing values of the given union case.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleReader(System.Type)">
 <summary>Precomputes a function for reading the values of a particular tuple type</summary>

 <remarks>Assumes the given type is a TupleType.
 If not, ArgumentException is raised during pre-computation.</remarks>
 <param name="tupleType">The tuple type to read.</param>
 <exception cref="System.ArgumentException">Thrown when the given type is not a tuple type.</exception>
 <returns>A function to read values of the given tuple type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTuplePropertyInfo(System.Type,System.Int32)">
 <summary>Gets information that indicates how to read a field of a tuple</summary>
 <param name="tupleType">The input tuple type.</param>
 <param name="index">The index of the tuple element to describe.</param>
 <returns>The description of the tuple element and an optional type and index if the tuple is big.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructorInfo(System.Type)">
 <summary>Gets a method that constructs objects of the given tuple type. 
 For small tuples, no additional type will be returned.</summary>
 
 <remarks>For large tuples, an additional type is returned indicating that
 a nested encoding has been used for the tuple type. In this case
 the suffix portion of the tuple type has the given type and an
 object of this type must be created and passed as the last argument 
 to the ConstructorInfo. A recursive call to PreComputeTupleConstructorInfo 
 can be used to determine the constructor for that the suffix type.</remarks>
 <param name="tupleType">The input tuple type.</param>
 <returns>The description of the tuple type constructor and an optional extra type
 for large tuples.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeTupleConstructor(System.Type)">
 <summary>Precomputes a function for reading the values of a particular tuple type</summary>

 <remarks>Assumes the given type is a TupleType.
 If not, ArgumentException is raised during pre-computation.</remarks>
 <param name="tupleType">The type of tuple to read.</param>
 <exception cref="System.ArgumentException">Thrown when the given type is not a tuple type.</exception>
 <returns>A function to read a particular tuple type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordReader(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Precompute a function for reading all the fields from a record. The fields are returned in the
 same order as the fields reported by a call to Microsoft.FSharp.Reflection.Type.GetInfo for
 this type.</summary>

 <remarks>Assumes the given type is a RecordType. 
 If not, ArgumentException is raised during pre-computation.

 Using the computed function will typically be faster than executing a corresponding call to Value.GetInfo
 because the path executed by the computed function is optimized given the knowledge that it will be
 used to read values of the given type.</remarks>
 <param name="recordType">The type of record to read.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a record type.</exception>
 <returns>An optimized reader for the given record type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordFieldReader(System.Reflection.PropertyInfo)">
 <summary>Precompute a function for reading a particular field from a record.
 Assumes the given type is a RecordType with a field of the given name. 
 If not, ArgumentException is raised during pre-computation.</summary>

 <remarks>Using the computed function will typically be faster than executing a corresponding call to Value.GetInfo
 because the path executed by the computed function is optimized given the knowledge that it will be
 used to read values of the given type.</remarks>
 <param name="info">The PropertyInfo of the field to read.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a record type.</exception>
 <returns>A function to read the specified field from the record.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructorInfo(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Get a ConstructorInfo for a record type</summary>
 <param name="recordType">The record type.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>A ConstructorInfo for the given record type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.PreComputeRecordConstructor(System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Precompute a function for constructing a record value. </summary>

 <remarks>Assumes the given type is a RecordType.
 If not, ArgumentException is raised during pre-computation.</remarks>
 <param name="recordType">The type of record to construct.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a record type.</exception>
 <returns>A function to construct records of the given type.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.MakeUnion(Microsoft.FSharp.Reflection.UnionCaseInfo,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Create a union case value.</summary>
 <param name="unionCase">The description of the union case to create.</param>
 <param name="args">The array of arguments to construct the given case.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <returns>The constructed union case.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(System.Object[],System.Type)">
 <summary>Creates an instance of a tuple type</summary>

 <remarks>Assumes at least one element is given. If not, ArgumentException is raised.</remarks>
 <param name="tupleElements">The array of tuple fields.</param>
 <param name="tupleType">The tuple type to create.</param>
 <exception cref="System.ArgumentException">Thrown if no elements are given.</exception>
 <returns>An instance of the tuple type with the given elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.MakeRecord(System.Type,System.Object[],Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Creates an instance of a record type.</summary>

 <remarks>Assumes the given input is a record type.</remarks>
 <param name="recordType">The type of record to make.</param>
 <param name="values">The array of values to initialize the record.</param>
 <param name="bindingFlags">Optional binding flags for the record.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a record type.</exception>
 <returns>The created record.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.MakeFunction(System.Type,Microsoft.FSharp.Core.FSharpFunc`2{System.Object,System.Object})">
 <summary>Builds a typed function from object from a dynamic function implementation</summary>
 <param name="functionType">The function type of the implementation.</param>
 <param name="implementation">The untyped lambda of the function implementation.</param>
 <returns>A typed function from the given dynamic implementation.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.GetUnionFields(System.Object,System.Type,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Identify the union case and its fields for an object</summary>

 <remarks>Assumes the given input is a union case value. If not, ArgumentException is raised.

 If the type is not given, then the runtime type of the input object is used to identify the
 relevant union type. The type should always be given if the input object may be null. For example, 
 option values may be represented using the 'null'.</remarks>
 <param name="value">The input union case.</param>
 <param name="unionType">The union type containing the value.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a union case value.</exception>
 <returns>The description of the union case and its fields.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.GetTupleFields(System.Object)">
 <summary>Reads all fields from a tuple.</summary>

 <remarks>Assumes the given input is a tuple value. If not, ArgumentException is raised.</remarks>
 <param name="tuple">The input tuple.</param>
 <exception cref="System.ArgumentException">Thrown when the input is not a tuple value.</exception>
 <returns>An array of the fields from the given tuple.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.GetTupleField(System.Object,System.Int32)">
 <summary>Reads a field from a tuple value.</summary>

 <remarks>Assumes the given input is a tuple value. If not, ArgumentException is raised.</remarks>
 <param name="tuple">The input tuple.</param>
 <param name="index">The index of the field to read.</param>
 <returns>The value of the field.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.GetRecordFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Reads all the fields from a record value.</summary>

 <remarks>Assumes the given input is a record value. If not, ArgumentException is raised.</remarks>
 <param name="record">The record object.</param>
 <param name="bindingFlags">Optional binding flags for the record.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a record type.</exception>
 <returns>The array of fields from the record.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.GetRecordField(System.Object,System.Reflection.PropertyInfo)">
 <summary>Reads a field from a record value.</summary>

 <remarks>Assumes the given input is a record value. If not, ArgumentException is raised.</remarks>
 <param name="record">The record object.</param>
 <param name="info">The PropertyInfo describing the field to read.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not a record type.</exception>
 <returns>The field from the record.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.FSharpValue.GetExceptionFields(System.Object,Microsoft.FSharp.Core.FSharpOption{System.Reflection.BindingFlags})">
 <summary>Reads all the fields from a value built using an instance of an F# exception declaration</summary>

 <remarks>Assumes the given input is an F# exception value. If not, ArgumentException is raised.</remarks>
 <param name="exn">The exception instance.</param>
 <param name="bindingFlags">Optional binding flags.</param>
 <exception cref="System.ArgumentException">Thrown when the input type is not an F# exception.</exception>
 <returns>The fields from the given exception.</returns>
</member>
<member name="T:Microsoft.FSharp.Reflection.FSharpValue">
 <summary>Contains operations associated with constructing and analyzing values associated with F# types
 such as records, unions and tuples.</summary>
</member>
<member name="P:Microsoft.FSharp.Reflection.UnionCaseInfo.Tag">
 <summary>The integer tag for the case.</summary>
</member>
<member name="P:Microsoft.FSharp.Reflection.UnionCaseInfo.Name">
 <summary>The name of the case.</summary>
</member>
<member name="P:Microsoft.FSharp.Reflection.UnionCaseInfo.DeclaringType">
 <summary>The type in which the case occurs.</summary>
</member>
<member name="M:Microsoft.FSharp.Reflection.UnionCaseInfo.GetFields">
 <summary>The fields associated with the case, represented by a PropertyInfo.</summary>
 <returns>The fields associated with the case.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.UnionCaseInfo.GetCustomAttributes(System.Type)">
 <summary>Returns the custom attributes associated with the case matching the given attribute type.</summary>
 <param name="attributeType">The type of attributes to return.</param>
 <returns>An array of custom attributes.</returns>
</member>
<member name="M:Microsoft.FSharp.Reflection.UnionCaseInfo.GetCustomAttributes">
 <summary>Returns the custom attributes associated with the case.</summary>
 <returns>An array of custom attributes.</returns>
</member>
<member name="T:Microsoft.FSharp.Reflection.UnionCaseInfo">
 <summary>Represents a case of a discriminated union type</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions">
<summary>
 A record of options to control structural formatting.
 For F# Interactive properties matching those of this value can be accessed via the &apos;fsi&apos;
 value.
 
 Floating Point format given in the same format accepted by System.Double.ToString,
 e.g. f6 or g15.

 If ShowProperties is set the printing process will evaluate properties of the values being
 displayed.  This may cause additional computation.  

 The ShowIEnumerable is set the printing process will force the evalution of IEnumerable objects
 to a small, finite depth, as determined by the printing parameters.
 This may lead to additional computation being performed during printing.

 &lt;example&gt;
 From F# Interactive the default settings can be adjusted using, for example, 
 &lt;pre&gt;
   open Microsoft.FSharp.Compiler.Interactive.Settings;;
   setPrintWidth 120;;
 &lt;/pre&gt;
 &lt;/example&gt;
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.StructuredPrintfImpl.Layout">
<summary>
 Data representing structured layouts of terms.  
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.Display.layout_to_string(Microsoft.FSharp.Text.StructuredPrintfImpl.FormatOptions,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Convert any value to a layout using the given formatting options.  The
 layout can then be processed using formatting display engines such as
 those in the LayoutOps module.  any_to_string and output_any are
 built using any_to_layout with default format options.
</summary>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.Display.output_any``1(System.IO.TextWriter,``0)">
<summary>
 Ouput any value to a channel using the same set of formatting rules
 as any_to_string
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.Display.any_to_string``1(``0)">
<summary>
 Convert any value to a string using a standard formatter
 Data is typically formatted in a structured format, e.g.
 lists are formatted using the &quot;[1;2]&quot; notation.
 The details of the format are not specified and may change
 from version to version and according to the flags given
 to the F# compiler.  The format is intended to be human-readable,
 not machine readable.  If alternative generic formats are required
 you should develop your own formatter, using the code in the
 implementation of this file as a starting point.

 Data from other .NET languages is formatted using a virtual
 call to Object.ToString() on the boxed version of the input.
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.StructuredPrintfImpl.Display">

</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.unfoldL``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout},Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpOption{System.Tuple`2{``0,``1}}},``1,System.Int32)">
<summary>
 For limitting layout of list-like sequences (lists,arrays,etc).
 unfold a list of items using (project and z) making layout list via itemL.
 If reach maxLength (before exhausting) then truncate.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.tagAttrL(System.String,Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{System.String,System.String}},Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 See tagL
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.listL``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout},Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Layout like an F# list.    
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.optionL``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout},Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Layout like an F# option.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.aboveListL(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Text.StructuredPrintfImpl.Layout})">
<summary>
 Layout list vertically.    
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.aboveL(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Layout two vertically.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.tupleL(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Text.StructuredPrintfImpl.Layout})">
<summary>
 Form tuple of layouts.            
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.braceL(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Wrap braces around layout.        
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.squareBracketL(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Wrap square brackets around layout.    
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.bracketL(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Wrap round brackets around Layout.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.sepListL(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Text.StructuredPrintfImpl.Layout})">
<summary>
 Join layouts into a list separated using the given Layout.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.semiListL(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Text.StructuredPrintfImpl.Layout})">
<summary>
 Join layouts into a semi-colon separated list.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.spaceListL(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Text.StructuredPrintfImpl.Layout})">
<summary>
 Join layouts into a space separated list.    
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.commaListL(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Text.StructuredPrintfImpl.Layout})">
<summary>
 Join layouts into a comma separated list.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_AtAtMinusMinus(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join broken with ident=2 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_AtAtMinus(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join broken with ident=1 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_AtAt(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join broken with ident=0
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_MinusMinusMinus(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join, possible break with indent=2 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_MinusMinus(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join, possible break with indent=1
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_PlusPlus(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join, possible break with indent=0
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.op_HatHat(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout,Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Join, unbreakable. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.leftL(System.String)">
<summary>
 An string which is left  parenthesis (no space on the right).
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.rightL(System.String)">
<summary>
 An string which is right parenthesis (no space on the left).
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.sepL(System.String)">
<summary>
 An string which requires no spaces either side.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.wordL(System.String)">
<summary>
 An string leaf 
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.objL(System.Object)">
<summary>
 An uninterpreted leaf, to be interpreted into a string
 by the layout engine. This allows leaf layouts for numbers, strings and
 other atoms to be customized according to culture.
</summary>
</member>
<member name="M:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.isEmptyL(Microsoft.FSharp.Text.StructuredPrintfImpl.Layout)">
<summary>
 Is it the empty layout?
</summary>
</member>
<member name="P:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps.emptyL">
<summary>
 The empty layout
</summary>
</member>
<member name="T:Microsoft.FSharp.Text.StructuredPrintfImpl.LayoutOps">
<summary>
 A layout is a sequence of strings which have been joined together.
 The strings are classified as words, separators and left and right parenthesis.
 This classification determines where spaces are inserted.
 A joint is either unbreakable, breakable or broken.
 If a joint is broken the RHS layout occurs on the next line with optional indentation.
 A layout can be squashed to for given width which forces breaks as required.
</summary>
</member>
<member name="P:System.AggregateException.InnerExceptions">
 <summary>Gets a read-only collection of the <c>Exception</c> instances that caused
 the current exception.</summary>
</member>
<member name="T:System.AggregateException">
 <summary>Represents one or more errors that occur during application execution.</summary>
</member>
<member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
 <summary>Subscribe an observer to the source of results</summary>
 <param name="observer">The observer to be added to those that are notified.</param>
 <returns>An IDisposable to allow for unsubscription.</returns>
</member>
<member name="T:System.IObservable`1">
 <summary>A source of observable results</summary>
</member>
<member name="M:System.IObserver`1.OnNext(`0)">
 <summary>Notify an observer of a new result</summary>
 <param name="value">The value to notify observers.</param>
</member>
<member name="M:System.IObserver`1.OnError(System.Exception)">
 <summary>Notify an observer of an error </summary>
 <param name="error">The exception to notify observers.</param>
</member>
<member name="M:System.IObserver`1.OnCompleted">
 <summary>Notify an observer that no more results will be produced</summary>
</member>
<member name="T:System.IObserver`1">
 <summary>A client that mat be subscribed to observe the results from an IObservable.</summary>
</member>
<member name="P:System.Lazy`1.Value">
 <summary>The value contained in the Lazy.</summary>
</member>
<member name="P:System.Lazy`1.IsValueCreated">
 <summary>Is true if the value is ready to be accessed.</summary>
</member>
<member name="T:System.Lazy`1">
 <summary>Encapsulates a lazily computed value.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:System.Tuple`1">
 <summary>Compiled versions of F# tuple types. These are not used directly, though
 these compiled forms are seen by other CLI languages.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
 <summary>Determines whether the current object precedes, occurs in the same position as,
 or follows another object in the sort order.</summary>
 <param name="obj">The object to compare with the current instance.</param>
 <param name="comparer">An object that performs comparisons.</param>
 <returns>An integer that indicates the relationship of the current object to the target object.</returns>
</member>
<member name="">

</member>
<member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
 <summary>Returns a hash code for the current instance.</summary>
 <param name="comparer">An object that computes the hash code of the current object.</param>
 <returns>The hash code for the current instance.</returns>
</member>
<member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
 <summary>Equality comparison against a target object with a given comparer.</summary>
 <param name="obj">The target for comparison.</param>
 <param name="comparer">Compares the two objects.</param>
 <returns>The result of the comparer.</returns>
</member>
<member name="">

</member>
<member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
<summary>
 Return the given big integer
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
<summary>
 Return the negation of a big integer
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 Return the difference of two big integers
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 Return the product of big integers
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 Return the modulus of big integers
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 This operator is for consistency when this type be used from other CLI languages
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 This operator is for consistency when this type be used from other CLI languages
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 This operator is for consistency when this type be used from other CLI languages
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 This operator is for consistency when this type be used from other CLI languages
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 This operator is for consistency when this type be used from other CLI languages
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)">
<summary>
 Convert a big integer to a 32-bit signed integer
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)">
<summary>
 Convert a big integer to a 64-bit signed integer
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)">
<summary>
 Convert a big integer to a floating point number
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 This operator is for consistency when this type be used from other CLI languages
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 Return the ratio of two big integers
</summary>
</member>
<member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 Return the sum of two big integers
</summary>
</member>
<member name="P:System.Numerics.BigInteger.Zero">
<summary>
 Get the big integer for zero
</summary>
</member>
<member name="P:System.Numerics.BigInteger.Sign">
<summary>
 Return the sign of a big integer: 0, +1 or -1
</summary>
</member>
<member name="P:System.Numerics.BigInteger.One">
<summary>
 Get the big integer for one
</summary>
</member>
<member name="P:System.Numerics.BigInteger.IsZero">
<summary>
 Return true if a big integer is &apos;zero&apos;
</summary>
</member>
<member name="P:System.Numerics.BigInteger.IsOne">
<summary>
 Return true if a big integer is &apos;one&apos;
</summary>
</member>
<member name="">

</member>
<member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
<summary>
 Return n^m for two big integers
</summary>
</member>
<member name="M:System.Numerics.BigInteger.Parse(System.String)">
<summary>
 Parse a big integer from a string format
</summary>
</member>
<member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
<summary>
 Return the greatest common divisor of two big integers
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
<summary>
 Compute the ratio and remainder of two big integers
</summary>
</member>
<member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
<summary>
 Compute the absolute value of a big integer 
</summary>
</member>
<member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
<summary>
 Construct a BigInteger value for the given 64-bit integer
</summary>
</member>
<member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
<summary>
 Construct a BigInteger value for the given integer
</summary>
</member>
<member name="T:System.Numerics.BigInteger">
<summary>
 The type of arbitrary-sized integers
</summary>
</member>
<member name="P:System.Threading.CancellationTokenSource.Token">
 <summary>Fetches the token representing the capability to detect cancellation of an operation.</summary>
</member>
<member name="M:System.Threading.CancellationTokenSource.Dispose">
 <summary>Discards resources associated with this capability.</summary>
</member>
<member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
 <summary>Creates a cancellation capability linking two tokens.</summary>
 <param name="token1">The first input token.</param>
 <param name="token2">The second input token.</param>
 <returns>The created CancellationTokenSource.</returns>
</member>
<member name="M:System.Threading.CancellationTokenSource.Cancel">
 <summary>Cancels the operation.</summary>
</member>
<member name="M:System.Threading.CancellationTokenSource.#ctor">
 <summary>Creates a new cancellation capability.</summary>
</member>
<member name="T:System.Threading.CancellationTokenSource">
 <summary>Signals to a <c>CancellationToken</c> that it should be cancelled.</summary>
</member>
<member name="">

</member>
<member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
 <summary>Inequality operator for tokens.</summary>
 <param name="registration1">The first input token.</param>
 <param name="registration2">The second input token.</param>
 <returns>False if the two tokens are equal.</returns>
</member>
<member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
 <summary>Equality operator for tokens.</summary>
 <param name="registration1">The first input token.</param>
 <param name="registration2">The second input token.</param>
 <returns>True if the two tokens are equal.</returns>
</member>
<member name="P:System.Threading.CancellationToken.IsCancellationRequested">
 <summary>Flags whether an operation should be cancelled.</summary>
</member>
<member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
 <summary>Registers an action to perform with the CancellationToken.</summary>
 <param name="action">The action to associate with the token.</param>
 <param name="state">The state associated with the action.</param>
 <returns>The created registration object.</returns>
</member>
<member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
 <summary>Equality comparison against another token.</summary>
 <param name="token">The target for comparison.</param>
 <returns>True if the two tokens are equal.</returns>
</member>
<member name="T:System.Threading.CancellationToken">
 <summary>Represents a capability to detect cancellation of an operation.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
 <summary>Inequality operator for registrations.</summary>
 <param name="registration1">The first input registration.</param>
 <param name="registration2">The second input registration.</param>
 <returns>False if the two registrations are equal.</returns>
</member>
<member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
 <summary>Equality operator for registrations.</summary>
 <param name="registration1">The first input registration.</param>
 <param name="registration2">The second input registration.</param>
 <returns>True if the two registrations are equal.</returns>
</member>
<member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
 <summary>Equality comparison against another registration.</summary>
 <param name="registration">The target for comparison.</param>
 <returns>True if the two registrations are equal.</returns>
</member>
<member name="M:System.Threading.CancellationTokenRegistration.Dispose">
 <summary>Frees resources associated with the registration.</summary>
</member>
<member name="T:System.Threading.CancellationTokenRegistration">
 <summary>Represents a registration to a Cancellation token source.</summary>
</member>
</members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\fxcop\1.36\x86\Repository\Compatibility\Desktop3.0.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<CompatibilityEntry Name=".NET Framework 3.0"
                    Platform="Desktop" 
                    Version="3.0" 
                    Priority="3000">

  <Assembly>PresentationBuildTasks, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>PresentationFramework.Aero, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>PresentationFramework.Classic, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>PresentationFramework.Luna, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>PresentationFramework.Royale, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>ReachFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>System.IdentityModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  <Assembly>System.IdentityModel.Selectors, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  <Assembly>System.IO.Log, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
  <Assembly>System.Printing, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>System.Runtime.Serialization, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  <Assembly>System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  <Assembly>System.Speech, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>System.Workflow.Activities, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>System.Workflow.ComponentModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>System.Workflow.Runtime, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>UIAutomationClient, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>UIAutomationClientsideProviders, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>UIAutomationProvider, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>UIAutomationTypes, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>WindowsBase, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
  <Assembly>WindowsFormsIntegration, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</Assembly>
</CompatibilityEntry>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\fxcop\1.36\x86\Repository\Compatibility\Desktop2.0SP2.xml ===
<?xml version="1.0" encoding="utf-8"?>
<CompatibilityEntry Name=".NET Framework 2.0 Service Pack 2"
                    Platform="Desktop" 
                    Version="2.0.2" 
                    Priority="3015">

  <Member>System.String.#Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)</Member>
  <Member>System.String.#Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)</Member>
  <Member>System.AppDomainManager.#CheckSecuritySettings(System.Security.SecurityState)</Member>
  <Type>System.GCNotificationStatus</Type>
  <Member>System.GC.#RegisterForFullGCNotification(System.Int32,System.Int32)</Member>
  <Member>System.GC.#CancelFullGCNotification()</Member>
  <Member>System.GC.#WaitForFullGCApproach()</Member>
  <Member>System.GC.#WaitForFullGCApproach(System.Int32)</Member>
  <Member>System.GC.#WaitForFullGCComplete()</Member>
  <Member>System.GC.#WaitForFullGCComplete(System.Int32)</Member>
  <Member>System.PlatformID.#Xbox</Member>
  <Member>System.PlatformID.#MacOSX</Member>
  <Member>System.Threading.WaitHandle.#WaitOne(System.Int32)</Member>
  <Member>System.Threading.WaitHandle.#WaitOne(System.TimeSpan)</Member>
  <Member>System.Threading.WaitHandle.#WaitAll(System.Threading.WaitHandle[],System.Int32)</Member>
  <Member>System.Threading.WaitHandle.#WaitAll(System.Threading.WaitHandle[],System.TimeSpan)</Member>
  <Member>System.Threading.WaitHandle.#WaitAny(System.Threading.WaitHandle[],System.Int32)</Member>
  <Member>System.Threading.WaitHandle.#WaitAny(System.Threading.WaitHandle[],System.TimeSpan)</Member>
  <Member>System.Reflection.MethodImplAttributes.#NoOptimization</Member>
  <Member>System.Security.Policy.AllMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.ApplicationDirectoryMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.SiteMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.StrongName.#System.Security.Policy.IDelayEvaluatedEvidence.get_IsVerified()</Member>
  <Member>System.Security.Policy.StrongName.#System.Security.Policy.IDelayEvaluatedEvidence.get_WasUsed()</Member>
  <Member>System.Security.Policy.StrongName.#System.Security.Policy.IDelayEvaluatedEvidence.MarkUsed()</Member>
  <Member>System.Security.Policy.StrongNameMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.UrlMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.ZoneMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.GacMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.HashMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Member>System.Security.Policy.PublisherMembershipCondition.#System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence,System.Object&amp;)</Member>
  <Type>System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute</Type>
  <Member>System.Runtime.CompilerServices.InternalsVisibleToAttribute.#get_AllInternalsVisible()</Member>
  <Member>System.Runtime.CompilerServices.InternalsVisibleToAttribute.#set_AllInternalsVisible(System.Boolean)</Member>
  <Member>System.Runtime.CompilerServices.MethodImplOptions.#NoOptimization</Member>
  <Type>System.Security.SecuritySafeCriticalAttribute</Type>
  <Type>System.Security.SecurityState</Type>
  <Type>System.Data.SqlTypes.SqlFileStream</Type>
  <Member>System.Deployment.Application.ApplicationDeployment.#CheckForDetailedUpdate(System.Boolean)</Member>
  <Member>System.Deployment.Application.ApplicationDeployment.#CheckForUpdate(System.Boolean)</Member>
  <Member>System.Deployment.Application.DeploymentServiceCom.#ActivateDeploymentEx(System.String,System.Int32,System.Int32)</Member>
  <Member>System.Deployment.Application.InPlaceHostingManager.#AssertApplicationRequirements(System.Boolean)</Member>
  <Member>System.Deployment.Application.InPlaceHostingManager.#UninstallCustomUXApplication(System.String)</Member>
  <Member>System.Deployment.Application.DownloadApplicationCompletedEventArgs.#get_ShortcutAppId()</Member>
  <Member>System.Web.UI.Design.WebControls.WizardDesigner.#OnComponentChanged(System.Object,System.ComponentModel.Design.ComponentChangedEventArgs)</Member>
  <Type>System.Web.UI.Design.WebControls.DataControlFieldDesigner</Type>
  <Type>System.ComponentModel.DateTimeOffsetConverter</Type>
  <Member>System.Net.ServicePoint.#SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)</Member>
  <Member>System.Net.ServicePointManager.#SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)</Member>
  <Member>System.Web.HttpContext.#RemapHandler(System.Web.IHttpHandler)</Member>
  <Member>System.Web.HttpRuntime.#get_UsingIntegratedPipeline()</Member>
  <Type>System.Web.Caching.CacheItemUpdateCallback</Type>
  <Type>System.Web.Caching.CacheItemUpdateReason</Type>
  <Member>System.Web.Caching.Cache.#Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)</Member>
  <Member>System.Web.Compilation.ClientBuildManagerCallback.#InitializeLifetimeService()</Member>
  <Member>System.Web.Configuration.BrowserCapabilitiesFactoryBase.#ConfigureCustomCapabilities(System.Collections.Specialized.NameValueCollection,System.Web.HttpBrowserCapabilities)</Member>
  <Type>System.Web.Configuration.CustomErrorsRedirectMode</Type>
  <Member>System.Web.Configuration.CustomErrorsSection.#get_RedirectMode()</Member>
  <Member>System.Web.Configuration.CustomErrorsSection.#set_RedirectMode(System.Web.Configuration.CustomErrorsRedirectMode)</Member>
  <Type>System.Web.Configuration.MachineKeyCompatibilityMode</Type>
  <Member>System.Web.Configuration.MachineKeySection.#get_CompatibilityMode()</Member>
  <Member>System.Web.Configuration.MachineKeySection.#set_CompatibilityMode(System.Web.Configuration.MachineKeyCompatibilityMode)</Member>
  <Member>System.Web.Configuration.PagesSection.#get_RenderAllHiddenFieldsAtTopOfForm()</Member>
  <Member>System.Web.Configuration.PagesSection.#set_RenderAllHiddenFieldsAtTopOfForm(System.Boolean)</Member>
  <Member>System.Web.UI.Page.#get_AutoPostBackControl()</Member>
  <Member>System.Web.UI.Page.#set_AutoPostBackControl(System.Web.UI.Control)</Member>
  <Member>System.Web.UI.Page.#get_IsPostBackEventControlRegistered()</Member>
  <Member>System.Web.UI.HtmlControls.HtmlForm.#get_Action()</Member>
  <Member>System.Web.UI.HtmlControls.HtmlForm.#set_Action(System.String)</Member>
  <Type>System.Web.UI.IAutoFieldGenerator</Type>
  <Type>System.Web.UI.IBindableControl</Type>
  <Member>System.Web.UI.WebControls.DataBoundControl.#get_DataSourceObject()</Member>
  <Member>System.Web.UI.WebControls.BoundField.#LoadViewState(System.Object)</Member>
  <Member>System.Web.UI.WebControls.Parameter.#.ctor(System.String,System.Data.DbType)</Member>
  <Member>System.Web.UI.WebControls.Parameter.#.ctor(System.String,System.Data.DbType,System.String)</Member>
  <Member>System.Web.UI.WebControls.Parameter.#get_DbType()</Member>
  <Member>System.Web.UI.WebControls.Parameter.#set_DbType(System.Data.DbType)</Member>
  <Member>System.Web.UI.WebControls.Parameter.#GetDatabaseType()</Member>
  <Member>System.Web.UI.WebControls.Parameter.#ConvertDbTypeToTypeCode(System.Data.DbType)</Member>
  <Member>System.Web.UI.WebControls.Parameter.#ConvertTypeCodeToDbType(System.TypeCode)</Member>
  <Member>System.Web.UI.WebControls.ControlParameter.#.ctor(System.String,System.Data.DbType,System.String,System.String)</Member>
  <Member>System.Web.UI.WebControls.CookieParameter.#.ctor(System.String,System.Data.DbType,System.String)</Member>
  <Type>System.Web.UI.WebControls.DataBoundControlMode</Type>
  <Member>System.Web.UI.WebControls.DetailsView.#get_EnableModelValidation()</Member>
  <Member>System.Web.UI.WebControls.DetailsView.#set_EnableModelValidation(System.Boolean)</Member>
  <Member>System.Web.UI.WebControls.DetailsView.#get_RowsGenerator()</Member>
  <Member>System.Web.UI.WebControls.DetailsView.#set_RowsGenerator(System.Web.UI.IAutoFieldGenerator)</Member>
  <Member>System.Web.UI.WebControls.FormParameter.#.ctor(System.String,System.Data.DbType,System.String)</Member>
  <Member>System.Web.UI.WebControls.FormView.#get_EnableModelValidation()</Member>
  <Member>System.Web.UI.WebControls.FormView.#set_EnableModelValidation(System.Boolean)</Member>
  <Type>System.Web.UI.WebControls.IPersistedSelector</Type>
  <Member>System.Web.UI.WebControls.GridView.#get_ColumnsGenerator()</Member>
  <Member>System.Web.UI.WebControls.GridView.#set_ColumnsGenerator(System.Web.UI.IAutoFieldGenerator)</Member>
  <Member>System.Web.UI.WebControls.GridView.#get_EnableModelValidation()</Member>
  <Member>System.Web.UI.WebControls.GridView.#set_EnableModelValidation(System.Boolean)</Member>
  <Member>System.Web.UI.WebControls.GridView.#get_SelectedPersistedDataKey()</Member>
  <Member>System.Web.UI.WebControls.GridView.#set_SelectedPersistedDataKey(System.Web.UI.WebControls.DataKey)</Member>
  <Member>System.Web.UI.WebControls.GridView.#System.Web.UI.WebControls.IPersistedSelector.get_DataKey()</Member>
  <Member>System.Web.UI.WebControls.GridView.#System.Web.UI.WebControls.IPersistedSelector.set_DataKey(System.Web.UI.WebControls.DataKey)</Member>
  <Member>System.Web.UI.WebControls.ParameterCollection.#Add(System.String,System.Data.DbType,System.String)</Member>
  <Member>System.Web.UI.WebControls.ProfileParameter.#.ctor(System.String,System.Data.DbType,System.String)</Member>
  <Member>System.Web.UI.WebControls.QueryStringParameter.#.ctor(System.String,System.Data.DbType,System.String)</Member>
  <Member>System.Web.UI.WebControls.SessionParameter.#.ctor(System.String,System.Data.DbType,System.String)</Member>
  <Member>System.Windows.Forms.Control.#get_ImeModeBase()</Member>
  <Member>System.Windows.Forms.Control.#set_ImeModeBase(System.Windows.Forms.ImeMode)</Member>
  <Member>System.Windows.Forms.Control.#get_PropagatingImeMode()</Member>
  <Type>System.Windows.Forms.ImeContext</Type>
  <Type>System.Windows.Forms.ImeModeConversion</Type>
  <Member>System.Windows.Forms.TextBoxBase.#get_ImeModeBase()</Member>
  <Member>System.Windows.Forms.TextBoxBase.#set_ImeModeBase(System.Windows.Forms.ImeMode)</Member>
  <Member>System.Windows.Forms.SplitContainer.#OnMove(System.EventArgs)</Member>
  <Member>System.Windows.Forms.WebBrowserBase.#ProcessDialogKey(System.Windows.Forms.Keys)</Member>  
</CompatibilityEntry>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\fxcop\1.36\x86\Repository\Compatibility\Desktop3.0SP2.xml ===
<?xml version="1.0" encoding="utf-8"?>
<CompatibilityEntry Name=".NET Framework 3.0 Service Pack 2"
                    Platform="Desktop" 
                    Version="3.0.2" 
                    Priority="3020">

  <Member>Microsoft.Build.Tasks.Windows.MarkupCompilePass1.#get_SplashScreen()</Member>
  <Member>Microsoft.Build.Tasks.Windows.MarkupCompilePass1.#set_SplashScreen(Microsoft.Build.Framework.ITaskItem[])</Member>
  <Member>System.Windows.Media.Visual.#get_VisualEffect()</Member>
  <Member>System.Windows.Media.Visual.#set_VisualEffect(System.Windows.Media.Effects.Effect)</Member>
  <Member>System.Windows.Media.GeneralTransform.#.ctor()</Member>
  <Member>System.Windows.UIElement.#EffectProperty</Member>
  <Member>System.Windows.UIElement.#UidProperty</Member>
  <Member>System.Windows.UIElement.#get_Effect()</Member>
  <Member>System.Windows.UIElement.#set_Effect(System.Windows.Media.Effects.Effect)</Member>
  <Member>System.Windows.UIElement.#get_Uid()</Member>
  <Member>System.Windows.UIElement.#set_Uid(System.String)</Member>
  <Type>System.Windows.Interop.D3DResourceType</Type>
  <Type>System.Windows.Interop.D3DImage</Type>
  <Type>System.Windows.Media.Effects.Effect</Type>
  <Type>System.Windows.Media.Effects.ShaderEffect</Type>
  <Type>System.Windows.Media.Effects.BlurEffect</Type>
  <Type>System.Windows.Media.Effects.DropShadowEffect</Type>
  <Type>System.Windows.Media.Effects.SamplingMode</Type>
  <Type>System.Windows.Media.Effects.PixelShader</Type>
  <Type>System.Windows.Media.Effects.ShaderRenderMode</Type>
  <Type>System.Windows.Media.Effects.RenderingBias</Type>
  <Member>System.Windows.Media.BitmapScalingMode.#Linear</Member>
  <Member>System.Windows.Media.BitmapScalingMode.#Fant</Member>
  <Member>System.Windows.Media.BitmapScalingMode.#NearestNeighbor</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#AddDirtyRect(System.Windows.Int32Rect)</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#Lock()</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#TryLock(System.Windows.Duration)</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#Unlock()</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32,System.Int32)</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#FreezeCore(System.Boolean)</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#get_BackBuffer()</Member>
  <Member>System.Windows.Media.Imaging.WriteableBitmap.#get_BackBufferStride()</Member>
  <Member>System.Windows.Media.RenderCapability.#IsPixelShaderVersionSupported(System.Int16,System.Int16)</Member>
  <Member>System.Windows.Media.RenderCapability.#get_IsShaderEffectSoftwareRenderingSupported()</Member>
  <Member>System.Windows.Media.VisualTreeHelper.#GetEffect(System.Windows.Media.Visual)</Member>
  <Member>System.Windows.FrameworkElement.#BindingGroupProperty</Member>
  <Member>System.Windows.FrameworkElement.#get_BindingGroup()</Member>
  <Member>System.Windows.FrameworkElement.#set_BindingGroup(System.Windows.Data.BindingGroup)</Member>
  <Member>System.Windows.Controls.ContentControl.#ContentStringFormatProperty</Member>
  <Member>System.Windows.Controls.ContentControl.#get_ContentStringFormat()</Member>
  <Member>System.Windows.Controls.ContentControl.#set_ContentStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.ContentControl.#OnContentStringFormatChanged(System.String,System.String)</Member>
  <Member>System.Windows.Window.#ShowActivatedProperty</Member>
  <Member>System.Windows.Window.#get_ShowActivated()</Member>
  <Member>System.Windows.Window.#set_ShowActivated(System.Boolean)</Member>
  <Member>System.Windows.Data.CollectionView.#get_NewItemPlaceholder()</Member>
  <Member>System.Windows.Controls.ItemsControl.#ItemStringFormatProperty</Member>
  <Member>System.Windows.Controls.ItemsControl.#ItemBindingGroupProperty</Member>
  <Member>System.Windows.Controls.ItemsControl.#AlternationCountProperty</Member>
  <Member>System.Windows.Controls.ItemsControl.#AlternationIndexProperty</Member>
  <Member>System.Windows.Controls.ItemsControl.#get_ItemStringFormat()</Member>
  <Member>System.Windows.Controls.ItemsControl.#set_ItemStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.ItemsControl.#OnItemStringFormatChanged(System.String,System.String)</Member>
  <Member>System.Windows.Controls.ItemsControl.#get_ItemBindingGroup()</Member>
  <Member>System.Windows.Controls.ItemsControl.#set_ItemBindingGroup(System.Windows.Data.BindingGroup)</Member>
  <Member>System.Windows.Controls.ItemsControl.#OnItemBindingGroupChanged(System.Windows.Data.BindingGroup,System.Windows.Data.BindingGroup)</Member>
  <Member>System.Windows.Controls.ItemsControl.#get_AlternationCount()</Member>
  <Member>System.Windows.Controls.ItemsControl.#set_AlternationCount(System.Int32)</Member>
  <Member>System.Windows.Controls.ItemsControl.#OnAlternationCountChanged(System.Int32,System.Int32)</Member>
  <Member>System.Windows.Controls.ItemsControl.#GetAlternationIndex(System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Controls.ItemsControl.#MS.Internal.Controls.IGeneratorHost.get_AlternationCount()</Member>
  <Member>System.Windows.Controls.HeaderedItemsControl.#HeaderStringFormatProperty</Member>
  <Member>System.Windows.Controls.HeaderedItemsControl.#get_HeaderStringFormat()</Member>
  <Member>System.Windows.Controls.HeaderedItemsControl.#set_HeaderStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.HeaderedItemsControl.#OnHeaderStringFormatChanged(System.String,System.String)</Member>
  <Type>System.Windows.Controls.AlternationConverter</Type>
  <Member>System.Windows.Controls.Primitives.Selector.#ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)</Member>
  <Member>System.Windows.Controls.ComboBox.#SelectionBoxItemStringFormatProperty</Member>
  <Member>System.Windows.Controls.ComboBox.#get_SelectionBoxItemStringFormat()</Member>
  <Member>System.Windows.Controls.ContentPresenter.#ContentStringFormatProperty</Member>
  <Member>System.Windows.Controls.ContentPresenter.#get_ContentStringFormat()</Member>
  <Member>System.Windows.Controls.ContentPresenter.#set_ContentStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.ContentPresenter.#OnContentStringFormatChanged(System.String,System.String)</Member>
  <Member>System.Windows.DataTemplate.#get_DataTemplateKey()</Member>
  <Member>System.Windows.Controls.ValidationRule.#.ctor(System.Windows.Controls.ValidationStep,System.Boolean)</Member>
  <Member>System.Windows.Controls.ValidationRule.#get_ValidationStep()</Member>
  <Member>System.Windows.Controls.ValidationRule.#set_ValidationStep(System.Windows.Controls.ValidationStep)</Member>
  <Member>System.Windows.Controls.ValidationRule.#get_ValidatesOnTargetUpdated()</Member>
  <Member>System.Windows.Controls.ValidationRule.#set_ValidatesOnTargetUpdated(System.Boolean)</Member>
  <Member>System.Windows.FrameworkContentElement.#BindingGroupProperty</Member>
  <Member>System.Windows.FrameworkContentElement.#get_BindingGroup()</Member>
  <Member>System.Windows.FrameworkContentElement.#set_BindingGroup(System.Windows.Data.BindingGroup)</Member>
  <Member>System.Windows.Controls.HeaderedContentControl.#HeaderStringFormatProperty</Member>
  <Member>System.Windows.Controls.HeaderedContentControl.#get_HeaderStringFormat()</Member>
  <Member>System.Windows.Controls.HeaderedContentControl.#set_HeaderStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.HeaderedContentControl.#OnHeaderStringFormatChanged(System.String,System.String)</Member>
  <Member>System.Windows.Controls.GridView.#ColumnHeaderStringFormatProperty</Member>
  <Member>System.Windows.Controls.GridView.#get_ColumnHeaderStringFormat()</Member>
  <Member>System.Windows.Controls.GridView.#set_ColumnHeaderStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.GridViewColumn.#HeaderStringFormatProperty</Member>
  <Member>System.Windows.Controls.GridViewColumn.#get_HeaderStringFormat()</Member>
  <Member>System.Windows.Controls.GridViewColumn.#set_HeaderStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.GridViewColumn.#OnHeaderStringFormatChanged(System.String,System.String)</Member>
  <Member>System.Windows.Controls.GridViewHeaderRowPresenter.#ColumnHeaderStringFormatProperty</Member>
  <Member>System.Windows.Controls.GridViewHeaderRowPresenter.#get_ColumnHeaderStringFormat()</Member>
  <Member>System.Windows.Controls.GridViewHeaderRowPresenter.#set_ColumnHeaderStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.GroupStyle.#get_HeaderStringFormat()</Member>
  <Member>System.Windows.Controls.GroupStyle.#set_HeaderStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.GroupStyle.#get_AlternationCount()</Member>
  <Member>System.Windows.Controls.GroupStyle.#set_AlternationCount(System.Int32)</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_NewItemPlaceholderPosition()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.set_NewItemPlaceholderPosition(System.ComponentModel.NewItemPlaceholderPosition)</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_CanAddNew()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.AddNew()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.CommitNew()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.CancelNew()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_IsAddingNew()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_CurrentAddItem()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_CanRemove()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.Remove(System.Object)</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.EditItem(System.Object)</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.CommitEdit()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.CancelEdit()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_CanCancelEdit()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_IsEditingItem()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IEditableCollectionView.get_CurrentEditItem()</Member>
  <Member>System.Windows.Controls.ItemCollection.#System.ComponentModel.IItemProperties.get_ItemProperties()</Member>
  <Type>System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator</Type>
  <Member>System.Windows.Controls.ItemContainerGenerator.#System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator.Recycle(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32)</Member>
  <Member>System.Windows.Controls.PasswordBox.#get_SecurePassword()</Member>
  <Type>System.Windows.Controls.Primitives.MultiSelector</Type>
  <Member>System.Windows.Controls.Primitives.ScrollBar.#DeferScrollToHorizontalOffsetCommand</Member>
  <Member>System.Windows.Controls.Primitives.ScrollBar.#DeferScrollToVerticalOffsetCommand</Member>
  <Member>System.Windows.Controls.ScrollViewer.#ContentVerticalOffsetProperty</Member>
  <Member>System.Windows.Controls.ScrollViewer.#ContentHorizontalOffsetProperty</Member>
  <Member>System.Windows.Controls.ScrollViewer.#IsDeferredScrollingEnabledProperty</Member>
  <Member>System.Windows.Controls.ScrollViewer.#get_ContentVerticalOffset()</Member>
  <Member>System.Windows.Controls.ScrollViewer.#get_ContentHorizontalOffset()</Member>
  <Member>System.Windows.Controls.ScrollViewer.#GetIsDeferredScrollingEnabled(System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Controls.ScrollViewer.#SetIsDeferredScrollingEnabled(System.Windows.DependencyObject,System.Boolean)</Member>
  <Member>System.Windows.Controls.ScrollViewer.#get_IsDeferredScrollingEnabled()</Member>
  <Member>System.Windows.Controls.ScrollViewer.#set_IsDeferredScrollingEnabled(System.Boolean)</Member>
  <Member>System.Windows.Controls.TabControl.#SelectedContentStringFormatProperty</Member>
  <Member>System.Windows.Controls.TabControl.#ContentStringFormatProperty</Member>
  <Member>System.Windows.Controls.TabControl.#get_SelectedContentStringFormat()</Member>
  <Member>System.Windows.Controls.TabControl.#get_ContentStringFormat()</Member>
  <Member>System.Windows.Controls.TabControl.#set_ContentStringFormat(System.String)</Member>
  <Member>System.Windows.Controls.TreeView.#PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#VirtualizationModeProperty</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#GetVirtualizationMode(System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#SetVirtualizationMode(System.Windows.DependencyObject,System.Windows.Controls.VirtualizationMode)</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#OnViewportSizeChanged(System.Windows.Size,System.Windows.Size)</Member>
  <Member>System.Windows.Controls.VirtualizingStackPanel.#OnViewportOffsetChanged(System.Windows.Vector,System.Windows.Vector)</Member>
  <Member>System.Windows.Controls.TreeViewItem.#System.Windows.Controls.VirtualizingStackPanel+IProvideStackingSize.EstimatedContainerSize(System.Boolean)</Member>
  <Member>System.Windows.Controls.TreeViewItem.#System.Windows.Controls.VirtualizingStackPanel+IProvideStackingSize.HeaderSize(System.Boolean)</Member>
  <Member>System.Windows.Controls.TreeViewItem.#MeasureOverride(System.Windows.Size)</Member>
  <Member>System.Windows.Controls.TreeViewItem.#PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)</Member>
  <Member>System.Windows.Controls.Validation.#ValidationAdornerSiteProperty</Member>
  <Member>System.Windows.Controls.Validation.#ValidationAdornerSiteForProperty</Member>
  <Member>System.Windows.Controls.Validation.#GetValidationAdornerSite(System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Controls.Validation.#SetValidationAdornerSite(System.Windows.DependencyObject,System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Controls.Validation.#GetValidationAdornerSiteFor(System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Controls.Validation.#SetValidationAdornerSiteFor(System.Windows.DependencyObject,System.Windows.DependencyObject)</Member>
  <Type>System.Windows.Controls.ValidationStep</Type>
  <Type>System.Windows.Controls.VirtualizationMode</Type>
  <Type>System.Windows.Interop.ActiveXHost</Type>
  <Type>System.Windows.Controls.WebBrowser</Type>
  <Member>System.Windows.Data.BindingBase.#get_StringFormat()</Member>
  <Member>System.Windows.Data.BindingBase.#set_StringFormat(System.String)</Member>
  <Member>System.Windows.Data.BindingBase.#get_TargetNullValue()</Member>
  <Member>System.Windows.Data.BindingBase.#set_TargetNullValue(System.Object)</Member>
  <Member>System.Windows.Data.BindingBase.#ShouldSerializeTargetNullValue()</Member>
  <Member>System.Windows.Data.BindingBase.#get_BindingGroupName()</Member>
  <Member>System.Windows.Data.BindingBase.#set_BindingGroupName(System.String)</Member>
  <Type>System.Windows.Data.BindingGroup</Type>
  <Member>System.Windows.Data.BindingListCollectionView.#get_NewItemPlaceholderPosition()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#set_NewItemPlaceholderPosition(System.ComponentModel.NewItemPlaceholderPosition)</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_CanAddNew()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#AddNew()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#CommitNew()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#CancelNew()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_IsAddingNew()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_CurrentAddItem()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_CanRemove()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#RemoveAt(System.Int32)</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#Remove(System.Object)</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#EditItem(System.Object)</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#CommitEdit()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#CancelEdit()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_CanCancelEdit()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_IsEditingItem()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_CurrentEditItem()</Member>
  <Member>System.Windows.Data.BindingListCollectionView.#get_ItemProperties()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_Filter()</Member>
  <Member>System.Windows.Data.ListCollectionView.#set_Filter(System.Predicate`1&lt;System.Object&gt;)</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_NewItemPlaceholderPosition()</Member>
  <Member>System.Windows.Data.ListCollectionView.#set_NewItemPlaceholderPosition(System.ComponentModel.NewItemPlaceholderPosition)</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_CanAddNew()</Member>
  <Member>System.Windows.Data.ListCollectionView.#AddNew()</Member>
  <Member>System.Windows.Data.ListCollectionView.#CommitNew()</Member>
  <Member>System.Windows.Data.ListCollectionView.#CancelNew()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_IsAddingNew()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_CurrentAddItem()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_CanRemove()</Member>
  <Member>System.Windows.Data.ListCollectionView.#RemoveAt(System.Int32)</Member>
  <Member>System.Windows.Data.ListCollectionView.#Remove(System.Object)</Member>
  <Member>System.Windows.Data.ListCollectionView.#EditItem(System.Object)</Member>
  <Member>System.Windows.Data.ListCollectionView.#CommitEdit()</Member>
  <Member>System.Windows.Data.ListCollectionView.#CancelEdit()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_CanCancelEdit()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_IsEditingItem()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_CurrentEditItem()</Member>
  <Member>System.Windows.Data.ListCollectionView.#get_ItemProperties()</Member>
  <Type>System.Windows.Data.ValueUnavailableException</Type>
  <Member>System.Windows.Documents.Table.#BeginInit()</Member>
  <Member>System.Windows.Documents.Table.#EndInit()</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#get_ItemContainerStyle()</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#set_ItemContainerStyle(System.Windows.Style)</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#get_ItemContainerStyleSelector()</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#set_ItemContainerStyleSelector(System.Windows.Controls.StyleSelector)</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#get_ItemStringFormat()</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#set_ItemStringFormat(System.String)</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#get_AlternationCount()</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#set_AlternationCount(System.Int32)</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#get_ItemBindingGroup()</Member>
  <Member>System.Windows.HierarchicalDataTemplate.#set_ItemBindingGroup(System.Windows.Data.BindingGroup)</Member>
  <Member>System.Windows.Interop.DocObjHost.#MS.Internal.AppModel.IBrowserHostServices.Run(System.String,System.String,MS.Internal.AppModel.MimeType,System.String,System.String,System.Object,System.Object,System.String,System.Boolean,System.Boolean,MS.Internal.AppModel.INativeProgressPage,System.String,System.String,System.String,System.String)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#TargetProperty</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#SetTarget(System.Windows.DependencyObject,System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetTarget(System.Windows.DependencyObject)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Begin()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetCurrentGlobalSpeed()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetCurrentIteration()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetCurrentProgress()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetCurrentState()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetCurrentTime()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#GetIsPaused()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Pause()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Remove()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Resume()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Seek(System.TimeSpan)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#SeekAlignedToLastTick(System.TimeSpan)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#SetSpeedRatio(System.Double)</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#SkipToFill()</Member>
  <Member>System.Windows.Media.Animation.Storyboard.#Stop()</Member>
  <Member>System.Windows.Markup.XamlReader.#Parse(System.String)</Member>
  <Member>System.Windows.Markup.XamlReader.#Parse(System.String,System.Windows.Markup.ParserContext)</Member>
  <Type>System.Printing.PrintingNotSupportedException</Type>
  <Member>System.Runtime.Serialization.CollectionDataContractAttribute.#get_IsReference()</Member>
  <Member>System.Runtime.Serialization.CollectionDataContractAttribute.#set_IsReference(System.Boolean)</Member>
  <Member>System.Runtime.Serialization.DataContractAttribute.#get_IsReference()</Member>
  <Member>System.Runtime.Serialization.DataContractAttribute.#set_IsReference(System.Boolean)</Member>
  <Type>System.Runtime.Serialization.IgnoreDataMemberAttribute</Type>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#get_HttpGetBinding()</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#set_HttpGetBinding(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#get_HttpGetBindingConfiguration()</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#set_HttpGetBindingConfiguration(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#get_HttpsGetBinding()</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#set_HttpsGetBinding(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#get_HttpsGetBindingConfiguration()</Member>
  <Member>System.ServiceModel.Configuration.ServiceMetadataPublishingElement.#set_HttpsGetBindingConfiguration(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#get_HttpHelpPageBinding()</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#set_HttpHelpPageBinding(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#get_HttpHelpPageBindingConfiguration()</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#set_HttpHelpPageBindingConfiguration(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#get_HttpsHelpPageBinding()</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#set_HttpsHelpPageBinding(System.String)</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#get_HttpsHelpPageBindingConfiguration()</Member>
  <Member>System.ServiceModel.Configuration.ServiceDebugElement.#set_HttpsHelpPageBindingConfiguration(System.String)</Member>
  <Member>System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#get_BootstrapMessageProperty()</Member>
  <Member>System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#set_BootstrapMessageProperty(System.ServiceModel.Security.SecurityMessageProperty)</Member>
  <Member>System.ServiceModel.Security.Tokens.SecurityContextSecurityToken.#get_IsCookieMode()</Member>
  <Member>System.ServiceModel.Security.ServiceCredentialsSecurityTokenManager.#CreateSecureConversationTokenAuthenticator(System.ServiceModel.Security.Tokens.RecipientServiceModelSecurityTokenRequirement,System.Boolean,System.IdentityModel.Selectors.SecurityTokenResolver&amp;)</Member>
  <Member>System.ServiceModel.XmlSerializerFormatAttribute.#get_SupportFaults()</Member>
  <Member>System.ServiceModel.XmlSerializerFormatAttribute.#set_SupportFaults(System.Boolean)</Member>
  <Type>System.ServiceModel.FaultImportOptions</Type>
  <Type>System.ServiceModel.Description.MetadataImporterQuotas</Type>
  <Member>System.ServiceModel.Description.WsdlImporter.#.ctor(System.ServiceModel.Description.MetadataSet,System.Collections.Generic.IEnumerable`1&lt;System.ServiceModel.Description.IPolicyImportExtension&gt;,System.Collections.Generic.IEnumerable`1&lt;System.ServiceModel.Description.IWsdlImportExtension&gt;,System.ServiceModel.Description.MetadataImporterQuotas)</Member>
  <Type>System.ServiceModel.Channels.WrappedOptions</Type>
  <Member>System.ServiceModel.Description.ServiceDebugBehavior.#get_HttpHelpPageBinding()</Member>
  <Member>System.ServiceModel.Description.ServiceDebugBehavior.#set_HttpHelpPageBinding(System.ServiceModel.Channels.Binding)</Member>
  <Member>System.ServiceModel.Description.ServiceDebugBehavior.#get_HttpsHelpPageBinding()</Member>
  <Member>System.ServiceModel.Description.ServiceDebugBehavior.#set_HttpsHelpPageBinding(System.ServiceModel.Channels.Binding)</Member>
  <Member>System.ServiceModel.Description.ServiceMetadataBehavior.#get_HttpGetBinding()</Member>
  <Member>System.ServiceModel.Description.ServiceMetadataBehavior.#set_HttpGetBinding(System.ServiceModel.Channels.Binding)</Member>
  <Member>System.ServiceModel.Description.ServiceMetadataBehavior.#get_HttpsGetBinding()</Member>
  <Member>System.ServiceModel.Description.ServiceMetadataBehavior.#set_HttpsGetBinding(System.ServiceModel.Channels.Binding)</Member>
  <Member>System.ComponentModel.DependencyPropertyDescriptor.#get_DesignerCoerceValueCallback()</Member>
  <Member>System.ComponentModel.DependencyPropertyDescriptor.#set_DesignerCoerceValueCallback(System.Windows.CoerceValueCallback)</Member>
  <Member>System.Collections.ObjectModel.ObservableCollection`1.#.ctor(System.Collections.Generic.IEnumerable`1&lt;!0&gt;)</Member>
  <Member>System.Windows.Threading.Dispatcher.#BeginInvoke(System.Delegate,System.Object[])</Member>
  <Member>System.Windows.Threading.Dispatcher.#BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])</Member>
  <Member>System.Windows.Threading.Dispatcher.#Invoke(System.Delegate,System.Object[])</Member>
  <Member>System.Windows.Threading.Dispatcher.#Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])</Member>
  <Member>System.Windows.Threading.Dispatcher.#Invoke(System.Delegate,System.TimeSpan,System.Object[])</Member>
  <Member>System.Windows.Threading.Dispatcher.#Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])</Member>
  <Type>System.ComponentModel.NewItemPlaceholderPosition</Type>
  <Type>System.ComponentModel.IEditableCollectionView</Type>
  <Type>System.ComponentModel.IItemProperties</Type>
  <Type>System.ComponentModel.ItemPropertyInfo</Type>
  <Type>System.Windows.SplashScreen</Type>
  <Type>System.Windows.Markup.AmbientAttribute</Type>
  <Type>System.Windows.Markup.UsableDuringInitializationAttribute</Type>
  <Type>System.Windows.Markup.DictionaryKeyPropertyAttribute</Type>
  <Type>System.Windows.Markup.IReceiveMarkupExtension</Type>
  <Member>System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#.ctor(System.Type,System.Type)</Member>
  <Member>System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#get_ExpressionType()</Member>
  <Type>System.Windows.Markup.NameScopePropertyAttribute</Type>
  <Type>System.Windows.Markup.UidPropertyAttribute</Type>
  <Member>System.Windows.Forms.Integration.ElementHost.#get_CanEnableIme()</Member>
  <Member>System.Windows.Forms.Integration.ElementHost.#get_Focused()</Member>
  <Member>System.Windows.Forms.Integration.ElementHost.#get_ImeModeBase()</Member>
  <Member>System.Windows.Forms.Integration.ElementHost.#set_ImeModeBase(System.Windows.Forms.ImeMode)</Member>
</CompatibilityEntry>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\FSharp\2.0\Runtime\v4.0\FSharp.Core.xml ===
<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Core</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.BuildSettings.Version">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Tail">
 <summary>Gets the tail of the list, which is a list containing all the elements of the list, excluding the first element </summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Length">
 <summary>Gets the number of items contained in the list</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Item(System.Int32)">
 <summary>Gets the element of the list at the given position.</summary>
 <remarks>Lists are represented as linked lists so this is an O(n) operation.</remarks>
 <param name="index">The index.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.IsEmpty">
 <summary>Gets a value indicating if the list contains no entries</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Head">
 <summary>Gets the first element of the list</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpList`1.Empty">
 <summary>Returns an empty list of a particular type</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpList`1.Cons(`0,Microsoft.FSharp.Collections.FSharpList{`0})">
 <summary>Returns a list with <c>head</c> as its first element and <c>tail</c> as its subsequent elements</summary>
 <param name="head">A new head value for the list.</param>
 <param name="tail">The existing list.</param>
 <returns>The list with head appended to the front of tail.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.FSharpList`1">
 <summary>The type of immutable singly-linked lists.</summary>

 <remarks>Use the constructors <c>[]</c> and <c>::</c> (infix) to create values of this type, or
 the notation <c>[1;2;3]</c>. Use the values in the <c>List</c> module to manipulate 
 values of this type, or pattern match against the values directly.</remarks>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpMap`2.Item(`0)">
 <summary>Lookup an element in the map. Raise <c>KeyNotFoundException</c> if no binding
 exists in the map.</summary>
 <param name="key">The input key.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the key is not found.</exception>
 <returns>The value mapped to the key.</returns>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpMap`2.IsEmpty">
 <summary>Returns true if there are no bindings in the map.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpMap`2.Count">
 <summary>The number of bindings in the map.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.TryFind(`0)">
 <summary>Lookup an element in the map, returning a <c>Some</c> value if the element is in the domain 
 of the map and <c>None</c> if not.</summary>
 <param name="key">The input key.</param>
 <returns>The mapped value, or None if the key is not in the map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.Remove(`0)">
 <summary>Removes an element from the domain of the map. No exception is raised if the element is not present.</summary>
 <param name="key">The input key.</param>
 <returns>The resulting map.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.ContainsKey(`0)">
 <summary>Tests if an element is in the domain of the map.</summary>
 <param name="key">The input key.</param>
 <returns>True if the map contains the given key.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.Add(`0,`1)">
 <summary>Returns a new map with the binding added to the given map.</summary>
 <param name="key">The input key.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple`2{`0,`1}})">
 <summary>Builds a map that contains the bindings of the given IEnumerable.</summary>
 <param name="elements">The input sequence of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.FSharpMap`2">
 <summary>Immutable maps. Keys are ordered by F# generic comparison.</summary>
 
 <remarks>Maps based on generic comparison are efficient for small keys. They are not a suitable choice if keys are recursive data structures 
 or if keys require bespoke comparison semantics.

 All members of this class are thread-safe and may be used concurrently from multiple threads.</remarks>
</member>
<member name="T:Microsoft.FSharp.Collections.ResizeArray`1">
 <summary>An abbreviation for the CLI type <c>System.Collections.Generic.List&lt;_&gt;</c></summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Subtraction(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Returns a new set with the elements of the second set removed from the first.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>A set containing elements of the first set that are not contained in the second set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Addition(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Compute the union of the two sets.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>The union of the two input sets.</returns>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.MinimumElement">
 <summary>Returns the lowest element in the set according to the ordering being used for the set.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.MaximumElement">
 <summary>Returns the highest element in the set according to the ordering being used for the set.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.IsEmpty">
 <summary>A useful shortcut for Set.isEmpty. See the Set module for further operations on sets.</summary>
</member>
<member name="P:Microsoft.FSharp.Collections.FSharpSet`1.Count">
 <summary>The number of elements in the set</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.Remove(`0)">
 <summary>A useful shortcut for Set.remove. Note this operation produces a new set
 and does not mutate the original set. The new set will share many storage
 nodes with the original. See the Set module for further operations on sets.</summary>
 <param name="value">The value to remove from the set.</param>
 <returns>The result set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a superset of <c>otherSet</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a subset of <c>otherSet</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first, and at least 
 one element of the first is not in the second.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a proper superset of <c>otherSet</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second, and at least 
 one element of the second is not in the first.</summary>
 <param name="otherSet">The set to test against.</param>
 <returns>True if this set is a proper subset of <c>otherSet</c>.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.Contains(`0)">
 <summary>A useful shortcut for Set.contains. See the Set module for further operations on sets.</summary>
 <param name="value">The value to check.</param>
 <returns>True if the set contains <c>value</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.Add(`0)">
 <summary>A useful shortcut for Set.add. Note this operation produces a new set
 and does not mutate the original set. The new set will share many storage
 nodes with the original. See the Set module for further operations on sets.</summary>
 <param name="value">The value to add to the set.</param>
 <returns>The result set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.FSharpSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
 <summary>Create a set containing elements drawn from the given sequence.</summary>
 <param name="elements">The input sequence.</param>
 <returns>The result set.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.FSharpSet`1">
 <summary>Immutable sets based on binary trees, where comparison is the
 F# structural comparison function, potentially using implementations
 of the IComparable interface on key values.</summary>

 <remarks>See the Set module for further operations on sets.

 All members of this class are thread-safe and may be used concurrently from multiple threads.</remarks>
</member>
<member name="T:Microsoft.FSharp.Collections.list`1">
 <summary>An abbreviation for the type of immutable singly-linked lists. </summary>

 <remarks>Use the constructors <c>[]</c> and <c>::</c> (infix) to create values of this type, or
 the notation <c>[1;2;3]</c>. Use the values in the <c>List</c> module to manipulate 
 values of this type, or pattern match against the values directly.</remarks>
</member>
<member name="T:Microsoft.FSharp.Collections.seq`1">
 <summary>An abbreviation for the CLI type <c>System.Collections.Generic.IEnumerable&lt;_&gt;</c></summary>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)">
 <summary>Fetches an element from a 2D array. You can also use the syntax <c>array.[index1,index2]</c>.</summary>

 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>

 <returns>The value of the array at the given index.</returns>
 <exception cref="System.ArgumentException">Thrown when the indices are negative or exceed the bounds of the array.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)">
 <summary>Sets the value of an element in an array. You can also use the syntax <c>array.[index1,index2] &lt;- value</c>.</summary>

 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="value">The value to set in the array.</param>
 <exception cref="System.ArgumentException">Thrown when the indices are negative or exceed the bounds of the array.</exception> 
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])">
 <summary>Builds a new array whose elements are the same as the input array but
 where a non-zero-based input array generates a corresponding zero-based 
 output array.</summary>

 <param name="array">The input array.</param>

 <returns>The zero-based output array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}}},``0[0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer indices passed to the
 function indicates the element being transformed.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propagated to the output
 array.</remarks>

 <param name="mapping">A function that is applied to transform each element of the array.  The two integers
 provide the index of the element.</param>
 <param name="array">The input array.</param>

 <returns>An array whose elements have been transformed by the given mapping.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>

 <param name="mapping">A function that is applied to transform each item of the input array.</param>
 <param name="array">The input array.</param>

 <returns>An array whose elements have been transformed by the given mapping.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Length2``1(``0[0:,0:])">
 <summary>Returns the length of an array in the second dimension.</summary>

 <param name="array">The input array.</param>

 <returns>The length of the array in the second dimension.</returns>  
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Length1``1(``0[0:,0:])">
 <summary>Returns the length of an array in the first dimension.</summary>

 <param name="array">The input array.</param>

 <returns>The length of the array in the first dimension.</returns>  
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])">
 <summary>Applies the given function to each element of the array.  The integer indices passed to the
 function indicates the index of element.</summary>

 <param name="action">A function to apply to each element of the array with the indices available as an argument.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])">
 <summary>Applies the given function to each element of the array.</summary>

 <param name="action">A function to apply to each element of the array.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreateBased``1(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Creates a based array where the entries are initially Unchecked.defaultof&lt;'T&gt;.</summary>

 <param name="base1">The base for the first dimension of the array.</param>
 <param name="base2">The base for the second dimension of the array.</param>
 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when base1, base2, length1, or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.CreateBased``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)">
 <summary>Creates a based array whose elements are all initially the given value.</summary>

 <param name="base1">The base for the first dimension of the array.</param>
 <param name="base2">The base for the second dimension of the array.</param>
 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="initial">The value to populate the new array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when base1, base2, length1, or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.InitializeBased``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}})">
 <summary>Creates a based array given the dimensions and a generator function to compute the elements.</summary>

 <param name="base1">The base for the first dimension of the array.</param>
 <param name="base2">The base for the second dimension of the array.</param>
 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="initializer">A function to produce elements of the array given the two indices.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when base1, base2, length1, or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreate``1(System.Int32,System.Int32)">
 <summary>Creates an array where the entries are initially Unchecked.defaultof&lt;'T&gt;.</summary>

 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when length1 or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value.</summary>

 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="value">The value to populate the new array.</param>

 <returns>The created array.</returns>
 <exception cref="System.ArgumentException">Thrown when length1 or length2 is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}})">
 <summary>Creates an array given the dimensions and a generator function to compute the elements.</summary>

 <param name="length1">The length of the first dimension of the array.</param>
 <param name="length2">The length of the second dimension of the array.</param>
 <param name="initializer">A function to produce elements of the array given the two indices.</param>

 <returns>The generated array.</returns>
 <exception cref="System.ArgumentException">Thrown when either of the lengths is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Reads a range of elements from the first array and write them into the second.</summary>

 <param name="source">The source array.</param>
 <param name="sourceIndex1">The first-dimension index to begin copying from in the source array.</param>
 <param name="sourceIndex2">The second-dimension index to begin copying from in the source array.</param>
 <param name="target">The target array.</param>
 <param name="targetIndex1">The first-dimension index to begin copying into in the target array.</param>
 <param name="targetIndex2">The second-dimension index to begin copying into in the target array.</param>
 <param name="length1">The number of elements to copy across the first dimension of the arrays.</param>
 <param name="length2">The number of elements to copy across the second dimension of the arrays.</param>
 <exception cref="System.ArgumentException">Thrown when any of the indices are negative or if either of
 the counts are larger than the dimensions of the array allow.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])">
 <summary>Builds a new array whose elements are the same as the input array.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>

 <param name="array">The input array.</param>

 <returns>A copy of the input array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Base2``1(``0[0:,0:])">
 <summary>Fetches the base-index for the second dimension of the array.</summary>

 <param name="array">The input array.</param>

 <returns>The base-index of the second dimension of the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array2DModule.Base1``1(``0[0:,0:])">
 <summary>Fetches the base-index for the first dimension of the array.</summary>

 <param name="array">The input array.</param>

 <returns>The base-index of the first dimension of the array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.Array2DModule">
 <summary>Basic operations on 2-dimensional arrays.</summary>

 <remarks>F# and CLI multi-dimensional arrays are typically zero-based. 
 However, CLI multi-dimensional arrays used in conjunction with external
 libraries (e.g. libraries associated with Visual Basic) be 
 non-zero based, using a potentially different base for each dimension.
 The operations in this module will accept such arrays, and
 the basing on an input array will be propagated to a matching output
 array on the <c>Array2D.map</c> and <c>Array2D.mapi</c> operations.
 Non-zero-based arrays can also be created using <c>Array2D.zeroCreateBased</c>, 
 <c>Array2D.createBased</c> and <c>Array2D.initBased</c>.</remarks>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32)">
 <summary>Creates an array where the entries are initially the "default" value.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)">
 <summary>Sets the value of an element in an array. You can also 
 use the syntax 'array.[index1,index2,index3] &lt;- value'.</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <param name="value">The value to set at the given index.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}}}},``0[0:,0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer indices passed to the
 function indicates the element being transformed.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>
 <param name="mapping">The function to transform the elements at each index in the array.</param>
 <param name="array">The input array.</param>
 <returns>The array created from the transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[0:,0:,0:])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>

 <remarks>For non-zero-based arrays the basing on an input array will be propogated to the output
 array.</remarks>
 <param name="mapping">The function to transform each element of the array.</param>
 <param name="array">The input array.</param>
 <returns>The array created from the transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Length3``1(``0[0:,0:,0:])">
 <summary>Returns the length of an array in the third dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the third dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Length2``1(``0[0:,0:,0:])">
 <summary>Returns the length of an array in the second dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the second dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Length1``1(``0[0:,0:,0:])">
 <summary>Returns the length of an array in the first dimension  </summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the first dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])">
 <summary>Applies the given function to each element of the array. The integer indicies passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to each element of the array.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])">
 <summary>Applies the given function to each element of the array.</summary>
 <param name="action">The function to apply to each element of the array.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
 <summary>Fetches an element from a 3D array. You can also use the syntax 'array.[index1,index2,index3]'</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}}})">
 <summary>Creates an array given the dimensions and a generator function to compute the elements.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="initializer">The function to create an initial value at each index into the array.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="initial">The value of the array elements.</param>
 <returns>The created array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.Array3DModule">
 <summary>Basic operations on rank 3 arrays.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)">
 <summary>Sets the value of an element in an array. You can also 
 use the syntax 'array.[index1,index2,index3,index4] &lt;- value'.</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <param name="index4">The index along the fourth dimension.</param>
 <param name="value">The value to set.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Fetches an element from a 4D array. You can also use the syntax 'array.[index1,index2,index3,index4]'</summary>
 <param name="array">The input array.</param>
 <param name="index1">The index along the first dimension.</param>
 <param name="index2">The index along the second dimension.</param>
 <param name="index3">The index along the third dimension.</param>
 <param name="index4">The index along the fourth dimension.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>Creates an array where the entries are initially the "default" value.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="length4">The length of the fourth dimension.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length4``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the fourth dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the fourth dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length3``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the third dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the third dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length2``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the second dimension.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the second dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Length1``1(``0[0:,0:,0:,0:])">
 <summary>Returns the length of an array in the first dimension  </summary>
 <param name="array">The input array.</param>
 <returns>The length of the array in the first dimension.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0}}}})">
 <summary>Creates an array given the dimensions and a generator function to compute the elements.</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="length4">The length of the fourth dimension.</param>
 <param name="initializer">The function to create an initial value at each index in the array.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value</summary>
 <param name="length1">The length of the first dimension.</param>
 <param name="length2">The length of the second dimension.</param>
 <param name="length3">The length of the third dimension.</param>
 <param name="length4">The length of the fourth dimension.</param>
 <param name="initial">The initial value for each element of the array.</param>
 <returns>The created array.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.Array4DModule">
 <summary>Basic operations on rank 4 arrays. </summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])">
 <summary>Combines three arrays into an array of pairs. The three arrays must have equal lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <param name="array3">The third input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of tupled elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])">
 <summary>Combines the two arrays into an array of pairs. The two arrays must have equal lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of tupled elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple`3{``0,``1,``2}[])">
 <summary>Splits an array of triples into three arrays.</summary>
 <param name="array">The input array.</param>
 <returns>The tuple of three arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple`2{``0,``1}[])">
 <summary>Splits an array of pairs into two arrays.</summary>
 <param name="array">The input array.</param>
 <returns>The two arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the index of the first element in the array
 that satisfies the given predicate.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>The index of the first element that satisfies the predicate, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the first element for which the given function returns <c>true</c>.
 Return <c>None</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>The first element that satisfies the predicate, or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])">
 <summary>Views the given array as a sequence.</summary>
 <param name="array">The input array.</param>
 <returns>The sequence of array elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])">
 <summary>Builds a list from the given array.</summary>
 <param name="array">The input array.</param>
 <returns>The list of array elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the sum of the results generated by applying the function to each element of the array.</summary>
 <param name="projection">The function to transform the array elements into the type to be summed.</param>
 <param name="array">The input array.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])">
 <summary>Returns the sum of the elements in the array.</summary>
 <param name="array">The input array.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])">
 <summary>Sorts the elements of an array by mutating the array in-place, using the given comparison function. 
 Elements are compared using Operators.compare.</summary>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},``0[])">
 <summary>Sorts the elements of an array by mutating the array in-place, using the given comparison function as the order.</summary>
 <param name="comparer">The function to compare pairs of array elements.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Sorts the elements of an array by mutating the array in-place, using the given projection for the keys. 
 Elements are compared using Operators.compare.</summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="projection">The function to transform array elements into the type that is compared.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},``0[])">
 <summary>Sorts the elements of an array, using the given comparison function as the order, returning a new array.</summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="comparer">The function to compare pairs of array elements.</param>
 <param name="array">The input array.</param>
 <returns>The sorted array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Sorts the elements of an array, using the given projection for the keys and returning a new array. 
 Elements are compared using Operators.compare.</summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="projection">The function to transform array elements into the type that is compared.</param>
 <param name="array">The input array.</param>
 <returns>The sorted array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])">
 <summary>Sorts the elements of an array, returning a new array. Elements are compared using Operators.compare. </summary>

 <remarks>This is not a stable sort, i.e. the original order of equal elements is not necessarily preserved. 
 For a stable sort, consider using Seq.sort.</remarks>
 <param name="array">The input array.</param>
 <returns>The sorted array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)">
 <summary>Builds a new array that contains the given subrange specified by
 starting index and length.</summary>
 <param name="array">The input array.</param>
 <param name="startIndex">The index of the first element of the sub array.</param>
 <param name="count">The length of the sub array.</param>
 <returns>The created sub array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)">
 <summary>Sets an element of an array.</summary>
 <param name="array">The input array.</param>
 <param name="index">The input index.</param>
 <param name="value">The input value.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},``0[],``1)">
 <summary>Like <c>foldBack</c>, but return both the intermediary and final results.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="array">The input array.</param>
 <param name="state">The initial state.</param>
 <returns>The array of state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,``0[])">
 <summary>Like <c>fold</c>, but return the intermediary and final results.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="array">The input array.</param>
 <returns>The array of state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])">
 <summary>Returns a new array with the elements in reverse order.</summary>
 <param name="array">The input array.</param>
 <returns>The reversed array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0[])">
 <summary>Applies a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> 
 then computes <c>f i0 (...(f iN-1 iN))</c>.
 Raises ArgumentException if the array has size zero.</summary>
 <param name="reduction">The function to reduce a pair of elements to a single element.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The final result of the reductions.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0[])">
 <summary>Applies a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> 
 then computes <c>f (... (f i0 i1)...) iN</c>.
 Raises ArgumentException if the array has size zero.</summary>
 <param name="reduction">The function to reduce a pair of elements to a single element.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The final result of the redcutions.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,System.Int32},``0[])">
 <summary>Returns an array with all elements permuted according to the
 specified permutation.</summary>
 <param name="indexMap">The function that maps input indices to output indices.</param>
 <param name="array">The input array.</param>
 <returns>The output array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Splits the collection into two collections, containing the 
 elements for which the given predicate returns "true" and "false"
 respectively.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>A pair of arrays. The first containing the elements the predicate evaluated to true,
 and the second containing those evaluated to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new array from the given enumerable object.</summary>
 <param name="source">The input sequence.</param>
 <returns>The array of elements from the sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds an array from the given list.</summary>
 <param name="list">The input list.</param>
 <returns>The array of elements from the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the lowest of all elements of the array, compared via Operators.min on the function result.</summary>

 <remarks>Throws ArgumentException for empty arrays.</remarks>
 <param name="projection">The function to transform the elements into a type supporting comparison.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The minimum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])">
 <summary>Returns the lowest of all elements of the array, compared via Operators.min.</summary>

 <remarks>Throws ArgumentException for empty arrays</remarks>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The minimum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the greatest of all elements of the array, compared via Operators.max on the function result.</summary>

 <remarks>Throws ArgumentException for empty arrays.</remarks>
 <param name="projection">The function to transform the elements into a type supporting comparison.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])">
 <summary>Returns the greatest of all elements of the array, compared via Operators.max on the function result.</summary>

 <remarks>Throws ArgumentException for empty arrays.</remarks>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input array is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``0[])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer index passed to the
 function indicates the index of element being transformed.</summary>
 <param name="mapping">The function to transform elements and their indices.</param>
 <param name="array">The input array.</param>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``0[],``1[])">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise, also passing the index of 
 the elements. The two input arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="mapping">The function to transform pairs of input elements and their indices.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},``0[],``1[])">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise. The two input
 arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="mapping">The function to transform the pairs of the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Builds a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>
 <param name="mapping">The function to transform elements of the array.</param>
 <param name="array">The input array.</param>
 <returns>The array of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])">
 <summary>Returns the length of an array. You can also use property arr.Length.</summary>
 <param name="array">The input array.</param>
 <returns>The length of the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])">
 <summary>Applies the given function to pair of elements drawn from matching indices in two arrays,
 also passing the index of the elements. The two arrays must have the same lengths, 
 otherwise an <c>ArgumentException</c> is raised.</summary>
 <param name="action">The function to apply to each index and pair of elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},``0[])">
 <summary>Applies the given function to each element of the array. The integer passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to each index and element.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])">
 <summary>Applies the given function to pair of elements drawn from matching indices in two arrays. The
 two arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="action">The function to apply.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[])">
 <summary>Applies the given function to each element of the array.</summary>
 <param name="action">The function to apply.</param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])">
 <summary>Returns true if the given array is empty, otherwise false.</summary>
 <param name="array">The input array.</param>
 <returns>True if the array is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)">
 <summary>Creates an array where the entries are initially the default value Unchecked.defaultof&lt;'T&gt;.</summary>
 <param name="count">The length of the array to create.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Creates an array given the dimension and a generator function to compute the elements.</summary>
 <param name="count">The number of elements to initialize.</param>
 <param name="initializer">The function to generate the initial values for each index.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)">
 <summary>Gets an element from an array.</summary>
 <param name="array">The input array.</param>
 <param name="index">The input index.</param>
 <returns>The value of the array at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``2}}},``0[],``1[],``2)">
 <summary>Apply a function to pairs of elements drawn from the two collections, right-to-left, 
 threading an accumulator argument through the computation. The two input
 arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <param name="state">The initial state.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc`2{``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``2,``0[],``1[])">
 <summary>Applies a function to pairs of elements drawn from the two collections, 
 left-to-right, threading an accumulator argument
 through the computation. The two input
 arrays must have the same lengths, otherwise an <c>ArgumentException</c> is
 raised.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},``0[],``1)">
 <summary>Applies a function to each element of the array, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f i0 (...(f iN s))</c></summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="array">The input array.</param>
 <param name="state">The initial state.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,``0[])">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f (... (f s i0)...) iN</c></summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="array">The input array.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},``0[],``1[])">
 <summary>Tests if all corresponding elements of the array satisfy the given predicate pairwise.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns false then the overall result is 
 false and no further elements are tested. Otherwise, if one collection is longer 
 than the other then the <c>ArgumentException</c> exception is raised. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <exception cref="System.ArgumentException">Thrown when the input arrays differ in length.</exception>
 <returns>True if all of the array elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Tests if all elements of the array satisfy the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input collection. If any application 
 returns false then the overall result is false and no further elements are tested. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>True if all of the array elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the index of the first element in the array
 that satisfies the given predicate. Raise <c>KeyNotFoundException</c> if 
 none of the elements satisy the predicate.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if <c>predicate</c>
 never returns true.</exception>
 <returns>The index of the first element in the array that satisfies the given predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns the first element for which the given function returns 'true'.
 Raise <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if <c>predicate</c>
 never returns true.</exception>
 <returns>The first element for which <c>predicate</c> returns true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns "true".</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>An array containing the elements for which the given predicate returns true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},``0[],``1[])">
 <summary>Tests if any pair of corresponding elements of the arrays satisfies the given predicate.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns true then the overall result is 
 true and no further elements are tested. Otherwise, if one collections is longer 
 than the other then the <c>ArgumentException</c> exception is raised. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <returns>True if any result from <c>predicate</c> is true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Tests if any element of the array satisfies the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input array. If any application 
 returns true then the overall result is true and no further elements are tested. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>True if any result from <c>predicate</c> is true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Empty``1">
 <summary>Returns an empty array of the given type.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Applies the given function to each element of the array. Returns
 the array comprised of the results "x" for each element where
 the function returns Some(x)</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="array">The input array.</param>
 <returns>The array of results.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Applies the given function to successive elements, returning the first
 result where function returns <c>Some(x)</c> for some <c>x</c>. If the function 
 never returns <c>Some(x)</c> then <c>KeyNotFoundException</c> is raised.</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="array">The input array.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if every result from
 <c>chooser</c> is <c>None</c>.</exception>
 <returns>The first result.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)">
 <summary>Fills a range of elements of the array with the given value.</summary>
 <param name="target">The target array.</param>
 <param name="targetIndex">The index of the first element to set.</param>
 <param name="count">The number of elements to set.</param>
 <param name="value">The value to set.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Applies the given function to successive elements, returning the first
 result where function returns <c>Some(x)</c> for some <c>x</c>. If the function 
 never returns <c>Some(x)</c> then <c>None</c> is returned.</summary>
 <param name="chooser">The function to transform the array elements into options.</param>
 <param name="array">The input array.</param>
 <returns>The first transformed element that is <c>Some(x)</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)">
 <summary>Creates an array whose elements are all initially the given value.</summary>
 <param name="count">The length of the array to create.</param>
 <param name="value">The value for the elements.</param>
 <returns>The created array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])">
 <summary>Builds a new array that contains the elements of the given array.</summary>
 <param name="array">The input array.</param>
 <returns>A copy of the input array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})">
 <summary>Builds a new array that contains the elements of each of the given sequence of arrays.</summary>
 <param name="arrays">The input sequence of arrays.</param>
 <returns>The concatenation of the sequence of input arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1[]},``0[])">
 <summary>For each element of the array, applies the given function. Concatenates all the results and return the combined array.</summary>
 <param name="mapping">The function to create sub-arrays from the input array elements.</param>
 <param name="array">The input array.</param>
 <returns>The concatenation of the sub-arrays.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
 <summary>Reads a range of elements from the first array and write them into the second.</summary>
 <param name="source">The source array.</param>
 <param name="sourceIndex">The starting index of the source array.</param>
 <param name="target">The target array.</param>
 <param name="targetIndex">The starting index of the target array.</param>
 <param name="count">The number of elements to copy.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Returns the average of the elements generated by applying the function to each element of the array.</summary>
 <param name="projection">The function to transform the array elements before averaging.</param>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when <c>array</c> is empty.</exception>
 <returns>The computed average.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])">
 <summary>Returns the average of the elements in the array.</summary>
 <param name="array">The input array.</param>
 <exception cref="System.ArgumentException">Thrown when <c>array</c> is empty.</exception>
 <returns>The average of the elements in the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])">
 <summary>Builds a new array that contains the elements of the first array followed by the elements of the second array.</summary>
 <param name="array1">The first input array.</param>
 <param name="array2">The second input array.</param>
 <returns>The resulting array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},``0[])">
 <summary>Split the collection into two collections, containing the 
 elements for which the given predicate returns "true" and "false"
 respectively </summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to indicies is not specified.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="array">The input array.</param>
 <returns>'T[] * 'T[]</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Create an array given the dimension and a generator function to compute the elements.</summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to indicies is not specified.</remarks>
 <param name="count"></param>
 <param name="initializer"></param>
 <returns>'T[]</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},``0[])">
 <summary>Apply the given function to each element of the array. The integer passed to the
 function indicates the index of element.</summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to elements of the input array is not specified.</remarks>
 <param name="action"></param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},``0[])">
 <summary>Apply the given function to each element of the array. </summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to elements of the input array is not specified.</remarks>
 <param name="action"></param>
 <param name="array">The input array.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``0[])">
 <summary>Build a new array whose elements are the results of applying the given function
 to each of the elements of the array. The integer index passed to the
 function indicates the index of element being transformed.</summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to elements of the input array is not specified.</remarks>
 <param name="mapping"></param>
 <param name="array">The input array.</param>
 <returns>'U[]</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0[])">
 <summary>Build a new array whose elements are the results of applying the given function
 to each of the elements of the array.</summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to elements of the input array is not specified.</remarks>
 <param name="mapping"></param>
 <param name="array">The input array.</param>
 <returns>'U[]</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.Collect``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1[]},``0[])">
 <summary>For each element of the array, apply the given function. Concatenate all the results and return the combined array.</summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to elements of the input array is not specified.</remarks>
 <param name="mapping"></param>
 <param name="array">The input array.</param>
 <returns>'U[]</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ArrayModule.Parallel.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
 <summary>Apply the given function to each element of the array. Return
 the array comprised of the results "x" for each element where
 the function returns Some(x).</summary>

 <remarks>Performs the operation in parallel using System.Threading.Parallel.For.
 The order in which the given function is applied to elements of the input array is not specified.</remarks>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="array">The input array.</param>
 <returns>'U[]</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.ArrayModule.Parallel">
 <summary>Provides parallel operations on arrays </summary>
</member>
<member name="T:Microsoft.FSharp.Collections.ArrayModule">
 <summary>Basic operations on arrays.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}})">
 <summary>Compare using the given comparer function.</summary>
 <param name="comparer">A function to compare two values.</param>
 <returns>An object implementing IComparer using the supplied comparer.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ComparisonIdentity.Structural``1">
 <summary>Structural comparison.  Compare using Operators.compare.</summary>
</member>
<member name="T:Microsoft.FSharp.Collections.ComparisonIdentity">
 <summary>Common notions of comparison identity used with sorted data structures.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean}})">
 <summary>Hash using the given hashing and equality functions.</summary>
 <param name="hasher">A function to generate a hash code from a value.</param>
 <param name="equality">A function to test equality of two values.</param>
 <returns>An object implementing IEqualityComparer using the supplied functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.HashIdentity.Reference``1">
 <summary>Physical hashing (hash on reference identity of objects, and the contents of value types).  
 Hash using LanguagePrimitives.PhysicalEquality and LanguagePrimitives.PhysicalHash,
 That is, for value types use GetHashCode and Object.Equals (if no other optimization available),
 and for reference types use System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode and 
 reference equality.</summary>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.HashIdentity.Structural``1">
 <summary>Structural hashing.  Hash using Operators.(=) and Operators.hash.</summary>
</member>
<member name="T:Microsoft.FSharp.Collections.HashIdentity">
 <summary>Common notions of value identity used with hash tables.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})">
 <summary>Combines the three lists into a list of triples. The lists must have equal lengths.</summary>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <param name="list3">The third input list.</param>
 <returns>A single list containing triples of matching elements from the input lists.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Combines the two lists into a list of pairs. The two lists must have equal lengths.</summary>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>A single list containing pairs of matching elements from the input lists.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple`3{``0,``1,``2}})">
 <summary>Splits a list of triples into three lists.</summary>
 <param name="list">The input list.</param>
 <returns>Three lists of split elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{``0,``1}})">
 <summary>Splits a list of pairs into two lists.</summary>
 <param name="list">The input list.</param>
 <returns>Two lists of split elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the index of the first element in the list
 that satisfies the given predicate.
 Return <c>None</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>The index of the first element for which the predicate returns true, or None if
 every element evaluates to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the first element for which the given function returns <c>true.</c>.
 Return <c>None</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>The first element for which the predicate returns true, or None if
 every element evaluates to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to successive elements, returning <c>Some(x)</c> the first
 result where function returns <c>Some(x)</c> for some x. If no such element 
 exists then return <c>None</c>.</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="list">The input list.</param>
 <returns>The first resulting value or None.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Views the given list as a sequence.</summary>
 <param name="list">The input list.</param>
 <returns>The sequence of elements in the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds an array from the given list.</summary>
 <param name="list">The input list.</param>
 <returns>The array containing the elements of the list.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the sum of the results generated by applying the function to each element of the list.</summary>
 <param name="projection">The function to transform the list elements into the type to be summed.</param>
 <param name="list">The input list.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the sum of the elements in the list.</summary>
 <param name="list">The input list.</param>
 <returns>The resulting sum.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Sorts the given list using Operators.compare.</summary>

 <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
 <param name="list">The input list.</param>
 <returns>The sorted list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Sorts the given list using keys given by the given projection. Keys are compared using Operators.compare.</summary>

 <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
 <param name="projection">The function to transform the list elements into the type to be compared.</param>
 <param name="list">The input list.</param>
 <returns>The sorted list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Sorts the given list using the given comparison function.</summary>

 <remarks>This is a stable sort, i.e. the original order of equal elements is preserved.</remarks>
 <param name="comparer">The function to compare the list elements.</param>
 <param name="list">The input list.</param>
 <returns>The sorted list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)">
 <summary>Like <c>foldBack</c>, but returns both the intermediary and final results</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="list">The input list.</param>
 <param name="state">The initial state.</param>
 <returns>The list of states.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. Take the second argument, and apply the function to it
 and the first element of the list. Then feed this result into the function along
 with the second element and so on. Returns the list of intermediate results and the final result.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="list">The input list.</param>
 <returns>The list of states.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a new list with the elements in reverse order.</summary>
 <param name="list">The input list.</param>
 <returns>The reversed list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)">
 <summary>Creates a list by calling the given generator on each index.</summary>
 <param name="count">The number of elements to replicate.</param>
 <param name="initial">The value to replicate</param>
 <returns>The generated list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f i0 (...(f iN-1 iN))</c>.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="reduction">The function to reduce two list elements to a single element.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The final reduced value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Apply a function to each element of the collection, threading an accumulator argument
 through the computation. Apply the function to the first two elements of the list.
 Then feed this result into the function along with the third element and so on. 
 Return the final result. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then computes 
 <c>f (... (f i0 i1) i2 ...) iN</c>.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="reduction">The function to reduce two list elements to a single element.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The final reduced value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a list with all elements permuted according to the
 specified permutation.</summary>
 <param name="indexMap">The function to map input indices to output indices.</param>
 <param name="list">The input list.</param>
 <returns>The permutated list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to successive elements, returning the first
 result where function returns <c>Some(x)</c> for some x. If no such
 element exists then raise <c>System.Collections.Generic.KeyNotFoundException</c></summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="list">The input list.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the list is empty.</exception>
 <returns>The first resulting value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Splits the collection into two collections, containing the 
 elements for which the given predicate returns <c>true</c> and <c>false</c>
 respectively.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>A list containing the elements for which the predicate evaluated to false and a list
 containing the elements for which the predicate evaluated to true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new list from the given enumerable object.</summary>
 <param name="source">The input sequence.</param>
 <returns>The list of elements from the sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])">
 <summary>Builds a list from the given array.</summary>
 <param name="array">The input array.</param>
 <returns>The list of elements from the array.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)">
 <summary>Indexes into the list. The first element has index 0.</summary>
 <param name="list">The input list.</param>
 <param name="index">The index to retrieve.</param>
 <returns>The value at the given index.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the lowest of all elements of the list, compared via Operators.min on the function result</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="projection">The function to transform list elements into the type to be compared.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the lowest of all elements of the list, compared via Operators.min.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the greatest of all elements of the list, compared via Operators.max on the function result.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="projection">The function to transform the list elements into the type to be compared.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Return the greatest of all elements of the list, compared via Operators.max.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The maximum element.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Like mapi, but mapping corresponding elements from two lists of equal length.</summary>
 <param name="mapping">The function to transform pairs of elements from the two lists and their index.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The integer index passed to the
 function indicates the index (from 0) of element being transformed.</summary>
 <param name="mapping">The function to transform elements and their indices.</param>
 <param name="list">The input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the three collections simultaneously.</summary>
 <param name="mapping">The function to transform triples of elements from the input lists.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <param name="list3">The third input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding elements of the two collections pairwise.</summary>
 <param name="mapping">The function to transform pairs of elements from the input lists.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection.</summary>
 <param name="mapping">The function to transform elements from the input list.</param>
 <param name="list">The input list.</param>
 <returns>The list of transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the length of the list.</summary>
 <param name="list">The input list.</param>
 <returns>The length of the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Applies the given function to two collections simultaneously. The
 collections must have identical size. The integer passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to a pair of elements from the input lists along with their index.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to each element of the collection. The integer passed to the
 function indicates the index of element.</summary>
 <param name="action">The function to apply to the elements of the list along with their index.</param>
 <param name="list">The input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Applies the given function to two collections simultaneously. The
 collections must have identical size.</summary>
 <param name="action">The function to apply to pairs of elements from the input lists.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to each element of the collection.</summary>
 <param name="action">The function to apply to elements from the input list.</param>
 <param name="list">The input list.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns true if the list contains no elements, false otherwise.</summary>
 <param name="list">The input list.</param>
 <returns>True if the list is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Creates a list by calling the given generator on each index.</summary>
 <param name="length">The length of the list to generate.</param>
 <param name="initializer">The function to generate an element from an index.</param>
 <returns>The list of generated elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the first element of the list.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The first element of the list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Tests if all corresponding elements of the collection satisfy the given predicate pairwise.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns false then the overall result is 
 false and no further elements are tested. Otherwise, if one collection is longer 
 than the other then the <c>System.ArgumentException</c> exception is raised. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <exception cref="System.ArgumentException">Thrown when the input lists differ in length.</exception>
 <returns>True if all of the pairs of elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Tests if all elements of the collection satisfy the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input list. If any application 
 returns false then the overall result is false and no further elements are tested. 
 Otherwise, true is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>True if all of the elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)">
 <summary>Applies a function to corresponding elements of two collections, threading an accumulator argument
 through the computation. The collections must have identical sizes.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> and <c>j0...jN</c>
 then computes <c>f i0 j0 (...(f iN jN s))</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <param name="state">The initial state.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> then 
 computes <c>f i0 (...(f iN s))</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="list">The input list.</param>
 <param name="state">The initial state.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc`2{``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Applies a function to corresponding elements of two collections, threading an accumulator argument
 through the computation. The collections must have identical sizes.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> and <c>j0...jN</c>
 then computes <c>f (... (f s i0 j0)...) iN jN</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. Take the second argument, and apply the function to it
 and the first element of the list. Then feed this result into the function along
 with the second element and so on. Return the final result.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> then 
 computes <c>f (... (f s i0) i1 ...) iN</c>.</summary>
 <param name="folder">The function to update the state given the input elements.</param>
 <param name="state">The initial state.</param>
 <param name="list">The input list.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns "true"</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>A list containing only the elements that satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the index of the first element in the list
 that satisfies the given predicate.
 Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown if the predicate evaluates to false for all the
 elements of the list.</exception>
 <returns>The index of the first element that satisfies the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the first element for which the given function returns <c>true</c>.
 Raises <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if the predicate evaluates to false for
 all the elements of the list.</exception>
 <returns>The first element that satisfies the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
 <summary>Tests if any pair of corresponding elements of the lists satisfies the given predicate.</summary>

 <remarks>The predicate is applied to matching elements in the two collections up to the lesser of the 
 two lengths of the collections. If any application returns true then the overall result is 
 true and no further elements are tested. Otherwise, if one collections is longer 
 than the other then the <c>System.ArgumentException</c> exception is raised. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <exception cref="System.ArgumentException">Thrown when the input lists differ in length.</exception>
 <returns>True if any pair of elements satisfy the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Tests if any element of the list satisfies the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input list. If any application 
 returns true then the overall result is true and no further elements are tested. 
 Otherwise, false is returned.</remarks>
 <param name="predicate">The function to test the input elements.</param>
 <param name="list">The input list.</param>
 <returns>True if any element satisfies the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Empty``1">
 <summary>Returns an empty list of the given type.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})">
 <summary>Returns a new list that contains the elements of each the lists in order.</summary>
 <param name="lists">The input sequence of lists.</param>
 <returns>The resulting concatenated list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>For each element of the list, applies the given function. Concatenates all the results and return the combined list.</summary>
 <param name="mapping">The function to transform each input element into a sublist to be concatenated.</param>
 <param name="list">The input list.</param>
 <returns>The concatenation of the transformed sublists.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Applies the given function to each element of the list. Returns
 the list comprised of the results <c>x</c> for each element where
 the function returns Some(x)</summary>
 <param name="chooser">The function to generate options from the elements.</param>
 <param name="list">The input list.</param>
 <returns>The list comprising the values selected from the chooser function.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the average of the elements generated by applying the function to each element of the list.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="projection">The function to transform the list elements into the type to be averaged.</param>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The resulting average.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns the average of the elements in the list.</summary>

 <remarks>Raises <c>System.ArgumentException</c> if <c>list</c> is empty.</remarks>
 <param name="list">The input list.</param>
 <exception cref="System.ArgumentException">Thrown when the list is empty.</exception>
 <returns>The resulting average.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Returns a new list that contains the elements of the first list
 followed by elements of the second.</summary>
 <param name="list1">The first input list.</param>
 <param name="list2">The second input list.</param>
 <returns>The resulting list.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.ListModule">
 <summary>Basic operations on lists.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns the key of the first mapping in the collection that satisfies the given predicate. 
 Returns 'None' if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>The first key for which the predicate returns true or None if the predicate evaluates to false for each key/value pair.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Evaluates the function on each mapping in the collection. Returns the key for the first mapping
 where the function returns 'true'. Raise <c>KeyNotFoundException</c> if no such element exists.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if the key does not exist in the map.</exception>
 <returns>The first key for which the predicate evaluates true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Lookup an element in the map, returning a <c>Some</c> value if the element is in the domain 
 of the map and <c>None</c> if not.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <returns>The found <c>Some</c> value or <c>None</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Removes an element from the domain of the map. No exception is raised if the element is not present.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Builds two new maps, one containing the bindings for which the given predicate returns 'true',
 and the other the remaining bindings.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>A pair of maps in which the first contains the elements for which the predicate returned true
 and the second containing the elements for which the predicated returned false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Tests if an element is in the domain of the map.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <returns>True if the map contains the key.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The key passed to the
 function indicates the key of element being transformed.</summary>
 <param name="mapping">The function to transform the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The resulting map of keys and transformed values.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns true if the given predicate returns true for all of the
 bindings in the map.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>True if the predicate evaluates to true for all of the bindings in the map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Builds a new map containing only the bindings for which the given predicate returns 'true'.</summary>
 <param name="predicate">The function to test the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The filtered map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns true if the given predicate returns true for one of the
 bindings in the map.</summary>
 <param name="predicate">The function to test the input elements.</param>
 <param name="table">The input map.</param>
 <returns>True if the predicate returns true for one of the key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Applies the given function to each binding in the dictionary</summary>
 <param name="action">The function to apply to each key/value pair.</param>
 <param name="table">The input map.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc`2{``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Folds over the bindings in the map </summary>
 <param name="folder">The function to update the state given the input key/value pairs.</param>
 <param name="state">The initial state.</param>
 <param name="table">The input map.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)">
 <summary>Folds over the bindings in the map.</summary>
 <param name="folder">The function to update the state given the input key/value pairs.</param>
 <param name="table">The input map.</param>
 <param name="state">The initial state.</param>
 <returns>The final state value.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Searches the map looking for the first element where the given function returns a <c>Some</c> value</summary>
 <param name="chooser">The function to generate options from the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The first result.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Searches the map looking for the first element where the given function returns a <c>Some</c> value.</summary>
 <param name="chooser">The function to generate options from the key/value pairs.</param>
 <param name="table">The input map.</param>
 <returns>The first result.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Lookup an element in the map, raising <c>KeyNotFoundException</c> if no binding
 exists in the map.</summary>
 <param name="key">The input key.</param>
 <param name="table">The input map.</param>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when the key does not exist in the map.</exception>
 <returns>The value mapped to the given key.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Empty``2">
 <summary>The empty map.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Is the map empty?</summary>
 <param name="table">The input map.</param>
 <returns>True if the map is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns an array of all key-value pairs in the mapping.
 The array will be ordered by the keys of the map.</summary>
 <param name="table">The input map.</param>
 <returns>The array of key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns a list of all key-value pairs in the mapping.
 The list will be ordered by the keys of the map.</summary>
 <param name="table">The input map.</param>
 <returns>The list of key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Views the collection as an enumerable sequence of pairs.
 The sequence will be ordered by the keys of the map.</summary>
 <param name="table">The input map.</param>
 <returns>The sequence of key/value pairs.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple`2{``0,``1}})">
 <summary>Returns a new map made from the given bindings.</summary>
 <param name="elements">The input sequence of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple`2{``0,``1}[])">
 <summary>Returns a new map made from the given bindings.</summary>
 <param name="elements">The input array of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{``0,``1}})">
 <summary>Returns a new map made from the given bindings.</summary>
 <param name="elements">The input list of key/value pairs.</param>
 <returns>The resulting map.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
 <summary>Returns a new map with the binding added to the given map.</summary>
 <param name="key">The input key.</param>
 <param name="value">The input value.</param>
 <param name="table">The input map.</param>
 <returns>The resulting map.</returns>
</member>
<member name="T:Microsoft.FSharp.Collections.MapModule">
 <summary>Functional programming operators related to the <c>Map&lt;_,_&gt;</c> type.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
 <summary>Combines the three sequences into a list of triples. The sequences need not have equal lengths:
 when one sequence is exhausted any remaining elements in the other
 sequences are ignored.</summary>

 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>
 <param name="source3">The third input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when any of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Combines the two sequences into a list of pairs. The two sequences need not have equal lengths:
 when one sequence is exhausted any remaining elements in the other
 sequence are ignored.</summary>

 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that yields sliding windows of containing elements drawn from the input
 sequence. Each window is returned as a fresh array.</summary>

 <param name="windowSize">The number of elements in each window.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple`2{``1,``0}}},``0)">
 <summary>Returns a sequence that contains the elements generated by the given computation.
 The given initial <c>state</c> argument is passed to the element generator.
 For each IEnumerator elements in the stream are generated on-demand by applying the element
 generator, until a None value is returned by the element generator. Each call to the element
 generator returns a new residual <c>state</c>.</summary>

 <remarks>The stream will be recomputed each time an IEnumerator is requested and iterated for the Seq.

 The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="generator">A function that takes in the current state and returns an option tuple of the next
 element of the sequence and the next state value.</param>
 <param name="state">The initial state value.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that when enumerated returns at most N elements.</summary>

 <param name="count">The maximum number of items to enumerate.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to successive elements, returning the first
 result where the function returns "Some(x)".</summary>

 <param name="chooser">A function that transforms items from the input sequence into options.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the index of the first element in the sequence 
 that satisfies the given predicate. Return <c>None</c> if no such element exists.</summary>

 <param name="predicate">A function that evaluates to a Boolean when given an item in the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first element for which the given function returns <c>true</c>.
 Return <c>None</c> if no such element exists.</summary>

 <param name="predicate">A function that evaluates to a Boolean when given an item in the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a list from the given collection.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds an array from the given collection.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that, when iterated, yields elements of the underlying sequence while the 
 given predicate returns <c>true</c>, and then returns no further elements.</summary>

 <param name="predicate">A function that evaluates to false when no more items should be returned.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first N elements of the sequence.</summary>
 <remarks>Throws <c>InvalidOperationException</c>
 if the count exceeds the number of elements in the sequence. <c>Seq.truncate</c>
 returns as many items as the sequence contains instead of throwing an exception.</remarks>

 <param name="count">The number of items to take.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
 <exception cref="System.InvalidOperationException">Thrown when count exceeds the number of elements
 in the sequence.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the sum of the results generated by applying the function to each element of the sequence.</summary>
 <remarks>The generated elements are summed using the <c>+</c> operator and <c>Zero</c> property associated with the generated type.</remarks>

 <param name="projection">A function to transform items from the input sequence into the type that will be summed.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the sum of the elements in the sequence.</summary>

 <remarks>The elements are summed using the <c>+</c> operator and <c>Zero</c> property associated with the generated type.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a key-generating function to each element of a sequence and yield a sequence ordered
 by keys.  The keys are compared using generic comparison as implemented by <c>Operators.compare</c>.</summary> 
 
 <remarks>This function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.

 This is a stable sort, that is the original order of equal elements is preserved.</remarks>

 <param name="projection">A function to transform items of the input sequence into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Yields a sequence ordered by keys.</summary>
 
 <remarks>This function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.

 This is a stable sort, that is the original order of equal elements is preserved.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that, when iterated, skips elements of the underlying sequence while the 
 given predicate returns <c>true</c>, and then yields the remaining elements of the sequence.</summary>

 <param name="predicate">A function that evaluates an element of the sequence to a boolean value.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that skips N elements of the underlying sequence and then yields the
 remaining elements of the sequence.</summary>

 <param name="count">The number of items to skip.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.InvalidOperationException">Thrown when count exceeds the number of elements
 in the sequence.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)">
 <summary>Returns a sequence that yields one item only.</summary>

 <param name="value">The input item.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
 <summary>Like fold, but computes on-demand and returns the sequence of intermediary and final results.</summary>

 <param name="folder">A function that updates the state with each element from the sequence.</param>
 <param name="state">The initial state.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a function to each element of the sequence, threading an accumulator argument
 through the computation. Begin by applying the function to the first two elements.
 Then feed this result into the function along with the third element and so on.  
 Return the final result.</summary>

 <param name="reduction">A function that takes in the current accumulated result and the next
 element of the sequence to produce the next accumulated result.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new sequence object that delegates to the given sequence object. This ensures 
 the original sequence cannot be rediscovered and mutated by a type cast. For example, 
 if given an array the returned sequence will return the elements of the array, but
 you cannot cast the returned sequence object to an array.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to successive elements, returning the first
 <c>x</c> where the function returns "Some(x)".</summary>

 <param name="chooser">A function to transform each item of the input sequence into an option of the output type.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown when every item of the sequence
 evaluates to <c>None</c> when the given function is applied.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence of each element in the input sequence and its predecessor, with the
 exception of the first element which is only returned as the predecessor of the second element.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Views the given list as a sequence.</summary>

 <param name="source">The input list.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])">
 <summary>Views the given array as a sequence.</summary>

 <param name="source">The input array.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
 <summary>Computes the nth element in the collection.</summary>

 <param name="index">The index of element to retrieve.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the lowest of all elements of the sequence, compared via Operators.min on the function result.</summary>

 <param name="projection">A function to transform items from the input sequence into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the lowest of all elements of the sequence, compared via <c>Operators.min</c>.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the greatest of all elements of the sequence, compared via Operators.max on the function result.</summary>

 <param name="projection">A function to transform items from the input sequence into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the greatest of all elements of the sequence, compared via Operators.max</summary>

 <param name="source">The input sequence.</param>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence is empty.</exception>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection. The integer index passed to the
 function indicates the index (from 0) of element being transformed.</summary>

 <param name="mapping">A function to transform items from the input sequence that also supplies the current index.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to the corresponding pairs of elements from the two sequences. If one input sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</summary>

 <param name="mapping">A function to transform pairs of items from the input sequences.</param>
 <param name="source">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new collection whose elements are the results of applying the given function
 to each of the elements of the collection.  The given function will be applied
 as elements are demanded using the <c>MoveNext</c> method on enumerators retrieved from the
 object.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="mapping">A function to transform items from the input sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the length of the sequence</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Applies the given function to two collections simultaneously. If one sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</summary>

 <param name="action">A function to apply to each pair of elements from the input sequences.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the collection. The integer passed to the
 function indicates the index of element.</summary>

 <param name="action">A function to apply to each element of the sequence that can also access the current index.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the collection.</summary>

 <param name="action">A function to apply to each element of the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Generates a new sequence which, when iterated, will return successive
 elements by calling the given function.  The results of calling the function
 will not be saved, that is the function will be reapplied as necessary to
 regenerate the elements.  The function is passed the index of the item being
 generated.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.
 Iteration can continue up to <c>Int32.MaxValue</c>.</remarks>

 <param name="initializer">A function that generates an item in the sequence from a given index.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,``0})">
 <summary>Generates a new sequence which, when iterated, will return successive
 elements by calling the given function, up to the given count.  The results of calling the function
 will not be saved, that is the function will be reapplied as necessary to
 regenerate the elements.  The function is passed the index of the item being
 generated.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="count">The maximum number of items to generate for the sequence.</param>
 <param name="initializer">A function that generates an item in the sequence from a given index.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentException">Thrown when count is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns true if the sequence contains no elements, false otherwise.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first element of the sequence.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input does not have any elements.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a key-generating function to each element of a sequence and yields a sequence of 
 unique keys. Each unique key has also contains a sequence of all elements that match 
 to this key.</summary>
 
 <remarks>This function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.</remarks>

 <param name="projection">A function that transforms an element of the sequence into a comparable key.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Tests the all pairs of elements drawn from the two sequences satisfy the
 given predicate. If one sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</summary>

 <param name="predicate">A function to test pairs of elements from the input sequences.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Tests if all elements of the sequence satisfy the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input sequence. If any application 
 returns false then the overall result is false and no further elements are tested. 
 Otherwise, true is returned.</remarks>

 <param name="predicate">A function to test an element of the input sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a function to each element of the collection, threading an accumulator argument
 through the computation. If the input function is <c>f</c> and the elements are <c>i0...iN</c> 
 then computes <c>f (... (f s i0)...) iN</c></summary>

 <param name="folder">A function that updates the state with each element from the sequence.</param>
 <param name="state">The initial state.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the index of the first element for which the given function returns <c>true</c>.</summary>

 <param name="predicate">A function to test whether the index of a particular element should be returned.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if no element returns true when
 evaluated by the predicate</exception>
 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the first element for which the given function returns <c>true</c>.</summary>

 <param name="predicate">A function to test whether an item in the sequence should be returned.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.Collections.Generic.KeyNotFoundException">Thrown if no element returns true when
 evaluated by the predicate</exception>
 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns "true".</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.

 Remember sequence is lazy, effects are delayed until it is enumerated.</remarks>

 <param name="predicate">A function to test whether each item in the input sequence should be included in the output.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>    
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
 <summary>Tests if any pair of corresponding elements of the input sequences satisfies the given predicate.</summary>

 <remarks>The predicate is applied to matching elements in the two sequences up to the lesser of the 
 two lengths of the collections. If any application returns true then the overall result is 
 true and no further elements are tested. Otherwise, false is returned. If one sequence is shorter than 
 the other then the remaining elements of the longer sequence are ignored.</remarks>

 <param name="predicate">A function to test each pair of items from the input sequences.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the two input sequences is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>Tests if any element of the sequence satisfies the given predicate.</summary>

 <remarks>The predicate is applied to the elements of the input sequence. If any application 
 returns true then the overall result is true and no further elements are tested. 
 Otherwise, false is returned.</remarks>

 <param name="predicate">A function to test each item of the input sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Empty``1">
 <summary>Creates an empty sequence.</summary>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that contains no duplicate entries according to the 
 generic hash and equality comparisons on the keys returned by the given key-generating function.
 If an element occurs multiple times in the sequence then the later occurrences are discarded.</summary>

 <param name="projection">A function transforming the sequence items into comparable keys.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that contains no duplicate entries according to generic hash and
 equality comparisons on the entries.
 If an element occurs multiple times in the sequence then the later occurrences are discarded.</summary>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})">
 <summary>Returns a sequence that is built from the given delayed specification of a
 sequence.</summary>

 <remarks>The input function is evaluated each time an IEnumerator for the sequence 
 is requested.</remarks>

 <param name="generator">The generating function for the sequence.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies a key-generating function to each element of a sequence and return a sequence yielding unique
 keys and their number of occurrences in the original sequence.</summary>
 
 <remarks>Note that this function returns a sequence that digests the whole initial sequence as soon as 
 that sequence is iterated. As a result this function should not be used with 
 large or infinite sequences. The function makes no assumption on the ordering of the original 
 sequence.</remarks>

 <param name="projection">A function transforming each item of input sequence into a key to be
 compared against the others.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})">
 <summary>Combines the given enumeration-of-enumerations as a single concatenated
 enumeration.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>

 <param name="sources">The input enumeration-of-enumerations.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Compares two sequences using the given comparison function, element by element.
 Returns the first non-zero result from the comparison function.  If the end of a sequence
 is reached it returns a -1 if the first sequence is shorter and a 1 if the second sequence
 is shorter.</summary>

 <param name="comparer">A function that takes an element from each sequence and returns an int.
 If it evaluates to a non-zero value iteration is stopped and that value is returned.</param>
 <param name="source1">The first input sequence.</param>
 <param name="source2">The second input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the input sequences
 is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the sequence and concatenates all the
 results.</summary>

 <remarks>Remember sequence is lazy, effects are delayed until it is enumerated.</remarks>

 <param name="mapping">A function to transform elements of the input sequence into the sequences
 that will then be concatenated.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
 <summary>Applies the given function to each element of the list. Return
 the list comprised of the results "x" for each element where
 the function returns Some(x).</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not
 be accessed concurrently.</remarks>

 <param name="chooser">A function to transform items of type T into options of type U.</param>
 <param name="source">The input sequence of type T.</param>

 <returns>The result sequence.</returns>
 
 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)">
 <summary>Wraps a loosely-typed System.Collections sequence as a typed sequence.</summary>

 <remarks>The use of this function usually requires a type annotation.
 An incorrect type annotation may result in runtime type
 errors.
 Individual IEnumerator values generated from the returned sequence should not be accessed concurrently.</remarks>
 
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns a sequence that corresponds to a cached version of the input sequence.
 This result sequence will have the same elements as the input sequence. The result 
 can be enumerated multiple times. The input sequence will be enumerated at most 
 once and only as far as is necessary.  Caching a sequence is typically useful when repeatedly
 evaluating items in the original sequence is computationally expensive or if
 iterating the sequence causes side-effects that the user does not want to be
 repeated multiple times.

 Enumeration of the result sequence is thread safe in the sense that multiple independent IEnumerator
 values may be used simultaneously from different threads (accesses to 
 the internal lookaside table are thread safe). Each individual IEnumerator
 is not typically thread safe and should not be accessed concurrently.</summary>

 <remarks>Once enumeration of the input sequence has started,
 it's enumerator will be kept live by this object until the enumeration has completed.
 At that point, the enumerator will be disposed. 

 The enumerator may be disposed and underlying cache storage released by 
 converting the returned sequence object to type IDisposable, and calling the Dispose method
 on this object. The sequence object may then be re-enumerated and a fresh enumerator will
 be used.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the average of the results generated by applying the function to each element 
 of the sequence.</summary>

 <remarks>The elements are averaged using the <c>+</c> operator, <c>DivideByInt</c> method and <c>Zero</c> property 
 associated with the generated type.</remarks>

 <param name="projection">A function applied to transform each element of the sequence.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence has zero elements.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Returns the average of the elements in the sequence.</summary>

 <remarks>The elements are averaged using the <c>+</c> operator, <c>DivideByInt</c> method and <c>Zero</c> property 
 associated with the element type.</remarks>

 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when the input sequence is null.</exception>
 <exception cref="System.ArgumentException">Thrown when the input sequence has zero elements.</exception>
</member>
<member name="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
 <summary>Wraps the two given enumerations as a single concatenated
 enumeration.</summary>

 <remarks>The returned sequence may be passed between threads safely. However, 
 individual IEnumerator values generated from the returned sequence should not be accessed
 concurrently.</remarks>

 <param name="source1">The first sequence.</param>
 <param name="source2">The second sequence.</param>

 <returns>The result sequence.</returns>

 <exception cref="System.ArgumentNullException">Thrown when either of the two provided sequences is
 null.</exception>
</member>
<member name="T:Microsoft.FSharp.Collections.SeqModule">
 <summary>Basic operations on IEnumerables.</summary>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new set with the elements of the second set removed from the first.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The set whose elements will be removed from <c>set1</c>.</param>
 <returns>The set with the elements of <c>set2</c> removed from <c>set1</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a new collection from the given enumerable object.</summary>
 <param name="elements">The input sequence.</param>
 <returns>The set containing <c>elements</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns an ordered view of the collection as an enumerable object.</summary>
 <param name="set">The input set.</param>
 <returns>An ordered sequence of the elements of <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Builds an array that contains the elements of the set in order.</summary>
 <param name="set">The input set.</param>
 <returns>An ordered array of the elements of <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])">
 <summary>Builds a set that contains the same elements as the given array.</summary>
 <param name="array">The input array.</param>
 <returns>A set containing the elements of <c>array</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Builds a list that contains the elements of the set in order.</summary>
 <param name="set">The input set.</param>
 <returns>An ordered list of the elements of <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Builds a set that contains the same elements as the given list.</summary>
 <param name="elements">The input list.</param>
 <returns>A set containing the elements form the input list.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns the highest element in the set according to the ordering being used for the set.</summary>
 <param name="set">The input set.</param>
 <returns>The max value from the set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns the lowest element in the set according to the ordering being used for the set.</summary>
 <param name="set">The input set.</param>
 <returns>The min value from the set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new set with the given element removed. No exception is raised if 
 the set doesn't contain the given element.</summary>
 <param name="value">The element to remove.</param>
 <param name="set">The input set.</param>
 <returns>The input set with <c>value</c> removed.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Splits the set into two sets containing the elements for which the given predicate
 returns true and false respectively.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>A pair of sets with the first containing the elements for which <c>predicate</c> returns
 true and the second containing the elements for which <c>predicate</c> returns false.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Applies the given function to each element of the set, in order according
 to the comparison function.</summary>
 <param name="action">The function to apply to each element.</param>
 <param name="set">The input set.</param>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns "true" if the set is empty.</summary>
 <param name="set">The input set.</param>
 <returns>True if <c>set</c> is empty.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})">
 <summary>Computes the union of a sequence of sets.</summary>
 <param name="sets">The sequence of sets to untion.</param>
 <returns>The union of the input sets.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Computes the union of the two sets.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>The union of <c>set1</c> and <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})">
 <summary>Computes the intersection of a sequence of sets. The sequence must be non-empty.</summary>
 <param name="sets">The sequence of sets to intersect.</param>
 <returns>The intersection of the input sets.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Computes the intersection of the two sets.</summary>
 <param name="set1">The first input set.</param>
 <param name="set2">The second input set.</param>
 <returns>The intersection of <c>set1</c> and <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Tests if all elements of the collection satisfy the given predicate.
 If the input function is <c>f</c> and the elements are <c>i0...iN</c> and "j0...jN"
 then computes <c>p i0 &amp;&amp; ... &amp;&amp; p iN</c>.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>True if all elements of <c>set</c> satisfy <c>predicate</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)">
 <summary>Applies the given accumulating function to all the elements of the set.</summary>
 <param name="folder">The accumulating function.</param>
 <param name="set">The input set.</param>
 <param name="state">The initial state.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Applies the given accumulating function to all the elements of the set</summary>
 <param name="folder">The accumulating function.</param>
 <param name="state">The initial state.</param>
 <param name="set">The input set.</param>
 <returns>The final state.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new collection containing the results of applying the
 given function to each element of the input set.</summary>
 <param name="mapping">The function to transform elements of the input set.</param>
 <param name="set">The input set.</param>
 <returns>A set containing the transformed elements.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new collection containing only the elements of the collection
 for which the given predicate returns <c>true</c>.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>The set containing only the elements for which <c>predicate</c> returns true.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Tests if any element of the collection satisfies the given predicate.
 If the input function is <c>predicate</c> and the elements are <c>i0...iN</c> 
 then computes <c>p i0 or ... or p iN</c>.</summary>
 <param name="predicate">The function to test set elements.</param>
 <param name="set">The input set.</param>
 <returns>True if any element of <c>set</c> satisfies <c>predicate</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns the number of elements in the set. Same as <c>size</c>.</summary>
 <param name="set">The input set.</param>
 <returns>The number of elements in the set.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first, and at least 
 one element of the first is not in the second.</summary>
 <param name="set1">The potential superset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a proper superset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the second set are in the first.</summary>
 <param name="set1">The potential superset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a superset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second, and at least 
 one element of the second is not in the first.</summary>
 <param name="set1">The potential subset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a proper subset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if all elements of the first set are in the second</summary>
 <param name="set1">The potential subset.</param>
 <param name="set2">The set to test against.</param>
 <returns>True if <c>set1</c> is a subset of <c>set2</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Evaluates to "true" if the given element is in the given set.</summary>
 <param name="element">The element to test.</param>
 <param name="set">The input set.</param>
 <returns>True if <c>element</c> is in <c>set</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
 <summary>Returns a new set with an element added to the set. No exception is raised if
 the set already contains the given element.</summary>
 <param name="value">The value to add.</param>
 <param name="set">The input set.</param>
 <returns>A new set containing <c>value</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)">
 <summary>The set containing the given element.</summary>
 <param name="value">The value for the set to contain.</param>
 <returns>The set containing <c>value</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Collections.SetModule.Empty``1">
 <summary>The empty set for the type 'T.</summary>
</member>
<member name="T:Microsoft.FSharp.Collections.SetModule">
 <summary>Functional programming operators related to the <c>Set&lt;_&gt;</c> type.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpAsync.DefaultCancellationToken">
 <summary>Gets the default cancellation token for executing asynchronous computations.</summary>
 <returns>The default CancellationToken.</returns>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpAsync.CancellationToken">
 <summary>Creates an asynchronous computation that returns the CancellationToken governing the execution 
 of the computation.</summary>
 <remarks>In <c>async { let! token = Async.CancellationToken ...}</c> token can be used to initiate other 
 asynchronous operations that will cancel cooperatively with this workflow.</remarks>
 <returns>An asynchronous computation capable of retrieving the CancellationToken from a computation
 expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.TryCancelled``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{System.OperationCanceledException,Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that executes <c>computation</c>.
 If this computation is cancelled before it completes then the computation generated by 
 running <c>compensation</c> is executed.</summary>
 <param name="computation">The input asynchronous computation.</param>
 <param name="compensation">The function to be run if the computation is cancelled.</param>
 <returns>An asynchronous computation that runs the compensation if the input computation
 is cancelled.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.SwitchToThreadPool">
 <summary>Creates an asynchronous computation that queues a work item that runs
 its continuation.</summary>
 <returns>A computation that generates a new work item in the thread pool.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.SwitchToNewThread">
 <summary>Creates an asynchronous computation that creates a new thread and runs
 its continuation in that thread.</summary>
 <returns>A computation that will execute on a new thread.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.SwitchToContext(System.Threading.SynchronizationContext)">
 <summary>Creates an asynchronous computation that runs
 its continuation using syncContext.Post. If syncContext is null 
 then the asynchronous computation is equivalent to SwitchToThreadPool().</summary>
 <param name="syncContext">The synchronization context to accept the posted computation.</param>
 <returns>An asynchronous computation that uses the syncContext context to execute.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartWithContinuations``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.OperationCanceledException,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Runs an asynchronous computation, starting immediately on the current operating system
 thread. Call one of the three continuations when the operation completes.</summary>
 <remarks>If no cancellation token is provided then the default cancellation token
 is used.</remarks>
 <param name="computation">The asynchronous computation to execute.</param>
 <param name="continuation">The function called on success.</param>
 <param name="exceptionContinuation">The function called on exception.</param>
 <param name="cancellationContinuation">The function called on cancellation.</param>
 <param name="cancellationToken">The <c>CancellationToken</c> to associate with the computation.
 The default is used if this parameter is not provided.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartImmediate(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Runs an asynchronous computation, starting immediately on the current operating system
 thread.</summary>
 <remarks>If no cancellation token is provided then the default cancellation token is used.</remarks>
 <param name="computation">The asynchronous computation to execute.</param>
 <param name="cancellationToken">The <c>CancellationToken</c> to associate with the computation.
 The default is used if this parameter is not provided.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartChildAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions})">
<summary>
 Creates an asynchronous computation which starts the given computation as a &lt;c&gt;System.Threading.Tasks.Task&lt;/c&gt;
</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartChild``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Starts a child computation within an asynchronous workflow. 
 This allows multiple asynchronous computations to be executed simultaneously.</summary>
 
 <remarks>This method should normally be used as the immediate 
 right-hand-side of a <c>let!</c> binding in an F# asynchronous workflow, that is,
 
        async { ...
                let! completor1 = childComputation1 |> Async.StartChild  
                let! completor2 = childComputation2 |> Async.StartChild  
                ... 
                let! result1 = completor1 
                let! result2 = completor2 
                ... }
 
 When used in this way, each use of <c>StartChild</c> starts an instance of <c>childComputation</c> 
 and returns a completor object representing a computation to wait for the completion of the operation.
 When executed, the completor awaits the completion of <c>childComputation</c>.</remarks>
 <param name="computation">The child computation.</param>
 <param name="millisecondsTimeout">The timeout value in milliseconds.  If one is not provided
 then the default value of -1 corresponding to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>A new computation that waits for the input computation to finish.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.StartAsTask``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
<summary>
 Executes a computation in the thread pool. Returns a &lt;c&gt;System.Threading.Tasks.Task&lt;/c&gt; that will be completed
 in the corresponding state once the computation terminates (produces the result, throws exception or gets canceled)
        
 If no cancellation token is provided then the default cancellation token is used.
</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Start(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Starts the asynchronous computation in the thread pool. Do not await its result.</summary>

 <remarks>If no cancellation token is provided then the default cancellation token is used.</remarks>
 <param name="computation">The computation to run asynchronously.</param>
 <param name="cancellationToken">The cancellation token to be associated with the computation.
 If one is not supplied, the default cancellation token is used.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Sleep(System.Int32)">
 <summary>Creates an asynchronous computation that will sleep for the given time. This is scheduled
 using a System.Threading.Timer object. The operation will not block operating system threads
 for the duration of the wait.</summary>
 <param name="millisecondsDueTime">The number of milliseconds to sleep.</param>
 <returns>An asynchronous computation that will sleep for the given time.</returns>
 <exception cref="System.ArgumentOutOfRangeException">Thrown when the due time is negative
 and not infinite.</exception>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.RunSynchronously``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Runs the asynchronous computation and await its result.</summary>

 <remarks>If an exception occurs in the asynchronous computation then an exception is re-raised by this
 function.
        
 If no cancellation token is provided then the default cancellation token is used.

 The timeout parameter is given in milliseconds.  A value of -1 is equivalent to
 System.Threading.Timeout.Infinite.</remarks>
 <param name="computation">The computation to run.</param>
 <param name="timeout">The amount of time in milliseconds to wait for the result of the
 computation before raising a <c>System.TimeoutException</c>.  If no value is provided
 for timeout then a default of -1 is used to correspond to System.Threading.Timeout.Infinite.</param>
 <param name="cancellationToken">The cancellation token to be associated with the computation.
 If one is not supplied, the default cancellation token is used.</param>
 <returns>The result of the computation.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Parallel``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>Creates an asynchronous computation that executes all the given asynchronous computations, 
 initially queueing each as work items and using a fork/join pattern.</summary>

 <remarks>If all child computations succeed, an array of results is passed to the success continuation.
 
 If any child computation raises an exception, then the overall computation will trigger an 
 exception, and cancel the others. 

 The overall computation will respond to cancellation while executing the child computations.
 If cancelled, the computation will cancel any remaining child computations but will still wait
 for the other child computations to complete.</remarks>
 <param name="computationList">A sequence of distinct computations to be parallelized.</param>
 <returns>A computation that returns an array of values from the sequence of input computations.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.OnCancel(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Generates a scoped, cooperative cancellation handler for use within an asynchronous workflow.</summary>

 <remarks>For example,
     <c>async { use! holder = Async.OnCancel interruption ... }</c> 
 generates an asynchronous computation where, if a cancellation happens any time during 
 the execution of the asynchronous computation in the scope of <c>holder</c>, then action 
 <c>interruption</c> is executed on the thread that is performing the cancellation. This can 
 be used to arrange for a computation to be asynchronously notified that a cancellation 
 has occurred, e.g. by setting a flag, or deregistering a pending I/O action.</remarks>
 <param name="interruption">The function that is executed on the thread performing the
 cancellation.</param>
 <returns>An asynchronous computation that triggers the interruption if it is cancelled
 before being disposed.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Ignore``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Creates an asynchronous computation that runs the given computation and ignores 
 its result.</summary>
 <param name="computation">The input computation.</param>
 <returns>A computation that is equivalent to the input computation, but disregards the result.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.Exception,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{System.OperationCanceledException,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that captures the current
 success, exception and cancellation continuations. The callback must 
 eventually call exactly one of the given continuations.</summary>
 <param name="callback">The function that accepts the current success, exception, and cancellation
 continuations.</param>
 <returns>An asynchronous computation that provides the callback with the current continuations.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`5{``0,``1,``2,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``3},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. This overlaod should be used if the operation is 
 qualified by three arguments. For example, 
     <c>Async.FromBeginEnd(arg1,arg2,arg3,ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="arg1">The first argument for the operation.</param>
 <param name="arg2">The second argument for the operation.</param>
 <param name="arg3">The third argument for the operation.</param>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`4{``0,``1,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``2},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. This overlaod should be used if the operation is 
 qualified by two arguments. For example, 
     <c>Async.FromBeginEnd(arg1,arg2,ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="arg1">The first argument for the operation.</param>
 <param name="arg2">The second argument for the operation.</param>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{``0,System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. This overlaod should be used if the operation is 
 qualified by one argument. For example, 
     <c>Async.FromBeginEnd(place,ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="arg">The argument for the operation.</param>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.FromBeginEnd``1(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`2{System.AsyncCallback,System.Object},System.IAsyncResult},Microsoft.FSharp.Core.FSharpFunc`2{System.IAsyncResult,``0},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation in terms of a Begin/End pair of actions in 
 the style used in CLI APIs. For example, 
     <c>Async.FromBeginEnd(ws.BeginGetWeather,ws.EndGetWeather)</c>
 When the computation is run, <c>beginFunc</c> is executed, with
 a callback which represents the continuation of the computation. 
 When the callback is invoked, the overall result is fetched using <c>endFunc</c>.</summary>

 <remarks>The computation will respond to cancellation while waiting for the completion
 of the operation. If a cancellation occurs, and <c>cancelAction</c> is specified, then it is 
 executed, and the computation continues to wait for the completion of the operation.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to stop immediately, and subsequent invocations of the callback are ignored.</remarks>
 <param name="beginAction">The function initiating a traditional CLI asynchronous operation.</param>
 <param name="endAction">The function completing a traditional CLI asynchronous operation.</param>
 <param name="cancelAction">An optional function to be executed when a cancellation is requested.</param>
 <returns>An asynchronous computation wrapping the given Begin/End functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.Catch``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Creates an asynchronous computation that executes <c>computation</c>.
 If this computation completes successfully then return <c>Choice1Of2</c> with the returned
 value. If this computation raises an exception before it completes then return <c>Choice2Of2</c>
 with the raised exception.</summary>
 <param name="computation">The input computation that returns the type T.</param>
 <returns>A computation that returns a choice of type T or exception.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.CancelDefaultToken">
 <summary>Raises the cancellation condition for the most recent set of asynchronous computations started 
 without any specific CancellationToken. Replaces the global CancellationTokenSource with a new 
 global token source for any asynchronous computations created after this point without any 
 specific CancellationToken.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitWaitHandle(System.Threading.WaitHandle,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Creates an asynchronous computation that will wait on the given WaitHandle.</summary>

 <remarks>The computation returns true if the handle indicated a result within the given timeout.</remarks>
 <param name="waitHandle">The <c>WaitHandle</c> that can be signalled.</param>
 <param name="millisecondsTimeout">The timeout value in milliseconds.  If one is not provided
 then the default value of -1 corresponding to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that waits on the given <c>WaitHandle</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitTask``1(System.Threading.Tasks.Task{``0})">
<summary>
 Return an asynchronous computation that will wait for the given task to complete and return
 its result.
</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitIAsyncResult(System.IAsyncResult,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Creates an asynchronous computation that will wait on the IAsyncResult.</summary>

 <remarks>The computation returns true if the handle indicated a result within the given timeout.</remarks>
 <param name="iar">The IAsyncResult to wait on.</param>
 <param name="millisecondsTimeout">The timeout value in milliseconds.  If one is not provided
 then the default value of -1 corresponding to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that waits on the given <c>IAsyncResult</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AwaitEvent``2(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation that waits for a single invocation of a CLI 
 event by adding a handler to the event. Once the computation completes or is 
 cancelled, the handler is removed from the event.</summary>

 <remarks>The computation will respond to cancellation while waiting for the event. If a 
 cancellation occurs, and <c>cancelAction</c> is specified, then it is executed, and 
 the computation continues to wait for the event.
 
 If <c>cancelAction</c> is not specified, then cancellation causes the computation
 to cancel immediately.</remarks>
 <param name="event">The event to handle once.</param>
 <param name="cancelAction">An optional function to execute instead of cancelling when a
 cancellation is issued.</param>
 <returns>An asynchronous computation that waits for the event to be invoked.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsync.AsBeginEnd``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>Creates three functions that can be used to implement the .NET Asynchronous 
 Programming Model (APM) for a given asynchronous computation.</summary>
 
 <remarks>The functions should normally be published as members with prefix <c>Begin</c>,
 <c>End</c> and <c>Cancel</c>, and can be used within a type definition as follows:
 <c>
   let beginAction,endAction,cancelAction = Async.AsBeginEnd (fun arg -&gt; computation)
   member x.BeginSomeOperation(arg,callback,state:obj) = beginAction(arg,callback,state)
   member x.EndSomeOperation(iar) = endAction(iar)
   member x.CancelSomeOperation(iar) = cancelAction(iar)
 </c>

 If the asynchronous computation takes no arguments, then AsBeginEnd is used as follows:
 <c>
   let beginAction,endAction,cancelAction = Async.AsBeginEnd (fun () -&gt; computation)
   member x.BeginSomeOperation(callback,state:obj) = beginAction((),callback,state)
   member x.EndSomeOperation(iar) = endAction(iar)
   member x.CancelSomeOperation(iar) = cancelAction(iar)
 </c>


 If the asynchronous computation takes two arguments, then AsBeginEnd is used as follows:
 <c>
   let beginAction,endAction,cancelAction = Async.AsBeginEnd (fun arg1 arg2 -&gt; computation)
   member x.BeginSomeOperation(arg1,arg2,callback,state:obj) = beginAction((),callback,state)
   member x.EndSomeOperation(iar) = endAction(iar)
   member x.CancelSomeOperation(iar) = cancelAction(iar)
 </c>

 In each case, the resulting API will be familiar to programmers in other CLI languages and 
 is a useful way to publish asynchronous computations in CLI components.</remarks>
 <param name="computation">A function generating the asynchronous computation to split into the traditional
 .NET Asynchronous Programming Model.</param>
 <returns>A tuple of the begin, end, and cancel members.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsync">
 <summary>This static class holds members for creating and manipulating asynchronous computations.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Zero">
 <summary>Creates an asynchronous computation that just returns <c>()</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of empty <c>else</c> branches in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <returns>An asynchronous computation that returns <c>()</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.While(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Boolean},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that runs <c>computation</c> repeatedly 
 until <c>guard()</c> becomes false.</summary>

 <remarks>A cancellation check is performed whenever the computation is executed.

 The existence of this method permits the use of <c>while</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="guard">The function to determine when to stop executing <c>computation</c>.</param>
 <param name="computation">The function to be executed.  Equivalent to the body
 of a <c>while</c> expression.</param>
 <returns>An asynchronous computation that behaves similarly to a while loop when run.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Using``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>Creates an asynchronous computation that runs <c>binder(resource)</c>. 
 The action <c>resource.Dispose()</c> is executed as this computation yields its result
 or if the asynchronous computation exits by an exception or by cancellation.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>use</c> and <c>use!</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="resource">The resource to be used and disposed.</param>
 <param name="binder">The function that takes the resource and returns an asynchronous
 computation.</param>
 <returns>An asynchronous computation that binds and eventually disposes <c>resource</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.TryWith``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{System.Exception,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>Creates an asynchronous computation that runs <c>computation</c> and returns its result.
 If an exception happens then <c>catchHandler(exn)</c> is called and the resulting computation executed instead.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>try/with</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The input computation.</param>
 <param name="catchHandler">The function to run when <c>computation</c> throws an exception.</param>
 <returns>An asynchronous computation that executes <c>computation</c> and calls <c>catchHandler</c> if an
 exception is thrown.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.TryFinally``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Creates an asynchronous computation that runs <c>computation</c>. The action <c>compensation</c> is executed 
 after <c>computation</c> completes, whether <c>computation</c> exits normally or by an exception. If <c>compensation</c> raises an exception itself
 the original exception is discarded and the new exception becomes the overall result of the computation.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>try/finally</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The input computation.</param>
 <param name="compensation">The action to be run after <c>computation</c> completes or raises an
 exception (including cancellation).</param>
 <returns>An asynchronous computation that executes computation and compensation aftewards or
 when an exception is raised.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.ReturnFrom``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Delegates to the input computation.</summary>

 <remarks>The existence of this method permits the use of <c>return!</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The input computation.</param>
 <returns>The input computation.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Return``1(``0)">
 <summary>Creates an asynchronous computation that returns the result <c>v</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>return</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="value">The value to return from the computation.</param>
 <returns>An asynchronous computation that returns <c>value</c> when executed.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.For``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}})">
 <summary>Creates an asynchronous computation that enumerates the sequence <c>seq</c>
 on demand and runs <c>body</c> for each element.</summary>

 <remarks>A cancellation check is performed on each iteration of the loop.

 The existence of this method permits the use of <c>for</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="sequence">The sequence to enumerate.</param>
 <param name="body">A function to take an item from the sequence and create
 an asynchronous computation.  Can be seen as the body of the <c>for</c> expression.</param>
 <returns>An asynchronous computation that will enumerate the sequence and run <c>body</c>
 for each element.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Delay``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary>Creates an asynchronous computation that runs <c>generator</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.</remarks>
 <param name="generator">The function to run.</param>
 <returns>An asynchronous computation that runs <c>generator</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Combine``1(Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>Creates an asynchronous computation that first runs <c>computation1</c>
 and then runs <c>computation2</c>, returning the result of <c>computation2</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of expression sequencing in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation1">The first part of the sequenced computation.</param>
 <param name="computation2">The second part of the sequenced computation.</param>
 <returns>An asynchronous computation that runs both of the computations sequentially.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.Bind``2(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Control.FSharpAsync{``1}})">
 <summary>Creates an asynchronous computation that runs <c>computation</c>, and when 
 <c>computation</c> generates a result <c>T</c>, runs <c>binder res</c>.</summary>

 <remarks>A cancellation check is performed when the computation is executed.

 The existence of this method permits the use of <c>let!</c> in the 
 <c>async { ... }</c> computation expression syntax.</remarks>
 <param name="computation">The computation to provide an unbound result.</param>
 <param name="binder">The function to bind the result of <c>computation</c>.</param>
 <returns>An asynchronous computation that performs a monadic bind on the result
 of <c>computation</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncBuilder.#ctor">
<summary>
 Generate an object used to build asynchronous computations using F# computation expressions. The value
 &apos;async&apos; is a pre-defined instance of this type.

 A cancellation check is performed when the computation is executed.
</summary>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsyncBuilder">
 <summary>The type of the <c>async</c> operator, used to build workflows for asynchronous computations.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1.Reply(`0)">
 <summary>Sends a reply to a PostAndReply message.</summary>
 <param name="value">The value to send.</param>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsyncReplyChannel`1">
 <summary>A handle to a capability to reply to a PostAndReply message.</summary>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpAsync`1">
 <summary>A compositional asynchronous computation, which, when run, will eventually produce a value 
 of type T, or else raises an exception.</summary> 

 <remarks>Asynchronous computations are normally specified using an F# computation expression.

 When run, asynchronous computations have two modes: as a work item (executing synchronous 
 code), or as a wait item (waiting for an event or I/O completion). 

 When run, asynchronous computations can be governed by CancellationToken. This can usually 
 be specified when the async computation is started. The associated CancellationTokenSource 
 may be used to cancel the asynchronous computation. Asynchronous computations built using 
 computation expressions can check the cancellation condition regularly. Synchronous 
 computations within an asynchronous computation do not automatically check this condition.</remarks> 
</member>
<member name="P:Microsoft.FSharp.Control.FSharpDelegateEvent`1.Publish">
 <summary>Publishes the event as a first class event value.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpDelegateEvent`1.Trigger(System.Object[])">
 <summary>Triggers the event using the given parameters.</summary>
 <param name="args">The parameters for the event.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpDelegateEvent`1.#ctor">
 <summary>Creates an event object suitable for implementing an arbitrary type of delegate.</summary>
 <returns>The event object.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpDelegateEvent`1">
 <summary>Event implementations for an arbitrary type of delegate.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpEvent`1.Publish">
 <summary>Publishes an observation  as a first class value.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`1.Trigger(`0)">
 <summary>Triggers an observation using the given parameters.</summary>
 <param name="arg">The event parameters.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`1.#ctor">
 <summary>Creates an observable object.</summary>
 <returns>The created event.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpEvent`1">
 <summary>Event implementations for the IEvent&lt;_&gt; type.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpEvent`2.Publish">
 <summary>Publishes the event as a first class event value.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`2.Trigger(System.Object,`1)">
 <summary>Triggers the event using the given sender object and parameters. The sender object may be <c>null</c>.</summary>
 <param name="sender">The object triggering the event.</param>
 <param name="args">The parameters for the event.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpEvent`2.#ctor">
 <summary>Creates an event object suitable for delegate types following the standard .NET Framework convention of a first 'sender' argument.</summary>
 <returns>The created event.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpEvent`2">
 <summary>Event implementations for a delegate types following the standard .NET Framework convention of a first 'sender' argument.</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Control.FSharpHandler`1">
 <summary>A delegate type associated with the F# event type <c>IEvent&lt;_&gt;</c></summary>
 <param name="obj">The object that fired the event.</param>
 <param name="args">The event arguments.</param>
</member>
<member name="M:Microsoft.FSharp.Control.IDelegateEvent`1.RemoveHandler(`0)">
 <summary>Remove a listener delegate from an event listener store.</summary>
 <param name="handler">The delegate to be removed from the event listener store.</param>
</member>
<member name="M:Microsoft.FSharp.Control.IDelegateEvent`1.AddHandler(`0)">
 <summary>Connect a handler delegate object to the event. A handler can
 be later removed using RemoveHandler. The listener will
 be invoked when the event is fired.</summary>
 <param name="handler">A delegate to be invoked when the event is fired.</param>
</member>
<member name="T:Microsoft.FSharp.Control.IDelegateEvent`1">
 <summary>First class event values for arbitrary delegate types.</summary>

 <remarks>F# gives special status to member properties compatible with type IDelegateEvent and 
 tagged with the CLIEventAttribute. In this case the F# compiler generates approriate 
 CLI metadata to make the member appear to other CLI languages as a CLI event.</remarks>
</member>
<member name="T:Microsoft.FSharp.Control.IEvent`1">
 <summary>First-class listening points (i.e. objects that permit you to register a callback
 activated when the event is triggered). </summary>
</member>
<member name="T:Microsoft.FSharp.Control.IEvent`2">
 <summary>First class event values for CLI events conforming to CLI Framework standards.</summary>
</member>
<member name="T:Microsoft.FSharp.Control.Lazy`1">
 <summary>The type of delayed computations.</summary>
 
 <remarks>Use the values in the <c>Lazy</c> module to manipulate 
 values of this type, and the notation <c>lazy expr</c> to create values
 of type <see cref="System.Lazy{T}" />.</remarks>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.DefaultTimeout(System.Int32)">
 <summary>Raises a timeout exception if a message not received in this amount of time. By default
 no timeout is used.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.remove_Error(Microsoft.FSharp.Control.FSharpHandler{System.Exception})">
 <summary>Occurs when the execution of the agent results in an exception.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Error">
 <summary>Occurs when the execution of the agent results in an exception.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.DefaultTimeout">
 <summary>Raises a timeout exception if a message not received in this amount of time. By default
 no timeout is used.</summary>
</member>
<member name="P:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.CurrentQueueLength">
 <summary>Returns the number of unprocessed messages in the message queue of the agent.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.add_Error(Microsoft.FSharp.Control.FSharpHandler{System.Exception})">
 <summary>Occurs when the execution of the agent results in an exception.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryScan``1(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Scans for a message by looking through messages in arrival order until <c>scanner</c> 
 returns a Some value. Other messages remain in the queue.</summary>

 <remarks>This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="scanner">The function to return None if the message is to be skipped
 or Some if the message is to be processed and removed from the queue.</param>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that <c>scanner</c> built off the read message.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryReceive(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Waits for a message. This will consume the first message in arrival order.</summary> 

 <remarks>This method is for use within the body of the agent. 

 Returns None if a timeout is given and the timeout is exceeded.

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which
 corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that returns the received message or
 None if the timeout is exceeded.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.TryPostAndReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Like PostAndReply, but returns None if no reply within the timeout period.</summary>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>The reply from the agent or None if the timeout expires.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Start">
 <summary>Starts the agent.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Start(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpMailboxProcessor{`0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Creates and starts an agent. The <c>body</c> function is used to generate the asynchronous 
 computation executed by the agent.</summary>
 <param name="body">The function to produce an asynchronous computation that will be executed
 as the read loop for the MailboxProcessor when Start is called.</param>
 <param name="cancellationToken">An optional cancellation token for the <c>body</c>.
 Defaults to <c>Async.DefaultCancellationToken</c>.</param>
 <returns>The created MailboxProcessor.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Scan``1(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Control.FSharpAsync{``0}}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Scans for a message by looking through messages in arrival order until <c>scanner</c> 
 returns a Some value. Other messages remain in the queue.</summary>

 <remarks>Returns None if a timeout is given and the timeout is exceeded.

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="scanner">The function to return None if the message is to be skipped
 or Some if the message is to be processed and removed from the queue.</param>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that <c>scanner</c> built off the read message.</returns>
 <exception cref="System.TimeoutException">Thrown when the timeout is exceeded.</exception>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Receive(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Waits for a message. This will consume the first message in arrival order.</summary> 

 <remarks>This method is for use within the body of the agent. 

 This method is for use within the body of the agent. For each agent, at most 
 one concurrent reader may be active, so no more than one concurrent call to 
 Receive, TryReceive, Scan and/or TryScan may be active.</remarks>
 <param name="timeout">An optional timeout in milliseconds. Defaults to -1 which corresponds
 to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that returns the received message.</returns>
 <exception cref="System.TimeoutException">Thrown when the timeout is exceeded.</exception>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndTryAsyncReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Like AsyncPostAndReply, but returns None if no reply within the timeout period.</summary>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asynchronous computation that will return the reply or None if the timeout expires.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Posts a message to an agent and await a reply on the channel, synchronously.</summary>

 <remarks>The message is generated by applying <c>buildMessage</c> to a new reply channel 
 to be incorporated into the message. The receiving agent must process this 
 message and invoke the Reply method on this reply channel precisely once.</remarks>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>The reply from the agent.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.PostAndAsyncReply``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpAsyncReplyChannel{``0},`0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Posts a message to an agent and await a reply on the channel, asynchronously.</summary> 

 <remarks>The message is generated by applying <c>buildMessage</c> to a new reply channel 
 to be incorporated into the message. The receiving agent must process this 
 message and invoke the Reply method on this reply channel precisely once.</remarks>
 <param name="buildMessage">The function to incorporate the AsyncReplyChannel into
 the message to be sent.</param>
 <param name="timeout">An optional timeout parameter (in milliseconds) to wait for a reply message.
 Defaults to -1 which corresponds to <c>System.Threading.Timeout.Infinite</c>.</param>
 <returns>An asychronous computation that will wait for the reply from the agent.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.Post(`0)">
 <summary>Posts a message to the message queue of the MailboxProcessor, asynchronously.</summary>
 <param name="message">The message to post.</param>
</member>
<member name="M:Microsoft.FSharp.Control.FSharpMailboxProcessor`1.#ctor(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Control.FSharpMailboxProcessor{`0},Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>Creates an agent. The <c>body</c> function is used to generate the asynchronous 
 computation executed by the agent. This function is not executed until 
 <c>Start</c> is called.</summary>
 <param name="body">The function to produce an asynchronous computation that will be executed
 as the read loop for the MailboxProcessor when Start is called.</param>
 <param name="cancellationToken">An optional cancellation token for the <c>body</c>.
 Defaults to <c>Async.DefaultCancellationToken</c>.</param>
 <returns>The created MailboxProcessor.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.FSharpMailboxProcessor`1">
 <summary>A message-processing agent which executes an asynchronous computation.</summary>

 <remarks>The agent encapsulates a message queue that supports multiple-writers and 
 a single reader agent. Writers send messages to the agent by using the Post 
 method and its variations.

 The agent may wait for messages using the Receive or TryReceive methods or
 scan through all available messages using the Scan or TryScan method.</remarks>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Control.CommonExtensions">
 <summary>A module of extension members providing asynchronous operations for some basic CLI types related to concurrency and I/O.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Pairwise``2(Microsoft.FSharp.Control.IEvent{``0,``1})">
 <summary>Returns a new event that triggers on the second and subsequent triggerings of the input event.
 The Nth triggering of the input event passes the arguments from the N-1th and Nth triggering as
 a pair. The argument passed to the N-1th triggering is held in hidden internal state until the 
 Nth triggering occurs.</summary>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that triggers on pairs of consecutive values passed from the source event.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Add``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.IEvent{``1,``0})">
 <summary>Runs the given function each time the given event is triggered.</summary>
 <param name="callback">The function to call when the event is triggered.</param>
 <param name="sourceEvent">The input event.</param>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Scan``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``0}},``0,Microsoft.FSharp.Control.IEvent{``2,``1})">
 <summary>Returns a new event consisting of the results of applying the given accumulating function
 to successive values triggered on the input event.  An item of internal state
 records the current value of the state parameter.  The internal state is not locked during the
 execution of the accumulation function, so care should be taken that the 
 input IEvent not triggered by multiple threads simultaneously.</summary>
 <param name="collector">The function to update the state with each event value.</param>
 <param name="state">The initial state.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that fires on the updated state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Choose``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Control.IEvent{``2,``0})">
 <summary>Returns a new event which fires on a selection of messages from the original event.
 The selection function takes an original message to an optional new message.</summary>
 <param name="chooser">The function to select and transform event values to pass on.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that fires only when the chooser returns Some.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Split``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},Microsoft.FSharp.Control.IEvent{``3,``0})">
 <summary>Returns a new event that listens to the original event and triggers the 
 first resulting event if the application of the function to the event arguments
 returned a Choice1Of2, and the second event if it returns a Choice2Of2.</summary>
 <param name="splitter">The function to transform event values into one of two types.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>A tuple of events.  The first fires whenever <c>splitter</c> evaluates to Choice1of1 and
 the second fires whenever <c>splitter</c> evaluates to Choice2of2.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})">
 <summary>Returns a new event that listens to the original event and triggers the 
 first resulting event if the application of the predicate to the event arguments
 returned true, and the second event if it returned false.</summary>
 <param name="predicate">The function to determine which output event to trigger.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>A tuple of events.  The first is triggered when the predicate evaluates to true
 and the second when the predicate evaluates to false.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Control.IEvent{``1,``0})">
 <summary>Returns a new event that listens to the original event and triggers the resulting
 event only when the argument to the event passes the given function.</summary>
 <param name="predicate">The function to determine which triggers from the event to propagate.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that only passes values that pass the predicate.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Map``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``0})">
 <summary>Returns a new event that passes values transformed by the given function.</summary>
 <param name="map">The function to transform event values.</param>
 <param name="sourceEvent">The input event.</param>
 <returns>An event that passes the transformed values.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.EventModule.Merge``3(Microsoft.FSharp.Control.IEvent{``0,``1},Microsoft.FSharp.Control.IEvent{``2,``1})">
 <summary>Fires the output event when either of the input events fire.</summary>
 <param name="event1">The first input event.</param>
 <param name="event2">The second input event.</param>
 <returns>An event that fires when either of the input events fire.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.EventModule">

</member>
<member name="T:Microsoft.FSharp.Control.LazyExtensions">
 <summary>Extensions related to Lazy values.</summary>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Pairwise``1(System.IObservable{``0})">
 <summary>Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
 The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as
 a pair. The argument passed to the N-1th triggering is held in hidden internal state until the 
 Nth triggering occurs.</summary>

 <remarks>For each observer, the registered intermediate observing object is not thread safe.
 That is, observations arising from the source must not be triggered concurrently 
 on different threads.</remarks>
 <param name="source">The input Observable.</param>
 <returns>An Observable that triggers on successive pairs of observations from the input Observable.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Subscribe``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
 <summary>Creates an observer which subscribes to the given observable and which calls
 the given function for each observation.</summary>
 <param name="callback">The function to be called on each observation.</param>
 <param name="source">The input Observable.</param>
 <returns>An object that will remove the callback if disposed.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Add``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
 <summary>Creates an observer which permanently subscribes to the given observable and which calls
 the given function for each observation.</summary>
 <param name="callback">The function to be called on each observation.</param>
 <param name="source">The input Observable.</param>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``0}},``0,System.IObservable{``1})">
 <summary>Returns an observable which, for each observer, allocates an item of state
 and applies the given accumulating function to successive values arising from
 the input. The returned object will trigger observations for each computed 
 state value, excluding the initial value. The returned object propagates 
 all errors arising from the source and completes when the source completes.</summary>

 <remarks>For each observer, the registered intermediate observing object is not thread safe.
 That is, observations arising from the source must not be triggered concurrently 
 on different threads.</remarks>
 <param name="collector">The function to update the state with each observation.</param>
 <param name="state">The initial state.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable that triggers on the updated state values.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.IObservable{``0})">
 <summary>Returns an observable which chooses a projection of observations from the source 
 using the given function. The returned object will trigger observations <c>x</c>
 for which the splitter returns <c>Some x</c>. The returned object also propagates 
 all errors arising from the source and completes when the source completes.</summary>
 <param name="chooser">The function that returns Some for observations to be propagated
 and None for observations to ignore.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable that only propagates some of the observations from the source.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Split``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpChoice{``1,``2}},System.IObservable{``0})">
 <summary>Returns two observables which split the observations of the source by the 
 given function. The first will trigger observations <c>x</c> for which the 
 splitter returns <c>Choice1Of2 x</c>. The second will trigger observations 
 <c>y</c> for which the splitter returns <c>Choice2Of2 y</c> The splitter is 
 executed once for each subscribed observer. Both also propagate error 
 observations arising from the source and each completes when the source 
 completes.</summary>
 <param name="splitter">The function that takes an observation an transforms
 it into one of the two output Choice types.</param>
 <param name="source">The input Observable.</param>
 <returns>A tuple of Observables.  The first triggers when <c>splitter</c> returns Choice1of2
 and the second triggers when <c>splitter</c> returns Choice2of2.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.IObservable{``0})">
 <summary>Returns two observables which partition the observations of the source by 
 the given function. The first will trigger observations for those values 
 for which the predicate returns true. The second will trigger observations 
 for those values where the predicate returns false. The predicate is 
 executed once for each subscribed observer. Both also propagate all error 
 observations arising from the source and each completes when the source 
 completes.</summary>
 <param name="predicate">The function to determine which output Observable will trigger
 a particular observation.</param>
 <param name="source">The input Observable.</param>
 <returns>A tuple of Observables.  The first triggers when the predicate returns true, and
 the second triggers when the predicate returns false.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},System.IObservable{``0})">
 <summary>Returns an observable which filters the observations of the source 
 by the given function. The observable will see only those observations
 for which the predicate returns true. The predicate is executed once for 
 each subscribed observer. The returned object also propagates error 
 observations arising from the source and completes when the source completes.</summary>
 <param name="filter">The function to apply to observations to determine if it should
 be kept.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable that filters observations based on <c>filter</c>.</returns>
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.IObservable{``0})">
 <summary>Returns an observable which transforms the observations of the source by the 
 given function. The transformation function is executed once for each 
 subscribed observer. The returned object also propagates error observations 
 arising from the source and completes when the source completes.</summary>
 <param name="mapping">The function applied to observations from the source.</param>
 <param name="source">The input Observable.</param>
 <returns>An Observable of the type specified by <c>mapping</c>.</returns> 
</member>
<member name="M:Microsoft.FSharp.Control.ObservableModule.Merge``1(System.IObservable{``0},System.IObservable{``0})">
 <summary>Returns an observable for the merged observations from the sources. 
 The returned object propagates success and error values arising 
 from either source and completes when both the sources have completed.</summary>

 <remarks>For each observer, the registered intermediate observing object is not 
 thread safe. That is, observations arising from the sources must not 
 be triggered concurrently on different threads.</remarks>
 <param name="source1">The first Observable.</param>
 <param name="source2">The second Observable.</param>
 <returns>An Observable that propagates information from both sources.</returns>
</member>
<member name="T:Microsoft.FSharp.Control.ObservableModule">
 <summary>Basic operations on first class event and other observable objects.</summary>
</member>
<member name="T:Microsoft.FSharp.Control.WebExtensions">
 <summary>A module of extension members providing asynchronous operations for some basic Web operations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AbstractClassAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>AbstractClassAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AbstractClassAttribute">
 <summary>Adding this attribute to class definition makes it abstract, which means it need not
 implement all its methods. Instances of abstract classes may not be constructed directly.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AllowNullLiteralAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>AllowNullLiteralAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AllowNullLiteralAttribute">
 <summary>Adding this attribute to a type lets the 'null' literal be used for the type 
 within F# code. This attribute may only be added to F#-defined class or 
 interface types.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.AutoOpenAttribute.Path">
 <summary>Indicates the namespace or module to be automatically opened when an assembly is referenced
 or an enclosing module opened.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AutoOpenAttribute.#ctor(System.String)">
 <summary>Creates an attribute used to mark a namespace or module path to be 'automatically opened' when an assembly is referenced</summary>
 <param name="path">The namespace or module to be automatically opened when an assembly is referenced
 or an enclosing module opened.</param>
 <returns>AutoOpenAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.AutoOpenAttribute.#ctor">
 <summary>Creates an attribute used to mark a module as 'automatically opened' when the enclosing namespace is opened</summary>
 <returns>AutoOpenAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AutoOpenAttribute">
 <summary>This attribute is used for two purposes. When applied to an assembly, it must be given a string
 argument, and this argument must indicate a valid module or namespace in that assembly. Source
 code files compiled with a reference to this assembly are processed in an environment
 where the given path is automatically oepned.</summary>

 <remarks>When applied to a module within an assembly, then the attribute must not be given any arguments.
 When the enclosing namespace is opened in user source code, the module is also implicitly opened.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.AutoSerializableAttribute.Value">
 <summary>The value of the attribute, indicating whether the type is automatically marked serializable or not</summary>
</member>
<member name="M:Microsoft.FSharp.Core.AutoSerializableAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates whether the type should be serializable by default.</param>
 <returns>AutoSerializableAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.AutoSerializableAttribute">
 <summary>Adding this attribute to a type with value 'false' disables the behaviour where F# makes the
 type Serializable by default.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CLIEventAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>CLIEventAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CLIEventAttribute">
 <summary>Adding this attribute to a property with event type causes it to be compiled with as a CLI
 metadata event, through a syntactic translation to a pair of 'add_EventName' and 
 'remove_EventName' methods.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`2.Choice2Of2">
 <summary>Choice 2 of 2 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`2.Choice1Of2">
 <summary>Choice 1 of 2 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`2">
 <summary>Helper types for active patterns with 2 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3.Choice3Of3">
 <summary>Choice 3 of 3 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3.Choice2Of3">
 <summary>Choice 2 of 3 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3.Choice1Of3">
 <summary>Choice 1 of 3 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`3">
 <summary>Helper types for active patterns with 3 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice4Of4">
 <summary>Choice 4 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice3Of4">
 <summary>Choice 3 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice2Of4">
 <summary>Choice 2 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4.Choice1Of4">
 <summary>Choice 1 of 4 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`4">
 <summary>Helper types for active patterns with 4 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice5Of5">
 <summary>Choice 5 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice4Of5">
 <summary>Choice 4 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice3Of5">
 <summary>Choice 3 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice2Of5">
 <summary>Choice 2 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5.Choice1Of5">
 <summary>Choice 1 of 5 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`5">
 <summary>Helper types for active patterns with 5 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice6Of6">
 <summary>Choice 6 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice5Of6">
 <summary>Choice 5 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice4Of6">
 <summary>Choice 4 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice3Of6">
 <summary>Choice 3 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice2Of6">
 <summary>Choice 2 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6.Choice1Of6">
 <summary>Choice 1 of 6 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`6">
 <summary>Helper types for active patterns with 6 choices.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice7Of7">
 <summary>Choice 7 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice6Of7">
 <summary>Choice 6 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice5Of7">
 <summary>Choice 5 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice4Of7">
 <summary>Choice 4 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice3Of7">
 <summary>Choice 3 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice2Of7">
 <summary>Choice 2 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7.Choice1Of7">
 <summary>Choice 1 of 7 choices</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpChoice`7">
 <summary>Helper types for active patterns with 7 choices.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ClassAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ClassAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ClassAttribute">
 <summary>Adding this attribute to a type causes it to be represented using a CLI class.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ComparisonConditionalOnAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ComparisonConditionalOnAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ComparisonConditionalOnAttribute">
 <summary>This attribute is used to indicate a generic container type satisfies the F# 'comparison' 
 constraint only if a generic argument also satisfies this constraint. For example, adding 
 this attribute to parameter 'T on a type definition C&lt;'T&gt; means that a type C&lt;X&gt; only supports 
 comparison if the type X also supports comparison and all other conditions for C&lt;X&gt; to support 
 comparison are also met. The type C&lt;'T&gt; can still be used with other type arguments, but a type such 
 as C&lt;(int -> int)&gt; will not support comparison because the type (int -> int) is an F# function type 
 and does not support comparison.</summary>

 <remarks>This attribute will be ignored if it is used on the generic parameters of functions or methods.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute.Counts">
 <summary>Indicates the number of arguments in each argument group </summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute.#ctor(System.Int32[])">
 <summary>Creates an instance of the attribute</summary>
 <param name="counts">Indicates the number of arguments in each argument group.</param>
 <returns>CompilationArgumentCountsAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute">
 <summary>This attribute is generated automatically by the F# compiler to tag functions and members 
 that accept a partial application of some of their arguments and return a residual function</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationMappingAttribute.VariantNumber">
 <summary>Indicates the variant number of the entity, if any, in a linear sequence of elements with F# source code</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationMappingAttribute.SourceConstructFlags">
 <summary>Indicates the relationship between the compiled entity and F# source code</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationMappingAttribute.SequenceNumber">
 <summary>Indicates the sequence number of the entity, if any, in a linear sequence of elements with F# source code</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationMappingAttribute.#ctor(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32,System.Int32)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceConstructFlags">Indicates the type of source construct.</param>
 <returns>CompilationMappingAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationMappingAttribute.#ctor(Microsoft.FSharp.Core.SourceConstructFlags,System.Int32)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceConstructFlags">Indicates the type of source construct.</param>
 <returns>CompilationMappingAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationMappingAttribute.#ctor(Microsoft.FSharp.Core.SourceConstructFlags)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceConstructFlags">Indicates the type of source construct.</param>
 <returns>CompilationMappingAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationMappingAttribute">
 <summary>This attribute is inserted automatically by the F# compiler to tag types 
 and methods in the generated CLI code with flags indicating the correspondence 
 with original source constructs. It is used by the functions in the 
 Microsoft.FSharp.Reflection namespace to reverse-map compiled constructs to 
 their original forms. It is not intended for use from user code.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationRepresentationAttribute.Flags">
 <summary>Indicates one or more adjustments to the compiled representation of an F# type or member</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationRepresentationAttribute.#ctor(Microsoft.FSharp.Core.CompilationRepresentationFlags)">
 <summary>Creates an instance of the attribute</summary>
 <param name="flags">Indicates adjustments to the compiled representation of the type or member.</param>
 <returns>CompilationRepresentationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute">
 <summary>This attribute is used to adjust the runtime representation for a type. 
 For example, it may be used to note that the <c>null</c> representation
 may be used for a type. This affects how some constructs are compiled.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.Event">
 <summary>Compile a property as a CLI event.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.UseNullAsTrueValue">
 <summary>Permit the use of <c>null</c> as a representation for nullary discriminators in a discriminated union.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.ModuleSuffix">
 <summary>append 'Module' to the end of a module whose name clashes with a type name in the same namespace.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.Instance">
 <summary>Compile a member as 'instance' even if <c>null</c> is used as a representation for this type.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.Static">
 <summary>Compile an instance member as 'static' .</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.CompilationRepresentationFlags.None">
 <summary>No special compilation representation.</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.CompilationRepresentationFlags">
 <summary>Indicates one or more adjustments to the compiled representation of an F# type or member.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilationSourceNameAttribute.SourceName">
 <summary>Indicates the name of the entity in F# source code</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilationSourceNameAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="sourceName">The name of the method in source.</param>
 <returns>CompilationSourceNameAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute">
 <summary>This attribute is inserted automatically by the F# compiler to tag 
 methods which are given the 'CompiledName' attribute. It is not intended 
 for use from user code.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompiledNameAttribute.CompiledName">
 <summary>The name of the value as it appears in compiled code</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompiledNameAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="compiledName">The name to use in compiled code.</param>
 <returns>CompiledNameAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompiledNameAttribute">
 <summary>Adding this attribute to a value or function definition in an F# module changes the name used
 for the value in compiled CLI code.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsHidden(System.Boolean)">
 <summary>Indicates if the construct should always be hidden in an editing environment.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsError(System.Boolean)">
 <summary>Indicates if the message should indicate a compiler error. Error numbers less than
 10000 are considered reserved for use by the F# compiler and libraries.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.MessageNumber">
 <summary>Indicates the number associated with the message.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.Message">
 <summary>Indicates the warning message to be emitted when F# source code uses this construct</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsHidden">
 <summary>Indicates if the construct should always be hidden in an editing environment.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerMessageAttribute.IsError">
 <summary>Indicates if the message should indicate a compiler error. Error numbers less than
 10000 are considered reserved for use by the F# compiler and libraries.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerMessageAttribute.#ctor(System.String,System.Int32)">
 <summary>Creates an instance of the attribute.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.CompilerMessageAttribute">
 <summary>Indicates that a message should be emitted when F# source code uses this construct.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CustomComparisonAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>CustomComparisonAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CustomComparisonAttribute">
 <summary>Adding this attribute to a type indicates it is a type with a user-defined implementation of comparison.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CustomEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>CustomEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CustomEqualityAttribute">
 <summary>Adding this attribute to a type indicates it is a type with a user-defined implementation of equality.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.DefaultAugmentationAttribute.Value">
 <summary>The value of the attribute, indicating whether the type has a default augmentation or not</summary>
</member>
<member name="M:Microsoft.FSharp.Core.DefaultAugmentationAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates whether to generate helper members on the CLI class representing a discriminated
 union.</param>
 <returns>DefaultAugmentationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.DefaultAugmentationAttribute">
 <summary>Adding this attribute to a discriminated union with value false
 turns off the generation of standard helper member tester, constructor 
 and accessor members for the generated CLI class for that type.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.DefaultValueAttribute.Check">
 <summary>Indicates if a constraint is asserted that the field type supports 'null'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.DefaultValueAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="check">Indicates whether to assert that the field type supports <c>null</c>.</param>
 <returns>DefaultValueAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.DefaultValueAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>DefaultValueAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.DefaultValueAttribute">
 <summary>Adding this attribute to a field declaration means that the field is 
 not initialized. During type checking a constraint is asserted that the field type supports 'null'. 
 If the 'check' value is false then the constraint is not asserted. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.EntryPointAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>EntryPointAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.EntryPointAttribute">
 <summary>Adding this attribute to a function indicates it is the entrypoint for an application.
 If this absent is not speficied for an EXE then the initialization implicit in the
 module bindings in the last file in the compilation sequence are used as the entrypoint.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.EqualityConditionalOnAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>EqualityConditionalOnAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.EqualityConditionalOnAttribute">
 <summary>This attribute is used to indicate a generic container type satisfies the F# 'equality' 
 constraint only if a generic argument also satisfies this constraint. For example, adding 
 this attribute to parameter 'T on a type definition C&lt;'T&gt; means that a type C&lt;X&gt; only supports 
 equality if the type X also supports equality and all other conditions for C&lt;X&gt; to support 
 equality are also met. The type C&lt;'T&gt; can still be used with other type arguments, but a type such 
 as C&lt;(int -> int)&gt; will not support equality because the type (int -> int) is an F# function type 
 and does not support equality.</summary>

 <remarks>This attribute will be ignored if it is used on the generic parameters of functions or methods.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.ExperimentalAttribute.Message">
 <summary>Indicates the warning message to be emitted when F# source code uses this construct</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExperimentalAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="message">The warning message to be emitted when code uses this construct.</param>
 <returns>ExperimentalAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ExperimentalAttribute">
 <summary>This attribute is used to tag values that are part of an experimental library
 feature.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.op_Implicit(System.Converter{`0,`1})">
 <summary>Convert an value of type <c>System.Converter</c> to a F# first class function value </summary>
 <param name="converter">The input System.Converter.</param>
 <returns>An F# function of the same type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.op_Implicit(Microsoft.FSharp.Core.FSharpFunc`2{`0,`1})">
 <summary>Convert an F# first class function value to a value of type <c>System.Converter</c></summary>
 <param name="func">The input function.</param>
 <returns>A System.Converter of the function type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.ToConverter(Microsoft.FSharp.Core.FSharpFunc`2{`0,`1})">
 <summary>Convert an F# first class function value to a value of type <c>System.Converter</c></summary>
 <param name="func">The input function.</param>
 <returns>System.Converter&lt;'T,'U&gt;</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``1(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,``0}},`0,`1)">
 <summary>Invoke an F# first class function value with two curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``2(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}}},`0,`1,``0)">
 <summary>Invoke an F# first class function value with three curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``3(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}}}},`0,`1,``0,``1)">
 <summary>Invoke an F# first class function value with four curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.InvokeFast``4(Microsoft.FSharp.Core.FSharpFunc{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}}}},`0,`1,``0,``1,``2)">
 <summary>Invoke an F# first class function value with five curried arguments. In some cases this
 will result in a more efficient application than applying the arguments successively.</summary>
 <param name="func">The input function.</param>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <param name="arg5">The fifth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.Invoke(`0)">
 <summary>Invoke an F# first class function value with one argument</summary>
 <param name="func"></param>
 <returns>'U</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.FromConverter(System.Converter{`0,`1})">
 <summary>Convert an value of type <c>System.Converter</c> to a F# first class function value </summary>
 <param name="converter">The input System.Converter.</param>
 <returns>An F# function of the same type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpFunc`2.#ctor">
 <summary>Construct an instance of an F# first class function value </summary>
 <returns>The created F# function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpFunc`2">
 <summary>The CLI type used to represent F# function values. This type is not
 typically used directly, though may be used from other CLI languages.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.Release">
 <summary>The release number of the F# version associated with the attribute</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.Minor">
 <summary>The minor version number of the F# version associated with the attribute</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.Major">
 <summary>The major version number of the F# version associated with the attribute</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
 <summary>Creates an instance of the attribute</summary>
 <param name="major">The major version number.</param>
 <param name="minor">The minor version number.</param>
 <param name="release">The release number.</param>
 <returns>FSharpInterfaceDataVersionAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute">
 <summary>This attribute is added to generated assemblies to indicate the 
 version of the data schema used to encode additional F#
 specific information in the resource attached to compiled F# libraries.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpTypeFunc.Specialize``1">
 <summary>Specialize the type function at a given type</summary>
 <returns>The specialized type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpTypeFunc.#ctor">
 <summary>Construct an instance of an F# first class type function value </summary>
 <returns>FSharpTypeFunc</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpTypeFunc">
 <summary>The CLI type used to represent F# first-class type function values. This type is for use
 by compiled F# code.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.Format`4">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
</member>
<member name="T:Microsoft.FSharp.Core.Format`5">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
 <typeparam name="Tuple">Tuple of values generated by scan or match.</typeparam>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``2(System.Converter{``0,``1})">
 <summary>Convert the given Converter delegate object to an F# function value</summary>
 <param name="converter">The input Converter.</param>
 <returns>The F# function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.ToFSharpFunc``1(System.Action{``0})">
 <summary>Convert the given Action delegate object to an F# function value</summary>
 <param name="action">The input action.</param>
 <returns>The F# function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``6(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`5{``0,``1,``2,``3,``4},``5})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``5(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`4{``0,``1,``2,``3},``4})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``4(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`3{``0,``1,``2},``3})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.FuncConvert.FuncFromTupled``3(Microsoft.FSharp.Core.FSharpFunc`2{System.Tuple`2{``0,``1},``2})">
 <summary>A utility function to convert function values from tupled to curried form</summary>
 <param name="func">The input tupled function.</param>
 <returns>The output curried function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FuncConvert">
 <summary>Helper functions for converting F# first class function values to and from CLI representaions
 of functions using delegates.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.GeneralizableValueAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>GeneralizableValueAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.GeneralizableValueAttribute">
 <summary>Adding this attribute to a non-function value with generic parameters indicates that 
 uses of the construct can give rise to generic code through type inference. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.InterfaceAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>InterfaceAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.InterfaceAttribute">
 <summary>Adding this attribute to a type causes it to be represented using a CLI interface.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LiteralAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>LiteralAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.LiteralAttribute">
 <summary>Adding this attribute to a value causes it to be compiled as a CLI constant literal.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.MeasureAnnotatedAbbreviationAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>MeasureAnnotatedAbbreviationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.MeasureAnnotatedAbbreviationAttribute">
 <summary>Adding this attribute to a type causes it to be interpreted as a refined type, currently limited to measure-parameterized types.
 This may only be used under very limited conditions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.MeasureAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>MeasureAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.MeasureAttribute">
 <summary>Adding this attribute to a type causes it to be interpreted as a unit of measure.
 This may only be used under very limited conditions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NoComparisonAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>NoComparisonAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.NoComparisonAttribute">
 <summary>Adding this attribute to a type indicates it is a type where comparison is an abnormal operation.
 This means that the type does not satisfy the F# 'comparison' constraint. Within the bounds of the 
 F# type system, this helps ensure that the F# generic comparison function is not instantiated directly
 at this type. The attribute and checking does not constrain the use of comparison with base or child 
 types of this type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NoDynamicInvocationAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>NoDynamicInvocationAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.NoDynamicInvocationAttribute">
 <summary>This attribute is used to tag values that may not be dynamically invoked at runtime. This is
 typically added to inlined functions whose implementations include unverifiable code. It
 causes the method body emitted for the inlined function to raise an exception if 
 dynamically invoked, rather than including the unverifiable code in the generated
 assembly.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NoEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>NoEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.NoEqualityAttribute">
 <summary>Adding this attribute to a type indicates it is a type where equality is an abnormal operation.
 This means that the type does not satisfy the F# 'equality' constraint. Within the bounds of the 
 F# type system, this helps ensure that the F# generic equality function is not instantiated directly
 at this type. The attribute and checking does not constrain the use of comparison with base or child 
 types of this type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpOption`1.Some">
 <summary>The representation of "Value of type 'T"</summary>
 <param name="Value">The input value.</param>
 <returns>An option representing the value.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpOption`1.None">
 <summary>The representation of "No value"</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.Value">
 <summary>Get the value of a 'Some' option. A NullReferenceException is raised if the option is 'None'.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.None">
 <summary>Create an option value that is a 'None' value.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.IsSome">
 <summary>Return 'true' if the option is a 'Some' value.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpOption`1.IsNone">
 <summary>Return 'true' if the option is a 'None' value.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.FSharpOption`1.Some(`0)">
 <summary>Create an option value that is a 'Some' value.</summary>
 <param name="value">The input value</param>
 <returns>An option representing the value.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpOption`1">
 <summary>The type of optional values. When used from other CLI languages the
 empty option is the <c>null</c> value. </summary>

 <remarks>Use the constructors <c>Some</c> and <c>None</c> to create values of this type.
 Use the values in the <c>Option</c> module to manipulate values of this type,
 or pattern match against the values directly.

 <c>None</c> values will appear as the value <c>null</c> to other CLI languages.
 Instance methods on this type will appear as static methods to other CLI languages
 due to the use of <c>null</c> as a value representation.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.OptionalArgumentAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>OptionalArgumentAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptionalArgumentAttribute">
 <summary>This attribute is added automatically for all optional arguments.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.PrintfFormat`4.Value">
 <summary>The raw text of the format string.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfFormat`4.#ctor(System.String)">
 <summary>Construct a format string </summary>
 <param name="value">The input string.</param>
 <returns>The PrintfFormat containing the formatted result.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfFormat`4">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfFormat`5.#ctor(System.String)">
 <summary>Construct a format string</summary>
 <param name="value">The input string.</param>
 <returns>The created format string.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfFormat`5">
 <summary>Type of a formatting expression.</summary>
 <typeparam name="Printer">Function type generated by printf.</typeparam>
 <typeparam name="State">Type argument passed to %a formatters</typeparam>
 <typeparam name="Residue">Value generated by the overall printf action (e.g. sprint generates a string)</typeparam>
 <typeparam name="Result">Value generated after post processing (e.g. failwithf generates a string internally then raises an exception)</typeparam>
 <typeparam name="Tuple">Tuple of values generated by scan or match.</typeparam>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.FSharpRef`1.contents">
<summary>
 The current value of the reference cell
</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpRef`1.Value(`0)">
 <summary>The current value of the reference cell</summary>
</member>
<member name="P:Microsoft.FSharp.Core.FSharpRef`1.Value">
 <summary>The current value of the reference cell</summary>
</member>
<member name="T:Microsoft.FSharp.Core.FSharpRef`1">
 <summary>The type of mutable references. Use the functions [:=] and [!] to get and
 set values of this type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ReferenceEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ReferenceEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ReferenceEqualityAttribute">
 <summary>Adding this attribute to a record or union type disables the automatic generation
 of overrides for 'System.Object.Equals(obj)', 'System.Object.GetHashCode()' 
 and 'System.IComparable' for the type. The type will by default use reference equality.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ReflectedDefinitionAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>ReflectedDefinitionAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ReflectedDefinitionAttribute">
 <summary>Adding this attribute to the let-binding for the definition of a top-level 
 value makes the quotation expression that implements the value available
 for use at runtime.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>RequireQualifiedAccessAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute">
 <summary>This attribute is used to indicate that references to a the elements of a module, record or union 
 type require explicit qualified access.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>RequiresExplicitTypeArgumentsAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.RequiresExplicitTypeArgumentsAttribute">
 <summary>Adding this attribute to a type, value or member requires that 
 uses of the construct must explicitly instantiate any generic type parameters.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.SealedAttribute.Value">
 <summary>The value of the attribute, indicating whether the type is sealed or not.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.SealedAttribute.#ctor(System.Boolean)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates whether the class is sealed.</param>
 <returns>SealedAttribute</returns>
</member>
<member name="M:Microsoft.FSharp.Core.SealedAttribute.#ctor">
 <summary>Creates an instance of the attribute.</summary>
 <returns>The created attribute.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.SealedAttribute">
 <summary>Adding this attribute to class definition makes it sealed, which means it may not
 be extended or implemented.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.NonPublicRepresentation">
 <summary>Indicates that the compiled entity had private or internal representation in F# source code.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.KindMask">
 <summary>The mask of values related to the kind of the compiled entity.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Value">
 <summary>Indicates that the compiled entity is part of the representation of an F# value declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.UnionCase">
 <summary>Indicates that the compiled entity is part of the representation of an F# union case declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Module">
 <summary>Indicates that the compiled entity is part of the representation of an F# module declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Closure">
 <summary>Indicates that the compiled entity is part of the representation of an F# closure.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Exception">
 <summary>Indicates that the compiled entity is part of the representation of an F# exception declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.Field">
 <summary>Indicates that the compiled entity is part of the representation of an F# record or union case field declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.ObjectType">
 <summary>Indicates that the compiled entity is part of the representation of an F# class or other object type declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.RecordType">
 <summary>Indicates that the compiled entity is part of the representation of an F# record type declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.SumType">
 <summary>Indicates that the compiled entity is part of the representation of an F# union type declaration.</summary>
</member>
<member name="F:Microsoft.FSharp.Core.Microsoft.FSharp.Core.SourceConstructFlags.None">
 <summary>Indicates that the compiled entity has no relationship to an element in F# source code.</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.SourceConstructFlags">
 <summary>Indicates the relationship between a compiled entity in a CLI binary and an element in F# source code.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>StructAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructAttribute">
 <summary>Adding this attribute to a type causes it to be represented using a CLI struct.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructuralComparisonAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>StructuralComparisonAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructuralComparisonAttribute">
 <summary>Adding this attribute to a record, union, exception, or struct type confirms the 
 automatic generation of implementations for 'System.IComparable' for the type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructuralEqualityAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>StructuralEqualityAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructuralEqualityAttribute">
 <summary>Adding this attribute to a record, union or struct type confirms the automatic 
 generation of overrides for 'System.Object.Equals(obj)' and 
 'System.Object.GetHashCode()' for the type. </summary>
</member>
<member name="P:Microsoft.FSharp.Core.StructuredFormatDisplayAttribute.Value">
 <summary>Indicates the text to display by default when objects of this type are displayed 
 using '%A' printf formatting patterns and other two-dimensional text-based display 
 layouts. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.StructuredFormatDisplayAttribute.#ctor(System.String)">
 <summary>Creates an instance of the attribute</summary>
 <param name="value">Indicates the text to display when using the '%A' printf formatting.</param>
 <returns>StructuredFormatDisplayAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.StructuredFormatDisplayAttribute">
 <summary>This attribute is used to mark how a type is displayed by default when using 
 '%A' printf formatting patterns and other two-dimensional text-based display layouts. 
 In this version of F# the only valid values are of the form <c>PreText {PropertyName} PostText</c>.
 The property name indicates a property to evaluate and to display instead of the object itself. </summary>
</member>
<member name="T:Microsoft.FSharp.Core.Unit">
 <summary>The type 'unit', which has only one value "()". This value is special and
 always uses the representation 'null'.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.UnverifiableAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>UnverifiableAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.UnverifiableAttribute">
 <summary>This attribute is used to tag values whose use will result in the generation
 of unverifiable code. These values are inevitably marked 'inline' to ensure that
 the unverifiable constructs are not present in the actual code for the F# library,
 but are rather copied to the source code of the caller.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.VolatileFieldAttribute.#ctor">
 <summary>Creates an instance of the attribute</summary>
 <returns>VolatileFieldAttribute</returns>
</member>
<member name="T:Microsoft.FSharp.Core.VolatileFieldAttribute">
 <summary>Adding this attribute to an F# mutable binding causes the "volatile"
 prefix to be used for all accesses to the field.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.[,,,]`1">
 <summary>Four dimensional arrays, typically zero-based. Non-zero-based arrays
 can be created using methods on the System.Array type.</summary>

 <remarks>Use the values in the <c>Array4D</c> module
 to manipulate values of this type, or the notation <c>arr.[x1,x2,x3,x4]</c> to get and set array
 values.</remarks>  
</member>
<member name="T:Microsoft.FSharp.Core.[,,]`1">
 <summary>Three dimensional arrays, typically zero-based. Non-zero-based arrays
 can be created using methods on the System.Array type.</summary>

 <remarks>Use the values in the <c>Array3D</c> module
 to manipulate values of this type, or the notation <c>arr.[x1,x2,x3]</c> to get and set array
 values.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.[,]`1">
 <summary>Two dimensional arrays, typically zero-based.</summary> 

 <remarks>Use the values in the <c>Array2D</c> module
 to manipulate values of this type, or the notation <c>arr.[x,y]</c> to get/set array
 values.   

 Non-zero-based arrays can also be created using methods on the System.Array type.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.[]`1">
 <summary>Single dimensional, zero-based arrays, written <c>int[]</c>, <c>string[]</c> etc.</summary>
 <remarks>Use the values in the <c>Array</c> module to manipulate values 
 of this type, or the notation <c>arr.[x]</c> to get/set array
 values.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.array`1">
 <summary>Single dimensional, zero-based arrays, written <c>int[]</c>, <c>string[]</c> etc.</summary>
 
 <remarks>Use the values in the <c>Array</c> module to manipulate values 
 of this type, or the notation <c>arr.[x]</c> to get/set array
 values.</remarks>   
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.bool">
 <summary>An abbreviation for the CLI type <c>System.Boolean</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.byref`1">
 <summary>Represents a managed pointer in F# code.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.byte">
 <summary>An abbreviation for the CLI type <c>System.Byte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.char">
 <summary>An abbreviation for the CLI type <c>System.Char</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.decimal">
 <summary>An abbreviation for the CLI type <c>System.Decimal</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.decimal`1">
 <summary>The type of decimal numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Decimal</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.double">
 <summary>An abbreviation for the CLI type <c>System.Double</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.exn">
 <summary>An abbreviation for the CLI type <c>System.Exception</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float">
 <summary>An abbreviation for the CLI type <c>System.Double</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float32">
 <summary>An abbreviation for the CLI type <c>System.Single</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float32`1">
 <summary>The type of floating point numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Single</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.float`1">
 <summary>The type of floating point numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Double</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.ilsigptr`1">
 <summary>This type is for internal use by the F# code generator.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int">
 <summary>An abbreviation for the CLI type <c>System.Int32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int16">
 <summary>An abbreviation for the CLI type <c>System.Int16</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int16`1">
 <summary>The type of 16-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Int16</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int32">
 <summary>An abbreviation for the CLI type <c>System.Int32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int64">
 <summary>An abbreviation for the CLI type <c>System.Int64</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int64`1">
 <summary>The type of 64-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Int64</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int8">
 <summary>An abbreviation for the CLI type <c>System.SByte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.int`1">
 <summary>The type of 32-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.Int32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.nativeint">
 <summary>An abbreviation for the CLI type <c>System.IntPtr</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.nativeptr`1">
 <summary>Represents an unmanaged pointer in F# code.</summary>

 <remarks>This type should only be used when writing F# code that interoperates
 with native code.  Use of this type in F# code may result in
 unverifiable code being generated.  Conversions to and from the 
 <c>nativeint</c> type may be required. Values of this type can be generated
 by the functions in the <c>NativeInterop.NativePtr</c> module.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.obj">
 <summary>An abbreviation for the CLI type <c>System.Object</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.option`1">
 <summary>The type of optional values. When used from other CLI languages the
 empty option is the <c>null</c> value. </summary>

 <remarks>Use the constructors <c>Some</c> and <c>None</c> to create values of this type.
 Use the values in the <c>Option</c> module to manipulate values of this type,
 or pattern match against the values directly.

 'None' values will appear as the value <c>null</c> to other CLI languages.
 Instance methods on this type will appear as static methods to other CLI languages
 due to the use of <c>null</c> as a value representation.</remarks>
</member>
<member name="T:Microsoft.FSharp.Core.ref`1">
 <summary>The type of mutable references. Use the functions [:=] and [!] to get and
 set values of this type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.sbyte">
 <summary>An abbreviation for the CLI type <c>System.SByte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.sbyte`1">
 <summary>The type of 8-bit signed integer numbers, annotated with a unit of measure. The unit
 of measure is erased in compiled code and when values of this type
 are analyzed using reflection. The type is representationally equivalent to 
 <c>System.SByte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.single">
 <summary>An abbreviation for the CLI type <c>System.Single</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.string">
 <summary>An abbreviation for the CLI type <c>System.String</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint16">
 <summary>An abbreviation for the CLI type <c>System.UInt16</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint32">
 <summary>An abbreviation for the CLI type <c>System.UInt32</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint64">
 <summary>An abbreviation for the CLI type <c>System.UInt64</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.uint8">
 <summary>An abbreviation for the CLI type <c>System.Byte</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.unativeint">
 <summary>An abbreviation for the CLI type <c>System.UIntPtr</c>.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.unit">
 <summary>The type 'unit', which has only one value "()". This value is special and
 always uses the representation 'null'.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.MatchFailureException">
 <summary>Non-exhaustive match failures will raise the MatchFailureException exception</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.LastGenerated">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="P:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.CheckClose">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.GetFreshEnumerator">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>

 <returns>A new enumerator for the sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.GenerateNext(System.Collections.Generic.IEnumerable{`0}@)">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>

 <param name="result">A reference to the sequence.</param>

 <returns>A 0, 1, and 2 respectively indicate Stop, Yield, and Goto conditions for the sequence generator.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.Close">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1.#ctor">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>

 <returns>A new sequence generator for the expression.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilerServices.GeneratedSequenceBase`1">
 <summary>The F# compiler emits implementations of this type for compiled sequence expressions.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.CreateEvent``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.FSharpFunc`2{System.Object,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.Unit}},``0})">
 <summary>Creates an anonymous event with the given handlers.</summary>

 <param name="addHandler">A function to handle adding a delegate for the event to trigger.</param>
 <param name="removeHandler">A function to handle removing a delegate that the event triggers.</param>
 <param name="createHandler">A function to produce the delegate type the event can trigger.</param>

 <returns>The initialized event.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateUsing``3(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>The F# compiler emits calls to this function to implement the <c>use</c> operator for F# sequence
 expressions.</summary>

 <param name="resource">The resource to be used and disposed.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateFromFunctions``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0},Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>The F# compiler emits calls to this function to implement the compiler-intrinsic
 conversions from untyped System.Collections.IEnumerable sequences to typed sequences.</summary>

 <param name="create">An initializer function.</param>
 <param name="moveNext">A function to iterate and test if end of sequence is reached.</param>
 <param name="current">A function to retrieve the current element.</param>

 <returns>The resulting typed sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateThenFinally``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>The F# compiler emits calls to this function to 
 implement the <c>try/finally</c> operator for F# sequence expressions.</summary>

 <param name="source">The input sequence.</param>
 <param name="compensation">A computation to be included in an enumerator's Dispose method.</param>

 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers.EnumerateWhile``1(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
 <summary>The F# compiler emits calls to this function to 
 implement the <c>while</c> operator for F# sequence expressions.</summary>

 <param name="guard">A function that indicates whether iteration should continue.</param>
 <param name="source">The input sequence.</param>

 <returns>The result sequence.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers">
 <summary>A group of functions used as part of the compiled representation of F# sequence expressions.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.LazyPattern``1(System.Lazy{``0})">
 <summary>An active pattern to force the execution of values of type <c>Lazy&lt;_&gt;</c>.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.SpliceUntypedExpression``1(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Special prefix operator for splicing untyped expressions into quotation holes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.SpliceExpression``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
 <summary>Special prefix operator for splicing typed expressions into quotation holes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.CreateArray2D``2(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a 2D array from a sequence of sequences of elements.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.CreateDictionary``2(System.Collections.Generic.IEnumerable{System.Tuple`2{``0,``1}})">
 <summary>Builds a read-only lookup table from a sequence of key/value pairs. The key objects are indexed using generic hashing and equality.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToSByte``1(``0)">
 <summary>Converts the argument to signed byte.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>SByte.Parse()</c>  with InvariantCulture settings.
 Otherwise the operation requires and invokes a <c>ToSByte</c> method on the input type.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToByte``1(``0)">
 <summary>Converts the argument to byte.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Byte.Parse()</c> on strings and otherwise requires a <c>ToByte</c> method on the input type.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToDouble``1(``0)">
 <summary>Converts the argument to 64-bit float.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Double.Parse()</c>  with InvariantCulture settings. Otherwise the operation requires and invokes a <c>ToDouble</c> method on the input type.</remarks>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.ToSingle``1(``0)">
 <summary>Converts the argument to 32-bit float.</summary>
 <remarks>This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Single.Parse()</c>  with InvariantCulture settings. Otherwise the operation requires and invokes a <c>ToSingle</c> method on the input type.</remarks>
</member>
<member name="P:Microsoft.FSharp.Core.ExtraTopLevelOperators.DefaultAsyncBuilder">
 <summary>Builds an aysnchronous workflow using computation expression syntax.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.CreateSet``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a set from a sequence of objects. The objects are indexed using generic comparison.</summary>
 <param name="elements">The input sequence of elements.</param>
 <returns>The created set.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatLineToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a file using the given format, and add a newline.</summary>
 <param name="textWriter">The file TextWriter.</param>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a file using the given format.</summary>
 <param name="textWriter">The file TextWriter.</param>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToStringThenFail``2(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,``1})">
 <summary>Print to a string buffer and raise an exception with the given
 result.   Helper printers must return strings.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToString``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,System.String})">
 <summary>Print to a string using the given format.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatLineToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stderr</c> using the given format, and add a newline.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stderr</c> using the given format.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormatLine``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stdout</c> using the given format, and add a newline.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.ExtraTopLevelOperators.PrintFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to <c>stdout</c> using the given format.</summary>
 <param name="format">The formatter.</param>
 <returns>The formatted result.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.ExtraTopLevelOperators">

</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByInt``1(``0,System.Int32)">
 <summary>Divides a value by an integer.</summary>
 <param name="x">The input value.</param>
 <param name="y">The input int.</param>
 <returns>The division result.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOne``1">
 <summary>Resolves to the one value for any primitive numeric type or any type with a static member called 'One'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZero``1">
 <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.DivideByIntDynamic``1(``0,System.Int32)">
 <summary>A compiler intrinsic that implements dynamic invocations for the DivideByInt primitive.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedMultiplyDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the checked '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.MultiplyDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.CheckedAdditionDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the checked '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.AdditionDynamic``3(``0,``1)">
 <summary>A compiler intrinsic that implements dynamic invocations to the '+' operator.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericOneDynamic``1">
 <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericZeroDynamic``1">
 <summary>Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt64(System.String)">
 <summary>Parse an uint64 according to the rules used by the overloaded 'uint64' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt64(System.String)">
 <summary>Parse an int64 according to the rules used by the overloaded 'int64' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseUInt32(System.String)">
 <summary>Parse an uint32 according to the rules used by the overloaded 'uint32' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.ParseInt32(System.String)">
 <summary>Parse an int32 according to the rules used by the overloaded 'int32' conversion operator when applied to strings</summary>
 <param name="s">The input string.</param>
 <returns>The parsed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.SByteWithMeasure``1(System.SByte)">
 <summary>Creates an sbyte value with units-of-measure</summary>
 <param name="sbyte">The input sbyte.</param>
 <returns>The sbyte with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Int16WithMeasure``1(System.Int16)">
 <summary>Creates an int16 value with units-of-measure</summary>
 <param name="int16">The input int16.</param>
 <returns>The int16 with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Int64WithMeasure``1(System.Int64)">
 <summary>Creates an int64 value with units-of-measure</summary>
 <param name="int64">The input int64.</param>
 <returns>The int64 with units of measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Int32WithMeasure``1(System.Int32)">
 <summary>Creates an int32 value with units-of-measure</summary>
 <param name="int">The input int.</param>
 <returns>The int with units of measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.DecimalWithMeasure``1(System.Decimal)">
 <summary>Creates a decimal value with units-of-measure</summary>
 <param name="decimal">The input decimal.</param>
 <returns>The decimal with units of measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.Float32WithMeasure``1(System.Single)">
 <summary>Creates a float32 value with units-of-measure</summary>
 <param name="float32">The input float.</param>
 <returns>The float with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FloatWithMeasure``1(System.Double)">
 <summary>Creates a float value with units-of-measure</summary>
 <param name="float">The input float.</param>
 <returns>The float with units-of-measure.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.EnumToValue``2(``0)">
 <summary>Get the underlying value for an enum value</summary>
 <param name="enum">The input enum.</param>
 <returns>The enumeration as a value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.EnumOfValue``2(``0)">
 <summary>Build an enum value from an underlying value</summary>
 <param name="value">The input value.</param>
 <returns>The value as an enumeration.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHashWithComparer``1(System.Collections.IEqualityComparer,``0)">
 <summary>Recursively hash a part of a value according to its structure. </summary>
 <param name="comparer">The comparison function.</param>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLimitedHash``1(System.Int32,``0)">
 <summary>Hash a value according to its structure. Use the given limit to restrict the hash when hashing F#
 records, lists and union types.</summary>
 <param name="limit">The limit on the number of nodes.</param>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericHash``1(``0)">
 <summary>Hash a value according to its structure. This hash is not limited by an overall node count when hashing F#
 records, lists and union types.</summary>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastLimitedGenericEqualityComparer``1(System.Int32)">
 <summary>Make an F# hash/equality object for the given type using node-limited hashing when hashing F#
 records, lists and union types.</summary>
 <param name="limit">The input limit on the number of nodes.</param>
 <returns>System.Collections.Generic.IEqualityComparer&lt;'T&gt;</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericEqualityComparer``1">
 <summary>Make an F# hash/equality object for the given type</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparerCanBeNull``1">
 <summary>Make an F# comparer object for the given type, where it can be null if System.Collections.Generic.Comparer&lt;'T&gt;.Default</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.FastGenericComparer``1">
 <summary>Make an F# comparer object for the given type</summary>
</member>
<member name="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparer">
 <summary>A static F# comparer object</summary>
</member>
<member name="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityERComparer">
 <summary>Return an F# comparer object suitable for hashing and equality. This hashing behaviour
 of the returned comparer is not limited by an overall node count when hashing F#
 records, lists and union types. This equality comparer has equivalence 
 relation semantics ([nan] = [nan]).</summary>
</member>
<member name="P:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityComparer">
 <summary>Return an F# comparer object suitable for hashing and equality. This hashing behaviour
 of the returned comparer is not limited by an overall node count when hashing F#
 records, lists and union types.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalHash``1(``0)">
 <summary>The physical hash. Hashes on the object identity, except for value types,
 where we hash on the contents.</summary>
 <param name="obj">The input object.</param>
 <returns>The hashed value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.PhysicalEquality``1(``0,``0)">
 <summary>Reference/physical equality. 
 True if boxed versions of the inputs are reference-equal, OR if
 both are primitive numeric types and the implementation of Object.Equals for the type
 of the first argument returns true on the boxed versions of the inputs. </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMaximum``1(``0,``0)">
 <summary>Take the maximum of two values structurally according to the order given by GenericComparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The maximum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericMinimum``1(``0,``0)">
 <summary>Take the minimum of two values structurally according to the order given by GenericComparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterOrEqual``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessOrEqual``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericGreaterThan``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericLessThan``1(``0,``0)">
 <summary>Compare two values   </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparisonWithComparer``1(System.Collections.IComparer,``0,``0)">
 <summary>Compare two values. May be called as a recursive case from an implementation of System.IComparable to
 ensure consistent NaN comparison semantics.</summary>
 <param name="comp">The function to compare the values.</param>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericComparison``1(``0,``0)">
 <summary>Compare two values </summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityWithComparer``1(System.Collections.IEqualityComparer,``0,``0)">
 <summary>Compare two values for equality</summary>
 <param name="comp"></param>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEqualityER``1(``0,``0)">
 <summary>Compare two values for equality using equivalence relation semantics ([nan] = [nan])</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.GenericEquality``1(``0,``0)">
 <summary>Compare two values for equality using partial equivalence relation semantics ([nan] &lt;&gt; [nan])</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple5``5(System.Collections.IComparer,System.Tuple`5{``0,``1,``2,``3,``4},System.Tuple`5{``0,``1,``2,``3,``4})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple4``4(System.Collections.IComparer,System.Tuple`4{``0,``1,``2,``3},System.Tuple`4{``0,``1,``2,``3})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple3``3(System.Collections.IComparer,System.Tuple`3{``0,``1,``2},System.Tuple`3{``0,``1,``2})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastCompareTuple2``2(System.Collections.IComparer,System.Tuple`2{``0,``1},System.Tuple`2{``0,``1})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple5``5(System.Collections.IEqualityComparer,System.Tuple`5{``0,``1,``2,``3,``4},System.Tuple`5{``0,``1,``2,``3,``4})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple4``4(System.Collections.IEqualityComparer,System.Tuple`4{``0,``1,``2,``3},System.Tuple`4{``0,``1,``2,``3})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple3``3(System.Collections.IEqualityComparer,System.Tuple`3{``0,``1,``2},System.Tuple`3{``0,``1,``2})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastEqualsTuple2``2(System.Collections.IEqualityComparer,System.Tuple`2{``0,``1},System.Tuple`2{``0,``1})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple5``5(System.Collections.IEqualityComparer,System.Tuple`5{``0,``1,``2,``3,``4})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple4``4(System.Collections.IEqualityComparer,System.Tuple`4{``0,``1,``2,``3})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple3``3(System.Collections.IEqualityComparer,System.Tuple`3{``0,``1,``2})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.FastHashTuple2``2(System.Collections.IEqualityComparer,System.Tuple`2{``0,``1})">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericLessOrEqualIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericGreaterOrEqualIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericGreaterThanIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericLessThanIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericEqualityWithComparerIntrinsic``1(System.Collections.IEqualityComparer,``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericEqualityERIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericEqualityIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericComparisonIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericComparisonWithComparerIntrinsic``1(System.Collections.IComparer,``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericHashWithComparerIntrinsic``1(System.Collections.IEqualityComparer,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.LimitedGenericHashIntrinsic``1(System.Int32,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.GenericHashIntrinsic``1(``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.PhysicalEqualityIntrinsic``1(``0,``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare.PhysicalHashIntrinsic``1(``0)">
 <summary>A primitive entry point used by the F# compiler for optimization purposes.</summary> 
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.HashCompare">
 <summary>The F# compiler emits calls to some of the functions in this module as part of the compiled form of some language constructs</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray4D``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)">
<summary>
 The standard overloaded associative (4-indexed) mutation operator
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray3D``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)">
 <summary>The standard overloaded associative (3-indexed) mutation operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray2D``1(``0[0:,0:],System.Int32,System.Int32,``0)">
 <summary>The standard overloaded associative (2-indexed) mutation operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.SetArray``1(``0[],System.Int32,``0)">
 <summary>The standard overloaded associative (indexed) mutation operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray4D``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>The standard overloaded associative (4-indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray3D``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
 <summary>The standard overloaded associative (3-indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray2D``1(``0[0:,0:],System.Int32,System.Int32)">
 <summary>The standard overloaded associative (2-indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetArray``1(``0[],System.Int32)">
 <summary>The standard overloaded associative (indexed) lookup operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.CheckThis``1(``0)">
 <summary>A compiler intrinsic for checking initialization soundness of recursive bindings</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.FailStaticInit">
 <summary>A compiler intrinsic for checking initialization soundness of recursive static bindings</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.FailInit">
 <summary>A compiler intrinsic for checking initialization soundness of recursive bindings</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.Dispose``1(``0)">
 <summary>A compiler intrinsic for the efficient compilation of sequence expressions</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.MakeDecimal(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
 <summary>This function implements parsing of decimal constants</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.CreateInstance``1">
 <summary>This function implements calls to default constructors
 acccessed by 'new' constraints.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.GetString(System.String,System.Int32)">
 <summary>Primitive used by pattern match compilation</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.TypeTestFast``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.TypeTestGeneric``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.UnboxFast``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?>' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions.UnboxGeneric``1(System.Object)">
 <summary>A compiler intrinsic that implements the ':?>' operator</summary>
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicFunctions">
 <summary>The F# compiler emits calls to some of the functions in this module as part of the compiled form of some language constructs</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_IntegerAddressOf``1(``0)">
 <summary>Address-of. Uses of this value may result in the generation of unverifiable code.</summary>
 <param name="obj">The input object.</param>
 <returns>The unmanaged pointer.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_AddressOf``1(``0)">
 <summary>Address-of. Uses of this value may result in the generation of unverifiable code.</summary>
 <param name="obj">The input object.</param>
 <returns>The managed pointer.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_BooleanOr(System.Boolean,System.Boolean)">
 <summary>Binary 'or'. When used as a binary operator the right hand value is evaluated only on demand</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.Or(System.Boolean,System.Boolean)">
 <summary>Binary 'or'. When used as a binary operator the right hand value is evaluated only on demand.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_BooleanAnd(System.Boolean,System.Boolean)">
 <summary>Binary 'and'. When used as a binary operator the right hand value is evaluated only on demand</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators.op_Amp(System.Boolean,System.Boolean)">
 <summary>Binary 'and'. When used as a binary operator the right hand value is evaluated only on demand.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators">
 <summary>The F# compiler emits calls to some of the functions in this module as part of the compiled form of some language constructs</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives.ErrorStrings">
 <summary>For internal use only</summary>
</member>
<member name="T:Microsoft.FSharp.Core.LanguagePrimitives">
 <summary>Language primitives associated with the F# language</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromStringDynamic(System.String)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromInt64Dynamic(System.Int64)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromString``1(System.String)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromInt64``1(System.Int64)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromInt32``1(System.Int32)">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromOne``1">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI.FromZero``1">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="T:Microsoft.FSharp.Core.NumericLiterals.NumericLiteralI">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="T:Microsoft.FSharp.Core.NumericLiterals">
<summary>
 Provides a default implementations of F# numeric literal syntax  for literals fo the form &apos;dddI&apos; 
</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.KeyValuePattern``2(System.Collections.Generic.KeyValuePair{``0,``1})">
 <summary>An active pattern to match values of type <c>System.Collections.Generic.KeyValuePair</c></summary>
 <param name="keyValuePair">The input key/value pair.</param>
 <returns>A tuple containing the key and value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToChar``1(``0)">
 <summary>Converts the argument to character. Numeric inputs are converted according to the UTF-16 
 encoding for characters. String inputs must be exactly one character long. For other
 input types the operation requires an appropriate static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted char.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToDecimal``1(``0)">
 <summary>Converts the argument to System.Decimal using a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt64.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted decimal.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToString``1(``0)">
 <summary>Converts the argument to a string using <c>ToString</c>.</summary>

 <remarks>For standard integer and floating point values the <c>ToString</c> conversion 
 uses <c>CultureInfo.InvariantCulture</c>. </remarks>
 <param name="value">The input value.</param>
 <returns>The converted string.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUIntPtr``1(``0)">
 <summary>Converts the argument to unsigned native integer using a direct conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted unativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToIntPtr``1(``0)">
 <summary>Converts the argument to signed native integer. This is a direct conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted nativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToDouble``1(``0)">
 <summary>Converts the argument to 64-bit float. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Double.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted float</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToSingle``1(``0)">
 <summary>Converts the argument to 32-bit float. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Single.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted float32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUInt64``1(``0)">
 <summary>Converts the argument to unsigned 64-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt64.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt64``1(``0)">
 <summary>Converts the argument to signed 64-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int64.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUInt32``1(``0)">
 <summary>Converts the argument to unsigned 32-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt32.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt32``1(``0)">
 <summary>Converts the argument to signed 32-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int32.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToEnum``1(System.Int32)">
 <summary>Converts the argument to a particular enum type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted enum type.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt``1(``0)">
 <summary>Converts the argument to signed 32-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int32.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToUInt16``1(``0)">
 <summary>Converts the argument to unsigned 16-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>UInt16.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToInt16``1(``0)">
 <summary>Converts the argument to signed 16-bit integer. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Int16.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToSByte``1(``0)">
 <summary>Converts the argument to signed byte. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>SByte.Parse()</c>  
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted sbyte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ToByte``1(``0)">
 <summary>Converts the argument to byte. This is a direct conversion for all 
 primitive numeric types. For strings, the input is converted using <c>Byte.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted byte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.PowInteger``1(``0,System.Int32)">
 <summary>Overloaded power operator. If <c>n > 0</c> then equivalent to <c>x*...*x</c> for <c>n</c> occurrences of <c>x</c>. </summary>
 <param name="x">The input base.</param>
 <param name="n">The input exponent.</param>
 <returns>The base raised to the exponent.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Exponentiation``2(``0,``1)">
 <summary>Overloaded power operator.</summary>
 <param name="x">The input base.</param>
 <param name="y">The input exponent.</param>
 <returns>The base raised to the exponent.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Truncate``1(``0)">
 <summary>Overloaded truncate operator.</summary>
 <param name="value">The input value.</param>
 <returns>The truncated value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Tanh``1(``0)">
 <summary>Hyperbolic tangent of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The hyperbolic tangent of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Tan``1(``0)">
 <summary>Tangent of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The tangent of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sinh``1(``0)">
 <summary>Hyperbolic sine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The hyperbolic sine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sin``1(``0)">
 <summary>Sine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The sine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Cosh``1(``0)">
 <summary>Hyperbolic cosine  of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The hyperbolic cosine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Cos``1(``0)">
 <summary>Cosine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The cosine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sqrt``2(``0)">
 <summary>Square root of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The square root of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Log10``1(``0)">
 <summary>Logarithm to base 10 of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The logarithm to base 10 of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Log``1(``0)">
 <summary>Natural logarithm of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The natural logarithm of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Round``1(``0)">
 <summary>Round the given number</summary>
 <param name="value">The input value.</param>
 <returns>The nearest integer to the input value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Sign``1(``0)">
 <summary>Sign of the given number</summary>
 <param name="value">The input value.</param>
 <returns>-1, 0, or 1 depending on the sign of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Floor``1(``0)">
 <summary>Floor of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The floor of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Exp``1(``0)">
 <summary>Exponential of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The exponential of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Ceiling``1(``0)">
 <summary>Ceiling of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The ceiling of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Atan2``2(``0,``0)">
 <summary>Inverse tangent of <c>x/y</c> where <c>x</c> and <c>y</c> are specified separately</summary>
 <param name="y">The y input value.</param>
 <param name="x">The x input value.</param>
 <returns>The inverse tangent of the input ratio.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Atan``1(``0)">
 <summary>Inverse tangent of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The inverse tangent of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Asin``1(``0)">
 <summary>Inverse sine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The inverse sine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Acos``1(``0)">
 <summary>Inverse cosine of the given number</summary>
 <param name="value">The input value.</param>
 <returns>The inverse cosine of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Abs``1(``0)">
 <summary>Absolute value of the given number.</summary>
 <param name="value">The input value.</param>
 <returns>The absolute value of the input.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.limitedHash``1(System.Int32,``0)">
 <summary>A generic hash function. This function has the same behaviour as 'hash', 
 however the default structural hashing for F# union, record and tuple 
 types stops when the given limit of nodes is reached. The exact behaviour of 
 the function can be adjusted on a type-by-type basis by implementing 
 GetHashCode for each type.</summary>
 <param name="limit">The limit of nodes.</param>
 <param name="obj">The input object.</param>
 <returns>The computed hash.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Hash``1(``0)">
 <summary>A generic hash function, designed to return equal hash values for items that are 
 equal according to the "=" operator. By default it will use structural hashing
 for F# union, record and tuple types, hashing the complete contents of the 
 type. The exact behaviour of the function can be adjusted on a 
 type-by-type basis by implementing GetHashCode for each type.</summary>
 <param name="obj">The input object.</param>
 <returns>The computed hash.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.SizeOf``1">
 <summary>Returns the internal size of a type in bytes. For example, <c>sizeof&lt;int&gt;</c> returns 4.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.TypeDefOf``1">
 <summary>Generate a System.Type representation for a type definition. If the
 input type is a generic type instantiation then return the 
 generic type definition associated with all such instantiations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.TypeOf``1">
 <summary>Generate a System.Type runtime representation of a static type.
 The static type is still maintained on the value returned.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Using``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>Clean up resources associated with the input object after the completion of the given function.
 Cleanup occurs even when an exception is raised by the protected
 code. </summary>
 <param name="resource">The resource to be disposed after action is called.</param>
 <param name="action">The action that accepts the resource.</param>
 <returns>The resulting value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Lock``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``1})">
 <summary>Execute the function as a mutual-exclusion region using the input value as a lock. </summary>
 <param name="lockObject">The object to be locked.</param>
 <param name="action">The action to perform during the lock.</param>
 <returns>The resulting value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_RangeStep``2(``0,``1,``0)">
 <summary>The standard overloaded skip range operator, e.g. <c>[n..skip..m]</c> for lists, <c>seq {n..skip..m}</c> for sequences</summary>
 <param name="start">The start value of the range.</param>
 <param name="step">The step value of the range.</param>
 <param name="finish">The end value of the range.</param>
 <returns>The sequence spanning the range using the specified step size.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Range``1(``0,``0)">
 <summary>The standard overloaded range operator, e.g. <c>[n..m]</c> for lists, <c>seq {n..m}</c> for sequences</summary>
 <param name="start">The start value of the range.</param>
 <param name="finish">The end value of the range.</param>
 <returns>The sequence spanning the range.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ConsoleOut``1">
 <summary>Reads the value of the property <c>System.Console.Out</c>.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ConsoleError``1">
 <summary>Reads the value of the property <c>System.Console.Error</c>. </summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.ConsoleIn``1">
 <summary>Reads the value of the property <c>System.Console.In</c>. </summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.NaNSingle">
 <summary>Equivalent to <c>System.Single.NaN</c></summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.InfinitySingle">
 <summary>Equivalent to <c>System.Single.PositiveInfinity</c></summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.NaN">
 <summary>Equivalent to <c>System.Double.NaN</c></summary>
</member>
<member name="P:Microsoft.FSharp.Core.Operators.Infinity">
 <summary>Equivalent to <c>System.Double.PositiveInfinity</c></summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Exit``1(System.Int32)">
 <summary>Exit the current hardware isolated process, if security settings permit,
 otherwise raise an exception. Calls <c>System.Environment.Exit</c>.</summary>
 <param name="exitcode">The exit code to use.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.CreateSequence``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Builds a sequence using sequence expression syntax</summary>
 <param name="sequence">The input sequence.</param>
 <returns>The result sequence.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Not(System.Boolean)">
 <summary>Negate a logical value. <c>not true</c> equals <c>false</c> and <c>not false</c> equals <c>true</c></summary>
 <param name="value">The value to negate.</param>
 <returns>The result of the negation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>Concatenate two lists.</summary>
 <param name="list1">The first list.</param>
 <param name="list2">The second list.</param>
 <returns>The concatenation of the lists.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Increment(Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>Increment a mutable reference cell containing an integer</summary>
 <param name="cell">The reference cell.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Decrement(Microsoft.FSharp.Core.FSharpRef{System.Int32})">
 <summary>Decrement a mutable reference cell containing an integer</summary>
 <param name="cell">The reference cell.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Dereference``1(Microsoft.FSharp.Core.FSharpRef{``0})">
 <summary>Dereference a mutable reference cell</summary>
 <param name="cell">The cell to dereference.</param>
 <returns>The value contained in the cell.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ColonEquals``1(Microsoft.FSharp.Core.FSharpRef{``0},``0)">
 <summary>Assign to a mutable reference cell</summary>
 <param name="cell">The cell to mutate.</param>
 <param name="value">The value to set inside the cell.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Ref``1(``0)">
 <summary>Create a mutable reference cell</summary>
 <param name="value">The value to contain in the cell.</param>
 <returns>The created reference cell.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Identity``1(``0)">
 <summary>The identity function</summary>
 <param name="x">The input value.</param>
 <returns>The same value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.InvalidOp``1(System.String)">
 <summary>Throw an <c>System.InvalidOperationException</c> exception</summary>
 <param name="message">The exception message.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.NullArg``1(System.String)">
 <summary>Throw an <c>System.ArgumentNullException</c> exception</summary>
 <param name="argumentName">The argument name.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.InvalidArg``1(System.String,System.String)">
 <summary>Throw an <c>System.ArgumentException</c> exception</summary>
 <param name="argumentName">The argument name.</param>
 <param name="message">The exception message.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.FailWith``1(System.String)">
 <summary>Throw a <c>System.Exception</c> exception</summary>
 <param name="message">The exception message.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Box``1(``0)">
 <summary>Boxes a strongly typed value.</summary>
 <param name="value">The value to box.</param>
 <returns>The boxed object.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unbox``1(System.Object)">
 <summary>Unboxes a strongly typed value. This is the inverse of <c>box</c>, unbox&lt;t&gt;(box&lt;t&gt; a) equals a.</summary>
 <param name="value">The boxed value.</param>
 <returns>The unboxed result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Ignore``1(``0)">
 <summary>Ignore the passed value. This is often used to throw away results of a computation.</summary>
 <param name="value">The value to ignore.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Min``1(``0,``0)">
 <summary>Minimum based on generic comparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The minimum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Max``1(``0,``0)">
 <summary>Maximum based on generic comparison</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The maximum value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Compare``1(``0,``0)">
 <summary>Generic comparison.</summary>
 <param name="e1">The first value.</param>
 <param name="e2">The second value.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Snd``2(System.Tuple`2{``0,``1})">
 <summary>Return the second element of a tuple, <c>snd (a,b) = b</c>.</summary>
 <param name="tuple">The input tuple.</param>
 <returns>The second value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Fst``2(System.Tuple`2{``0,``1})">
 <summary>Return the first element of a tuple, <c>fst (a,b) = a</c>.</summary>
 <param name="tuple">The input tuple.</param>
 <returns>The first value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.FailurePattern(System.Exception)">
 <summary>Matches <c>System.Exception</c> objects whose runtime type is precisely <c>System.Exception</c></summary>
 <param name="error">The input exception.</param>
 <returns>A string option.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Failure(System.String)">
 <summary>Builds a <c>System.Exception</c> object.</summary>
 <param name="message">The message for the Exception.</param>
 <returns>A System.Exception.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Reraise``1">
 <summary>Rethrows an exception. This should only be used when handling an exception</summary>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Rethrow``1">
 <summary>Rethrows an exception. This should only be used when handling an exception</summary>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Raise``1(System.Exception)">
 <summary>Raises an exception</summary>
 <param name="exn">The exception to raise.</param>
 <returns>The result value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Concatenate(System.String,System.String)">
 <summary>Concatenate two strings. The operator '+' may also be used.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.DefaultArg``1(Microsoft.FSharp.Core.FSharpOption{``0},``0)">
 <summary>Used to specify a default value for an optional argument in the implementation of a function</summary>
 <param name="arg">An option representing the argument.</param>
 <param name="defaultValue">The default value of the argument.</param>
 <returns>The argument value. If it is None, the defaultValue is returned.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeLeft3``4(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}},``0,``1,``2)">
 <summary>Apply a function to three values, the values being a triple on the right, the function on the left</summary>
 <param name="func">The function.</param>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <param name="arg3">The third argument.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeLeft2``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}},``0,``1)">
 <summary>Apply a function to two values, the values being a pair on the right, the function on the left</summary>
 <param name="func">The function.</param>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeLeft``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},``0)">
 <summary>Apply a function to a value, the value being on the right, the function on the left</summary>
 <param name="func">The function.</param>
 <param name="arg1">The argument.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeRight3``4(``0,``1,``2,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``2,``3}}})">
 <summary>Apply a function to three values, the values being a triple on the left, the function on the right</summary>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <param name="arg3">The third argument.</param>
 <param name="func">The function.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeRight2``3(``0,``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``2}})">
 <summary>Apply a function to two values, the values being a pair on the left, the function on the right</summary>
 <param name="arg1">The first argument.</param>
 <param name="arg2">The second argument.</param>
 <param name="func">The function.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_PipeRight``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1})">
 <summary>Apply a function to a value, the value being on the left, the function on the right</summary>
 <param name="arg">The argument.</param>
 <param name="func">The function.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ComposeLeft``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Core.FSharpFunc`2{``2,``0})">
 <summary>Compose two functions, the function on the right being applied first</summary>
 <param name="func2">The second function to apply.</param>
 <param name="func1">The first function to apply.</param>
 <returns>The composition of the input functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ComposeRight``3(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Core.FSharpFunc`2{``1,``2})">
 <summary>Compose two functions, the function on the left being applied first</summary>
 <param name="func1">The first function to apply.</param>
 <param name="func2">The second function to apply.</param>
 <returns>The composition of the input functions.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Inequality``1(``0,``0)">
 <summary>Structural inequality</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Equality``1(``0,``0)">
 <summary>Structural equality</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LessThanOrEqual``1(``0,``0)">
 <summary>Structural less-than-or-equal comparison</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_GreaterThanOrEqual``1(``0,``0)">
 <summary>Structural greater-than-or-equal</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_GreaterThan``1(``0,``0)">
 <summary>Structural greater-than</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LessThan``1(``0,``0)">
 <summary>Structural less-than comparison</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_UnaryPlus``1(``0)">
 <summary>Overloaded prefix=plus operator</summary>
 <param name="value">The input value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LogicalNot``1(``0)">
 <summary>Overloaded logical-NOT operator</summary>
 <param name="value">The input value.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_RightShift``1(``0,System.Int32)">
 <summary>Overloaded byte-shift right operator by a specified number of bits</summary>
 <param name="value">The input value.</param>
 <param name="shift">The amount to shift.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_LeftShift``1(``0,System.Int32)">
 <summary>Overloaded byte-shift left operator by a specified number of bits</summary>
 <param name="value">The input value.</param>
 <param name="shift">The amount to shift.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_ExclusiveOr``1(``0,``0)">
 <summary>Overloaded logical-XOR operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_BitwiseOr``1(``0,``0)">
 <summary>Overloaded logical-OR operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_BitwiseAnd``1(``0,``0)">
 <summary>Overloaded logical-AND operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Modulus``3(``0,``1)">
 <summary>Overloaded modulo operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Division``3(``0,``1)">
 <summary>Overloaded division operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Multiply``3(``0,``1)">
 <summary>Overloaded multiplication operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Subtraction``3(``0,``1)">
 <summary>Overloaded subtraction operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_Addition``3(``0,``1)">
 <summary>Overloaded addition operator</summary>
 <param name="x">The first parameter.</param>
 <param name="y">The second parameter.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.op_UnaryNegation``1(``0)">
 <summary>Overloaded unary negation.</summary>
 <param name="n">The value to negate.</param>
 <returns>The result of the operation.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToChar``1(``0)">
 <summary>Converts the argument to <c>char</c>. Numeric inputs are converted using a checked 
 conversion according to the UTF-16 encoding for characters. String inputs must 
 be exactly one character long. For other input types the operation requires an 
 appropriate static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted char</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUIntPtr``1(``0)">
 <summary>Converts the argument to <c>unativeint</c>. This is a direct, checked conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted unativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToIntPtr``1(``0)">
 <summary>Converts the argument to <c>nativeint</c>. This is a direct, checked conversion for all 
 primitive numeric types. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted nativeint</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUInt64``1(``0)">
 <summary>Converts the argument to <c>uint64</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.UInt64.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt64``1(``0)">
 <summary>Converts the argument to <c>int64</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int64.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int64</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUInt32``1(``0)">
 <summary>Converts the argument to <c>uint32</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.UInt32.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt32``1(``0)">
 <summary>Converts the argument to <c>int32</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int32.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int32</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt``1(``0)">
 <summary>Converts the argument to <c>int</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int32.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToUInt16``1(``0)">
 <summary>Converts the argument to <c>uint16</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.UInt16.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted uint16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToInt16``1(``0)">
 <summary>Converts the argument to <c>int16</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Int16.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted int16</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToSByte``1(``0)">
 <summary>Converts the argument to <c>sbyte</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.SByte.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted sbyte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.ToByte``1(``0)">
 <summary>Converts the argument to <c>byte</c>. This is a direct, checked conversion for all 
 primitive numeric types. For strings, the input is converted using <c>System.Byte.Parse()</c> 
 with InvariantCulture settings. Otherwise the operation requires an appropriate
 static conversion method on the input type.</summary>
 <param name="value">The input value.</param>
 <returns>The converted byte</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_Multiply``3(``0,``1)">
 <summary>Overloaded multiplication operator (checks for overflow)</summary>
 <param name="x">The first value.</param>
 <param name="y">The second value.</param>
 <returns>The product of the two input values.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_Addition``3(``0,``1)">
 <summary>Overloaded addition operator (checks for overflow)</summary>
 <param name="x">The first value.</param>
 <param name="y">The second value.</param>
 <returns>The sum of the two input values.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_Subtraction``3(``0,``1)">
 <summary>Overloaded subtraction operator (checks for overflow)</summary>
 <param name="x">The first value.</param>
 <param name="y">The second value.</param>
 <returns>The first value minus the second value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Checked.op_UnaryNegation``1(``0)">
 <summary>Overloaded unary negation (checks for overflow)</summary>
 <param name="value">The input value.</param>
 <returns>The negated value.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.Operators.Checked">
 <summary>This module contains the basic arithmetic operations with overflow checks.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.Hash``1(``0)">
 <summary>Perform generic hashing on a value where the type of the value is not 
 statically required to satisfy the 'equality' constraint. </summary>
 <returns>The computed hash value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.Equals``1(``0,``0)">
 <summary>Perform generic equality on two values where the type of the values is not 
 statically required to satisfy the 'equality' constraint. </summary>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.Compare``1(``0,``0)">
 <summary>Perform generic comparison on two values where the type of the values is not 
 statically required to have the 'comparison' constraint. </summary>
 <returns>The result of the comparison.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.Unchecked.DefaultOf``1">
 <summary>Generate a default value for any type. This is null for reference types, 
 For structs, this is struct value where all fields have the default value. 
 This function is unsafe in the sense that some F# values do not have proper <c>null</c> values.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.Operators.Unchecked">
 <summary>This module contains basic operations which do not apply runtime and/or static checks</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowGeneric``1(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDecimal(System.Decimal,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'decimal'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDouble(System.Double,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'float'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSingle(System.Single,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'float32'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUIntPtr(System.UIntPtr,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'unativeint'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowIntPtr(System.IntPtr,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'nativeint'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt64(System.UInt64,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint64'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt64(System.Int64,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int64'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt32(System.UInt32,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint32'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt32(System.Int32,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int32'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowUInt16(System.UInt16,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'uint16'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowInt16(System.Int16,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'int16'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowSByte(System.SByte,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'sbyte'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowByte(System.Byte,System.Int32)">
 <summary>This is a library intrinsic. Calls to this function may be generated by uses of the generic 'pown' operator on values of type 'byte'</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.PowDynamic``2(``0,``1)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanhDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TanDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinhDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SinDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CoshDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CosDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SqrtDynamic``2(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Log10Dynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.LogDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SignDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RoundDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.TruncateDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.FloorDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.ExpDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.CeilingDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.Atan2Dynamic``2(``0,``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AtanDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AsinDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AcosDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.AbsDynamic``1(``0)">
 <summary>This is a library intrinsic. Calls to this function may be generated by evaluating quotations.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeStepGeneric``2(``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,``0,``1)">
 <summary>Generate a range of values using the given zero, add, start, step and stop values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeGeneric``1(``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``0,``0}},``0,``0)">
 <summary>Generate a range of values using the given zero, add, start, step and stop values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeChar(System.Char,System.Char)">
 <summary>Generate a range of char values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeByte(System.Byte,System.Byte,System.Byte)">
 <summary>Generate a range of byte values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSByte(System.SByte,System.SByte,System.SByte)">
 <summary>Generate a range of sbyte values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt16(System.UInt16,System.UInt16,System.UInt16)">
 <summary>Generate a range of uint16 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt16(System.Int16,System.Int16,System.Int16)">
 <summary>Generate a range of int16 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUIntPtr(System.UIntPtr,System.UIntPtr,System.UIntPtr)">
 <summary>Generate a range of unativeint values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeIntPtr(System.IntPtr,System.IntPtr,System.IntPtr)">
 <summary>Generate a range of nativeint values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt32(System.UInt32,System.UInt32,System.UInt32)">
 <summary>Generate a range of uint32 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeUInt64(System.UInt64,System.UInt64,System.UInt64)">
 <summary>Generate a range of uint64 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt64(System.Int64,System.Int64,System.Int64)">
 <summary>Generate a range of int64 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeSingle(System.Single,System.Single,System.Single)">
 <summary>Generate a range of float32 values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeDouble(System.Double,System.Double,System.Double)">
 <summary>Generate a range of float values</summary>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.RangeInt32(System.Int32,System.Int32,System.Int32)">
 <summary>Generate a range of integers</summary>  
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetStringSlice(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice from a string</summary>
 <param name="source">The source string.</param>
 <param name="start">The index of the first character of the slice.</param>
 <param name="finish">The index of the last character of the slice.</param>
 <returns>The substring from the given indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice4D``1(``0[0:,0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:,0:,0:])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <param name="start4">The start index of the fourth dimension.</param>
 <param name="finish4">The end index of the fourth dimension.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice4D``1(``0[0:,0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The source array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <param name="start4">The start index of the fourth dimension.</param>
 <param name="finish4">The end index of the fourth dimension.</param>
 <returns>The four dimensional sub array from the given indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice3D``1(``0[0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:,0:])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice3D``1(``0[0:,0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The source array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="start3">The start index of the third dimension.</param>
 <param name="finish3">The end index of the third dimension.</param>
 <returns>The three dimensional sub array from the given indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice2D``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[0:,0:])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice2D``1(``0[0:,0:],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The source array.</param>
 <param name="start1">The start index of the first dimension.</param>
 <param name="finish1">The end index of the first dimension.</param>
 <param name="start2">The start index of the second dimension.</param>
 <param name="finish2">The end index of the second dimension.</param>
 <returns>The two dimensional sub array from the input indices.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.SetArraySlice``1(``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},``0[])">
 <summary>Sets a slice of an array</summary>
 <param name="target">The target array.</param>
 <param name="start">The start index.</param>
 <param name="finish">The end index.</param>
 <param name="source">The source array.</param>
</member>
<member name="M:Microsoft.FSharp.Core.Operators.OperatorIntrinsics.GetArraySlice``1(``0[],Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets a slice of an array</summary>
 <param name="source">The input array.</param>
 <param name="start">The start index.</param>
 <param name="finish">The end index.</param>
 <returns>The sub array from the input indices.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.Operators.OperatorIntrinsics">
 <summary>A module of compiler intrinsic functions for efficient implementations of F# integer ranges
 and dynamic invocations of other F# operators</summary>
</member>
<member name="T:Microsoft.FSharp.Core.Operators">
 <summary>Basic F# Operators. This module is automatically opened in all F# code.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6.Invoke(`0,`1,`2,`3,`4)">
 <summary>Invoke an F# first class function value that accepts five curried arguments 
 without intervening execution</summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <param name="arg5">The fifth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{`2,Microsoft.FSharp.Core.FSharpFunc`2{`3,Microsoft.FSharp.Core.FSharpFunc`2{`4,`5}}}}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept five curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The optimized function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6.#ctor">
 <summary>Construct an optimized function value that can accept five curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`6">
 <summary>The CLI type used to represent F# function values that accept five curried arguments 
 without intervening execution. This type should not typically used directly from 
 either F# code or from other CLI languages.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5.Invoke(`0,`1,`2,`3)">
 <summary>Invoke an F# first class function value that accepts four curried arguments 
 without intervening execution</summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <param name="arg4">The fourth arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{`2,Microsoft.FSharp.Core.FSharpFunc`2{`3,`4}}}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept four curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The optimized function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5.#ctor">
 <summary>Construct an optimized function value that can accept four curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`5">
 <summary>The CLI type used to represent F# function values that accept four curried arguments 
 without intervening execution. This type should not typically used directly from 
 either F# code or from other CLI languages.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4.Invoke(`0,`1,`2)">
 <summary>Invoke an F# first class function value that accepts three curried arguments 
 without intervening execution</summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <param name="arg3">The third arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,Microsoft.FSharp.Core.FSharpFunc`2{`2,`3}}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept three curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The adapted function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4.#ctor">
 <summary>Construct an optimized function value that can accept three curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`4">
 <summary>The CLI type used to represent F# function values that accept
 three iterated (curried) arguments without intervening execution. This type should not
 typically used directly from either F# code or from other CLI languages.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3.Invoke(`0,`1)">
 <summary>Invoke the optimized function value with two curried arguments </summary>
 <param name="arg1">The first arg.</param>
 <param name="arg2">The second arg.</param>
 <returns>The function result.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3.Adapt(Microsoft.FSharp.Core.FSharpFunc`2{`0,Microsoft.FSharp.Core.FSharpFunc`2{`1,`2}})">
 <summary>Adapt an F# first class function value to be an optimized function value that can 
 accept two curried arguments without intervening execution. </summary>
 <param name="func">The input function.</param>
 <returns>The adapted function.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3.#ctor">
 <summary>Construct an optimized function value that can accept two curried 
 arguments without intervening execution.</summary>
 <returns>The optimized function.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures.FSharpFunc`3">
 <summary>The CLI type used to represent F# function values that accept
 two iterated (curried) arguments without intervening execution. This type should not
 typically used directly from either F# code or from other CLI languages.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.OptimizedClosures">
 <summary>An implementation module used to hold some private implementations of function
 value invocation.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.ToList``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Convert the option to a list of length 0 or 1.</summary>
 <param name="option">The input option.</param>
 <returns>The result list.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.ToArray``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Convert the option to an array of length 0 or 1.</summary>
 <param name="option">The input option.</param>
 <returns>The result array.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Bind``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>bind f inp</c> evaluates to <c>match inp with None -> None | Some x -> f x</c></summary>
 <param name="binder">A function that takes the value of type T from an option and transforms it into
 an option containing a value of type U.</param>
 <param name="option">The input option.</param>
 <returns>An option of the output type of the binder.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Map``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>map f inp</c> evaluates to <c>match inp with None -> None | Some x -> Some (f x)</c>.</summary>
 <param name="mapping">A function to apply to the option value.</param>
 <param name="option">The input option.</param>
 <returns>An option of the input value after applying the mapping function, or None if the input is None.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>iter f inp</c> executes <c>match inp with None -> () | Some x -> f x</c>.</summary>
 <param name="action">A function to apply to the option value.</param>
 <param name="option">The input option.</param>
 <returns>Unit if the option is None, otherwise it returns the result of applying the predicate
 to the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>forall p inp" evaluates to "match inp with None -> true | Some x -> p x</c>.</summary>
 <param name="predicate">A function that evaluates to a boolean when given a value from the option type.</param>
 <param name="option">The input option.</param>
 <returns>True if the option is None, otherwise it returns the result of applying the predicate
 to the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc`2{``0,System.Boolean},Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>exists p inp</c> evaluates to <c>match inp with None -> false | Some x -> p x</c>.</summary>
 <param name="predicate">A function that evaluates to a boolean when given a value from the option type.</param>
 <param name="option">The input option.</param>
 <returns>False if the option is None, otherwise it returns the result of applying the predicate
 to the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``1}},Microsoft.FSharp.Core.FSharpOption{``0},``1)">
 <summary><c>fold f inp s</c> evaluates to <c>match inp with None -> s | Some x -> f x s</c>.</summary>
 <param name="folder">A function to update the state data when given a value from an option.</param>
 <param name="option">The input option.</param>
 <param name="state">The initial state.</param>
 <returns>The original state if the option is None, otherwise it returns the updated state with the folder
 and the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc`2{``1,Microsoft.FSharp.Core.FSharpFunc`2{``0,``1}},``1,Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>fold f s inp</c> evaluates to <c>match inp with None -> s | Some x -> f s x</c>.</summary>
 <param name="folder">A function to update the state data when given a value from an option.</param>
 <param name="state">The initial state.</param>
 <param name="option">The input option.</param>
 <returns>The original state if the option is None, otherwise it returns the updated state with the folder
 and the option value.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.Count``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary><c>count inp</c> evaluates to <c>match inp with None -> 0 | Some _ -> 1</c>.</summary>
 <param name="option">The input option.</param>
 <returns>A zero if the option is None, a one otherwise.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.GetValue``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Gets the value associated with the option.</summary>
 <param name="option">The input option.</param>
 <returns>The value within the option.</returns>
 <exception href="System.ArgumentException">Thrown when the option is None.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.IsNone``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Returns true if the option is None.</summary>
 <param name="option">The input option.</param>
 <returns>True if the option is None.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.OptionModule.IsSome``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Returns true if the option is not None.</summary>
 <param name="option">The input option.</param>
 <returns>True if the option is not None.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.OptionModule">
 <summary>Basic operations on options.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.TextWriterFormat`1">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.IO.TextWriter</c>. The type parameter indicates the
 arguments and return type of the format operation.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.StringFormat`1">
 <summary>Represents a statically-analyzed format when formatting builds a string. The type parameter indicates the
 arguments and return type of the format operation.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.BuilderFormat`1">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.Text.StringBuilder</c>. The type parameter indicates the
 arguments and return type of the format operation.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.TextWriterFormat`2">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.IO.TextWriter</c>. The first type parameter indicates the
 arguments of the format operation and the last the overall return type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.StringFormat`2">
 <summary>Represents a statically-analyzed format when formatting builds a string. The first type parameter indicates the
 arguments of the format operation and the last the overall return type.</summary>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule.BuilderFormat`2">
 <summary>Represents a statically-analyzed format associated with writing to a <c>System.Text.StringBuilder</c>. The first type parameter indicates the
 arguments of the format operation and the last the overall return type.</summary>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThenFail``2(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,``1})">
 <summary>Print to a string buffer and raise an exception with the given
 result. Helper printers must return strings.</summary>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThen``2(Microsoft.FSharp.Core.FSharpFunc`2{System.String,``0},Microsoft.FSharp.Core.PrintfFormat{``1,Microsoft.FSharp.Core.Unit,System.String,``0})">
 <summary>sprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
 <param name="continutation">The function called to generate a result from the formatted string.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatThen``2(Microsoft.FSharp.Core.FSharpFunc`2{System.String,``0},Microsoft.FSharp.Core.PrintfFormat{``1,Microsoft.FSharp.Core.Unit,System.String,``0})">
 <summary>printf, but call the given 'final' function to generate the result.
 For example, these let the printing force a flush after all output has 
 been entered onto the channel, but not before. </summary>
 <param name="continutation">The function called after formatting to generate the format result.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToTextWriterThen``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0},System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``1,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,``0})">
 <summary>fprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
 <param name="continutation">The function called after formatting to generate the format result.</param>
 <param name="textWriter">The input TextWriter.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringBuilderThen``2(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Core.Unit,``0},System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat{``1,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,``0})">
 <summary>bprintf, but call the given 'final' function to generate the result.
 See <c>kprintf</c>.</summary>
 <param name="continutation">The function called after formatting to generate the format result.</param>
 <param name="builder">The input StringBuilder.</param>
 <param name="format">The input formatter.</param>
 <returns>The arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringThen``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,System.String})">
 <summary>Print to a string via an internal string buffer and return 
 the result as a string. Helper printers must return strings.</summary>
 <param name="format">The input formatter.</param>
 <returns>The formatted string.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLine``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stdout, adding a newline.</summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormat``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stdout</summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLineToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stderr, adding a newline </summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToError``1(Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Formatted printing to stderr</summary>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatLineToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a text writer, adding a newline</summary>
 <param name="textWriter">The TextWriter to print to.</param>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToTextWriter``1(System.IO.TextWriter,Microsoft.FSharp.Core.PrintfFormat{``0,System.IO.TextWriter,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a text writer.</summary>
 <param name="textWriter">The TextWriter to print to.</param>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="M:Microsoft.FSharp.Core.PrintfModule.PrintFormatToStringBuilder``1(System.Text.StringBuilder,Microsoft.FSharp.Core.PrintfFormat{``0,System.Text.StringBuilder,Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
 <summary>Print to a <c>System.Text.StringBuilder</c></summary>
 <param name="builder">The StringBuilder to print to.</param>
 <param name="format">The input formatter.</param>
 <returns>The return type and arguments of the formatter.</returns>
</member>
<member name="T:Microsoft.FSharp.Core.PrintfModule">
 <summary>Extensible printf-style formatting for numbers and other datatypes</summary>

 <remarks>Format specifications are strings with "%" markers indicating format 
 placeholders. Format placeholders consist of:
  <c>
    %[flags][width][.precision][type]
  </c>
 where the type is interpreted as follows:
  <c>
     %b:         bool, formatted as "true" or "false"
     %s:         string, formatted as its unescaped contents
     %d, %i:     any basic integer type formatted as a decimal integer, signed if the basic integer type is signed.
     %u:         any basic integer type formatted as an unsigned decimal integer
     %x, %X, %o: any basic integer type formatted as an unsigned hexadecimal 
                 (a-f)/Hexadecimal (A-F)/Octal integer
 
     %e, %E, %f, %F, %g, %G: 
                 any basic floating point type (float,float32) formatted
                 using a C-style floating point format specifications, i.e
 
     %e, %E: Signed value having the form [-]d.dddde[sign]ddd where 
                 d is a single decimal digit, dddd is one or more decimal
                 digits, ddd is exactly three decimal digits, and sign 
                 is + or -
 
     %f:     Signed value having the form [-]dddd.dddd, where dddd is one
                 or more decimal digits. The number of digits before the 
                 decimal point depends on the magnitude of the number, and 
                 the number of digits after the decimal point depends on 
                 the requested precision.
 
     %g, %G: Signed value printed in f or e format, whichever is 
                 more compact for the given value and precision.
 
 
    %M:      System.Decimal value
 
    %O:      Any value, printed by boxing the object and using it's ToString method(s)
 
    %A:      Any value, printed with the default layout settings 
 
    %a:      A general format specifier, requires two arguments:
                 (1) a function which accepts two arguments:
                     (a) a context parameter of the appropriate type for the
                         given formatting function (e.g. an #System.IO.TextWriter)
                     (b) a value to print
                         and which either outputs or returns appropriate text.
 
                 (2) the particular value to print
 
 
    %t:      A general format specifier, requires one argument:
                 (1) a function which accepts a context parameter of the
                     appropriate type for the given formatting function (e.g. 
                     an System.IO.TextWriter)and which either outputs or returns 
                     appropriate text.

  Basic integer types are:
     byte,sbyte,int16,uint16,int32,uint32,int64,uint64,nativeint,unativeint
  Basic floating point types are:
     float, float32
 </c>
 The optional width is an integer indicating the minimal width of the
 result. For instance, %6d prints an integer, prefixing it with spaces
 to fill at least 6 characters. If width is '*', then an extra integer
 argument is taken to specify the corresponding width.
 <c>
     any number
     '*': 
 </c>
 Valid flags are:
 <c>
     0: add zeros instead of spaces to make up the required width
     '-': left justify the result within the width specified
     '+': add a '+' character if the number is positive (to match a '-' sign 
          for negatives)
     ' ': add an extra space if the number is positive (to match a '-' 
              sign for negatives)
 </c>
 The printf '#' flag is invalid and a compile-time error will be reported if it is used.</remarks>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Core.SR">

</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Length(System.String)">
 <summary>Returns the length of the string.</summary>
 <param name="str">The input string.</param>
 <returns>The number of characters in the string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Replicate(System.Int32,System.String)">
 <summary>Returns a string by concatenating <c>count</c> instances of <c>str</c>.</summary>
 <param name="count">The number of copies of the input string will be copied.</param>
 <param name="str">The input string.</param>
 <returns>The concatenated string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Exists(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Boolean},System.String)">
 <summary>Tests if any character of the string satisfies the given predicate.</summary>
 <param name="predicate">The function to test each character of the string.</param>
 <param name="str">The input string.</param>
 <returns>True if any character returns true for the predicate and false otherwise.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.ForAll(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Boolean},System.String)">
 <summary>Tests if all characters in the string satisfy the given predicate.</summary>
 <param name="predicate">The function to test each character of the string.</param>
 <param name="str">The input string.</param>
 <returns>True if all characters return true for the predicate and false otherwise.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Initialize(System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,System.String})">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each index from <c>0</c> to <c>count-1</c> and concatenating the resulting
 strings.</summary>
 <param name="count">The number of strings to initialize.</param>
 <param name="initializer">The function to take an index and produce a string to
 be concatenated with the others.</param>
 <returns>The constructed string.</returns>
 <exception cref="System.ArgumentException">Thrown when <c>count</c> is negative.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Collect(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.String},System.String)">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each of the characters of the input string and concatenating the resulting
 strings.</summary>
 <param name="mapping">The function to produce a string from each character of the input string.</param>
 <param name="str">The input string.</param>
 <returns>The concatenated string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.MapIndexed(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Char}},System.String)">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each character and index of the input string.</summary>
 <param name="mapping">The function to apply to each character and index of the string.</param>
 <param name="str">The input string.</param>
 <returns>The resulting string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Map(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,System.Char},System.String)">
 <summary>Builds a new string whose characters are the results of applying the function <c>mapping</c>
 to each of the characters of the input string.</summary>
 <param name="mapping">The function to apply to the characters of the string.</param>
 <param name="str">The input string.</param>
 <returns>The resulting string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.IterateIndexed(Microsoft.FSharp.Core.FSharpFunc`2{System.Int32,Microsoft.FSharp.Core.FSharpFunc`2{System.Char,Microsoft.FSharp.Core.Unit}},System.String)">
 <summary>Applies the function <c>action</c> to the index of each character in the string and the
 character itself.</summary>
 <param name="action">The function to apply to each character and index of the string.</param>
 <param name="str">The input string.</param>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Iterate(Microsoft.FSharp.Core.FSharpFunc`2{System.Char,Microsoft.FSharp.Core.Unit},System.String)">
 <summary>Applies the function <c>action</c> to each character in the string.</summary>
 <param name="action">The function to be applied to each character of the string.</param>
 <param name="str">The input string.</param>
 <exception cref="System.ArgumentNullException">Thrown when the input string is null.</exception>
</member>
<member name="M:Microsoft.FSharp.Core.StringModule.Concat(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Returns a new string made by concatenating the given strings
 with separator <c>sep</c>, that is <c>a1 + sep + ... + sep + aN</c>.</summary>
 <param name="sep">The separator string to be inserted between the strings
 of the input sequence.</param>
 <param name="strings">The sequence of strings to be concatenated.</param>
 <returns>A new string consisting of the concatenated strings separated by
 the separation string.</returns>
 <exception cref="System.ArgumentNullException">Thrown when strings is null.</exception>
</member>
<member name="T:Microsoft.FSharp.Core.StringModule">
 <summary>Functional programming operators for string processing.  Further string operations
 are available via the member functions on strings and other functionality in
  <a href="http://msdn2.microsoft.com/en-us/library/system.string.aspx">System.String</a> 
 and <a href="http://msdn2.microsoft.com/library/system.text.regularexpressions.aspx">System.Text.RegularExpressions</a> types.</summary>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.StackAllocate``1(System.Int32)">
 <summary>Allocates a region of memory on the stack.</summary>
 <param name="count">The number of objects of type T to allocate.</param>
 <returns>A typed pointer to the allocated memory.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.SetPointerInlined``1(``0*,System.Int32,``0)">
 <summary>Assigns the <c>value</c> into the memory location referenced by the typed native 
 pointer computed by adding index * sizeof&lt;'T&gt; to the given input pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="index">The index by which to offset the pointer.</param>
 <param name="value">The value to assign.</param>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.WritePointerInlined``1(``0*,``0)">
 <summary>Assigns the <c>value</c> into the memory location referenced by the given typed native pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="value">The value to assign.</param>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.ReadPointerInlined``1(``0*)">
 <summary>Dereferences the given typed native pointer.</summary>
 <param name="address">The input pointer.</param>
 <returns>The value at the pointer address.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.GetPointerInlined``1(``0*,System.Int32)">
 <summary>Dereferences the typed native pointer computed by adding index * sizeof&lt;'T&gt; to the 
 given input pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="index">The index by which to offset the pointer.</param>
 <returns>The value at the pointer address.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.AddPointerInlined``1(``0*,System.Int32)">
 <summary>Returns a typed native pointer by adding index * sizeof&lt;'T&gt; to the 
 given input pointer.</summary>
 <param name="address">The input pointer.</param>
 <param name="index">The index by which to offset the pointer.</param>
 <returns>A typed pointer.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.ToNativeIntInlined``1(``0*)">
 <summary>Returns a machine address for a given typed native pointer.</summary>
 <param name="address">The input pointer.</param>
 <returns>The machine address.</returns>
</member>
<member name="M:Microsoft.FSharp.NativeInterop.NativePtrModule.OfNativeIntInlined``1(System.IntPtr)">
 <summary>Returns a typed native pointer for a given machine address.</summary>
 <param name="address">The pointer address.</param>
 <returns>A typed pointer.</returns>
</member>
<member name="T:Microsoft.FSharp.NativeInterop.NativePtrModule">
 <summary>Contains operations on native pointers. Use of these operators may
 result in the generation of unverifiable code.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Primitives.Basics.Array">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Primitives.Basics.List">

</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpExpr`1.Raw">
 <summary>Gets the raw expression associated with this type-carrying expression</summary>
</member>
<member name="T:Microsoft.FSharp.Quotations.FSharpExpr`1">
 <summary>Type-carrying quoted expressions. Expressions are generated either
 by quotations in source text or programatically</summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpExpr.Type">
 <summary>Returns type of an expression.</summary>
</member>
<member name="P:Microsoft.FSharp.Quotations.FSharpExpr.CustomAttributes">
 <summary>Returns the custom attributes of an expression.</summary>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.WhileLoop(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a while loop</summary>
 <param name="guard">The predicate to control the loop iteration.</param>
 <param name="body">The body of the while loop.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.VarSet(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents setting a mutable variable</summary>
 <param name="variable">The input variable.</param>
 <param name="value">The value to set.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Var(Microsoft.FSharp.Quotations.FSharpVar)">
 <summary>Builds an expression that represents a variable</summary>
 <param name="variable">The input variable.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Value``1(``0)">
 <summary>Builds an expression that represents a constant value </summary>
 <param name="value">The typed value.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Value(System.Object,System.Type)">
 <summary>Builds an expression that represents a constant value of a particular type</summary>
 <param name="value">The untyped object.</param>
 <param name="expressionType">The type of the object.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.UnionCaseTest(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Reflection.UnionCaseInfo)">
 <summary>Builds an expression that represents a test of a value is of a particular union case</summary>
 <param name="source">The expression to test.</param>
 <param name="unionCase">The description of the union case.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TypeTest(Microsoft.FSharp.Quotations.FSharpExpr,System.Type)">
 <summary>Builds an expression that represents a type test.</summary>
 <param name="source">The expression to test.</param>
 <param name="target">The target type.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TupleGet(Microsoft.FSharp.Quotations.FSharpExpr,System.Int32)">
 <summary>Builds an expression that represents getting a field of a tuple</summary>
 <param name="tuple">The input tuple.</param>
 <param name="index">The index of the tuple element to get.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TryWith(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a try/with construct for exception filtering and catching.</summary>
 <param name="body">The body of the try expression.</param>
 <param name="filterVar"></param>
 <param name="filterBody"></param>
 <param name="catchVar">The variable to bind to a caught exception.</param>
 <param name="catchBody">The expression evaluated when an exception is caught.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TryGetReflectedDefinition(System.Reflection.MethodBase)">
 <summary>Try and find a stored reflection definition for the given method. Stored reflection
 definitions are added to an F# assembly through the use of the [&lt;ReflectedDefinition&gt;] attribute.</summary>
 <param name="methodBase">The description of the method to find.</param>
 <returns>The reflection definition or None if a match could not be found.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.TryFinally(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a try/finally construct </summary>
 <param name="body">The body of the try expression.</param>
 <param name="compensation">The final part of the expression to be evaluated.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Substitute(Microsoft.FSharp.Core.FSharpFunc`2{Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Substitutes through the given expression using the given functions
 to map variables to new values. The functions must give consistent results
 at each application. Variable renaming may occur on the target expression
 if variable capture occurs.</summary>
 <param name="substitution">The function to map variables into expressions.</param>
 <returns>The expression with the given substitutions.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Sequential(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the sequential execution of one expression followed by another</summary>
 <param name="first">The first expression.</param>
 <param name="second">The second expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.RegisterReflectedDefinitions(System.Reflection.Assembly,System.String,System.Byte[])">
 <summary>Permits interactive environments such as F# Interactive
 to explicitly register new pickled resources that represent persisted 
 top level definitions. The string indicates a unique name for the resources
 being added. The format for the bytes is the encoding generated by the F# compiler.</summary>
 <param name="assembly">The assembly associated with the resource.</param>
 <param name="resource">The unique name for the resources being added.</param>
 <param name="serializedValue">The serialized resource to register with the environment.</param>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Quote(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents a nested quotation literal</summary>
 <param name="inner">The expression being quoted.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertySet(System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents writing to a static property </summary>
 <param name="property">The description of the property.</param>
 <param name="value">The value to set.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertySet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents writing to a property of an object</summary>
 <param name="obj">The input object.</param>
 <param name="property">The description of the property.</param>
 <param name="value">The value to set.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertyGet(System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents reading a static property </summary>
 <param name="property">The description of the property.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.PropertyGet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.PropertyInfo,Microsoft.FSharp.Core.FSharpOption{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents reading a property of an object</summary>
 <param name="obj">The input object.</param>
 <param name="property">The description of the property.</param>
 <param name="indexerArgs">List of indices for the property if it is an indexed property.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewUnionCase(Microsoft.FSharp.Reflection.UnionCaseInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the creation of a union case value</summary>
 <param name="unionCase">The description of the union case.</param>
 <param name="arguments">The list of arguments for the case.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewTuple(Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the creation of an F# tuple value</summary>
 <param name="elements">The list of elements of the tuple.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewRecord(System.Type,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds record-construction expressions </summary>
 <param name="recordType">The type of record.</param>
 <param name="elements">The list of elements of the record.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewObject(System.Reflection.ConstructorInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the invocation of an object constructor</summary>
 <param name="constructorInfo">The description of the constructor.</param>
 <param name="arguments">The list of arguments to the constructor.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewDelegate(System.Type,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpVar},Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the creation of a delegate value for the given type</summary>
 <param name="delegateType">The type of delegate.</param>
 <param name="parameters">The parameters for the delegate.</param>
 <param name="body">The body of the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.NewArray(System.Type,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents the creation of an array value initialized with the given elements</summary>
 <param name="elementType">The type for the elements of the array.</param>
 <param name="elements">The list of elements of the array.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.LetRecursive(Microsoft.FSharp.Collections.FSharpList{System.Tuple`2{Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr}},Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds recursives expressions associated with 'let rec' constructs</summary>
 <param name="bindings">The list of bindings for the let expression.</param>
 <param name="body">The sub-expression where the bindings are in scope.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Let(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds expressions associated with 'let' constructs</summary>
 <param name="letVariable">The variable in the let expression.</param>
 <param name="letExpr">The expression bound to the variable.</param>
 <param name="body">The sub-expression where the binding is in scope.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Lambda(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the constrution of an F# function value</summary>
 <param name="parameter">The parameter to the function.</param>
 <param name="body">The body of the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.IfThenElse(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds 'if ... then ... else' expressions.</summary>
 <param name="guard">The condition expression.</param>
 <param name="thenExpr">The <c>then</c> sub-expression.</param>
 <param name="elseExpr">The <c>else</c> sub-expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.GlobalVar``1(System.String)">
 <summary>Fetches or creates a new variable with the given name and type from a global pool of shared variables
 indexed by name and type. The type is given by the expicit or inferred type parameter</summary>
 <param name="name">The variable name.</param>
 <returns>The created of fetched typed global variable.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.GetFreeVars">
 <summary>Gets the free expression variables of an expression as a list.</summary>
 <returns>A sequence of the free variables in the expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.ForIntegerRangeLoop(Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds a 'for i = ... to ... do ...' expression that represent loops over integer ranges</summary>
 <param name="loopVariable">The sub-expression declaring the loop variable.</param>
 <param name="start">The sub-expression setting the initial value of the loop variable.</param>
 <param name="endExpr">The sub-expression declaring the final value of the loop variable.</param>
 <param name="body">The sub-expression representing the body of the loop.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldSet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents writing to a field of an object</summary>
 <param name="obj">The input object.</param>
 <param name="fieldInfo">The description of the field to write to.</param>
 <param name="value">The value to set to the field.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldSet(System.Reflection.FieldInfo,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents writing to a static field </summary>
 <param name="fieldInfo">The description of the field to write to.</param>
 <param name="value">The value to the set to the field.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldGet(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.FieldInfo)">
 <summary>Builds an expression that represents the access of a field of an object</summary>
 <param name="obj">The input object.</param>
 <param name="fieldInfo">The description of the field to access.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.FieldGet(System.Reflection.FieldInfo)">
 <summary>Builds an expression that represents the access of a static field</summary>
 <param name="fieldInfo">The description of the field to access.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Deserialize(System.Type,Microsoft.FSharp.Collections.FSharpList{System.Type},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr},System.Byte[])">
 <summary>This function is called automatically when quotation syntax (&lt;@ @&gt;) and related typed-expression
 quotations are used. The bytes are a pickled binary representation of an unlinked form of the quoted expression,
 and the System.Type argument is any type in the assembly where the quoted
 expression occurs, i.e. it helps scope the interpretation of the cross-assembly
 references in the bytes.</summary>
 <param name="qualifyingType">A type in the assembly where the quotation occurs.</param>
 <param name="spliceTypes">The list of spliced types.</param>
 <param name="spliceExprs">The list of spliced expressions.</param>
 <param name="bytes">The serialized form of the quoted expression.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.DefaultValue(System.Type)">
 <summary>Builds an expression that represents the invocation of a default object constructor</summary>
 <param name="expressionType">The type on which the constructor is invoked.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Coerce(Microsoft.FSharp.Quotations.FSharpExpr,System.Type)">
 <summary>Builds an expression that represents the coercion of an expression to a type</summary>
 <param name="source">The expression to coerce.</param>
 <param name="target">The target type.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Cast``1(Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Returns a new typed expression given an underlying runtime-typed expression.
 A type annotation is usually required to use this function, and 
 using an incorrect type annotation may result in a later runtime exception.</summary>
 <param name="source">The expression to cast.</param>
 <returns>The resulting typed expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Call(Microsoft.FSharp.Quotations.FSharpExpr,System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents a call to an instance method associated with an object</summary>
 <param name="obj">The input object.</param>
 <param name="methodInfo">The description of the method to call.</param>
 <param name="arguments">The list of arguments to the method.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Call(System.Reflection.MethodInfo,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr})">
 <summary>Builds an expression that represents a call to an static method or module-bound function</summary>
 <param name="methodInfo">The MethodInfo describing the method to call.</param>
 <param name="arguments">The list of arguments to the method.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Applications(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Quotations.FSharpExpr}})">
 <summary>Builds an expression that represents the application of a first class function value to multiple arguments</summary>
 <param name="functionExpr">The function to apply.</param>
 <param name="arguments">The list of lists of arguments to the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.Application(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents the application of a first class function value to a single argument.</summary>
 <param name="functionExpr">The function to apply.</param>
 <param name="argument">The argument to the function.</param>
 <returns>The resulting expression.</returns>
</member>
<member name="M:Microsoft.FSharp.Quotations.FSharpExpr.AddressSet(Microsoft.FSharp.Quotations.FSharpExpr,Microsoft.FSharp.Quotations.FSharpExpr)">
 <summary>Builds an expression that represents setting the value held at a particu