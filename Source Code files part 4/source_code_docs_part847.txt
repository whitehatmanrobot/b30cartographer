( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1853a2565,3385
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 
> 			pThisThreadPool->CheckWinsock1IO( pSocketSet );
> 			
> 			//
> 			// since there are Winsock1 sockets active, don't spend a lot of
> 			// time waiting for something to happen for Winsock2
> 			//
> 			if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 			{
> 				dwMaxWaitTime = g_dwSelectTimeSlice;
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 
> 			//
> 			// New job.  Account for the time spent in the wait.  Don't
> 			// account for time after the job is complete because it's
> 			// possible that the job was an job submission which will want
> 			// to reset the wait time.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Primary Win9x thread has a pending job!" );
> 				pThisThreadPool->ProcessWin9xJob( &CoreData );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Primary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			//
> 			// New job.  This is the secondary thread and is only used to handle
> 			// Winsock2 I/O.  Ignore this event and sleep to cause the proper
> 			// work thread to handle the event.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Secondary Win9x thread sleeping on job notification!" );
> 				SleepEx( 0, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Secondary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thead failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2197a3730,4087
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CheckWinsock1IO( const FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( pSocketSet->fd_array[ uWaitingSocketCount ] == m_SocketSet.fd_array[ uIdx ] )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		(pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
63a65
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
100c102,103
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
146a150
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
151a156
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
159a165,167
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
170a179,181
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
> 		
222a234
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
276a289
> 		HRESULT	Win9xInit( void );
286a300,301
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
287a303,304
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
289a307
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
294a313,316
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		void	CheckWinsock1IO( const FD_SET *const pWinsock1Sockets );
> 		void	ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
41a44
> #include	"Creg.h"
42a46,49
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
136a182,238
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
223a326,328
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
229a335,338
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
270c379
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
361a471,721
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CDPVACMI::LoadAndAllocString"
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
51,54d52
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a80,81
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a85
> static DWORD_PTR	OverrideWinsockVersion( void );
92a94,159
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
106a174,175
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
116a186,187
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
132c203
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
134,140c205,206
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
142,144c208,210
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
146d211
< 
148a214,215
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
158c225,233
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
188a264,266
> 	BOOL	fFreeReturn;
> 
> 
192c270,274
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
199a282,294
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
200a296
> 
286a383
> 	INT_PTR iWinsockVersion;
296a394
> 	iWinsockVersion = GetWinsockVersion();
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
165a167,170
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
167a173,188
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
232a254
> 		case TYPE_IPX:
318a341
> 	IDirectPlay8Address		*pSPOnlyAddress;
326c349
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
341a365
> 	pSPOnlyAddress = NULL;
391a416,463
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
393a466,513
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
526a647,678
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
540a693,694
> 			}
> 
618a773,778
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
811c971
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1024a1185,1213
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1025a1215,1216
> 			}
> 
1296c1487
< 	DNASSERT( ( pListenData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pListenData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1510a1702,1733
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1511a1735,1736
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\08091615.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dplay8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
-- 90 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\voice.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\voice.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dbginfo.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 231 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
39c41
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
123c125
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
131c133
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
165c167
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
167,171c169,171
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
173c173,178
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
175c180
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
176a182,265
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
193c282
< // BUGBUG: [mgere] [xbox] Added this temporarily
---
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
195,196c284,285
< COM_Init();
< 
---
>     if( hr == CO_E_NOTINITIALIZED )
>     {
218a308,311
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "UNKNOWN_MODULE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetDebug"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
78a83,92
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34,37
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
35a40
> #endif	// _WIN64
40a46,52
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
60a73
> #ifdef	_X86_
61a75,77
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
94a111,116
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
103a126,128
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
121a147
> 	OSVERSIONINFO	OSVersionInfo;
122a149
> 
130a158,186
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
229a286,287
> 		switch ( DNGetOSType() )
> 		{
232a291,292
> 			case VER_PLATFORM_WIN32_NT:
> 			{
257a318,328
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
290a362,393
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
361a465
> //#ifdef	_WIN32
390a495
> //#endif	// _WIN32
391a497,518
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
417a545
> #ifdef	_X86_
429a558,608
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
455a635,636
> #ifdef	_X86_
> 
467a649,695
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
688a917,919
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
707a939
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
798a1031
> 		pMemoryLink->NoteCurrentCallStack();
908a1142
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
925a1160,1163
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
926a1165
> #endif
943,944c1182,1193
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
948a1198,1206
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
979a1238
> 	DWORD		dwDisplayFlags;
980a1240
> 
983a1244
> 	fDisplayLeaks = TRUE;
986a1248,1249
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
993a1257
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1001a1266,1269
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1002a1271
> #endif
1007,1008c1276
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1009a1278,1328
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1022a1342,1485
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1117a1581
> 	static	BOOL	fDisplayCallStacks = TRUE;
1135a1600,1603
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1141a1610,1614
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1146,1147c1619,1651
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1180a1685
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	"CallStack.h"
> 
29a32,34
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
53a59
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
76d81
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
86a92,101
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
136a137,207
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
31a72
>         creg.cpp \
36c77,88
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include "DNetErrors.h"
20a22,23
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
22c25,48
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
24,29d49
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
31c51,53
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
33c55,60
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
35,37c62,69
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
39c71,83
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
41,43d84
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
45,47c86,100
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
49,50c102,103
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
52,53c105,109
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
55,56c111,113
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
58d114
< Return Value:
60,63c116,133
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
65,66c135,138
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
68d139
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
70,71c141,143
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
73c145,150
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
75c152,170
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
77,80d171
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
82,83c173,187
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
84a189,190
> 		*pdwWCHARStringLength = iReturn;
> 	}
86,151c192
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
152a194
> //**********************************************************************
154a197
> 
174a218,220
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
182c228,238
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
188a245,251
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
189a253,295
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
> 
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
> 
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
> #undef DPF_MODNAME
208a315,316
> 	int rval;
> 
216c324
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
219a328
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
39d38
< #include <wchar.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
144c144,146
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
207,208c209
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
323d323
< */
409,410c409
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
464c463
< */
---
> 
521c520
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
543c542
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
697d695
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1219c1217
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1264,1265c1262,1263
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1281c1279
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1284c1282
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
97a98
> #include "dplobby8.h"
258a260,279
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
319a341,342
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
913a937,942
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1098c1127
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
166a167
> #include "DPLobby8.h"
194a196
> #include "DNMisc.h"
204a207,209
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
206,207d210
< #include <mmsystem.h>
< #include <wchar.h>
636a640,648
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1077a1090,1093
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1195d1210
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1211,1213d1225
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1244d1255
< */
1844a1856,1863
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2023c2042
< 	{
---
> 	{
2410,2411d2428
< // BUGBUG [mgere] [xbox] Temporarily removed until a CoCreateGuid call is implemented
< #ifdef _BUILD_FOR_WIN2000
2417d2433
< #endif
2480a2497,2505
> 	//	Inform DPNSVR of LISTENs
> 	//
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		DPF(3,"Registering with DPNSVR");
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
> 	//
2589a2615,2619
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
3866c3896
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4023c4053
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4027c4057
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4091c4121
< 	//
---
> 	//
4109d4138
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4125,4127d4153
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4159d4184
< */
4847c4872
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
4850c4875,4944
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_EXIT( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_EXIT(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_EXIT(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
4852a4947,4969
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
4853a4971,5116
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	packBuffer.Initialize(NULL, 0 );
> 
> 	// Determine the size of buffer
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
4854a5118,5198
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5199a5544,5673
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	HRESULT					hResultCode;
> 	HRESULT					hrRegister;
> 	CAsyncOp				*pListenParent;
> 	CAsyncOp				*pListenSP;
> 	CAsyncOp				*pListen;
> 	CBilink					*pBilinkSP;
> 	CBilink					*pBilink;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR			DP8ABuffer[512];
> 	DWORD			DP8ASize;
> #endif
> 
> 	DPF(4,"Parameters: (none)");
> 
> 	pListenParent = NULL;
> 	pListenSP = NULL;
> 	pListen = NULL;
> 
> 	//
> 	//	Default error returned
> 	//
> 	hrRegister = DPNERR_GENERIC;
> 
> 	//
> 	//	Get LISTEN AsyncOp parent from DirectNet object and add a RefCount
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent == NULL)
> 	{
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 		goto Exit;
> 	}
> 	pdnObject->pListenParent->AddRef();
> 	pListenParent = pdnObject->pListenParent;
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Lock the parent so that the child bilink list doesn't change
> 	//
> 	pListenParent->Lock();
> 
> 	//
> 	//	Locate each child (LISTEN SP parent) and then each actual LISTEN
> 	//
> 	pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 	while (pBilinkSP != &pListenParent->m_bilinkParent)
> 	{
> 		pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 
> DNASSERT(pListenSP->GetParent() == pListenParent);
> 		//
> 		//	Lock the SP parent so that the child bilink doesn't change
> 		//
> 		pListenSP->Lock();
> 
> 		pBilink = pListenSP->m_bilinkParent.GetNext();
> 		while (pBilink != &pListenSP->m_bilinkParent)
> 		{
> 			pListen = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 
> 			DNASSERT(pListen->GetProtocolHandle() != NULL);
> 
> 			spInfo.hEndpoint = pListen->GetProtocolHandle();
> 			spInfo.pAddress = NULL;
> 			spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 
> 			if (DNPGetListenAddressInfo(pListen->GetProtocolHandle(),&spInfo) == DPN_OK)
> 			{
> 				DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 				DP8ASize = 512;
> 				spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 				DPF(4,"Listen address [%s]",DP8ABuffer);
> 
> 				// We re-try the registration to catch the case where DPNSVR is shutting
> 				// down while we are trying to register.  Unlikely but has to be handled.
> 				//
> #endif
> 	            for( DWORD dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		        {
>     				hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress );
> 	    			if( FAILED( hResultCode ) )
> 					{
>     					if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    					Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    				}
> 						else
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    				}
> 	    			}
> 					else
>     				{
>     					// Return DPN_OK if we succeed even once
>     					hrRegister = hResultCode;
>     					break;
> 	    			}
> 		        }
> 			
> 				spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 				spInfo.pAddress = NULL;
> 
> 			}
> 			pBilink = pBilink->GetNext();
> 		}
> 
> 		pListenSP->Unlock();
> 
> 		pBilinkSP = pBilinkSP->GetNext();
> 	}
> 
> 	pListenParent->Unlock();
> 
> 	pListenParent->Release();
> 	pListenParent = NULL;
> 
> Exit:
> 	DPF(4,"Returning: [0x%lx]",hrRegister);
> 	return( hrRegister );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
205c205
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
207a208,210
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
216a220,221
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
84a85
> #include "DPLobby8.h"
113d113
< #include <wchar.h>
117,120d116
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
189c185
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
264,265c260,261
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
292c288
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
725c721
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
810c806
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
823c819
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
880c876
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1183c1179
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1208,1209c1204
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1213c1208
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1340,1341c1335,1336
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1704a1700,1704
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
1970a1971,1979
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2832c2841
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2866c2875
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
2889c2898
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2916c2925
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
37a38
> #include "creg.h"
42a44,180
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
103a104,106
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
104a108,112
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
127a136
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
266a276
> 	// Lobby additions
267a278,281
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
44a45
> #include "DNMisc.h"
46a48
> #include "CReg.h"
60c62,71
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
75,76c86
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
78c88,98
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
80,81c100,103
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> //	CServiceProvider	*pSP;
89a112,115
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> //	pSP = NULL;
> 
93,94c119,124
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
96c126,153
< 	memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
98,101c155,168
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
102a170,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guid,NULL,TRUE);
> 			if (hResultCode != DPN_OK)
> 			{
> 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
> 				SubEntry.Close();
> 				dwEnumIndex++;
> 				dwKeyLen = dwMaxKeyLen;
> 				hResultCode = DPN_OK; // override return code
> 				continue;
> 			}
> 			else
> 			{
> //				DN_SPRelease(pdnObject,&guid);
> 			}
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> /*	REMOVE
> 		hResultCode = packedBuffer.AddToBack(&guid,sizeof(GUID));
> 		dnSpInfo.pGuid = static_cast<GUID*>(packedBuffer.GetTailAddress());
> */
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
108c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
110c272
< 		goto Exit;
---
> 		goto Failure;
114c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
117,123d279
< 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guidSP,NULL,TRUE);
< 			if (hResultCode != DPN_OK)
< 			{
< 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
< 				hResultCode = DPN_OK; // override return code
< 			}
< 
125a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
128a290,311
> 
> Failure:
> 
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	goto Exit;
142,146d324
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
296d473
< */	return(E_FAIL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
81a82,84
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
82a86
> #include "dplobby8.h"
281a286
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
680a686,705
> 	// Register with DPNSVR
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		BOOL	fCoUninitialize = FALSE;
> 
> 		DPF( 7, "Asking for DPNSVR to start listening for us.." );
> 
> 		if (COM_CoInitialize(NULL) == S_OK)
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		DNRegisterWithDPNSVR(pdnObject);
> 
> 		if (fCoUninitialize)
> 		{
> 			COM_CoUninitialize();
> 		}
> 	}
> 
772a798,802
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1148c1148
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1164c1164
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1168c1168
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1199c1199
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1215c1215
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1219c1219
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1248c1248
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1264c1264
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
424,425c424
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
437,438c436,437
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
525c524
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
212c212
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
220a221,227
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
246a254,259
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1062c1075
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1819c1832
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2135c2148
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common
---
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
18c39,56
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
20d57
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c59,60
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c63,67
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c69
< DLLDEF=..\dnet.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
29a71,78
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
62a112
>          ..\voice.cpp \
69a120,127
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
72,93c130,132
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
24a25,31
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DPNAddress"
> 
> /*
31a39,67
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNAddress"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNAddress"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\common
---
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
18c39,54
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
20d55
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c57,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c61,65
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c67
< DLLDEF=..\dnadd.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
29a69,76
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
38a86
>          ..\dplegacy.cpp \
40a89,95
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c98,100
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
105c105
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
106a107,111
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
117a118,122
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
357c357
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
578c578
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
30a38,66
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNSPWinsock"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectDPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNSPWinsock"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
120a122,141
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
144,145d164
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
193d211
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | WS_POPUP | WS_VISIBLE | WS_CAPTION | 
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE 
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE 
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,67
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,70
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
104a106
> 	m_hActiveSettingsDialog( NULL ),
134a137
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
369a373,380
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( m_hActiveSettingsDialog != NULL )
> 		{
> 			StopSettingsDialog( m_hActiveSettingsDialog );
> 		}
372a384,390
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( m_hActiveSettingsDialog == NULL );
> 	}
374d391
< 
877a895,901
> 	if ( m_hActiveSettingsDialog != NULL )
> 	{
> 		StopSettingsDialog( m_hActiveSettingsDialog );
> 		Unlock();
> 	}
> 	else
> 	{
883a908
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
344a345,351
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 
> 		//
363a371,372
> 
> 		HWND			m_hActiveSettingsDialog;		// handle of active settings dialog
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
44a46
> #include	"IPXAddress.h"
81c83,84
< 	m_pSocketPort( NULL )
---
> 	m_pSocketPort( NULL ),
> 	m_fWin9xOperationPending( FALSE )
99a103,104
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
114a120
> 	m_Win9xReceiveWSAReturn( ERROR_SUCCESS ),
191a198,203
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
212a225,231
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, always use IO completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
216a236,258
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
241a284,285
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
275a320,321
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
308a355,360
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
450a503,509
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, we'll always use completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
453a513,536
> 
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
485a569,570
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
506a592,593
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
87a88,90
> 		BOOL	Win9xOperationPending( void ) const { return m_fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_fWin9xOperationPending = fOperationPending; }
> 
117a121
> 		BOOL			m_fWin9xOperationPending;	// this structure has been initialized and the operation is pending on Win9x
118a123
> 
148a154
> 		INT		m_Win9xReceiveWSAReturn;		
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
84a86
> const DWORD	g_dwIPBroadcastAddressSize = sizeof( g_IPBroadcastAddress );
978,980d979
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1300d1298
< */	return DPNERR_UNSUPPORTED;
1480a1479,1484
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1481a1486,1504
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1484a1508,1510
> 		case 2:
> 		default:
> 		{
1485a1512,1514
> 			break;
> 		}
> 	}
1555a1585,1590
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1556a1592,1610
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1559a1614,1616
> 		case 2:
> 		default:
> 		{
1560a1618,1620
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
38a40
> #include	"StrUtils.h"
52a55
> #include	"IPUI.h"
95a99
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
117a122,368
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, &m_hActiveSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	m_hActiveSettingsDialog = NULL;
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.
> 	//
> 	if ( ( m_TempHostName[ 0 ] == '\0' ) && ( m_EndpointType == ENDPOINT_TYPE_ENUM ) )
> 	{
> 		DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 		memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 		dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		DNASSERT( FALSE );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> //	    	hr = CompleteEnumQuery();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing EnumQuery after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> //
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> //	    	hr = CompleteConnect();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing Connect after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// close this endpoint
> 	//
> 	Close( hr );
> 	
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
204a456,458
> 	m_EndpointType = ENDPOINT_TYPE_UNKNOWN;
> 	m_EnumKey.SetKey( INVALID_ENUM_KEY );
> 
216c470
< 	DNASSERT( m_pSocketPort == NULL );
---
> 	DNASSERT( GetSocketPort() == NULL );
217a472
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
255,258c510,514
< 	if ( ConnectHasBeenSignalled() != FALSE )
< 	{
< 		SignalDisconnect();
< 	}
---
> 	DNASSERT( ConnectHasBeenSignalled() == FALSE );
> //	if ( ConnectHasBeenSignalled() != FALSE )
> //	{
> //	    SignalDisconnect();
> //	}
263,264d518
< 
< 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,67
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
69a85
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,111
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
108a114,128
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
50a52
> #include	"IPXAddress.h"
54a57
> #include	"IPXEndpt.h"
82a86
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
84a89
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
174a180,186
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
193a206,222
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
318a348,354
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
328a365,370
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
399a442
> 
428a472,515
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
438a526,541
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34
> class	CIPXAddress;
34a36
> class	CIPXEndpoint;
59a62,63
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
61a66
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
40a41
> #include	"Registry.h"
512a514,517
> 
> 		hr = GetGatewayFromRegistry( reinterpret_cast<BYTE*>( gwipaddr ), sizeof( gwipaddr ) );
> 
> 		if(hr != DPN_OK){
514a520,522
> 		}
> 
> 		DPF(0,"Found suggested RSIP gateway in registry %s, running on Win95?\n",gwipaddr);
651d658
<         WCHAR wszIPHLPAPI[] = L"IPHLPAPI.DLL";
687c694
< 	hIpHlpApi = LoadLibrary(wszIPHLPAPI);
---
> 	hIpHlpApi = LoadLibrary("IPHLPAPI.DLL");
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
260a262,268
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
261a270,274
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
378a392,399
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
379a401,405
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
529a556,567
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
965a1004,1016
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ReadService( void )
> {
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
967a1019,1114
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return;
> }
968a1116,1118
> 
> 
> //**********************************************************************
969a1120,1265
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1WriteService( void )
> {
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ErrorService( void )
> {
> 	INT3;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
996,997c1292,1293
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
< 
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1003a1300,1308
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1009a1315,1317
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
1021a1330,1334
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1062a1376,1378
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1136c1452,1453
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1145a1463,1471
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
> 
> 	//
1151a1478,1480
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1162a1492,1497
> 	
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockReadData();
> 	}
> 
1209a1545,1546
> 					DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 					pReadData->SetWin9xOperationPending( FALSE );
1243a1581,1582
> 					DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 					pReadData->SetWin9xOperationPending( FALSE );
1288a1628,1629
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
1859a2201,2207
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1904a2253,2316
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2542a2955,3110
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Win9xWinsock2ReceiveComplete - a Winsock2 socket receive
> //		completed on Win9x
> //
> // Entry:		Poiner to read data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData )
> {
> 	DNASSERT( pReadData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	DNASSERT( pReadData->Win9xOperationPending() == FALSE );
> 
> 	//
> 	// figure out what's happening with this socket port
> 	//
> 	switch ( m_State )
> 	{
> 		//
> 		// we're unbound, discard this message and don't ask for any more
> 		//
> 		case SOCKET_PORT_STATE_UNBOUND:
> 		{
> 			goto Exit;
> 			break;
> 		}
> 
> 		//
> 		// we're initialized, process input data and submit a new receive if
> 		// applicable
> 		//
> 		case SOCKET_PORT_STATE_INITIALIZED:
> 		{
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// the socket was closed on an outstanding read, stop
> 				// receiving
> 				//
> 				case WSAENOTSOCK:					// WinNT return for closed socket
> 				case ERROR_OPERATION_ABORTED:		// Win9x return for closed socket
> 				{
> 					break;
> 				}
> 
> 				//
> 				// ERROR_SUCCESS = no problem
> 				// WSAECONNRESET = previous send failed (who cares!)
> 				// default = other error, just try reading again
> 				//
> 				case WSAECONNRESET:
> 				case ERROR_SUCCESS:
> 				default:
> 				{
> 					HRESULT			hTempResult;
> 
> 
> 					DNASSERT( m_State == SOCKET_PORT_STATE_INITIALIZED );
> 
> 					//					
> 					// attempt another read on this socket.
> 					//
> 					Winsock2Receive();
> 
> 					break;
> 				}
> 			}
> 
> 			//
> 			// now that initial reads have been taken care of, perform error-specific
> 			// processing
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// succcess, note the actual number of bytes read and tell
> 				// someone about the received data
> 				//
> 				//	Since this data has been processed then we know that receive buffer has already been returned.
> 				//
> 				case ERROR_SUCCESS:
> 				{
> 					pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = pReadData->m_dwOverlappedBytesReceived;
> 					pReadData->m_dwOverlappedBytesReceived = 0;
> 					ProcessReceivedData( pReadData );
> 
> 					break;
> 				}
> 
> 				//
> 				// Other error, stop in the debugger if it's not 'known'.
> 				//
> 				default:
> 				{
> 					switch ( pReadData->m_Win9xReceiveWSAReturn )
> 					{
> 						//
> 						// WSAECONNRESET = a previous send failed and Winsock is telling
> 						//				   us on an unrelated receive (Thanks WINSOCK).
> 						// WSAENOTSOCK = Socket was closed, user probably cancelled
> 						//				 somethinng.  Just clean up.
> 						// ERROR_OPERATION_ABORTED = something stopped the I/O operation.
> 						//
> 						case WSAECONNRESET:
> 						case WSAENOTSOCK:
> 						case ERROR_OPERATION_ABORTED:
> 						{
> 							break;
> 						}
> 
> 						default:
> 						{
> 							DPF( 0, "Problem with Winsock2 Win9x read: " );
> 							DisplayWinsockError( 0, pReadData->m_Win9xReceiveWSAReturn );
> 							INT3;
> 							
> 							break;
> 						}
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other state
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> Exit:
> 	//
> 	// return the current data to the pool and note that
> 	// this I/O operation is complete
> 	//
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();	
> 	DecRef();
> 
> 	return;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
244a245
> 		void	Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData );
250a252,254
> 		void	Winsock1ReadService( void );
> 		void	Winsock1WriteService( void );
> 		void	Winsock1ErrorService( void );
293a298
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,3c1,5
< TARGETNAME=dpnwsock
< TARGETTYPE=DYNLINK
< TARGETPATH=obj
---
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
5c7,17
< !ifdef _BUILD_FOR_WIN2000
---
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
> TARGETNAME=dpnwsock
> DLLDEF=..\wsocksp.def
7,13d18
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
15c20,26
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\..\dnaddress
---
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
17c28,29
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> TARGETPATH=obj
> TARGETTYPE=DYNLINK
19c31,35
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
21,22c37,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
> 
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
25c61,71
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
27c73,77
< DLLDEF=..\wsocksp.def
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28a79,88
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
> 
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
32a93
> 	 ..\DWinsock.cpp \
37a99,101
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
40a105
>          ..\Registry.cpp \
49a115,117
> #
> # Next specify options for the compiler.
> #
50a119,121
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
53,73c124,125
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.H>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120c120,121
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
158c159,160
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
236a239
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
237a241
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
240c244
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
247c251
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
275a280
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include <WSIPX.h>
49a51
> #include	"IPXAddress.h"
55a58
> #include	"IPXEndpt.h"
236a240,269
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
841a875,880
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1154a1194,1199
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1185a1231,1236
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
122a124,143
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
129a151,161
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	HWND			*phDialog;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
234c266,273
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
236c275,276
< 	)
---
> 						break;
> 					}
237a278,285
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
244c292,299
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
246c301,302
< 	)
---
> 						break;
> 					}
247a304,311
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
281a346,352
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
338a410,414
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
341a418,419
> 		case VER_PLATFORM_WIN32_NT:
> 		{
347a426,452
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
376a482,483
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
383a491,495
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
407a520,526
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
409,413d527
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
438a553,788
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
537a888,889
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
558a911
> 	}
640a994,996
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
> 		pReadData->m_Win9xReceiveWSAReturn = WSAESHUTDOWN;
658a1015,1016
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
802a1161
> 	m_IPXReadIODataPool.Deinitialize();
850d1208
< 			
854a1213,1221
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
932a1300,1308
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1187a1564,1565
> 	switch ( OSType() )
> 	{
1190a1569,1570
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1207a1588,1616
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1318a1728,1729
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1325a1737
> 	}
1527a1940,2040
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Pointer destination for copy of dialog handle
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( phDialog != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->phDialog = phDialog;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1547a2061,2062
> 	switch ( OSType() )
> 	{
1548a2064,2073
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1550a2076,2077
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1552a2080,2081
> 			break;
> 		}
1553a2083,2092
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1582a2122,2123
> 	switch ( OSType() )
> 	{
1583a2125,2132
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1589a2139,2140
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1629a2181,2193
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1709a2274,2420
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1853a2565,3385
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 
> 			pThisThreadPool->CheckWinsock1IO( pSocketSet );
> 			
> 			//
> 			// since there are Winsock1 sockets active, don't spend a lot of
> 			// time waiting for something to happen for Winsock2
> 			//
> 			if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 			{
> 				dwMaxWaitTime = g_dwSelectTimeSlice;
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 
> 			//
> 			// New job.  Account for the time spent in the wait.  Don't
> 			// account for time after the job is complete because it's
> 			// possible that the job was an job submission which will want
> 			// to reset the wait time.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Primary Win9x thread has a pending job!" );
> 				pThisThreadPool->ProcessWin9xJob( &CoreData );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Primary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			//
> 			// New job.  This is the secondary thread and is only used to handle
> 			// Winsock2 I/O.  Ignore this event and sleep to cause the proper
> 			// work thread to handle the event.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Secondary Win9x thread sleeping on job notification!" );
> 				SleepEx( 0, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Secondary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thead failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2197a3730,4087
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CheckWinsock1IO( const FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( pSocketSet->fd_array[ uWaitingSocketCount ] == m_SocketSet.fd_array[ uIdx ] )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		(pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
63a65
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
100c102,103
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
146a150
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
151a156
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
159a165,167
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
170a179,181
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
> 		
222a234
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
276a289
> 		HRESULT	Win9xInit( void );
286a300,301
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
287a303,304
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
289a307
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
294a313,316
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		void	CheckWinsock1IO( const FD_SET *const pWinsock1Sockets );
> 		void	ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
41a44
> #include	"Creg.h"
42a46,49
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
136a182,238
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
223a326,328
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
229a335,338
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
270c379
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
361a471,721
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CDPVACMI::LoadAndAllocString"
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
51,54d52
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a80,81
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a85
> static DWORD_PTR	OverrideWinsockVersion( void );
92a94,159
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
106a174,175
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
116a186,187
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
132c203
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
134,140c205,206
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
142,144c208,210
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
146d211
< 
148a214,215
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
158c225,233
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
188a264,266
> 	BOOL	fFreeReturn;
> 
> 
192c270,274
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
199a282,294
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
200a296
> 
286a383
> 	INT_PTR iWinsockVersion;
296a394
> 	iWinsockVersion = GetWinsockVersion();
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
165a167,170
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
167a173,188
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
232a254
> 		case TYPE_IPX:
318a341
> 	IDirectPlay8Address		*pSPOnlyAddress;
326c349
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
341a365
> 	pSPOnlyAddress = NULL;
391a416,463
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
393a466,513
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
526a647,678
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
540a693,694
> 			}
> 
618a773,778
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
811c971
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1024a1185,1213
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1025a1215,1216
> 			}
> 
1296c1487
< 	DNASSERT( ( pListenData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pListenData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1510a1702,1733
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1511a1735,1736
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\08151200.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dplay8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
-- 90 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091615.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141000.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dbginfo.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 233 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
39c41
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
123c125
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
131c133
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
165c167
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
167,171c169,171
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
173c173,178
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
175c180
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
176a182,265
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
193c282
< // BUGBUG: [mgere] [xbox] Added this temporarily
---
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
195,196c284,285
< COM_Init();
< 
---
>     if( hr == CO_E_NOTINITIALIZED )
>     {
218a308,311
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "UNKNOWN_MODULE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetDebug"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
78a83,92
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34,37
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
35a40
> #endif	// _WIN64
40a46,52
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
60a73
> #ifdef	_X86_
61a75,77
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
94a111,116
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
103a126,128
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
121a147
> 	OSVERSIONINFO	OSVersionInfo;
122a149
> 
130a158,186
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
229a286,287
> 		switch ( DNGetOSType() )
> 		{
232a291,292
> 			case VER_PLATFORM_WIN32_NT:
> 			{
257a318,328
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
290a362,393
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
361a465
> //#ifdef	_WIN32
390a495
> //#endif	// _WIN32
391a497,518
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
417a545
> #ifdef	_X86_
429a558,608
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
455a635,636
> #ifdef	_X86_
> 
467a649,695
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
688a917,919
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
707a939
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
798a1031
> 		pMemoryLink->NoteCurrentCallStack();
908a1142
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
925a1160,1163
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
926a1165
> #endif
943,944c1182,1193
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
948a1198,1206
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
979a1238
> 	DWORD		dwDisplayFlags;
980a1240
> 
983a1244
> 	fDisplayLeaks = TRUE;
986a1248,1249
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
993a1257
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1001a1266,1269
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1002a1271
> #endif
1007,1008c1276
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1009a1278,1328
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1022a1342,1485
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1117a1581
> 	static	BOOL	fDisplayCallStacks = TRUE;
1135a1600,1603
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1141a1610,1614
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1146,1147c1619,1651
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1180a1685
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	"CallStack.h"
> 
29a32,34
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
53a59
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
76d81
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
86a92,101
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
136a137,207
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
31a72
>         creg.cpp \
36c77,88
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include "DNetErrors.h"
20a22,23
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
22c25,48
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
24,29d49
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
31c51,53
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
33c55,60
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
35,37c62,69
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
39c71,83
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
41,43d84
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
45,47c86,100
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
49,50c102,103
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
52,53c105,109
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
55,56c111,113
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
58d114
< Return Value:
60,63c116,133
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
65,66c135,138
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
68d139
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
70,71c141,143
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
73c145,150
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
75c152,170
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
77,80d171
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
82,83c173,187
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
84a189,190
> 		*pdwWCHARStringLength = iReturn;
> 	}
86,151c192
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
152a194
> //**********************************************************************
154a197
> 
174a218,220
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
182c228,238
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
188a245,251
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
189a253,295
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
> 
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
> 
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
> #undef DPF_MODNAME
208a315,316
> 	int rval;
> 
216c324
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
219a328
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
39d38
< #include <wchar.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
145c145,147
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
208,209c210
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
324d324
< */
410,411c410
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
465c464
< */
---
> 
522c521
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
544c543
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
698d696
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1243c1241
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1288,1289c1286,1287
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1305c1303
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1308c1306
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
97a98
> #include "dplobby8.h"
258a260,279
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
322a344,345
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
927a951,956
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1112c1141
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
167a168
> #include "DPLobby8.h"
195a197
> #include "DNMisc.h"
205a208,210
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
207,208d211
< #include <mmsystem.h>
< #include <wchar.h>
678a682,690
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1119a1132,1135
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1237d1252
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1253,1255d1267
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1286d1297
< */
1886a1898,1905
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2081c2100
< 	{
---
> 	{
2473,2474d2491
< // BUGBUG [mgere] [xbox] Temporarily removed until a CoCreateGuid call is implemented
< #ifdef _BUILD_FOR_WIN2000
2480d2496
< #endif
2543a2560,2568
> 	//	Inform DPNSVR of LISTENs
> 	//
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		DPF(3,"Registering with DPNSVR");
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
> 	//
2652a2678,2682
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
4010c4040
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4167c4197
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4171c4201
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4235c4265
< 	//
---
> 	//
4253d4282
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4269,4271d4297
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4303d4328
< */
4991c5016
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
4994c5019,5088
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_EXIT( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_EXIT(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_EXIT(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
4996a5091,5113
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
4997a5115,5260
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	packBuffer.Initialize(NULL, 0 );
> 
> 	// Determine the size of buffer
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
4998a5262,5342
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5359a5704,5833
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	HRESULT					hResultCode;
> 	HRESULT					hrRegister;
> 	CAsyncOp				*pListenParent;
> 	CAsyncOp				*pListenSP;
> 	CAsyncOp				*pListen;
> 	CBilink					*pBilinkSP;
> 	CBilink					*pBilink;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR			DP8ABuffer[512];
> 	DWORD			DP8ASize;
> #endif
> 
> 	DPF(4,"Parameters: (none)");
> 
> 	pListenParent = NULL;
> 	pListenSP = NULL;
> 	pListen = NULL;
> 
> 	//
> 	//	Default error returned
> 	//
> 	hrRegister = DPNERR_GENERIC;
> 
> 	//
> 	//	Get LISTEN AsyncOp parent from DirectNet object and add a RefCount
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent == NULL)
> 	{
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 		goto Exit;
> 	}
> 	pdnObject->pListenParent->AddRef();
> 	pListenParent = pdnObject->pListenParent;
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Lock the parent so that the child bilink list doesn't change
> 	//
> 	pListenParent->Lock();
> 
> 	//
> 	//	Locate each child (LISTEN SP parent) and then each actual LISTEN
> 	//
> 	pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 	while (pBilinkSP != &pListenParent->m_bilinkParent)
> 	{
> 		pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 
> DNASSERT(pListenSP->GetParent() == pListenParent);
> 		//
> 		//	Lock the SP parent so that the child bilink doesn't change
> 		//
> 		pListenSP->Lock();
> 
> 		pBilink = pListenSP->m_bilinkParent.GetNext();
> 		while (pBilink != &pListenSP->m_bilinkParent)
> 		{
> 			pListen = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 
> 			DNASSERT(pListen->GetProtocolHandle() != NULL);
> 
> 			spInfo.hEndpoint = pListen->GetProtocolHandle();
> 			spInfo.pAddress = NULL;
> 			spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 
> 			if (DNPGetListenAddressInfo(pListen->GetProtocolHandle(),&spInfo) == DPN_OK)
> 			{
> 				DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 				DP8ASize = 512;
> 				spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 				DPF(4,"Listen address [%s]",DP8ABuffer);
> 
> 				// We re-try the registration to catch the case where DPNSVR is shutting
> 				// down while we are trying to register.  Unlikely but has to be handled.
> 				//
> #endif
> 	            for( DWORD dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		        {
>     				hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress );
> 	    			if( FAILED( hResultCode ) )
> 					{
>     					if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    					Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    				}
> 						else
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    				}
> 	    			}
> 					else
>     				{
>     					// Return DPN_OK if we succeed even once
>     					hrRegister = hResultCode;
>     					break;
> 	    			}
> 		        }
> 			
> 				spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 				spInfo.pAddress = NULL;
> 
> 			}
> 			pBilink = pBilink->GetNext();
> 		}
> 
> 		pListenSP->Unlock();
> 
> 		pBilinkSP = pBilinkSP->GetNext();
> 	}
> 
> 	pListenParent->Unlock();
> 
> 	pListenParent->Release();
> 	pListenParent = NULL;
> 
> Exit:
> 	DPF(4,"Returning: [0x%lx]",hrRegister);
> 	return( hrRegister );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
205c205
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
207a208,210
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
216a220,221
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
85a86
> #include "DPLobby8.h"
114d114
< #include <wchar.h>
118,121d117
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
190c186
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
265,266c261,262
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
293c289
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
748c744
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
833c829
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
846c842
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
903c899
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1206c1202
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1231,1232c1227
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1236c1231
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1363,1364c1358,1359
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1727a1723,1727
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
1993a1994,2002
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2888c2897
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2922c2931
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
2945c2954
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2972c2981
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
40a41
> #include "creg.h"
45a47,183
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,109
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
107a111,115
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
130a139
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
272a282
> 	// Lobby additions
273a284,287
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
44a45
> #include "DNMisc.h"
46a48
> #include "CReg.h"
60c62,71
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
75,76c86
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
78c88,98
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
80,81c100,103
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> //	CServiceProvider	*pSP;
89a112,115
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> //	pSP = NULL;
> 
93,94c119,124
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
96c126,153
< 	memcpy(&dnSpInfo.guid,&guidSP,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
98,101c155,168
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
102a170,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guid,NULL,TRUE);
> 			if (hResultCode != DPN_OK)
> 			{
> 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
> 				SubEntry.Close();
> 				dwEnumIndex++;
> 				dwKeyLen = dwMaxKeyLen;
> 				hResultCode = DPN_OK; // override return code
> 				continue;
> 			}
> 			else
> 			{
> //				DN_SPRelease(pdnObject,&guid);
> 			}
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> /*	REMOVE
> 		hResultCode = packedBuffer.AddToBack(&guid,sizeof(GUID));
> 		dnSpInfo.pGuid = static_cast<GUID*>(packedBuffer.GetTailAddress());
> */
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
108c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
110c272
< 		goto Exit;
---
> 		goto Failure;
114c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
117,123d279
< 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guidSP,NULL,TRUE);
< 			if (hResultCode != DPN_OK)
< 			{
< 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
< 				hResultCode = DPN_OK; // override return code
< 			}
< 
125a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
128a290,311
> 
> Failure:
> 
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	goto Exit;
142,146d324
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
296d473
< */	return(E_FAIL);
520c697
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
546c723
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
85a86,88
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
86a90
> #include "dplobby8.h"
291a296
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
703a709,728
> 	// Register with DPNSVR
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		BOOL	fCoUninitialize = FALSE;
> 
> 		DPF( 7, "Asking for DPNSVR to start listening for us.." );
> 
> 		if (COM_CoInitialize(NULL) == S_OK)
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		DNRegisterWithDPNSVR(pdnObject);
> 
> 		if (fCoUninitialize)
> 		{
> 			COM_CoUninitialize();
> 		}
> 	}
> 
795a821,825
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1183c1183
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1199c1199
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1203c1203
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1234c1234
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1250c1250
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1254c1254
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1283c1283
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1299c1299
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
430,431c430
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
443,444c442,443
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
531c530
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
212c212
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
220a221,227
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
246a254,259
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1062c1075
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1600a1614,1619
>     if( ( dwFlags & ~( DPNHOST_OKTOQUERYFORADDRESSING ) ) != 0 )
>     {
>         DPFERR("Invalid flags specified" );
>         return( DPNERR_INVALIDFLAGS );
>     }
> 
1813c1832
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2129c2148
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
18c39,56
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
20d57
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c59,60
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c63,67
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c69
< DLLDEF=..\dnet.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
29a71,78
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
70a120,127
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
73,94c130,132
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
24a25,31
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DPNAddress"
> 
> /*
31a39,67
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNAddress"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNAddress"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
18c39,54
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
20d55
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c57,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c61,65
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c67
< DLLDEF=..\dnadd.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
29a69,76
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
38a86
>          ..\dplegacy.cpp \
40a89,95
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c98,100
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
105c105
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
106a107,111
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
117a118,122
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
387c387
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
595c595
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
30a38,66
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNSPWinsock"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectDPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNSPWinsock"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
120a122,141
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
144,145d164
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
193d211
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | WS_POPUP | WS_VISIBLE | WS_CAPTION | 
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE 
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE 
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,67
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,70
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
104a106
> 	m_hActiveSettingsDialog( NULL ),
135a138
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
371a375,382
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( m_hActiveSettingsDialog != NULL )
> 		{
> 			StopSettingsDialog( m_hActiveSettingsDialog );
> 		}
374a386,392
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( m_hActiveSettingsDialog == NULL );
> 	}
376d393
< 
879a897,903
> 	if ( m_hActiveSettingsDialog != NULL )
> 	{
> 		StopSettingsDialog( m_hActiveSettingsDialog );
> 		Unlock();
> 	}
> 	else
> 	{
885a910
> 	}
1814,1815c1839
< 
< // BUGBUG: [mgere] [xbox] Not sure if we ever get into this next block on the Xbox.  Put breakpoint and see.	
---
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
360a361,367
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 
> 		//
380a388
> 		HWND	m_hActiveSettingsDialog;				// handle of active settings dialog
381a390
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
44a46
> #include	"IPXAddress.h"
81c83,84
< 	m_pSocketPort( NULL )
---
> 	m_pSocketPort( NULL ),
> 	m_fWin9xOperationPending( FALSE )
99a103,104
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
114a120
> 	m_Win9xReceiveWSAReturn( ERROR_SUCCESS ),
191a198,203
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
212a225,231
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, always use IO completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
216a236,258
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
241a284,285
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
275a320,321
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
308a355,360
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
450a503,509
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, we'll always use completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
453a513,536
> 
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
485a569,570
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
506a592,593
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
88a89,91
> 		BOOL	Win9xOperationPending( void ) const { return m_fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_fWin9xOperationPending = fOperationPending; }
> 
118a122
> 		BOOL			m_fWin9xOperationPending;	// this structure has been initialized and the operation is pending on Win9x
119a124
> 
149a155
> 		INT		m_Win9xReceiveWSAReturn;		
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
84a86
> const DWORD	g_dwIPBroadcastAddressSize = sizeof( g_IPBroadcastAddress );
1018,1020d1019
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1340d1338
< */	return DPNERR_UNSUPPORTED;
1520a1519,1524
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1521a1526,1544
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1524a1548,1550
> 		case 2:
> 		default:
> 		{
1525a1552,1554
> 			break;
> 		}
> 	}
1595a1625,1630
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1596a1632,1650
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1599a1654,1656
> 		case 2:
> 		default:
> 		{
1600a1658,1660
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
38a40
> #include	"StrUtils.h"
52a55
> #include	"IPUI.h"
95a99
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
117a122,392
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, &m_hActiveSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	m_hActiveSettingsDialog = NULL;
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.
> 	//
> 	if ( ( m_TempHostName[ 0 ] == '\0' ) && ( m_EndpointType == ENDPOINT_TYPE_ENUM ) )
> 	{
> 		DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 		memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 		dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> //	    	hr = CompleteEnumQuery();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing EnumQuery after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> //
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> //	    	hr = CompleteConnect();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing Connect after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// cleanup and close this endpoint
> 	//
> 	switch ( GetType() )
> 	{
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			CleanupConnect();
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			CleanupEnumQuery();
> 			break;
> 		}
> 
> 		//
> 		// other state (note that LISTEN doesn't have a dialog)
> 		//
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	Close( hr );
> 	m_pSPData->CloseEndpointHandle( this );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
222a498
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,67
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
69a85
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,111
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
108a114,128
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
51a53
> #include	"IPXAddress.h"
55a58
> #include	"IPXEndpt.h"
88a92
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
90a95
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
195a201,207
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
214a227,243
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
339a369,375
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
349a386,391
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
494a537,580
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
504a591,606
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> class	CIPXAddress;
35a37
> class	CIPXEndpoint;
63a66,67
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
65a70
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include	"Registry.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
265a267,273
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
266a275,279
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
383a397,404
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
384a406,410
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
530a557,568
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
967a1006,1265
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ReadService( void )
> {
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
> 
> 
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1WriteService( void )
> {
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ErrorService( void )
> {
> 	INT3;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
994c1292,1293
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1000a1300,1308
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1006a1315,1318
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
> 
1017a1330,1334
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1058a1376,1378
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1132c1452,1453
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1144a1466,1469
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
1152a1478,1480
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1170a1499,1502
> 			if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 			{
> 				m_pSPData->GetThreadPool()->UnlockReadData();
> 			}
1187a1520,1523
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1205a1542,1545
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1210a1551,1552
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1228a1571,1574
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1245a1592,1593
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1278a1627,1628
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
1909a2260,2266
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1954a2312,2375
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2601a3023,3178
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Win9xWinsock2ReceiveComplete - a Winsock2 socket receive
> //		completed on Win9x
> //
> // Entry:		Poiner to read data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData )
> {
> 	DNASSERT( pReadData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	DNASSERT( pReadData->Win9xOperationPending() == FALSE );
> 
> 	//
> 	// figure out what's happening with this socket port
> 	//
> 	switch ( m_State )
> 	{
> 		//
> 		// we're unbound, discard this message and don't ask for any more
> 		//
> 		case SOCKET_PORT_STATE_UNBOUND:
> 		{
> 			goto Exit;
> 			break;
> 		}
> 
> 		//
> 		// we're initialized, process input data and submit a new receive if
> 		// applicable
> 		//
> 		case SOCKET_PORT_STATE_INITIALIZED:
> 		{
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// the socket was closed on an outstanding read, stop
> 				// receiving
> 				//
> 				case WSAENOTSOCK:					// WinNT return for closed socket
> 				case ERROR_OPERATION_ABORTED:		// Win9x return for closed socket
> 				{
> 					break;
> 				}
> 
> 				//
> 				// ERROR_SUCCESS = no problem
> 				// WSAECONNRESET = previous send failed (who cares!)
> 				// default = other error, just try reading again
> 				//
> 				case WSAECONNRESET:
> 				case ERROR_SUCCESS:
> 				default:
> 				{
> 					HRESULT			hTempResult;
> 
> 
> 					DNASSERT( m_State == SOCKET_PORT_STATE_INITIALIZED );
> 
> 					//					
> 					// attempt another read on this socket.
> 					//
> 					Winsock2Receive();
> 
> 					break;
> 				}
> 			}
> 
> 			//
> 			// now that initial reads have been taken care of, perform error-specific
> 			// processing
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// succcess, note the actual number of bytes read and tell
> 				// someone about the received data
> 				//
> 				//	Since this data has been processed then we know that receive buffer has already been returned.
> 				//
> 				case ERROR_SUCCESS:
> 				{
> 					pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = pReadData->m_dwOverlappedBytesReceived;
> 					pReadData->m_dwOverlappedBytesReceived = 0;
> 					ProcessReceivedData( pReadData );
> 
> 					break;
> 				}
> 
> 				//
> 				// Other error, stop in the debugger if it's not 'known'.
> 				//
> 				default:
> 				{
> 					switch ( pReadData->m_Win9xReceiveWSAReturn )
> 					{
> 						//
> 						// WSAECONNRESET = a previous send failed and Winsock is telling
> 						//				   us on an unrelated receive (Thanks WINSOCK).
> 						// WSAENOTSOCK = Socket was closed, user probably cancelled
> 						//				 somethinng.  Just clean up.
> 						// ERROR_OPERATION_ABORTED = something stopped the I/O operation.
> 						//
> 						case WSAECONNRESET:
> 						case WSAENOTSOCK:
> 						case ERROR_OPERATION_ABORTED:
> 						{
> 							break;
> 						}
> 
> 						default:
> 						{
> 							DPF( 0, "Problem with Winsock2 Win9x read: " );
> 							DisplayWinsockError( 0, pReadData->m_Win9xReceiveWSAReturn );
> 							INT3;
> 							
> 							break;
> 						}
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other state
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> Exit:
> 	//
> 	// return the current data to the pool and note that
> 	// this I/O operation is complete
> 	//
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();	
> 	DecRef();
> 
> 	return;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
255a256
> 		void	Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData );
261a263,265
> 		void	Winsock1ReadService( void );
> 		void	Winsock1WriteService( void );
> 		void	Winsock1ErrorService( void );
326a331
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,3c1,5
< TARGETNAME=dpnwsock
< TARGETTYPE=DYNLINK
< TARGETPATH=obj
---
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
5c7,17
< !ifdef _BUILD_FOR_WIN2000
---
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
> TARGETNAME=dpnwsock
> DLLDEF=..\wsocksp.def
7,13d18
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
15c20,26
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\..\dnaddress
---
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
17c28,29
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> TARGETPATH=obj
> TARGETTYPE=DYNLINK
19c31,35
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
21,22c37,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
> 
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
25c61,71
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
27c73,77
< DLLDEF=..\wsocksp.def
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28a79,88
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
> 
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
30c90
<          ..\Classfac.cpp \
---
> 	 ..\Classfac.cpp \
33a94
> 	 ..\DWinsock.cpp \
38a100,102
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
41a106
>          ..\Registry.cpp \
50a116,118
> #
> # Next specify options for the compiler.
> #
51a120,122
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
54,74c125,126
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.H>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120c120,121
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
158c159,160
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
237a240
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
238a242
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
241c245
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
248c252
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
276a281
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include <WSIPX.h>
50a52
> #include	"IPXAddress.h"
56a59
> #include	"IPXEndpt.h"
238a242,271
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
854a888,893
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1167a1207,1212
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1198a1244,1249
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
122a124,143
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
129a151,161
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	HWND			*phDialog;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
234c266,273
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
236c275,276
< 	)
---
> 						break;
> 					}
237a278,285
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
244c292,299
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
246c301,302
< 	)
---
> 						break;
> 					}
247a304,311
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
281a346,352
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
338a410,414
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
341a418,419
> 		case VER_PLATFORM_WIN32_NT:
> 		{
347a426,452
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
376a482,483
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
383a491,495
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
407a520,526
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
409,413d527
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
438a553,788
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
537a888,889
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
558a911
> 	}
640a994,996
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
> 		pReadData->m_Win9xReceiveWSAReturn = WSAESHUTDOWN;
658a1015,1016
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
803a1162
> 	m_IPXReadIODataPool.Deinitialize();
945d1303
< 			
949a1308,1316
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
1027a1395,1403
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1282a1659,1660
> 	switch ( OSType() )
> 	{
1285a1664,1665
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1302a1683,1711
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1413a1823,1824
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1420a1832
> 	}
1622a2035,2135
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Pointer destination for copy of dialog handle
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( phDialog != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->phDialog = phDialog;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1642a2156,2157
> 	switch ( OSType() )
> 	{
1643a2159,2168
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1645a2171,2172
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1647a2175,2176
> 			break;
> 		}
1648a2178,2187
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1677a2217,2218
> 	switch ( OSType() )
> 	{
1678a2220,2227
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1684a2234,2235
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1724a2276,2288
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1804a2369,2515
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1948a2660,3480
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 
> 			pThisThreadPool->CheckWinsock1IO( pSocketSet );
> 			
> 			//
> 			// since there are Winsock1 sockets active, don't spend a lot of
> 			// time waiting for something to happen for Winsock2
> 			//
> 			if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 			{
> 				dwMaxWaitTime = g_dwSelectTimeSlice;
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 
> 			//
> 			// New job.  Account for the time spent in the wait.  Don't
> 			// account for time after the job is complete because it's
> 			// possible that the job was an job submission which will want
> 			// to reset the wait time.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Primary Win9x thread has a pending job!" );
> 				pThisThreadPool->ProcessWin9xJob( &CoreData );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Primary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			//
> 			// New job.  This is the secondary thread and is only used to handle
> 			// Winsock2 I/O.  Ignore this event and sleep to cause the proper
> 			// work thread to handle the event.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Secondary Win9x thread sleeping on job notification!" );
> 				SleepEx( 0, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Secondary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thead failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2292a3825,4182
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CheckWinsock1IO( const FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( pSocketSet->fd_array[ uWaitingSocketCount ] == m_SocketSet.fd_array[ uIdx ] )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		(pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
63a65
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
101c103,104
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
147a151
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
152a157
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
160a166,168
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
171a180,182
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
> 		
223a235
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
277a290
> 		HRESULT	Win9xInit( void );
287a301,302
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
288a304,305
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
290a308
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
295a314,317
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		void	CheckWinsock1IO( const FD_SET *const pWinsock1Sockets );
> 		void	ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
41a44
> #include	"Creg.h"
42a46,49
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
136a182,238
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
223a326,328
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
229a335,338
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
270c379
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
361a471,721
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CDPVACMI::LoadAndAllocString"
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
51,54d52
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a80,81
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a85
> static DWORD_PTR	OverrideWinsockVersion( void );
92a94,159
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
106a174,175
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
116a186,187
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
132c203
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
134,140c205,206
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
142,144c208,210
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
146d211
< 
148a214,215
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
158c225,233
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
188a264,266
> 	BOOL	fFreeReturn;
> 
> 
192c270,274
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
199a282,294
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
200a296
> 
286a383
> 	INT_PTR iWinsockVersion;
296a394
> 	iWinsockVersion = GetWinsockVersion();
595c693
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
627c725
< */
---
> 
637c735
< /*	AdapterInfo.guid = *pAdapterGUID;
---
> 	AdapterInfo.guid = *pAdapterGUID;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
60c62
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
64d65
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
165a167,170
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
167a173,188
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
232a254
> 		case TYPE_IPX:
318a341
> 	IDirectPlay8Address		*pSPOnlyAddress;
326c349
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
341a365
> 	pSPOnlyAddress = NULL;
391a416,463
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
393a466,513
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
526a647,678
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
540a693,694
> 			}
> 
618a773,778
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
811c971
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1024a1185,1213
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1025a1215,1216
> 			}
> 
1296a1488
> 										  DPNSPF_OKTOQUERY |
1513a1706,1737
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1514a1739,1740
> 			}
> 
2417a2644,2655
> 		// Multicast groups are unsupported on IPX.
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
2607a2846,2857
> 		//
> 		// multicast groups are unsupported on IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\08141000.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dplay8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
-- 90 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091615.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dbginfo.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 231 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
39c41
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
123c125
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
131c133
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
165c167
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
167,171c169,171
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
173c173,178
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
175c180
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
176a182,265
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
193c282
< // BUGBUG: [mgere] [xbox] Added this temporarily
---
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
195,196c284,285
< COM_Init();
< 
---
>     if( hr == CO_E_NOTINITIALIZED )
>     {
218a308,311
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "UNKNOWN_MODULE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetDebug"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
78a83,92
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34,37
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
35a40
> #endif	// _WIN64
40a46,52
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
60a73
> #ifdef	_X86_
61a75,77
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
94a111,116
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
103a126,128
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
121a147
> 	OSVERSIONINFO	OSVersionInfo;
122a149
> 
130a158,186
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
229a286,287
> 		switch ( DNGetOSType() )
> 		{
232a291,292
> 			case VER_PLATFORM_WIN32_NT:
> 			{
257a318,328
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
290a362,393
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
361a465
> //#ifdef	_WIN32
390a495
> //#endif	// _WIN32
391a497,518
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
417a545
> #ifdef	_X86_
429a558,608
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
455a635,636
> #ifdef	_X86_
> 
467a649,695
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
688a917,919
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
707a939
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
798a1031
> 		pMemoryLink->NoteCurrentCallStack();
908a1142
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
925a1160,1163
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
926a1165
> #endif
943,944c1182,1193
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
948a1198,1206
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
979a1238
> 	DWORD		dwDisplayFlags;
980a1240
> 
983a1244
> 	fDisplayLeaks = TRUE;
986a1248,1249
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
993a1257
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1001a1266,1269
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1002a1271
> #endif
1007,1008c1276
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1009a1278,1328
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1022a1342,1485
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1117a1581
> 	static	BOOL	fDisplayCallStacks = TRUE;
1135a1600,1603
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1141a1610,1614
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1146,1147c1619,1651
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1180a1685
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	"CallStack.h"
> 
29a32,34
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
53a59
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
76d81
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
86a92,101
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
136a137,207
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
31a72
>         creg.cpp \
36c77,88
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include "DNetErrors.h"
20a22,23
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
22c25,48
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
24,29d49
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
31c51,53
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
33c55,60
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
35,37c62,69
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
39c71,83
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
41,43d84
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
45,47c86,100
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
49,50c102,103
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
52,53c105,109
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
55,56c111,113
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
58d114
< Return Value:
60,63c116,133
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
65,66c135,138
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
68d139
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
70,71c141,143
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
73c145,150
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
75c152,170
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
77,80d171
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
82,83c173,187
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
84a189,190
> 		*pdwWCHARStringLength = iReturn;
> 	}
86,151c192
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
152a194
> //**********************************************************************
154a197
> 
174a218,220
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
182c228,238
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
188a245,251
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
189a253,295
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
> 
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
> 
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
> #undef DPF_MODNAME
208a315,316
> 	int rval;
> 
216c324
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
219a328
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
39d38
< #include <wchar.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
145c145,147
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
208,209c210
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
324d324
< */
410,411c410
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
465c464
< */
---
> 
522c521
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
544c543
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
698d696
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1243c1241
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1288,1289c1286,1287
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1305c1303
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1308c1306
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
97a98
> #include "dplobby8.h"
258a260,279
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
322a344,345
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
927a951,956
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1112c1141
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
167a168
> #include "DPLobby8.h"
195a197
> #include "DNMisc.h"
205a208,210
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
207,208d211
< #include <mmsystem.h>
< #include <wchar.h>
678a682,690
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1119a1132,1135
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1237d1252
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1253,1255d1267
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1286d1297
< */
1886a1898,1905
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2081c2100
< 	{
---
> 	{
2473,2474d2491
< // BUGBUG [mgere] [xbox] Temporarily removed until a CoCreateGuid call is implemented
< #ifdef _BUILD_FOR_WIN2000
2480d2496
< #endif
2543a2560,2568
> 	//	Inform DPNSVR of LISTENs
> 	//
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		DPF(3,"Registering with DPNSVR");
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
> 	//
2652a2678,2682
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
4010c4040
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4167c4197
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4171c4201
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4235c4265
< 	//
---
> 	//
4253d4282
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4269,4271d4297
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4303d4328
< */
4991c5016
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
4994c5019,5088
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_EXIT( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_EXIT(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_EXIT(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
4996a5091,5113
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
4997a5115,5260
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	packBuffer.Initialize(NULL, 0 );
> 
> 	// Determine the size of buffer
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
4998a5262,5342
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5359a5704,5833
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	HRESULT					hResultCode;
> 	HRESULT					hrRegister;
> 	CAsyncOp				*pListenParent;
> 	CAsyncOp				*pListenSP;
> 	CAsyncOp				*pListen;
> 	CBilink					*pBilinkSP;
> 	CBilink					*pBilink;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR			DP8ABuffer[512];
> 	DWORD			DP8ASize;
> #endif
> 
> 	DPF(4,"Parameters: (none)");
> 
> 	pListenParent = NULL;
> 	pListenSP = NULL;
> 	pListen = NULL;
> 
> 	//
> 	//	Default error returned
> 	//
> 	hrRegister = DPNERR_GENERIC;
> 
> 	//
> 	//	Get LISTEN AsyncOp parent from DirectNet object and add a RefCount
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent == NULL)
> 	{
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 		goto Exit;
> 	}
> 	pdnObject->pListenParent->AddRef();
> 	pListenParent = pdnObject->pListenParent;
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Lock the parent so that the child bilink list doesn't change
> 	//
> 	pListenParent->Lock();
> 
> 	//
> 	//	Locate each child (LISTEN SP parent) and then each actual LISTEN
> 	//
> 	pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 	while (pBilinkSP != &pListenParent->m_bilinkParent)
> 	{
> 		pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 
> DNASSERT(pListenSP->GetParent() == pListenParent);
> 		//
> 		//	Lock the SP parent so that the child bilink doesn't change
> 		//
> 		pListenSP->Lock();
> 
> 		pBilink = pListenSP->m_bilinkParent.GetNext();
> 		while (pBilink != &pListenSP->m_bilinkParent)
> 		{
> 			pListen = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 
> 			DNASSERT(pListen->GetProtocolHandle() != NULL);
> 
> 			spInfo.hEndpoint = pListen->GetProtocolHandle();
> 			spInfo.pAddress = NULL;
> 			spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 
> 			if (DNPGetListenAddressInfo(pListen->GetProtocolHandle(),&spInfo) == DPN_OK)
> 			{
> 				DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 				DP8ASize = 512;
> 				spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 				DPF(4,"Listen address [%s]",DP8ABuffer);
> 
> 				// We re-try the registration to catch the case where DPNSVR is shutting
> 				// down while we are trying to register.  Unlikely but has to be handled.
> 				//
> #endif
> 	            for( DWORD dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		        {
>     				hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress );
> 	    			if( FAILED( hResultCode ) )
> 					{
>     					if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    					Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    				}
> 						else
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    				}
> 	    			}
> 					else
>     				{
>     					// Return DPN_OK if we succeed even once
>     					hrRegister = hResultCode;
>     					break;
> 	    			}
> 		        }
> 			
> 				spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 				spInfo.pAddress = NULL;
> 
> 			}
> 			pBilink = pBilink->GetNext();
> 		}
> 
> 		pListenSP->Unlock();
> 
> 		pBilinkSP = pBilinkSP->GetNext();
> 	}
> 
> 	pListenParent->Unlock();
> 
> 	pListenParent->Release();
> 	pListenParent = NULL;
> 
> Exit:
> 	DPF(4,"Returning: [0x%lx]",hrRegister);
> 	return( hrRegister );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
205c205
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
207a208,210
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
216a220,221
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
85a86
> #include "DPLobby8.h"
114d114
< #include <wchar.h>
118,121d117
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
190c186
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
265,266c261,262
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
293c289
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
748c744
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
833c829
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
846c842
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
903c899
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1206c1202
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1231,1232c1227
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1236c1231
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1363,1364c1358,1359
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1727a1723,1727
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
1993a1994,2002
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2888c2897
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2922c2931
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
2945c2954
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2972c2981
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
37a38
> #include "creg.h"
42a44,180
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,109
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
107a111,115
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
130a139
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
272a282
> 	// Lobby additions
273a284,287
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
44a45
> #include "DNMisc.h"
46a48
> #include "CReg.h"
60c62,71
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
75,76c86
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
78c88,98
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
80,81c100,103
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> //	CServiceProvider	*pSP;
89a112,115
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> //	pSP = NULL;
> 
93,94c119,124
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
96c126,153
< 	memcpy(&dnSpInfo.guid,&guidSP,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
98,101c155,168
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
102a170,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guid,NULL,TRUE);
> 			if (hResultCode != DPN_OK)
> 			{
> 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
> 				SubEntry.Close();
> 				dwEnumIndex++;
> 				dwKeyLen = dwMaxKeyLen;
> 				hResultCode = DPN_OK; // override return code
> 				continue;
> 			}
> 			else
> 			{
> //				DN_SPRelease(pdnObject,&guid);
> 			}
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> /*	REMOVE
> 		hResultCode = packedBuffer.AddToBack(&guid,sizeof(GUID));
> 		dnSpInfo.pGuid = static_cast<GUID*>(packedBuffer.GetTailAddress());
> */
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
108c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
110c272
< 		goto Exit;
---
> 		goto Failure;
114c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
117,123d279
< 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guidSP,NULL,TRUE);
< 			if (hResultCode != DPN_OK)
< 			{
< 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
< 				hResultCode = DPN_OK; // override return code
< 			}
< 
125a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
128a290,311
> 
> Failure:
> 
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	goto Exit;
142,146d324
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
296d473
< */	return(E_FAIL);
520c697
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
546c723
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
85a86,88
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
86a90
> #include "dplobby8.h"
291a296
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
703a709,728
> 	// Register with DPNSVR
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		BOOL	fCoUninitialize = FALSE;
> 
> 		DPF( 7, "Asking for DPNSVR to start listening for us.." );
> 
> 		if (COM_CoInitialize(NULL) == S_OK)
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		DNRegisterWithDPNSVR(pdnObject);
> 
> 		if (fCoUninitialize)
> 		{
> 			COM_CoUninitialize();
> 		}
> 	}
> 
795a821,825
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1183c1183
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1199c1199
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1203c1203
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1234c1234
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1250c1250
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1254c1254
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1283c1283
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1299c1299
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
430,431c430
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
443,444c442,443
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
531c530
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
212c212
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
220a221,227
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
246a254,259
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1062c1075
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1600a1614,1619
>     if( ( dwFlags & ~( DPNHOST_OKTOQUERYFORADDRESSING ) ) != 0 )
>     {
>         DPFERR("Invalid flags specified" );
>         return( DPNERR_INVALIDFLAGS );
>     }
> 
1813c1832
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2129c2148
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
18c39,56
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
20d57
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c59,60
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c63,67
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c69
< DLLDEF=..\dnet.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
29a71,78
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
70a120,127
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
73,94c130,132
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
24a25,31
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DPNAddress"
> 
> /*
31a39,67
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNAddress"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNAddress"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
18c39,54
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
20d55
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c57,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c61,65
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c67
< DLLDEF=..\dnadd.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
29a69,76
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
38a86
>          ..\dplegacy.cpp \
40a89,95
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c98,100
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
105c105
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
106a107,111
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
117a118,122
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
368c368
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
595c595
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
30a38,66
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNSPWinsock"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectDPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNSPWinsock"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
120a122,141
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
144,145d164
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
193d211
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | WS_POPUP | WS_VISIBLE | WS_CAPTION | 
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE 
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE 
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,67
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,70
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
104a106
> 	m_hActiveSettingsDialog( NULL ),
134a137
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
369a373,380
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( m_hActiveSettingsDialog != NULL )
> 		{
> 			StopSettingsDialog( m_hActiveSettingsDialog );
> 		}
372a384,390
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( m_hActiveSettingsDialog == NULL );
> 	}
374d391
< 
877a895,901
> 	if ( m_hActiveSettingsDialog != NULL )
> 	{
> 		StopSettingsDialog( m_hActiveSettingsDialog );
> 		Unlock();
> 	}
> 	else
> 	{
883a908
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
360a361,367
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 
> 		//
379a387,388
> 
> 		HWND			m_hActiveSettingsDialog;		// handle of active settings dialog
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
44a46
> #include	"IPXAddress.h"
81c83,84
< 	m_pSocketPort( NULL )
---
> 	m_pSocketPort( NULL ),
> 	m_fWin9xOperationPending( FALSE )
99a103,104
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
114a120
> 	m_Win9xReceiveWSAReturn( ERROR_SUCCESS ),
191a198,203
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
212a225,231
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, always use IO completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
216a236,258
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
241a284,285
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
275a320,321
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
308a355,360
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
450a503,509
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, we'll always use completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
453a513,536
> 
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
485a569,570
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
506a592,593
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
88a89,91
> 		BOOL	Win9xOperationPending( void ) const { return m_fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_fWin9xOperationPending = fOperationPending; }
> 
118a122
> 		BOOL			m_fWin9xOperationPending;	// this structure has been initialized and the operation is pending on Win9x
119a124
> 
149a155
> 		INT		m_Win9xReceiveWSAReturn;		
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
84a86
> const DWORD	g_dwIPBroadcastAddressSize = sizeof( g_IPBroadcastAddress );
1018,1020d1019
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1340d1338
< */	return DPNERR_UNSUPPORTED;
1520a1519,1524
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1521a1526,1544
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1524a1548,1550
> 		case 2:
> 		default:
> 		{
1525a1552,1554
> 			break;
> 		}
> 	}
1595a1625,1630
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1596a1632,1650
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1599a1654,1656
> 		case 2:
> 		default:
> 		{
1600a1658,1660
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
38a40
> #include	"StrUtils.h"
52a55
> #include	"IPUI.h"
95a99
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
117a122,392
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, &m_hActiveSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	m_hActiveSettingsDialog = NULL;
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.
> 	//
> 	if ( ( m_TempHostName[ 0 ] == '\0' ) && ( m_EndpointType == ENDPOINT_TYPE_ENUM ) )
> 	{
> 		DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 		memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 		dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> //	    	hr = CompleteEnumQuery();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing EnumQuery after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> //
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> //	    	hr = CompleteConnect();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing Connect after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// cleanup and close this endpoint
> 	//
> 	switch ( GetType() )
> 	{
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			CleanupConnect();
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			CleanupEnumQuery();
> 			break;
> 		}
> 
> 		//
> 		// other state (note that LISTEN doesn't have a dialog)
> 		//
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	Close( hr );
> 	m_pSPData->CloseEndpointHandle( this );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
220a496
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,67
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
69a85
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,111
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
108a114,128
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
51a53
> #include	"IPXAddress.h"
55a58
> #include	"IPXEndpt.h"
88a92
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
90a95
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
195a201,207
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
214a227,243
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
339a369,375
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
349a386,391
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
494a537,580
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
504a591,606
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> class	CIPXAddress;
35a37
> class	CIPXEndpoint;
63a66,67
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
65a70
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include	"Registry.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
265a267,273
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
266a275,279
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
383a397,404
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
384a406,410
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
530a557,568
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
967a1006,1265
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ReadService( void )
> {
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
> 
> 
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1WriteService( void )
> {
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ErrorService( void )
> {
> 	INT3;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
994c1292,1293
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1000a1300,1308
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1006a1315,1318
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
> 
1017a1330,1334
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1058a1376,1378
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1132c1452,1453
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1144a1466,1469
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
1152a1478,1480
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1170a1499,1502
> 			if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 			{
> 				m_pSPData->GetThreadPool()->UnlockReadData();
> 			}
1187a1520,1523
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1205a1542,1545
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1210a1551,1552
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1228a1571,1574
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1245a1592,1593
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1278a1627,1628
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
1909a2260,2266
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1954a2312,2375
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2601a3023,3178
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Win9xWinsock2ReceiveComplete - a Winsock2 socket receive
> //		completed on Win9x
> //
> // Entry:		Poiner to read data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData )
> {
> 	DNASSERT( pReadData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	DNASSERT( pReadData->Win9xOperationPending() == FALSE );
> 
> 	//
> 	// figure out what's happening with this socket port
> 	//
> 	switch ( m_State )
> 	{
> 		//
> 		// we're unbound, discard this message and don't ask for any more
> 		//
> 		case SOCKET_PORT_STATE_UNBOUND:
> 		{
> 			goto Exit;
> 			break;
> 		}
> 
> 		//
> 		// we're initialized, process input data and submit a new receive if
> 		// applicable
> 		//
> 		case SOCKET_PORT_STATE_INITIALIZED:
> 		{
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// the socket was closed on an outstanding read, stop
> 				// receiving
> 				//
> 				case WSAENOTSOCK:					// WinNT return for closed socket
> 				case ERROR_OPERATION_ABORTED:		// Win9x return for closed socket
> 				{
> 					break;
> 				}
> 
> 				//
> 				// ERROR_SUCCESS = no problem
> 				// WSAECONNRESET = previous send failed (who cares!)
> 				// default = other error, just try reading again
> 				//
> 				case WSAECONNRESET:
> 				case ERROR_SUCCESS:
> 				default:
> 				{
> 					HRESULT			hTempResult;
> 
> 
> 					DNASSERT( m_State == SOCKET_PORT_STATE_INITIALIZED );
> 
> 					//					
> 					// attempt another read on this socket.
> 					//
> 					Winsock2Receive();
> 
> 					break;
> 				}
> 			}
> 
> 			//
> 			// now that initial reads have been taken care of, perform error-specific
> 			// processing
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// succcess, note the actual number of bytes read and tell
> 				// someone about the received data
> 				//
> 				//	Since this data has been processed then we know that receive buffer has already been returned.
> 				//
> 				case ERROR_SUCCESS:
> 				{
> 					pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = pReadData->m_dwOverlappedBytesReceived;
> 					pReadData->m_dwOverlappedBytesReceived = 0;
> 					ProcessReceivedData( pReadData );
> 
> 					break;
> 				}
> 
> 				//
> 				// Other error, stop in the debugger if it's not 'known'.
> 				//
> 				default:
> 				{
> 					switch ( pReadData->m_Win9xReceiveWSAReturn )
> 					{
> 						//
> 						// WSAECONNRESET = a previous send failed and Winsock is telling
> 						//				   us on an unrelated receive (Thanks WINSOCK).
> 						// WSAENOTSOCK = Socket was closed, user probably cancelled
> 						//				 somethinng.  Just clean up.
> 						// ERROR_OPERATION_ABORTED = something stopped the I/O operation.
> 						//
> 						case WSAECONNRESET:
> 						case WSAENOTSOCK:
> 						case ERROR_OPERATION_ABORTED:
> 						{
> 							break;
> 						}
> 
> 						default:
> 						{
> 							DPF( 0, "Problem with Winsock2 Win9x read: " );
> 							DisplayWinsockError( 0, pReadData->m_Win9xReceiveWSAReturn );
> 							INT3;
> 							
> 							break;
> 						}
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other state
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> Exit:
> 	//
> 	// return the current data to the pool and note that
> 	// this I/O operation is complete
> 	//
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();	
> 	DecRef();
> 
> 	return;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
255a256
> 		void	Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData );
261a263,265
> 		void	Winsock1ReadService( void );
> 		void	Winsock1WriteService( void );
> 		void	Winsock1ErrorService( void );
326a331
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,3c1,5
< TARGETNAME=dpnwsock
< TARGETTYPE=DYNLINK
< TARGETPATH=obj
---
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
5c7,17
< !ifdef _BUILD_FOR_WIN2000
---
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
> TARGETNAME=dpnwsock
> DLLDEF=..\wsocksp.def
7,13d18
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
15c20,26
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\..\dnaddress
---
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
17c28,29
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> TARGETPATH=obj
> TARGETTYPE=DYNLINK
19c31,35
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
21,22c37,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
> 
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
25c61,71
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
27c73,77
< DLLDEF=..\wsocksp.def
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28a79,88
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
> 
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
30c90
<          ..\Classfac.cpp \
---
> 	 ..\Classfac.cpp \
33a94
> 	 ..\DWinsock.cpp \
38a100,102
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
41a106
>          ..\Registry.cpp \
50a116,118
> #
> # Next specify options for the compiler.
> #
51a120,122
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
54,74c125,126
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.H>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120c120,121
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
158c159,160
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
237a240
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
238a242
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
241c245
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
248c252
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
276a281
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include <WSIPX.h>
50a52
> #include	"IPXAddress.h"
56a59
> #include	"IPXEndpt.h"
238a242,271
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
854a888,893
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1167a1207,1212
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1198a1244,1249
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
122a124,143
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
129a151,161
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	HWND			*phDialog;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
234c266,273
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
236c275,276
< 	)
---
> 						break;
> 					}
237a278,285
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
244c292,299
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
246c301,302
< 	)
---
> 						break;
> 					}
247a304,311
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
281a346,352
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
338a410,414
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
341a418,419
> 		case VER_PLATFORM_WIN32_NT:
> 		{
347a426,452
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
376a482,483
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
383a491,495
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
407a520,526
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
409,413d527
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
438a553,788
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
537a888,889
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
558a911
> 	}
640a994,996
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
> 		pReadData->m_Win9xReceiveWSAReturn = WSAESHUTDOWN;
658a1015,1016
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
803a1162
> 	m_IPXReadIODataPool.Deinitialize();
945d1303
< 			
949a1308,1316
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
1027a1395,1403
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1282a1659,1660
> 	switch ( OSType() )
> 	{
1285a1664,1665
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1302a1683,1711
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1413a1823,1824
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1420a1832
> 	}
1622a2035,2135
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Pointer destination for copy of dialog handle
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( phDialog != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->phDialog = phDialog;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1642a2156,2157
> 	switch ( OSType() )
> 	{
1643a2159,2168
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1645a2171,2172
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1647a2175,2176
> 			break;
> 		}
1648a2178,2187
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1677a2217,2218
> 	switch ( OSType() )
> 	{
1678a2220,2227
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1684a2234,2235
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1724a2276,2288
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1804a2369,2515
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1948a2660,3480
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 
> 			pThisThreadPool->CheckWinsock1IO( pSocketSet );
> 			
> 			//
> 			// since there are Winsock1 sockets active, don't spend a lot of
> 			// time waiting for something to happen for Winsock2
> 			//
> 			if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 			{
> 				dwMaxWaitTime = g_dwSelectTimeSlice;
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 
> 			//
> 			// New job.  Account for the time spent in the wait.  Don't
> 			// account for time after the job is complete because it's
> 			// possible that the job was an job submission which will want
> 			// to reset the wait time.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Primary Win9x thread has a pending job!" );
> 				pThisThreadPool->ProcessWin9xJob( &CoreData );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Primary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			//
> 			// New job.  This is the secondary thread and is only used to handle
> 			// Winsock2 I/O.  Ignore this event and sleep to cause the proper
> 			// work thread to handle the event.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Secondary Win9x thread sleeping on job notification!" );
> 				SleepEx( 0, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Secondary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thead failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2292a3825,4182
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CheckWinsock1IO( const FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( pSocketSet->fd_array[ uWaitingSocketCount ] == m_SocketSet.fd_array[ uIdx ] )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		(pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
63a65
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
101c103,104
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
147a151
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
152a157
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
160a166,168
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
171a180,182
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
> 		
223a235
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
277a290
> 		HRESULT	Win9xInit( void );
287a301,302
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
288a304,305
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
290a308
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
295a314,317
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		void	CheckWinsock1IO( const FD_SET *const pWinsock1Sockets );
> 		void	ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
41a44
> #include	"Creg.h"
42a46,49
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
136a182,238
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
223a326,328
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
229a335,338
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
270c379
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
361a471,721
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CDPVACMI::LoadAndAllocString"
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
51,54d52
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a80,81
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a85
> static DWORD_PTR	OverrideWinsockVersion( void );
92a94,159
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
106a174,175
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
116a186,187
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
132c203
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
134,140c205,206
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
142,144c208,210
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
146d211
< 
148a214,215
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
158c225,233
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
188a264,266
> 	BOOL	fFreeReturn;
> 
> 
192c270,274
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
199a282,294
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
200a296
> 
286a383
> 	INT_PTR iWinsockVersion;
296a394
> 	iWinsockVersion = GetWinsockVersion();
595c693
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
627c725
< */
---
> 
637c735
< /*	AdapterInfo.guid = *pAdapterGUID;
---
> 	AdapterInfo.guid = *pAdapterGUID;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
60c62
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
64d65
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
165a167,170
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
167a173,188
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
232a254
> 		case TYPE_IPX:
318a341
> 	IDirectPlay8Address		*pSPOnlyAddress;
326c349
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
341a365
> 	pSPOnlyAddress = NULL;
391a416,463
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
393a466,513
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
526a647,678
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
540a693,694
> 			}
> 
618a773,778
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
811c971
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1024a1185,1213
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1025a1215,1216
> 			}
> 
1296a1488
> 										  DPNSPF_OKTOQUERY |
1513a1706,1737
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1514a1739,1740
> 			}
> 
2417a2644,2655
> 		// Multicast groups are unsupported on IPX.
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
2607a2846,2857
> 		//
> 		// multicast groups are unsupported on IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\08141630.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dplay8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dbginfo.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
-- 90 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091615.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141000.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dbginfo.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 232 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
39c41
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
123c125
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
131c133
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
165c167
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
167,171c169,171
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
173c173,178
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
175c180
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
176a182,265
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
193c282
< // BUGBUG: [mgere] [xbox] Added this temporarily
---
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
195,196c284,285
< COM_Init();
< 
---
>     if( hr == CO_E_NOTINITIALIZED )
>     {
218a308,311
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "UNKNOWN_MODULE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetDebug"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
78a83,92
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34,37
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
35a40
> #endif	// _WIN64
40a46,52
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
60a73
> #ifdef	_X86_
61a75,77
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
94a111,116
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
103a126,128
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
121a147
> 	OSVERSIONINFO	OSVersionInfo;
122a149
> 
130a158,186
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
229a286,287
> 		switch ( DNGetOSType() )
> 		{
232a291,292
> 			case VER_PLATFORM_WIN32_NT:
> 			{
257a318,328
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
290a362,393
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
361a465
> //#ifdef	_WIN32
390a495
> //#endif	// _WIN32
391a497,518
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
417a545
> #ifdef	_X86_
429a558,608
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
455a635,636
> #ifdef	_X86_
> 
467a649,695
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
688a917,919
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
707a939
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
798a1031
> 		pMemoryLink->NoteCurrentCallStack();
908a1142
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
925a1160,1163
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
926a1165
> #endif
943,944c1182,1193
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
948a1198,1206
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
979a1238
> 	DWORD		dwDisplayFlags;
980a1240
> 
983a1244
> 	fDisplayLeaks = TRUE;
986a1248,1249
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
993a1257
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1001a1266,1269
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1002a1271
> #endif
1007,1008c1276
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1009a1278,1328
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1022a1342,1485
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1117a1581
> 	static	BOOL	fDisplayCallStacks = TRUE;
1135a1600,1603
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1141a1610,1614
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1146,1147c1619,1651
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1180a1685
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	"CallStack.h"
> 
29a32,34
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
53a59
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
76d81
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
86a92,101
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
136a137,207
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
31a72
>         creg.cpp \
36c77,88
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include "DNetErrors.h"
20a22,23
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
22c25,48
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
24,29d49
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
31c51,53
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
33c55,60
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
35,37c62,69
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
39c71,83
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
41,43d84
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
45,47c86,100
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
49,50c102,103
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
52,53c105,109
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
55,56c111,113
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
58d114
< Return Value:
60,63c116,133
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
65,66c135,138
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
68d139
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
70,71c141,143
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
73c145,150
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
75c152,170
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
77,80d171
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
82,83c173,187
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
84a189,190
> 		*pdwWCHARStringLength = iReturn;
> 	}
86,151c192
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
152a194
> //**********************************************************************
154a197
> 
174a218,220
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
182c228,238
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
188a245,251
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
189a253,295
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
> 
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
> 
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
> #undef DPF_MODNAME
208a315,316
> 	int rval;
> 
216c324
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
219a328
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
39d38
< #include <wchar.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
145c145,147
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
208,209c210
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
324d324
< */
410,411c410
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
465c464
< */
---
> 
522c521
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
544c543
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
698d696
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1243c1241
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1288,1289c1286,1287
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1305c1303
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1308c1306
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
97a98
> #include "dplobby8.h"
258a260,279
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
322a344,345
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
927a951,956
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1112c1141
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
167a168
> #include "DPLobby8.h"
195a197
> #include "DNMisc.h"
205a208,210
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
207,208d211
< #include <mmsystem.h>
< #include <wchar.h>
678a682,690
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1119a1132,1135
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1237d1252
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1253,1255d1267
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1286d1297
< */
1886a1898,1905
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2081c2100
< 	{
---
> 	{
2473,2474d2491
< // BUGBUG [mgere] [xbox] Temporarily removed until a CoCreateGuid call is implemented
< #ifdef _BUILD_FOR_WIN2000
2480d2496
< #endif
2543a2560,2568
> 	//	Inform DPNSVR of LISTENs
> 	//
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		DPF(3,"Registering with DPNSVR");
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
> 	//
2652a2678,2682
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
4010c4040
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4167c4197
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4171c4201
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4235c4265
< 	//
---
> 	//
4253d4282
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4269,4271d4297
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4303d4328
< */
4991c5016
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
4994c5019,5088
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_EXIT( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_EXIT(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_EXIT(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
4996a5091,5113
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
4997a5115,5260
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	packBuffer.Initialize(NULL, 0 );
> 
> 	// Determine the size of buffer
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
4998a5262,5342
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5359a5704,5833
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	HRESULT					hResultCode;
> 	HRESULT					hrRegister;
> 	CAsyncOp				*pListenParent;
> 	CAsyncOp				*pListenSP;
> 	CAsyncOp				*pListen;
> 	CBilink					*pBilinkSP;
> 	CBilink					*pBilink;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR			DP8ABuffer[512];
> 	DWORD			DP8ASize;
> #endif
> 
> 	DPF(4,"Parameters: (none)");
> 
> 	pListenParent = NULL;
> 	pListenSP = NULL;
> 	pListen = NULL;
> 
> 	//
> 	//	Default error returned
> 	//
> 	hrRegister = DPNERR_GENERIC;
> 
> 	//
> 	//	Get LISTEN AsyncOp parent from DirectNet object and add a RefCount
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent == NULL)
> 	{
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 		goto Exit;
> 	}
> 	pdnObject->pListenParent->AddRef();
> 	pListenParent = pdnObject->pListenParent;
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Lock the parent so that the child bilink list doesn't change
> 	//
> 	pListenParent->Lock();
> 
> 	//
> 	//	Locate each child (LISTEN SP parent) and then each actual LISTEN
> 	//
> 	pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 	while (pBilinkSP != &pListenParent->m_bilinkParent)
> 	{
> 		pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 
> DNASSERT(pListenSP->GetParent() == pListenParent);
> 		//
> 		//	Lock the SP parent so that the child bilink doesn't change
> 		//
> 		pListenSP->Lock();
> 
> 		pBilink = pListenSP->m_bilinkParent.GetNext();
> 		while (pBilink != &pListenSP->m_bilinkParent)
> 		{
> 			pListen = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 
> 			DNASSERT(pListen->GetProtocolHandle() != NULL);
> 
> 			spInfo.hEndpoint = pListen->GetProtocolHandle();
> 			spInfo.pAddress = NULL;
> 			spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 
> 			if (DNPGetListenAddressInfo(pListen->GetProtocolHandle(),&spInfo) == DPN_OK)
> 			{
> 				DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 				DP8ASize = 512;
> 				spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 				DPF(4,"Listen address [%s]",DP8ABuffer);
> 
> 				// We re-try the registration to catch the case where DPNSVR is shutting
> 				// down while we are trying to register.  Unlikely but has to be handled.
> 				//
> #endif
> 	            for( DWORD dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		        {
>     				hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress );
> 	    			if( FAILED( hResultCode ) )
> 					{
>     					if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    					Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    				}
> 						else
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    				}
> 	    			}
> 					else
>     				{
>     					// Return DPN_OK if we succeed even once
>     					hrRegister = hResultCode;
>     					break;
> 	    			}
> 		        }
> 			
> 				spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 				spInfo.pAddress = NULL;
> 
> 			}
> 			pBilink = pBilink->GetNext();
> 		}
> 
> 		pListenSP->Unlock();
> 
> 		pBilinkSP = pBilinkSP->GetNext();
> 	}
> 
> 	pListenParent->Unlock();
> 
> 	pListenParent->Release();
> 	pListenParent = NULL;
> 
> Exit:
> 	DPF(4,"Returning: [0x%lx]",hrRegister);
> 	return( hrRegister );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
205c205
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
207a208,210
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
216a220,221
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
85a86
> #include "DPLobby8.h"
114d114
< #include <wchar.h>
118,121d117
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
190c186
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
265,266c261,262
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
293c289
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
748c744
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
833c829
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
846c842
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
903c899
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1206c1202
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1231,1232c1227
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1236c1231
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1363,1364c1358,1359
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1727a1723,1727
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
1993a1994,2002
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2888c2897
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2922c2931
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
2945c2954
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2972c2981
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
37a38
> #include "creg.h"
42a44,180
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,109
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
107a111,115
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
130a139
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
272a282
> 	// Lobby additions
273a284,287
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
44a45
> #include "DNMisc.h"
46a48
> #include "CReg.h"
60c62,71
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
75,76c86
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
78c88,98
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
80,81c100,103
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> //	CServiceProvider	*pSP;
89a112,115
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> //	pSP = NULL;
> 
93,94c119,124
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
96c126,153
< 	memcpy(&dnSpInfo.guid,&guidSP,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
98,101c155,168
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
102a170,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guid,NULL,TRUE);
> 			if (hResultCode != DPN_OK)
> 			{
> 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
> 				SubEntry.Close();
> 				dwEnumIndex++;
> 				dwKeyLen = dwMaxKeyLen;
> 				hResultCode = DPN_OK; // override return code
> 				continue;
> 			}
> 			else
> 			{
> //				DN_SPRelease(pdnObject,&guid);
> 			}
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> /*	REMOVE
> 		hResultCode = packedBuffer.AddToBack(&guid,sizeof(GUID));
> 		dnSpInfo.pGuid = static_cast<GUID*>(packedBuffer.GetTailAddress());
> */
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
108c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
110c272
< 		goto Exit;
---
> 		goto Failure;
114c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
117,123d279
< 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guidSP,NULL,TRUE);
< 			if (hResultCode != DPN_OK)
< 			{
< 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
< 				hResultCode = DPN_OK; // override return code
< 			}
< 
125a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
128a290,311
> 
> Failure:
> 
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	goto Exit;
142,146d324
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
296d473
< */	return(E_FAIL);
520c697
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
546c723
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
85a86,88
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
86a90
> #include "dplobby8.h"
291a296
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
703a709,728
> 	// Register with DPNSVR
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		BOOL	fCoUninitialize = FALSE;
> 
> 		DPF( 7, "Asking for DPNSVR to start listening for us.." );
> 
> 		if (COM_CoInitialize(NULL) == S_OK)
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		DNRegisterWithDPNSVR(pdnObject);
> 
> 		if (fCoUninitialize)
> 		{
> 			COM_CoUninitialize();
> 		}
> 	}
> 
795a821,825
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1183c1183
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1199c1199
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1203c1203
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1234c1234
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1250c1250
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1254c1254
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1283c1283
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1299c1299
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
430,431c430
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
443,444c442,443
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
531c530
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
212c212
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
220a221,227
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
246a254,259
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1062c1075
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1600a1614,1619
>     if( ( dwFlags & ~( DPNHOST_OKTOQUERYFORADDRESSING ) ) != 0 )
>     {
>         DPFERR("Invalid flags specified" );
>         return( DPNERR_INVALIDFLAGS );
>     }
> 
1813c1832
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2129c2148
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
18c39,56
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
20d57
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c59,60
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c63,67
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c69
< DLLDEF=..\dnet.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
29a71,78
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
70a120,127
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
73,94c130,132
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
24a25,31
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DPNAddress"
> 
> /*
31a39,67
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNAddress"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNAddress"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
18c39,54
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
20d55
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c57,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c61,65
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c67
< DLLDEF=..\dnadd.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
29a69,76
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
38a86
>          ..\dplegacy.cpp \
40a89,95
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c98,100
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
105c105
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
106a107,111
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
117a118,122
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
363c363
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
595c595
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
30a38,66
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNSPWinsock"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectDPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNSPWinsock"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
120a122,141
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
144,145d164
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
193d211
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE 
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | WS_POPUP | WS_VISIBLE | WS_CAPTION | 
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE 
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE 
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,67
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,70
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
104a106
> 	m_hActiveSettingsDialog( NULL ),
135a138
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
371a375,382
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( m_hActiveSettingsDialog != NULL )
> 		{
> 			StopSettingsDialog( m_hActiveSettingsDialog );
> 		}
374a386,392
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( m_hActiveSettingsDialog == NULL );
> 	}
376d393
< 
879a897,903
> 	if ( m_hActiveSettingsDialog != NULL )
> 	{
> 		StopSettingsDialog( m_hActiveSettingsDialog );
> 		Unlock();
> 	}
> 	else
> 	{
885a910
> 	}
1814,1815c1839
< 
< // BUGBUG: [mgere] [xbox] Not sure if we ever get into this next block on the Xbox.  Put breakpoint and see.	
---
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
360a361,367
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 
> 		//
380a388
> 		HWND	m_hActiveSettingsDialog;				// handle of active settings dialog
381a390
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
44a46
> #include	"IPXAddress.h"
81c83,84
< 	m_pSocketPort( NULL )
---
> 	m_pSocketPort( NULL ),
> 	m_fWin9xOperationPending( FALSE )
99a103,104
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
114a120
> 	m_Win9xReceiveWSAReturn( ERROR_SUCCESS ),
191a198,203
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
212a225,231
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, always use IO completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
216a236,258
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
241a284,285
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
275a320,321
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
308a355,360
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
450a503,509
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, we'll always use completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
453a513,536
> 
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
485a569,570
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
506a592,593
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
88a89,91
> 		BOOL	Win9xOperationPending( void ) const { return m_fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_fWin9xOperationPending = fOperationPending; }
> 
118a122
> 		BOOL			m_fWin9xOperationPending;	// this structure has been initialized and the operation is pending on Win9x
119a124
> 
149a155
> 		INT		m_Win9xReceiveWSAReturn;		
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
84a86
> const DWORD	g_dwIPBroadcastAddressSize = sizeof( g_IPBroadcastAddress );
1018,1020d1019
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1340d1338
< */	return DPNERR_UNSUPPORTED;
1520a1519,1524
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1521a1526,1544
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1524a1548,1550
> 		case 2:
> 		default:
> 		{
1525a1552,1554
> 			break;
> 		}
> 	}
1595a1625,1630
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1596a1632,1650
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1599a1654,1656
> 		case 2:
> 		default:
> 		{
1600a1658,1660
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
38a40
> #include	"StrUtils.h"
52a55
> #include	"IPUI.h"
95a99
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
117a122,392
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, &m_hActiveSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	m_hActiveSettingsDialog = NULL;
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.
> 	//
> 	if ( ( m_TempHostName[ 0 ] == '\0' ) && ( m_EndpointType == ENDPOINT_TYPE_ENUM ) )
> 	{
> 		DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 		memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 		dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> //	    	hr = CompleteEnumQuery();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing EnumQuery after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> //
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> //	    	hr = CompleteConnect();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing Connect after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// cleanup and close this endpoint
> 	//
> 	switch ( GetType() )
> 	{
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			CleanupConnect();
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			CleanupEnumQuery();
> 			break;
> 		}
> 
> 		//
> 		// other state (note that LISTEN doesn't have a dialog)
> 		//
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	Close( hr );
> 	m_pSPData->CloseEndpointHandle( this );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
222a498
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,67
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
69a85
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,111
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
108a114,128
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
51a53
> #include	"IPXAddress.h"
55a58
> #include	"IPXEndpt.h"
88a92
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
90a95
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
195a201,207
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
214a227,243
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
339a369,375
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
349a386,391
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
494a537,580
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
504a591,606
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> class	CIPXAddress;
35a37
> class	CIPXEndpoint;
63a66,67
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
65a70
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include	"Registry.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
265a267,273
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
266a275,279
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
383a397,404
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
384a406,410
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
530a557,568
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
967a1006,1265
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ReadService( void )
> {
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
> 
> 
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1WriteService( void )
> {
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Winsock1ErrorService( void )
> {
> 	INT3;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
994c1292,1293
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1000a1300,1308
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1006a1315,1318
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
> 
1017a1330,1334
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1058a1376,1378
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1132c1452,1453
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1144a1466,1469
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
1152a1478,1480
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1170a1499,1502
> 			if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 			{
> 				m_pSPData->GetThreadPool()->UnlockReadData();
> 			}
1187a1520,1523
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1205a1542,1545
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1210a1551,1552
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1228a1571,1574
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1245a1592,1593
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1278a1627,1628
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
1909a2260,2266
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1954a2312,2375
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2601a3023,3178
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Win9xWinsock2ReceiveComplete - a Winsock2 socket receive
> //		completed on Win9x
> //
> // Entry:		Poiner to read data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData )
> {
> 	DNASSERT( pReadData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	DNASSERT( pReadData->Win9xOperationPending() == FALSE );
> 
> 	//
> 	// figure out what's happening with this socket port
> 	//
> 	switch ( m_State )
> 	{
> 		//
> 		// we're unbound, discard this message and don't ask for any more
> 		//
> 		case SOCKET_PORT_STATE_UNBOUND:
> 		{
> 			goto Exit;
> 			break;
> 		}
> 
> 		//
> 		// we're initialized, process input data and submit a new receive if
> 		// applicable
> 		//
> 		case SOCKET_PORT_STATE_INITIALIZED:
> 		{
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// the socket was closed on an outstanding read, stop
> 				// receiving
> 				//
> 				case WSAENOTSOCK:					// WinNT return for closed socket
> 				case ERROR_OPERATION_ABORTED:		// Win9x return for closed socket
> 				{
> 					break;
> 				}
> 
> 				//
> 				// ERROR_SUCCESS = no problem
> 				// WSAECONNRESET = previous send failed (who cares!)
> 				// default = other error, just try reading again
> 				//
> 				case WSAECONNRESET:
> 				case ERROR_SUCCESS:
> 				default:
> 				{
> 					HRESULT			hTempResult;
> 
> 
> 					DNASSERT( m_State == SOCKET_PORT_STATE_INITIALIZED );
> 
> 					//					
> 					// attempt another read on this socket.
> 					//
> 					Winsock2Receive();
> 
> 					break;
> 				}
> 			}
> 
> 			//
> 			// now that initial reads have been taken care of, perform error-specific
> 			// processing
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// succcess, note the actual number of bytes read and tell
> 				// someone about the received data
> 				//
> 				//	Since this data has been processed then we know that receive buffer has already been returned.
> 				//
> 				case ERROR_SUCCESS:
> 				{
> 					pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = pReadData->m_dwOverlappedBytesReceived;
> 					pReadData->m_dwOverlappedBytesReceived = 0;
> 					ProcessReceivedData( pReadData );
> 
> 					break;
> 				}
> 
> 				//
> 				// Other error, stop in the debugger if it's not 'known'.
> 				//
> 				default:
> 				{
> 					switch ( pReadData->m_Win9xReceiveWSAReturn )
> 					{
> 						//
> 						// WSAECONNRESET = a previous send failed and Winsock is telling
> 						//				   us on an unrelated receive (Thanks WINSOCK).
> 						// WSAENOTSOCK = Socket was closed, user probably cancelled
> 						//				 somethinng.  Just clean up.
> 						// ERROR_OPERATION_ABORTED = something stopped the I/O operation.
> 						//
> 						case WSAECONNRESET:
> 						case WSAENOTSOCK:
> 						case ERROR_OPERATION_ABORTED:
> 						{
> 							break;
> 						}
> 
> 						default:
> 						{
> 							DPF( 0, "Problem with Winsock2 Win9x read: " );
> 							DisplayWinsockError( 0, pReadData->m_Win9xReceiveWSAReturn );
> 							INT3;
> 							
> 							break;
> 						}
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other state
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> Exit:
> 	//
> 	// return the current data to the pool and note that
> 	// this I/O operation is complete
> 	//
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();	
> 	DecRef();
> 
> 	return;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
255a256
> 		void	Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData );
261a263,265
> 		void	Winsock1ReadService( void );
> 		void	Winsock1WriteService( void );
> 		void	Winsock1ErrorService( void );
326a331
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,3c1,5
< TARGETNAME=dpnwsock
< TARGETTYPE=DYNLINK
< TARGETPATH=obj
---
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
5c7,17
< !ifdef _BUILD_FOR_WIN2000
---
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
> TARGETNAME=dpnwsock
> DLLDEF=..\wsocksp.def
7,13d18
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
15c20,26
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\..\dnaddress
---
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
17c28,29
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> TARGETPATH=obj
> TARGETTYPE=DYNLINK
19c31,35
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
21,22c37,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
> 
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
25c61,71
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
27c73,77
< DLLDEF=..\wsocksp.def
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28a79,88
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
> 
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
30c90
<          ..\Classfac.cpp \
---
> 	 ..\Classfac.cpp \
33a94
> 	 ..\DWinsock.cpp \
38a100,102
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
41a106
>          ..\Registry.cpp \
50a116,118
> #
> # Next specify options for the compiler.
> #
51a120,122
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
54,74c125,126
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.H>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120c120,121
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
158c159,160
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
237a240
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
238a242
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
241c245
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
248c252
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
276a281
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include <WSIPX.h>
50a52
> #include	"IPXAddress.h"
56a59
> #include	"IPXEndpt.h"
238a242,271
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
854a888,893
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1167a1207,1212
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1198a1244,1249
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
122a124,143
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
129a151,161
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	HWND			*phDialog;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
234c266,273
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
236c275,276
< 	)
---
> 						break;
> 					}
237a278,285
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
244c292,299
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
246c301,302
< 	)
---
> 						break;
> 					}
247a304,311
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
281a346,352
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
338a410,414
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
341a418,419
> 		case VER_PLATFORM_WIN32_NT:
> 		{
347a426,452
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
376a482,483
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
383a491,495
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
407a520,526
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
409,413d527
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
438a553,788
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
537a888,889
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
558a911
> 	}
640a994,996
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
> 		pReadData->m_Win9xReceiveWSAReturn = WSAESHUTDOWN;
658a1015,1016
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
803a1162
> 	m_IPXReadIODataPool.Deinitialize();
945d1303
< 			
949a1308,1316
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
1027a1395,1403
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1282a1659,1660
> 	switch ( OSType() )
> 	{
1285a1664,1665
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1302a1683,1711
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1413a1823,1824
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1420a1832
> 	}
1622a2035,2135
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Pointer destination for copy of dialog handle
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( phDialog != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->phDialog = phDialog;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1642a2156,2157
> 	switch ( OSType() )
> 	{
1643a2159,2168
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1645a2171,2172
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1647a2175,2176
> 			break;
> 		}
1648a2178,2187
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1677a2217,2218
> 	switch ( OSType() )
> 	{
1678a2220,2227
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1684a2234,2235
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1724a2276,2288
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1804a2369,2515
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1948a2660,3480
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 
> 			pThisThreadPool->CheckWinsock1IO( pSocketSet );
> 			
> 			//
> 			// since there are Winsock1 sockets active, don't spend a lot of
> 			// time waiting for something to happen for Winsock2
> 			//
> 			if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 			{
> 				dwMaxWaitTime = g_dwSelectTimeSlice;
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 
> 			//
> 			// New job.  Account for the time spent in the wait.  Don't
> 			// account for time after the job is complete because it's
> 			// possible that the job was an job submission which will want
> 			// to reset the wait time.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Primary Win9x thread has a pending job!" );
> 				pThisThreadPool->ProcessWin9xJob( &CoreData );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Primary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Primary Win9x thread failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nPrimary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	BOOL				fLooping;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	fLooping = TRUE;
> 	while ( fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			//
> 			// New job.  This is the secondary thread and is only used to handle
> 			// Winsock2 I/O.  Ignore this event and sleep to cause the proper
> 			// work thread to handle the event.
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			{
> 				DPF( 8, "Secondary Win9x thread sleeping on job notification!" );
> 				SleepEx( 0, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// SP closing
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			{
> 				DPF( 8, "Secondary Win9x thread exit because SP closing!" );
> 				fLooping = FALSE;
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 send complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending write list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thread failed to reset Winsock2 send event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing sends!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingSends();
> 				break;
> 			}
> 
> 			//
> 			// Winsock2 receive complete
> 			//
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				//
> 				// reset the event so it will be signalled again if anything
> 				// completes while we're scanning the pending read list
> 				//
> 				if ( ResetEvent( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 				{
> 					DWORD	dwError;
> 
> 
> 					dwError = GetLastError();
> 					DPF( 0, "Secondary Win9x thead failed to reset Winsock2 receive event!" );
> 					DisplayErrorCode( 0, dwError );
> 				}
> 
> //				DPF( 0, "\n\n\nSecondary Win9x thread servicing receives!\n\n\n" );
> 				pThisThreadPool->CompleteOutstandingReceives();
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2292a3825,4182
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CheckWinsock1IO( const FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( pSocketSet->fd_array[ uWaitingSocketCount ] == m_SocketSet.fd_array[ uIdx ] )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		(pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
63a65
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
101c103,104
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
147a151
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
152a157
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
160a166,168
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
171a180,182
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
> 		
223a235
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
277a290
> 		HRESULT	Win9xInit( void );
287a301,302
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
288a304,305
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
290a308
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
295a314,317
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		void	CheckWinsock1IO( const FD_SET *const pWinsock1Sockets );
> 		void	ServiceWinsock1Sockets( const FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
41a44
> #include	"Creg.h"
42a46,49
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
136a182,238
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
223a326,328
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
229a335,338
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
270c379
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
361a471,721
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CDPVACMI::LoadAndAllocString"
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
51,54d52
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a80,81
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a85
> static DWORD_PTR	OverrideWinsockVersion( void );
92a94,159
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
106a174,175
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
116a186,187
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
132c203
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
134,140c205,206
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
142,144c208,210
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
146d211
< 
148a214,215
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
158c225,233
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
188a264,266
> 	BOOL	fFreeReturn;
> 
> 
192c270,274
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
199a282,294
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
200a296
> 
286a383
> 	INT_PTR iWinsockVersion;
296a394
> 	iWinsockVersion = GetWinsockVersion();
595c693
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
627c725
< */
---
> 
637c735
< /*	AdapterInfo.guid = *pAdapterGUID;
---
> 	AdapterInfo.guid = *pAdapterGUID;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
60c62
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
64d65
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
165a167,170
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
167a173,188
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
232a254
> 		case TYPE_IPX:
318a341
> 	IDirectPlay8Address		*pSPOnlyAddress;
326c349
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
341a365
> 	pSPOnlyAddress = NULL;
391a416,463
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
393a466,513
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
526a647,678
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
540a693,694
> 			}
> 
618a773,778
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
811c971
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1024a1185,1213
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1025a1215,1216
> 			}
> 
1296a1488
> 										  DPNSPF_OKTOQUERY |
1513a1706,1737
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1514a1739,1740
> 			}
> 
2417a2644,2655
> 		// Multicast groups are unsupported on IPX.
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
2607a2846,2857
> 		//
> 		// multicast groups are unsupported on IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\09071230.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dplay8.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
-- 88 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091615.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141000.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08151200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08241230.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\09061330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dvoice\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\classfac.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\createin.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dllmain.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacmi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacmi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvaconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvaconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvautil.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvautil.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\msgvacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\msrgacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\unk.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\dpvcpi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\dpvcpi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\classfac.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\createin.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dllmain.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvoxi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvoxi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\msgvvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\msrgvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\unk.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vci.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcierror.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcisc3.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcisc6.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcivr12.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\i386\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\i386\voxlib.lib	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\ia64\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\ia64\voxlib.lib	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\callstack.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\classhash.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dbginfo.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dbgtopic.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dndbg.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dndbg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dvcslock.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\fpm.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\fpm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\in_def.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\lockedcfpm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\memlog.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\newdpf.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\newdpf.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxchar.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxchar.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdplay.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdplay.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdump.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdump.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxerr.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxerr.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxlib.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxmisc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxmisc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\conndlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\conndlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\directx.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dxvhelp.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dxvhelp.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dxvhelp.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\hostdlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\hostdlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\maindlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\maindlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\misc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\misc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\small.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\snddlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\snddlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\testwin.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\voice.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\voice.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dpvoice.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvbase.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcleng.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcleng.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvclient.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvclient.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvdxtran.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvdxtran.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvengine.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvengine.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvoice.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvprot.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvrecsub.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvrecsub.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsereng.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsereng.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvserver.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvserver.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvshared.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvshared.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsndt.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsndt.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvtran.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\in_core.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\in_core.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\mixutils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\mixutils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\msgvve.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\msrgve.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\resource.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\statdef.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\trnotify.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\trnotify.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vnametbl.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vnametbl.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vplayer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vplayer.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\directx.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dxvt.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dxvt.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtcfg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtcfg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtglob.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtglob.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtipc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtipc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fulldup.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fulldup.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\loopback.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\loopback.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\peakmetr.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\peakmetr.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\priority.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\priority.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\supervis.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\supervis.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv2.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv2.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconvs.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconvs.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\agcva.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\agcva1.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\agcva1.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayb.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayb.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayd.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayd.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplays.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplays.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\arecs.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\astypes.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\decibels.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\decibels.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\diagnos.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\diagnos.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dputils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dputils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayb.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayb.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayd.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayd.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplays.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplays.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvcdb.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvcdb.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dverror.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dverror.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvsildet.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvsildet.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\frame.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\frame.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\innerque.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\innerque.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\inqueue2.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\inqueue2.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\sndutils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\sndutils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\dpvcp.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\dvoice.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 489 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
43c45
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
137c139
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
145c147
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
181c183
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
183,187c185,187
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
189c189,194
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
191c196
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
192a198,281
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
210a300,303
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
> 
>     if( hr == CO_E_NOTINITIALIZED )
>     {
232a326,329
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
83a88,97
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
37a38,41
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
39a44
> #endif	// _WIN64
44a50,56
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
64a77
> #ifdef	_X86_
65a79,81
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
98a115,120
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
107a130,132
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
128a154
> 	OSVERSIONINFO	OSVersionInfo;
129a156
> 
137a165,193
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
239a296,297
> 		switch ( DNGetOSType() )
> 		{
242a301,302
> 			case VER_PLATFORM_WIN32_NT:
> 			{
267a328,338
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
300a372,409
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNGetOSType"
> 
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNGetApplicationInstance"
> 
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
377a487
> //#ifdef	_WIN32
406a517
> //#endif	// _WIN32
407a519,540
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
436a570
> #ifdef	_X86_
448a583,633
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
477a663,664
> #ifdef	_X86_
> 
489a677,723
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
714a949,951
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
733a971
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
833a1072
> 		pMemoryLink->NoteCurrentCallStack();
952a1192
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
969a1210,1213
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
970a1215
> #endif
987,988c1232,1243
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
992a1248,1256
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
1026a1291
> 	DWORD		dwDisplayFlags;
1027a1293
> 
1030a1297
> 	fDisplayLeaks = TRUE;
1033a1301,1302
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
1040a1310
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1048a1319,1322
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1049a1324
> #endif
1054,1055c1329
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1056a1331,1381
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1069a1395,1541
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "DisplayCallStack"
> 
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1176a1649
> 	static	BOOL	fDisplayCallStacks = TRUE;
1194a1668,1671
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1200a1678,1682
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1205,1206c1687,1719
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1242a1756
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21,22
> #include	"CallStack.h"
> 
46a49,51
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
70a76
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
93d98
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
103a109,120
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
> 
> #define		IsUnicodePlatform (DNGetOSType() == VER_PLATFORM_WIN32_NT)
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
145a146,218
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CPackedBuffer::AddStringToBack"
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
29a70
>         creg.cpp \
35c76,87
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
26a27,28
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
28c30,53
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
30,35d54
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
37c56,58
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
39c60,65
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
41,43c67,74
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
45c76,88
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
47,49d89
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
51,53c91,105
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
55,56c107,108
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
58,59c110,114
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
61,62c116,118
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
64d119
< Return Value:
66,69c121,140
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_AnsiToWide"
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
71,72c142,145
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
74d146
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
76,77c148,150
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
79c152,157
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
81c159,177
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
83,86d178
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
88,89c180,194
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
90a196,197
> 		*pdwWCHARStringLength = iReturn;
> 	}
92,157c199
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
158a201
> //**********************************************************************
160a204
> 
182a227,229
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
190c237,247
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
196a254,282
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
197a284,288
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
198a290,303
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
218a324,325
> 	int rval;
> 
226,228c333,342
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
< 
< 	return DPN_OK;
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
> 	if (!rval)
> 	{
> 		DPF(0,"MultiByteToWideChar failed in STR_jkAnsiToWide");
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <stdio.h>
26a28,30
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
773a778,801
> 	return(hResultCode);
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CApplicationDecs::RegisterWithDPNSVR"
> 
> HRESULT	CApplicationDesc::RegisterWithDPNSVR( IDirectPlay8Address *const pListenAddr )
> {
> 	HRESULT		hResultCode;
> 
> 	hResultCode = DPNSVR_Register( &m_guidApplication,&m_guidInstance,pListenAddr );
> 	return(hResultCode);
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CApplicationDecs::UnregisterWithDPNSVR"
> 
> HRESULT CApplicationDesc::UnregisterWithDPNSVR( void )
> {
> 	HRESULT		hResultCode;
> 
> 	hResultCode = DPNSVR_UnRegister( &m_guidApplication,&m_guidInstance );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
111a112,115
> 	HRESULT	CApplicationDesc::RegisterWithDPNSVR( IDirectPlay8Address *const pListenAddr );
> 
> 	HRESULT CApplicationDesc::UnregisterWithDPNSVR( void );
> 
152a157,165
> 		};
> 
> 	BOOL UseDPNSVR( void )
> 		{
> 			if (m_dwFlags & DPNSESSION_NODPNSVR)
> 			{
> 				return( FALSE );
> 			}
> 			return( TRUE );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
153c153,155
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
218,219c220
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
334d334
< */
420,421c420
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
475c474
< */
---
> 
532c531
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
554c553
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
708d706
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1253c1251
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1298,1299c1296,1297
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1315c1313
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1318c1316
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #include "dplobby8.h"
260a262,281
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
324a346,347
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
920a944,949
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1087c1116
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
179a180
> #include "DPLobby8.h"
209a211
> #include "DNMisc.h"
219a222,224
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
221,222d225
< #include <mmsystem.h>
< #include <wchar.h>
721a725,733
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1164a1177,1180
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1282d1297
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1298,1300d1312
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1331d1342
< */
1948a1960,1967
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2143c2162
< 	{
---
> 	{
2723a2743,2747
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
2738a2763,2770
> 	//
> 	//	Register with DPNSVR
> 	//
> 	if (pdnObject->ApplicationDesc.UseDPNSVR())
> 	{
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
4083c4115
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4134c4166
< 		pAddrHost->lpVtbl->GetURLW(pAddrHost,DP8ABuffer,&DP8ASize);
---
> 		pAddrHost->lpVtbl->GetURLA(pAddrHost,DP8ABuffer,&DP8ASize);
4141c4173
< 		pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 		pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
4256c4288
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4260c4292
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4324c4356
< 	//
---
> 	//
4342d4373
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4358,4360d4388
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4392d4419
< */
5080c5107
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
5083c5110,5179
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_RETURN( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_RETURN(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_RETURN(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
5085a5182,5204
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
5086a5206,5351
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	// Determine the size of buffer
> 	packBuffer.Initialize(NULL, 0 );
> 	hResultCode = pdnObject->ApplicationDesc.Pack(&packBuffer,DN_APPDESCINFO_FLAG_SESSIONNAME|DN_APPDESCINFO_FLAG_RESERVEDDATA|
> 			DN_APPDESCINFO_FLAG_APPRESERVEDDATA);
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 	hResultCode = pdnObject->ApplicationDesc.Pack(&packBuffer,DN_APPDESCINFO_FLAG_SESSIONNAME|DN_APPDESCINFO_FLAG_RESERVEDDATA|
> 			DN_APPDESCINFO_FLAG_APPRESERVEDDATA);
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
5087a5353,5433
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5448a5795,5992
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	DPF(6,"Parameters: (none)");
> 
> 	HRESULT		hResultCode;
> 	CAsyncOp	*pListenParent;
> 
> 	hResultCode = DPNERR_GENERIC;
> 	pListenParent = NULL;
> 
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent)
> 	{
> 		pdnObject->pListenParent->AddRef();
> 		pListenParent = pdnObject->pListenParent;
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if (pListenParent)
> 	{
> 		BOOL		fCoUninitialize = FALSE;
> 		CBilink		*pBilinkSP;
> 		CBilink		*pBilink;
> 		CAsyncOp	*pListenSP;
> 		CAsyncOp	*pAsyncOp;
> 		CAsyncOp	**ListenList;
> 		DWORD		dwCount;
> 		DWORD		dwActual;
> 
> 		if (COM_CoInitialize(NULL) == S_OK)
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		dwCount = 0;
> 		dwActual = 0;
> 		ListenList = NULL;
> 
> 		pListenParent->Lock();
> 
> 		pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 		while (pBilinkSP != &pListenParent->m_bilinkParent)
> 		{
> 			pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 			pListenSP->Lock();
> 
> 			pBilink = pListenSP->m_bilinkParent.GetNext();
> 			while (pBilink != &pListenSP->m_bilinkParent)
> 			{
> 				dwCount++;
> 				pBilink = pBilink->GetNext();
> 			}
> 			pListenSP->Unlock();
> 
> 			pBilinkSP = pBilinkSP->GetNext();
> 		}
> 
> 		if (dwCount > 0)
> 		{
> 			if ((ListenList = static_cast<CAsyncOp**>(DNMalloc(dwCount*sizeof(CAsyncOp*)))) != NULL)
> 			{
> 				pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 				while (pBilinkSP != &pListenParent->m_bilinkParent)
> 				{
> 					pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 					pListenSP->Lock();
> 
> 					pBilink = pListenSP->m_bilinkParent.GetNext();
> 					while (pBilink != &pListenSP->m_bilinkParent)
> 					{
> 						pAsyncOp = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 						pAsyncOp->AddRef();
> 						ListenList[dwActual] = pAsyncOp;
> 
> 						dwActual++;
> 						if (dwActual > dwCount)
> 						{
> 							DNASSERT(FALSE);
> 							break;
> 						}
> 						pBilink = pBilink->GetNext();
> 					}
> 					pListenSP->Unlock();
> 					pBilinkSP = pBilinkSP->GetNext();
> 				}
> 			}
> 		}
> 
> 		pListenParent->Unlock();
> 
> 		if ((ListenList != NULL) && (dwActual > 0))
> 		{
> 			DWORD	dw;
> 
> 			for (dw = 0 ; dw < dwActual ; dw++)
> 			{
> 				if (ListenList[dw]->GetProtocolHandle() != 0)
> 				{
> 					if (DNRegisterListenWithDPNSVR(pdnObject,ListenList[dw]->GetProtocolHandle()) == DPN_OK)
> 					{
> 						hResultCode = DPN_OK;
> 					}
> 				}
> 
> 				ListenList[dw]->Release();
> 				ListenList[dw] = NULL;
> 			}
> 
> 			DNFree(ListenList);
> 			ListenList = NULL;
> 		}
> 
> 		if (fCoUninitialize)
> 		{
> 			COM_CoUninitialize();
> 		}
> 
> 		pListenParent->Release();
> 		pListenParent = NULL;
> 	}
> 
> 	DPF(6,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterListenWithDPNSVR"
> 
> HRESULT DNRegisterListenWithDPNSVR(DIRECTNETOBJECT *const pdnObject,
> 								   const HANDLE hProtocol)
> {
> 	HRESULT	hResultCode;
> 	DWORD	dwRetry;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR	DP8ABuffer[512];
> 	DWORD	DP8ASize;
> #endif
> 
> 	DPF(6,"Parameters: hProtocol [0x%lx]",hProtocol);
> 
> 	//
> 	//	Determine the address we're actually listening on
> 	//
> 	spInfo.hEndpoint = hProtocol;
> 	spInfo.pAddress = NULL;
> 	spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 	if ((hResultCode = DNPGetListenAddressInfo(hProtocol,&spInfo)) == DPN_OK)
> 	{
> 		DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 		DP8ASize = 512;
> 		spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 		DPF(7,"Listen address [%s]",DP8ABuffer);
> #endif
> 
> 		//
> 		//	We re-try the registration to catch the case where DPNSVR is shutting
> 		//	down while we are trying to register.  Unlikely but has to be handled.
> 		//
> 		for( dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		{
>     		if ((hResultCode = pdnObject->ApplicationDesc.RegisterWithDPNSVR( spInfo.pAddress )) == DPN_OK)
> 			{
> 				//
> 				//	Flag registering with DPNSVR for cleanup
> 				//
> 				DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 				pdnObject->dwFlags |= DN_OBJECT_FLAG_DPNSVR_REGISTERED;
> 				DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 				break;
> 			}
> 			else
> 			{
>     			if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     			{
> 	    			DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    			Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    		}
> 				else
>     			{
> 	    			DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    		}
> 	    	}
> 		}
> 		spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 		spInfo.pAddress = NULL;
> 	}
> 
> 	DPF(6,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
206c206
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
208a209,211
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
217a221,225
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
> 
> HRESULT DNRegisterListenWithDPNSVR(DIRECTNETOBJECT *const pdnObject,
> 								   const HANDLE hProtocol);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
90a91
> #include "DPLobby8.h"
124,127d124
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
196c193
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
271,272c268,269
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
299c296
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
750c747
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
836c833
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
849c846
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
888c885
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1197c1194
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1222,1223c1219
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1227c1223
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1354,1355c1350,1351
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1721a1718,1722
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
2018a2020,2028
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2952c2962
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2986c2996
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
3009c3019
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
3036c3046
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
40a41
> #include "creg.h"
45a47,183
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
94a95
> #define	DN_OBJECT_FLAG_DPNSVR_REGISTERED	0x20000000
108a110,112
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
109a114,118
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
132a142
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
273a284
> 	// Lobby additions
274a286,289
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47a48
> #include "DNMisc.h"
49a51
> #include "CReg.h"
63c65,74
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
78,79c89
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
81c91,101
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
83,84c103,106
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> 	CServiceProvider	*pSP;
92a115,118
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> 	pSP = NULL;
> 
96,97c122,127
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
99c129,156
< 	memcpy(&dnSpInfo.guid,&guidSP,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
101,104c158,171
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
105a173,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			DPF(5,"Checking [%S]",pwszKeyName);
> 			if ((hResultCode = DN_SPFindEntry(pdnObject,&guid,&pSP)) != DPN_OK)
> 			{
> 				if ((hResultCode = DN_SPInstantiate(pdnObject,&guid,&pSP)) != DPN_OK)
> 				{
> 					DPFERR("Could not find or instantiate SP");
> 					SubEntry.Close();
> 					dwEnumIndex++;
> 					dwKeyLen = dwMaxKeyLen;
> 					hResultCode = DPN_OK; // override return code
> 					continue;
> 				}
> 			}
> 			pSP->Release();
> 			pSP = NULL;
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
111c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
113c272
< 		goto Exit;
---
> 		goto Failure;
117c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
120,126d279
< 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guidSP,NULL,TRUE);
< 			if (hResultCode != DPN_OK)
< 			{
< 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
< 				hResultCode = DPN_OK; // override return code
< 			}
< 
128a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
131a290,315
> 
> Failure:
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	if (pSP)
> 	{
> 		pSP->Release();
> 		pSP = NULL;
> 	}
> 	goto Exit;
145,149d328
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
299d477
< */	return(E_FAIL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
91a92,94
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
92a96
> #include "dplobby8.h"
301a306
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
718a724,731
> 	//
> 	//	Register with DPNSVR
> 	//
> 	if(pdnObject->ApplicationDesc.UseDPNSVR())
> 	{
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
810a824,828
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
70a71,73
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
707a711
> 	BOOL		fUnregister;
729a734,749
> 	//
> 	//	Unregister from DPNSVR when LISTENs start to terminate
> 	//
> 	fUnregister = FALSE;
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->dwFlags & DN_OBJECT_FLAG_DPNSVR_REGISTERED)
> 	{
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_DPNSVR_REGISTERED);
> 		fUnregister = TRUE;
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	if (fUnregister)
> 	{
> 		pdnObject->ApplicationDesc.UnregisterWithDPNSVR();
> 	}
> 
1175c1195
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1191c1211
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1195c1215
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1226c1246
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1242c1262
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1246c1266
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1275c1295
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1291c1311
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
447,448c447
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
460,461c459,460
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
550c549
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
214c214
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
222a223,229
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
248a256,261
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1064c1077
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1602a1616,1621
>     if( ( dwFlags & ~( DPNHOST_OKTOQUERYFORADDRESSING ) ) != 0 )
>     {
>         DPFERR("Invalid flags specified" );
>         return( DPNERR_INVALIDFLAGS );
>     }
> 
1815c1834
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2143c2162
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,9c31,49
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
> 
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
> 
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> 	   $(BASEDIR)\public\sdk\lib\*\libcmtd.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmtd.lib \
11,13c51,52
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmt.lib \
14a54,61
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
16d62
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common;..\..\..\dvoice\inc
18c64,66
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
> !endif
20c68,72
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
22,24c74
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
< !endif
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
26d75
< MSC_WARNING_LEVEL=/W3 /WX
28c77,82
< DLLDEF=..\dnet.def
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
70a125,132
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
73,94c135,137
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,9c31,48
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
> 
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
> 
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> 	   $(BASEDIR)\public\sdk\lib\*\libcmtd.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmtd.lib \
11,13c50,51
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmt.lib \
14a53,59
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
16d60
< INCLUDES=..\;..\..\inc;..\..\common;..\..\..\dvoice\inc
18c62,64
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
> !endif
20c66,70
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
22,24c72
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
< !endif
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
26d73
< MSC_WARNING_LEVEL=/W3 /WX
28c75,80
< DLLDEF=..\dnadd.def
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
38a91
>          ..\dplegacy.cpp \
40a94,100
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c103,105
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
104c104
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
105a106,110
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120a121,125
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
438c438
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
130a131
> SYSTEM_INFO SystemInfo;
619c620,621
< 	MAX_TIMER_THREADS = MAX_TIMER_THREADS_PER_PROCESSOR;
---
> 	GetSystemInfo(&SystemInfo);
> 	MAX_TIMER_THREADS = SystemInfo.dwNumberOfProcessors * MAX_TIMER_THREADS_PER_PROCESSOR;
629c631
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
127a129,148
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
154,155d174
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
203d221
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | DS_CENTER | WS_POPUP | WS_VISIBLE | WS_CAPTION |
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,78
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> #ifndef ___WSAFDISSET___
> typedef
> int
> (WSAAPI * LPFN_WSAFDISSET)(
>     IN SOCKET s,
>     OUT fd_set FAR *fds
>     );
> #define ___WSAFDISSET___
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 	DYNAMICWINSOCK(__WSAFDIsSet, LPFN_WSAFDISSET);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,71
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
111a113
> 	m_hActiveSettingsDialog( NULL ),
142a145
> 	DNASSERT( GetActiveDialogHandle() == NULL );
387a391,398
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( GetActiveDialogHandle() != NULL )
> 		{
> 			StopSettingsDialog( GetActiveDialogHandle() );
> 		}
390a402,408
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( GetActiveDialogHandle() == NULL );
> 	}
392d409
< 
872a890,896
> 	if ( GetActiveDialogHandle() != NULL )
> 	{
> 		StopSettingsDialog( GetActiveDialogHandle() );
> 		Unlock();
> 	}
> 	else
> 	{
878a903
> 	}
1765,1766c1790
< 
< // BUGBUG: [mgere] [xbox] Not sure if we ever get into this next block on the Xbox.  Put breakpoint and see.	
---
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
400a401,417
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 		HWND	GetActiveDialogHandle( void ) const { return m_hActiveSettingsDialog; }
> 
> 		#undef DPF_MODNAME
> 		#define DPF_MODNAME "CEndpoint::SetActiveDialogHandle"
> 		void	SetActiveDialogHandle( const HWND hDialog )
> 		{
> 			DNASSERT( ( GetActiveDialogHandle() == NULL ) ||
> 					  ( hDialog == NULL ) );
> 			m_hActiveSettingsDialog = hDialog;
> 		}
> 
> 		//
442a460
> 		HWND		m_hActiveSettingsDialog;	// handle of active settings dialog
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
41a43
> #include	"IPXAddress.h"
104a107,108
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
209a214,219
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
257a268,269
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
295a308,309
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
333a348,353
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
524a545,546
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
549a572,573
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
86a87,89
> 		BOOL	Win9xOperationPending( void ) const { return m_Flags.fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_Flags.fWin9xOperationPending = fOperationPending; }
> 
119a123
> 			BOOL	fWin9xOperationPending : 1;		// this structure has been initialized and the operation is pending on Win9x
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
1058,1060d1058
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1412d1409
< */	return DPNERR_UNSUPPORTED;
1601a1599,1604
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1602a1606,1624
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1605a1628,1630
> 		case 2:
> 		default:
> 		{
1606a1632,1634
> 			break;
> 		}
> 	}
1679a1708,1713
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1680a1715,1733
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1683a1737,1739
> 		case 2:
> 		default:
> 		{
1684a1741,1743
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
35a37
> #include	"StrUtils.h"
49a52
> #include	"IPUI.h"
118a122
> 	DNASSERT( GetActiveDialogHandle() == NULL );
124a129,407
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CIPEndpoint::ShowSettingsDialog"
> 
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 	DNASSERT( GetActiveDialogHandle() == NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CIPEndpoint::SettingsDialogComplete"
> 
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	SetActiveDialogHandle( NULL );
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.  If the hostname is blank
> 	// on a connect, fail!
> 	//
> 	if ( m_TempHostName[ 0 ] == '\0' )
> 	{
> 		if ( GetType() == ENDPOINT_TYPE_ENUM )
> 		{
> 			DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 			memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 			dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 		}
> 		else
> 		{
> 			hr = DPNERR_ADDRESSING;
> 			DNASSERT( GetType() == ENDPOINT_TYPE_CONNECT );
> 			DPF( 0, "No hostname in dialog!" );
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// cleanup and close this endpoint
> 	//
> 	switch ( GetType() )
> 	{
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			CleanupConnect();
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			CleanupEnumQuery();
> 			break;
> 		}
> 
> 		//
> 		// other state (note that LISTEN doesn't have a dialog)
> 		//
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	Close( hr );
> 	m_pSPData->CloseEndpointHandle( this );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CIPEndpoint::StopSettingsDialog"
> 
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
238a522
> 	DNASSERT( GetActiveDialogHandle() == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,70
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 
> 		#undef DPF_MODNAME
> 		#define DPF_MODNAME "CIPEndpoint::SetTempHostName"
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
74a93
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
109a110,114
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
111a117,131
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
48a50
> #include	"IPXAddress.h"
52a55
> #include	"IPXEndpt.h"
88a92
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
90a95
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
198a204,210
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
217a230,246
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
345a375,381
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
355a392,397
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
518a561,610
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CreateIPXAddress"
> 
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "ReturnIPXAddress"
> 
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
531a624,642
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CreateIPXEndpoint"
> 
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> class	CIPXAddress;
35a37
> class	CIPXEndpoint;
63a66,67
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
65a70
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
45a46
> #include	"Registry.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,21
> #include	<WSIPX.h>
> 
272a275,281
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
273a283,287
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
393a408,415
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
394a417,421
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
549a577,588
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
1010a1050,1344
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1ReadService"
> 
> BOOL	CSocketPort::Winsock1ReadService( void )
> {
> 	BOOL		fIOServiced;
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
> 
> 
> 	//
> 	// initialize
> 	//
> 	fIOServiced = FALSE;
> 	
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			fIOServiced = TRUE;
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1WriteService"
> 
> BOOL	CSocketPort::Winsock1WriteService( void )
> {
> 	BOOL	fIOServiced;
> 
> 
> 	fIOServiced = FALSE;
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		fIOServiced = SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> 
> 	return	fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1ErrorService"
> 
> BOOL	CSocketPort::Winsock1ErrorService( void )
> {
> 	//
> 	// this function doesn't do anything because errors on sockets will usually
> 	// result in the socket being closed soon
> 	//
> 	return	FALSE;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1Send"
> 
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1040c1374,1375
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1046a1382,1390
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1052a1397,1400
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
> 
1063a1412,1416
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1104a1458,1460
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1195c1551,1552
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1207a1565,1568
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
1215a1577,1579
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1233a1598,1601
> 			if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 			{
> 				m_pSPData->GetThreadPool()->UnlockReadData();
> 			}
1250a1619,1622
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1268a1641,1644
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1273a1650,1651
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1291a1670,1673
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1318a1701,1702
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1354a1739,1740
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
2021a2408,2414
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
2066a2460,2523
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2574a3032,3033
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
267a268,270
> 		BOOL	Winsock1ReadService( void );
> 		BOOL	Winsock1WriteService( void );
> 		BOOL	Winsock1ErrorService( void );
336a340
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,27
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\wsocksp.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a29
> TARGETTYPE=DYNLINK
5,8c31,45
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
> 
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> 	   $(BASEDIR)\public\sdk\lib\*\libcmtd.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmtd.lib \
10,12c47,48
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmt.lib \
13a50,56
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
15c58,64
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\..\dnaddress
---
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
> !endif
17c66,76
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
19c78,82
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
21,23c84
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
< !endif
---
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
25d85
< MSC_WARNING_LEVEL=/W3 /WX
27c87,92
< DLLDEF=..\wsocksp.def
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
30c95
<          ..\Classfac.cpp \
---
> 	 ..\Classfac.cpp \
33a99
> 	 ..\DWinsock.cpp \
38a105,107
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
41a111
>          ..\Registry.cpp \
50a121,123
> #
> # Next specify options for the compiler.
> #
51a125,127
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
54,74c130,131
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	<WSIPX.H>
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
122c122,123
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
168c169,170
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
253a256
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
254a258
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
257c261
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
266c270
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
294a299
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,21
> #include <WSIPX.h>
> 
47a50
> #include	"IPXAddress.h"
53a57
> #include	"IPXEndpt.h"
207a212,213
> 	if ( GetType() == TYPE_IP )
> 	{
217a224
> 	}
265a273,302
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
907a945,950
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1238a1282,1287
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1272a1322,1327
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17,18
> #include	<WSIPX.h>
> 
124a127,147
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 	BOOL		fLooping;							// Boolean indicating that this thread is still running
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
131a155,164
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
245c278,285
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has poor APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
247c287,288
< 	)
---
> 						break;
> 					}
248a290,297
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
255c304,311
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has poor APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
257c313,314
< 	)
---
> 						break;
> 					}
258a316,323
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
292a358,364
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
349a422,426
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
352a430,431
> 		case VER_PLATFORM_WIN32_NT:
> 		{
358a438,464
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
390a497,498
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
397a506,510
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
421a535,541
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
423,427d542
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
452a568,806
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::Win9xInit"
> 
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
557a912,913
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
578a935
> 	}
666a1024,1025
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
685a1045,1046
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
836a1198
> 	m_IPXReadIODataPool.Deinitialize();
927d1288
< 			
931a1293,1301
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
1012a1383,1391
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1276a1656,1657
> 	switch ( OSType() )
> 	{
1279a1661,1662
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1296a1680,1708
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1413a1826,1827
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1420a1835
> 	}
1628a2044,2144
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::SpawnDialogThread"
> 
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1651a2168,2169
> 	switch ( OSType() )
> 	{
1652a2171,2180
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1654a2183,2184
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1656a2187,2188
> 			break;
> 		}
1657a2190,2199
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1689a2232,2233
> 	switch ( OSType() )
> 	{
1690a2235,2242
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1696a2249,2250
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1736a2291,2303
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1819a2387,2539
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::AddSocketPort"
> 
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::RemoveSocketPort"
> 
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1972a2693,3406
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::CompleteOutstandingSends"
> 
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( &WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		BOOL			fIOServiced;
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		fIOServiced = pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::CompleteOutstandingReceives"
> 
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( &ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Winsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::PrimaryWin9xThread"
> 
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	CoreData.fLooping = TRUE;
> 	while ( CoreData.fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 			
> 			//
> 			// if there is Winsock1 I/O that gets serviced, loop immediately.  If
> 			// there were no Winsock1 sockets serviced, pause before polling again.
> 			//
> 			if ( pThisThreadPool->CheckWinsock1IO( pSocketSet ) != FALSE )
> 			{
> 				dwMaxWaitTime = 0;
> 			}
> 			else
> 			{
> 				if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 				{
> 					dwMaxWaitTime = g_dwSelectTimeSlice;
> 				}
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 			
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				pThisThreadPool->ProcessWin9xEvents( &CoreData, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::SecondaryWin9xThread"
> 
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	CoreData.fLooping = TRUE;
> 	while ( CoreData.fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				pThisThreadPool->ProcessWin9xEvents( &CoreData, FALSE );
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2365a3800,4336
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::DialogThreadProc"
> 
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->pContext );
> 
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xEvents - process Win9x events
> //
> // Entry:		Pointer to core data
> //				Boolean indicating whether to acknowledge jobs
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::ProcessWin9xEvents"
> 
> void	CThreadPool::ProcessWin9xEvents( WIN9X_CORE_DATA *const pCoreData, const BOOL fProcessDelayedJobs )
> {
> 	DNASSERT( pCoreData != NULL );
> 
> 	//
> 	// If delayed jobs are to be processed, process one.  Otherwise sleep and
> 	// let another thread pick up the jobs.
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_PENDING_JOB ], 0 ) )
> 	{
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		case WAIT_OBJECT_0:
> 		{
> 			if ( fProcessDelayedJobs != FALSE )
> 			{
> 			    DPF( 8, "Primary Win9x thread has a pending job!" );
> 				ProcessWin9xJob( pCoreData );
> 			}
> 			else
> 			{
> 				SleepEx( 0, TRUE );
> 			}
> 
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	//
> 	// send complete
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ], 0 ) )
> 	{
> 		case WAIT_OBJECT_0:
> 		{
> 			//
> 			// reset the event so it will be signalled again if anything
> 			// completes while we're scanning the pending write list
> 			//
> 			if ( ResetEvent( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to reset Winsock2 send event!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 
> 			CompleteOutstandingSends();
> 			
> 			break;
> 		}
> 
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	//
> 	// receive complete
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ], 0 ) )
> 	{
> 		case WAIT_OBJECT_0:
> 		{
> 			//
> 			// reset the event so it will be signalled again if anything
> 			// completes while we're scanning the pending read list
> 			//
> 			if ( ResetEvent( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to reset Winsock2 receive event!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 
> 			CompleteOutstandingReceives();
> 			
> 			break;
> 		}
> 
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	//
> 	// stop all threads
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ], 0 ) )
> 	{
> 		case WAIT_OBJECT_0:
> 		{
> 			DPF( 8, "Win9x thread exit because SP closing!" );
> 			pCoreData->fLooping = FALSE;
> 			break;
> 		}
> 	
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::ProcessWin9xJob"
> 
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::CheckWinsock1IO"
> 
> BOOL	CThreadPool::CheckWinsock1IO( FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	BOOL		fIOServiced;
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	fIOServiced = FALSE;
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			fIOServiced |= ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			fIOServiced |= ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			fIOServiced |= ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> 
> 	return	fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::ServiceWinsock1Sockets"
> 
> BOOL	CThreadPool::ServiceWinsock1Sockets( FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	BOOL		fReturn;
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	//
> 	// initialize
> 	//
> 	fReturn = FALSE;
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( p___WSAFDIsSet( m_SocketSet.fd_array[ uIdx ], pSocketSet ) != FALSE )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		fReturn |= (pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
> 
> 	return	fReturn;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
63a65
> typedef	void	DIALOG_FUNCTION( void *const pDialogContext );
103c105,106
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
155a159
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
162a167
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
170a176,178
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
181a190,193
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction,
> 								   void *const pDialogContext );
> 
> 		
233a246
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
287a301
> 		HRESULT	Win9xInit( void );
297a312,313
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
298a315,316
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
300a319
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
305a325,329
> 		void	ProcessWin9xEvents( WIN9X_CORE_DATA *const pCoreData, const BOOL fProcessDelayedJobs );
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		BOOL	CheckWinsock1IO( FD_SET *const pWinsock1Sockets );
> 		BOOL	ServiceWinsock1Sockets( FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
38a41
> #include	"Creg.h"
39a43,46
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
139a185,244
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "CreateIPXInterface"
> 
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
232a338,340
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
238a347,350
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
282c394
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
376a489,740
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "LoadAndAllocString"
> 
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17,18
> #include <WSIPX.h>
> 
19a22
> #include	"DWinsock.h"
48,51d50
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a81,82
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a86
> static DWORD_PTR	OverrideWinsockVersion( void );
92a95,165
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "OverrideWinsockVersion"
> 
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			DPF( 0, "Winsock overridden to Winsock1 support!" );
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			DPF( 0, "Winsock overridden to Win9x Winsock2 support!" );
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
109a183,184
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
119a195,196
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
135c212
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
137,143c214,215
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
145,147c217,219
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
149d220
< 
151a223,224
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
161c234,242
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
194a276,278
> 	BOOL	fFreeReturn;
> 
> 
198c282,286
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
205a294,303
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "GetWinsockVersion"
206a305,308
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
207a310,312
> 
> 
> //**********************************************************************
298a404
> 	INT_PTR iWinsockVersion;
308a415
> 	iWinsockVersion = GetWinsockVersion();
610c717
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
645c752
< */
---
> 
655c762
< /*	AdapterInfo.guid = *pAdapterGUID;
---
> 	AdapterInfo.guid = *pAdapterGUID;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
60c62
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
64d65
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
169a171,174
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
171a177,192
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
239a261
> 		case TYPE_IPX:
334a357
> 	IDirectPlay8Address		*pSPOnlyAddress;
342c365
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
357a381
> 	pSPOnlyAddress = NULL;
407a432,479
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
409a482,529
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
541a662,693
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
555a708,709
> 			}
> 
633a788,793
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
832c992
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1044a1205,1233
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1045a1235,1236
> 			}
> 
1322a1514
> 										  DPNSPF_OKTOQUERY |
1538a1731,1762
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1539a1764,1765
> 			}
> 
2457a2684,2695
> 		// Multicast groups are unsupported on IPX.
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
2650a2889,2900
> 		//
> 		// multicast groups are unsupported on IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\08241230.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\osind.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\packbuff.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\strutils.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dplay8.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\initialize.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dbginfo.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
-- 90 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091615.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141000.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08151200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dvoice\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\classfac.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\createin.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dllmain.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacmi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacmi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvaconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvaconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvautil.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvautil.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\msgvacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\msrgacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\unk.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\dpvcpi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\dpvcpi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\classfac.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\createin.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dllmain.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvoxi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvoxi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\msgvvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\msrgvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\unk.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vci.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcierror.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcisc3.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcisc6.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcivr12.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\i386\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\i386\voxlib.lib	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\ia64\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\ia64\voxlib.lib	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\callstack.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\classhash.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dbginfo.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dbgtopic.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dndbg.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dndbg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dvcslock.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\fpm.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\fpm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\in_def.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\lockedcfpm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\memlog.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\newdpf.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\newdpf.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxchar.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxchar.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdplay.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdplay.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdump.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxdump.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxerr.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxerr.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxlib.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxmisc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\dpvxmisc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dpvxlib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\conndlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\conndlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\directx.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dxvhelp.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dxvhelp.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\dxvhelp.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\hostdlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\hostdlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\maindlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\maindlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\misc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\misc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\small.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\snddlg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\snddlg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\testwin.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\voice.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\voice.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvhelp\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dpvoice.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvbase.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcleng.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcleng.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvclient.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvclient.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvdxtran.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvdxtran.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvengine.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvengine.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvoice.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvprot.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvrecsub.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvrecsub.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsereng.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsereng.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvserver.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvserver.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvshared.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvshared.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsndt.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsndt.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvtran.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\in_core.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\in_core.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\mixutils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\mixutils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\msgvve.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\msrgve.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\resource.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\statdef.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\trnotify.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\trnotify.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vnametbl.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vnametbl.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vplayer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vplayer.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\directx.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dxvt.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dxvt.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtcfg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtcfg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtglob.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtglob.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtipc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtipc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fulldup.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fulldup.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\loopback.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\loopback.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\peakmetr.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\peakmetr.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\priority.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\priority.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\supervis.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\supervis.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv2.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconv2.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconvs.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aconvs.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\agcva.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\agcva1.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\agcva1.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayb.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayb.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayd.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplayd.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplays.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\aplays.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\arecs.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\astypes.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\decibels.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\decibels.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\diagnos.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\diagnos.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dputils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dputils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayb.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayb.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayd.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplayd.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplays.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dsplays.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvcdb.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvcdb.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dverror.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dverror.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvsildet.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\dvsildet.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\frame.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\frame.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\innerque.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\innerque.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\inqueue2.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\inqueue2.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\sndutils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\sndutils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvutils\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\dpvcp.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\dvoice.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dbginfo.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.dsp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 488 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
39c41
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
123c125
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
131c133
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
165c167
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
167,171c169,171
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
173c173,178
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
175c180
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
176a182,265
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
192a282,285
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
> 
>     if( hr == CO_E_NOTINITIALIZED )
>     {
214a308,311
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
29a37,65
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "UNKNOWN_MODULE"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectNet] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNetDebug"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
78a83,92
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
33a34,37
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
35a40
> #endif	// _WIN64
40a46,52
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
60a73
> #ifdef	_X86_
61a75,77
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
94a111,116
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
103a126,128
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
121a147
> 	OSVERSIONINFO	OSVersionInfo;
122a149
> 
130a158,186
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
229a286,287
> 		switch ( DNGetOSType() )
> 		{
232a291,292
> 			case VER_PLATFORM_WIN32_NT:
> 			{
257a318,328
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
290a362,393
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
361a465
> //#ifdef	_WIN32
390a495
> //#endif	// _WIN32
391a497,518
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
417a545
> #ifdef	_X86_
429a558,608
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
455a635,636
> #ifdef	_X86_
> 
467a649,695
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
688a917,919
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
707a939
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
798a1031
> 		pMemoryLink->NoteCurrentCallStack();
908a1142
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
925a1160,1163
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
926a1165
> #endif
943,944c1182,1193
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
948a1198,1206
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
979a1238
> 	DWORD		dwDisplayFlags;
980a1240
> 
983a1244
> 	fDisplayLeaks = TRUE;
986a1248,1249
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
993a1257
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1001a1266,1269
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1002a1271
> #endif
1007,1008c1276
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1009a1278,1328
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1022a1342,1485
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1117a1581
> 	static	BOOL	fDisplayCallStacks = TRUE;
1135a1600,1603
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1141a1610,1614
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1146,1147c1619,1651
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1180a1685
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	"CallStack.h"
> 
29a32,34
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
53a59
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
76d81
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
86a92,101
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
136a137,207
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
29a70
>         creg.cpp \
34c75,86
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include "DNetErrors.h"
20a22,23
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
22c25,48
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
24,29d49
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
31c51,53
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
33c55,60
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
35,37c62,69
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
39c71,83
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
41,43d84
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
45,47c86,100
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
49,50c102,103
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
52,53c105,109
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
55,56c111,113
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
58d114
< Return Value:
60,63c116,133
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
65,66c135,138
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
68d139
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
70,71c141,143
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
73c145,150
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
75c152,170
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
77,80d171
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
82,83c173,187
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
84a189,190
> 		*pdwWCHARStringLength = iReturn;
> 	}
86,151c192
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
152a194
> //**********************************************************************
154a197
> 
174a218,220
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
182c228,238
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
188a245,251
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
189a253,295
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
> 
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
> 
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
> #undef DPF_MODNAME
208a315,316
> 	int rval;
> 
216c324
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
219a328
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
39d38
< #include <wchar.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
149c149,151
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
212,213c214
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
328d328
< */
414,415c414
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
469c468
< */
---
> 
524a524
> 	BOOL			fRegister;
526c526
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
548c548
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
668a669,672
> 	if (!(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR))
> 	{
> 		fRegister = TRUE;
> 	}
672a677,701
> 	//
> 	//	If this is the host player, register this LISTEN with DPNSVR
> 	//
> 	if (fRegister)
> 	{
> 		CNameTableEntry	*pLocalPlayer;
> 
> 		pLocalPlayer = NULL;
> 
> 		if ((hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pLocalPlayer )) == DPN_OK)
> 		{
> 			if (!pLocalPlayer->IsHost())
> 			{
> 				fRegister = FALSE;
> 			}
> 			pLocalPlayer->Release();
> 			pLocalPlayer = NULL;
> 		}
> 
> 		if (fRegister)
> 		{
> 			hResultCode = DNRegisterWithDPNSVR(pdnObject,hProtocol);
> 		}
> 	}
> 
703d731
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1248c1276
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1293,1294c1321,1322
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1310c1338
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1313c1341
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
97a98
> #include "dplobby8.h"
258a260,279
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
322a344,345
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
927a951,956
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1112c1141
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
173a174
> #include "DPLobby8.h"
201a203
> #include "DNMisc.h"
211a214,216
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
213,214d217
< #include <mmsystem.h>
< #include <wchar.h>
684a688,696
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1125a1138,1141
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1243d1258
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1259,1261d1273
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1292d1303
< */
1901a1913,1920
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2096c2115
< 	{
---
> 	{
2488,2489d2506
< // BUGBUG [mgere] [xbox] Temporarily removed until a CoCreateGuid call is implemented
< #ifdef _BUILD_FOR_WIN2000
2495d2511
< #endif
2667a2684,2688
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
4025c4046
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4076c4097
< 		pAddrHost->lpVtbl->GetURLW(pAddrHost,DP8ABuffer,&DP8ASize);
---
> 		pAddrHost->lpVtbl->GetURLA(pAddrHost,DP8ABuffer,&DP8ASize);
4083c4104
< 		pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 		pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
4198c4219
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4202c4223
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4266c4287
< 	//
---
> 	//
4284d4304
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4300,4302d4319
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4334d4350
< */
5022c5038
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
5025c5041,5110
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_RETURN( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_RETURN(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_RETURN(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
5027a5113,5135
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
5028a5137,5282
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	packBuffer.Initialize(NULL, 0 );
> 
> 	// Determine the size of buffer
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 
> 	hResultCode = DNPackApplicationDesc( &pdnObject->dnApplicationDescription, &packBuffer );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
5029a5284,5364
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5390a5726,5925
> }
> 
> /*	REMOVE
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	HRESULT					hResultCode;
> 	HRESULT					hrRegister;
> 	CAsyncOp				*pListenParent;
> 	CAsyncOp				*pListenSP;
> 	CAsyncOp				*pListen;
> 	CBilink					*pBilinkSP;
> 	CBilink					*pBilink;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR			DP8ABuffer[512];
> 	DWORD			DP8ASize;
> #endif
> 
> 	DPF(4,"Parameters: (none)");
> 
> 	pListenParent = NULL;
> 	pListenSP = NULL;
> 	pListen = NULL;
> 
> 	//
> 	//	Default error returned
> 	//
> 	hrRegister = DPNERR_GENERIC;
> 
> 	//
> 	//	Get LISTEN AsyncOp parent from DirectNet object and add a RefCount
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent == NULL)
> 	{
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 		goto Exit;
> 	}
> 	pdnObject->pListenParent->AddRef();
> 	pListenParent = pdnObject->pListenParent;
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Lock the parent so that the child bilink list doesn't change
> 	//
> 	pListenParent->Lock();
> 
> 	//
> 	//	Locate each child (LISTEN SP parent) and then each actual LISTEN
> 	//
> 	pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 	while (pBilinkSP != &pListenParent->m_bilinkParent)
> 	{
> 		pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 
> DNASSERT(pListenSP->GetParent() == pListenParent);
> 		//
> 		//	Lock the SP parent so that the child bilink doesn't change
> 		//
> 		pListenSP->Lock();
> 
> 		pBilink = pListenSP->m_bilinkParent.GetNext();
> 		while (pBilink != &pListenSP->m_bilinkParent)
> 		{
> 			pListen = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 
> 			DNASSERT(pListen->GetProtocolHandle() != NULL);
> 
> 			spInfo.hEndpoint = pListen->GetProtocolHandle();
> 			spInfo.pAddress = NULL;
> 			spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 
> 			if (DNPGetListenAddressInfo(pListen->GetProtocolHandle(),&spInfo) == DPN_OK)
> 			{
> 				DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 				DP8ASize = 512;
> 				spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 				DPF(4,"Listen address [%s]",DP8ABuffer);
> 
> 				// We re-try the registration to catch the case where DPNSVR is shutting
> 				// down while we are trying to register.  Unlikely but has to be handled.
> 				//
> #endif
> 	            for( DWORD dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		        {
>     				hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress );
> 	    			if( FAILED( hResultCode ) )
> 					{
>     					if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    					Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    				}
> 						else
>     					{
> 	    					DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    				}
> 	    			}
> 					else
>     				{
>     					// Return DPN_OK if we succeed even once
>     					hrRegister = hResultCode;
>     					break;
> 	    			}
> 		        }
> 			
> 				spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 				spInfo.pAddress = NULL;
> 
> 			}
> 			pBilink = pBilink->GetNext();
> 		}
> 
> 		pListenSP->Unlock();
> 
> 		pBilinkSP = pBilinkSP->GetNext();
> 	}
> 
> 	pListenParent->Unlock();
> 
> 	pListenParent->Release();
> 	pListenParent = NULL;
> 
> Exit:
> 	DPF(4,"Returning: [0x%lx]",hrRegister);
> 	return( hrRegister );
> }
> */
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject,
> 							 const HANDLE hProtocol)
> {
> 	HRESULT	hResultCode;
> 	DWORD	dwRetry;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR	DP8ABuffer[512];
> 	DWORD	DP8ASize;
> #endif
> 
> 	DPF(6,"Parameters: hProtocol [0x%lx]",hProtocol);
> 
> 	//
> 	//	Determine the address we're actually listening on
> 	//
> 	spInfo.hEndpoint = hProtocol;
> 	spInfo.pAddress = NULL;
> 	spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 	if ((hResultCode = DNPGetListenAddressInfo(hProtocol,&spInfo)) == DPN_OK)
> 	{
> 		DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 		DP8ASize = 512;
> 		spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 		DPF(7,"Listen address [%s]",DP8ABuffer);
> #endif
> 
> 		//
> 		//	We re-try the registration to catch the case where DPNSVR is shutting
> 		//	down while we are trying to register.  Unlikely but has to be handled.
> 		//
> 		for( dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		{
>     		if ((hResultCode = DPNSVR_Register( &pdnObject->dnApplicationDescription, spInfo.pAddress )) == DPN_OK)
> 			{
> 				//
> 				//	Flag registering with DPNSVR for cleanup
> 				//
> 				DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 				pdnObject->dwFlags |= DN_OBJECT_FLAG_DPNSVR_REGISTERED;
> 				DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 				break;
> 			}
> 			else
> 			{
>     			if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     			{
> 	    			DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    			Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    		}
> 				else
>     			{
> 	    			DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    		}
> 	    	}
> 		}
> 		spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 		spInfo.pAddress = NULL;
> 	}
> 
> 	DPF(6,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
206c206
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
208a209,211
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
217a221,223
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject,
> 							 const HANDLE hProtocol);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
86a87
> #include "DPLobby8.h"
115d115
< #include <wchar.h>
119,122d118
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
191c187
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
266,267c262,263
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
294c290
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
749c745
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
834c830
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
847c843
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
904c900
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1207c1203
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1232,1233c1228
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1237c1232
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1364,1365c1359,1360
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1728a1724,1728
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
1994a1995,2003
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2894c2903
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2928c2937
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
2951c2960
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2978c2987
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
40a41
> #include "creg.h"
45a47,183
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
92a93
> #define	DN_OBJECT_FLAG_DPNSVR_REGISTERED	0x20000000
106a108,110
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
107a112,116
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
130a140
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
272a283
> 	// Lobby additions
273a285,288
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47a48
> #include "DNMisc.h"
49a51
> #include "CReg.h"
63c65,74
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
78,79c89
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
81c91,101
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
83,84c103,106
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> 	CServiceProvider	*pSP;
92a115,118
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> 	pSP = NULL;
> 
96,97c122,127
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
99c129,156
< 	memcpy(&dnSpInfo.guid,&guidSP,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
101,104c158,171
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
105a173,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			DPF(5,"Checking [%S]",pwszKeyName);
> 			if ((hResultCode = DN_SPFindEntry(pdnObject,&guid,&pSP)) != DPN_OK)
> 			{
> 				if ((hResultCode = DN_SPInstantiate(pdnObject,&guid,&pSP)) != DPN_OK)
> 				{
> 					DPFERR("Could not find or instantiate SP");
> 					SubEntry.Close();
> 					dwEnumIndex++;
> 					dwKeyLen = dwMaxKeyLen;
> 					hResultCode = DPN_OK; // override return code
> 					continue;
> 				}
> 			}
> 			pSP->Release();
> 			pSP = NULL;
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
111c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
113c272
< 		goto Exit;
---
> 		goto Failure;
117c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
120,126d279
< 			hResultCode = DN_SPEnsureLoaded(pdnObject,&guidSP,NULL,TRUE);
< 			if (hResultCode != DPN_OK)
< 			{
< 				DPF(0,"Could not load SP.  Skipping [%S]", pwszKeyName);
< 				hResultCode = DPN_OK; // override return code
< 			}
< 
128a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
131a290,315
> 
> Failure:
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	if (pSP)
> 	{
> 		pSP->Release();
> 		pSP = NULL;
> 	}
> 	goto Exit;
145,149d328
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
299d477
< */	return(E_FAIL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
86a87,89
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
87a91
> #include "dplobby8.h"
292a297
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
704a710,829
> 	//
> 	//	Register with DPNSVR
> 	//
> 	if( !(pdnObject->dnApplicationDescription.dwFlags & DPNSESSION_NODPNSVR) )
> 	{
> 		CAsyncOp	*pListenParent;
> 
> 		DPF( 7, "Asking for DPNSVR to start listening for us.." );
> 
> 		pListenParent = NULL;
> 
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->pListenParent)
> 		{
> 			pdnObject->pListenParent->AddRef();
> 			pListenParent = pdnObject->pListenParent;
> 		}
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 		if (pListenParent)
> 		{
> 			BOOL		fCoUninitialize = FALSE;
> 			CBilink		*pBilinkSP;
> 			CBilink		*pBilink;
> 			CAsyncOp	*pListenSP;
> 			CAsyncOp	*pAsyncOp;
> 			CAsyncOp	**ListenList;
> 			DWORD		dwCount;
> 			DWORD		dwActual;
> 
> 			if (COM_CoInitialize(NULL) == S_OK)
> 			{
> 				fCoUninitialize = TRUE;
> 			}
> 
> 			dwCount = 0;
> 			dwActual = 0;
> 			ListenList = NULL;
> 
> 			pListenParent->Lock();
> 
> 			pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 			while (pBilinkSP != &pListenParent->m_bilinkParent)
> 			{
> 				pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 				pListenSP->Lock();
> 
> 				pBilink = pListenSP->m_bilinkParent.GetNext();
> 				while (pBilink != &pListenSP->m_bilinkParent)
> 				{
> 					dwCount++;
> 					pBilink = pBilink->GetNext();
> 				}
> 				pListenSP->Unlock();
> 
> 				pBilinkSP = pBilinkSP->GetNext();
> 			}
> 
> 			if (dwCount > 0)
> 			{
> 				if ((ListenList = static_cast<CAsyncOp**>(DNMalloc(dwCount*sizeof(CAsyncOp*)))) != NULL)
> 				{
> 					pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 					while (pBilinkSP != &pListenParent->m_bilinkParent)
> 					{
> 						pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 						pListenSP->Lock();
> 
> 						pBilink = pListenSP->m_bilinkParent.GetNext();
> 						while (pBilink != &pListenSP->m_bilinkParent)
> 						{
> 							pAsyncOp = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 							pAsyncOp->AddRef();
> 							ListenList[dwActual] = pAsyncOp;
> 
> 							dwActual++;
> 							if (dwActual > dwCount)
> 							{
> 								DNASSERT(FALSE);
> 								break;
> 							}
> 							pBilink = pBilink->GetNext();
> 						}
> 						pListenSP->Unlock();
> 						pBilinkSP = pBilinkSP->GetNext();
> 					}
> 				}
> 			}
> 
> 			pListenParent->Unlock();
> 
> 			if ((ListenList != NULL) && (dwActual > 0))
> 			{
> 				DWORD	dw;
> 
> 				for (dw = 0 ; dw < dwActual ; dw++)
> 				{
> 					if (ListenList[dw]->GetProtocolHandle() != 0)
> 					{
> 						hResultCode = DNRegisterWithDPNSVR(pdnObject,ListenList[dw]->GetProtocolHandle());
> 					}
> 
> 					ListenList[dw]->Release();
> 					ListenList[dw] = NULL;
> 				}
> 
> 				DNFree(ListenList);
> 				ListenList = NULL;
> 			}
> 
> 			if (fCoUninitialize)
> 			{
> 				COM_CoUninitialize();
> 			}
> 
> 			pListenParent->Release();
> 			pListenParent = NULL;
> 		}
> 	}
> 
796a922,926
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
68a69,71
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
679a683
> 	BOOL		fUnregister;
701a706,721
> 	//
> 	//	Unregister from DPNSVR when LISTENs start to terminate
> 	//
> 	fUnregister = FALSE;
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->dwFlags & DN_OBJECT_FLAG_DPNSVR_REGISTERED)
> 	{
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_DPNSVR_REGISTERED);
> 		fUnregister = TRUE;
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	if (fUnregister)
> 	{
> 		DPNSVR_UnRegister(&pdnObject->dnApplicationDescription);
> 	}
> 
1147c1167
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1163c1183
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1167c1187
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1198c1218
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1214c1234
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1218c1238
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1247c1267
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1263c1283
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
430,431c430
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
443,444c442,443
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
531c530
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
213c213
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
221a222,228
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
247a255,260
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1063c1076
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1601a1615,1620
>     if( ( dwFlags & ~( DPNHOST_OKTOQUERYFORADDRESSING ) ) != 0 )
>     {
>         DPFERR("Invalid flags specified" );
>         return( DPNERR_INVALIDFLAGS );
>     }
> 
1814c1833
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2136c2155
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
18c39,56
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
20d57
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c59,60
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c63,67
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c69
< DLLDEF=..\dnet.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
29a71,78
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
70a120,127
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
73,94c130,132
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
24a25,31
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DPNAddress"
> 
> /*
31a39,67
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNAddress"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNAddress"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,14c31,35
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
16c37
< INCLUDES=..\;..\..\inc;..\..\common;..\..\..\dvoice\inc
---
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
18c39,54
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
20d55
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
22,23c57,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
26c61,65
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28c67
< DLLDEF=..\dnadd.def
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
29a69,76
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
38a86
>          ..\dplegacy.cpp \
40a89,95
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c98,100
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
105c105
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
106a107,111
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
117a118,122
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\initialize.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
417c417
< 		if((pSPD->hSendEvent = CreateEvent(NULL, FALSE, FALSE, NULL)) == NULL){
---
> 		if((pSPD->hSendEvent = CreateEventA(NULL, FALSE, FALSE, NULL)) == NULL){
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
130a131
> SYSTEM_INFO SystemInfo;
588c589,590
< 	MAX_TIMER_THREADS = MAX_TIMER_THREADS_PER_PROCESSOR;
---
> 	GetSystemInfo(&SystemInfo);
> 	MAX_TIMER_THREADS = SystemInfo.dwNumberOfProcessors * MAX_TIMER_THREADS_PER_PROCESSOR;
598c600
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dbginfo.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
23a24,30
>  *  Sets the section in Win.ini that the debug code looks at to get the settings
>  */
> 
> #undef PROF_SECT
> #define PROF_SECT "DirectPlay8"
> 
> /*
30a38,66
> 
> /*
>  *  Sets the module name print in the debug string.  DPF_MODNAME overrides this
>  *  string when present in a file.  This name is also used as the key to override
>  *  the standard debug value for this module.
>  */
> #undef DPF_MODULE_NAME
> #define DPF_MODULE_NAME "DNSPWinsock"
> 
> 
> /*
>  * Use this identifier to define which line in WIN.INI [DirectDPlay8] denotes the
>  * debug control string.  This string is typically the default debug value, it
>  * is used if there is no overriding string of the from "DPF_MODULE_NAME" =
>  */
> #undef DPF_CONTROL_LINE
> #define DPF_CONTROL_LINE "DNSPWinsock"
> 
> 
> /*
>  * Define this identifier to a DWORD variable in your component if you want to
>  * be able to turn debugging of components off and on in your component during
>  * a debug session.  This is the variable that holds the mask of the component
>  * bits that are ON and you want debug spew for.  You then use DPFSC instead
>  * of DPF and have specified DPS_SUBCOMP_BIT then only if that bit is
>  * set in the DPF_SUMCOMP_MASK variable will the debug spew be logged or
>  * displayed.
>  */
> //#define DPF_SUBCOMP_MASK
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
120a122,141
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
144,145d164
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
193d211
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | DS_CENTER | WS_POPUP | WS_VISIBLE | WS_CAPTION |
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,78
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> #ifndef ___WSAFDISSET___
> typedef
> int
> (WSAAPI * LPFN_WSAFDISSET)(
>     IN SOCKET s,
>     OUT fd_set FAR *fds
>     );
> #define ___WSAFDISSET___
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 	DYNAMICWINSOCK(__WSAFDIsSet, LPFN_WSAFDISSET);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,71
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
104a106
> 	m_hActiveSettingsDialog( NULL ),
135a138
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
371a375,382
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( m_hActiveSettingsDialog != NULL )
> 		{
> 			StopSettingsDialog( m_hActiveSettingsDialog );
> 		}
374a386,392
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( m_hActiveSettingsDialog == NULL );
> 	}
376d393
< 
879a897,903
> 	if ( m_hActiveSettingsDialog != NULL )
> 	{
> 		StopSettingsDialog( m_hActiveSettingsDialog );
> 		Unlock();
> 	}
> 	else
> 	{
885a910
> 	}
1816,1817c1841
< 
< // BUGBUG: [mgere] [xbox] Not sure if we ever get into this next block on the Xbox.  Put breakpoint and see.	
---
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
360a361,367
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 
> 		//
380a388
> 		HWND	m_hActiveSettingsDialog;				// handle of active settings dialog
381a390
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
44a46
> #include	"IPXAddress.h"
81c83,84
< 	m_pSocketPort( NULL )
---
> 	m_pSocketPort( NULL ),
> 	m_fWin9xOperationPending( FALSE )
99a103,104
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
114a120
> 	m_Win9xReceiveWSAReturn( ERROR_SUCCESS ),
191a198,203
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
212a225,231
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, always use IO completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
216a236,258
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
241a284,285
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
275a320,321
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
308a355,360
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
450a503,509
> 	switch ( OSType() )
> 	{
> 		//
> 		// WinNT, we'll always use completion ports
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
453a513,536
> 
> 			break;
> 		}
> 
> 		//
> 		// Win9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( NTCompletionFunction() == NULL );
> 			DNASSERT( OverlapEvent() == NULL );
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
485a569,570
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
506a592,593
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
88a89,91
> 		BOOL	Win9xOperationPending( void ) const { return m_fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_fWin9xOperationPending = fOperationPending; }
> 
118a122
> 		BOOL			m_fWin9xOperationPending;	// this structure has been initialized and the operation is pending on Win9x
119a124
> 
149a155
> 		INT		m_Win9xReceiveWSAReturn;		
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
1028,1030d1028
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1382d1379
< */	return DPNERR_UNSUPPORTED;
1562a1560,1565
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1563a1567,1585
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1566a1589,1591
> 		case 2:
> 		default:
> 		{
1567a1593,1595
> 			break;
> 		}
> 	}
1637a1666,1671
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1638a1673,1691
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1641a1695,1697
> 		case 2:
> 		default:
> 		{
1642a1699,1701
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
38a40
> #include	"StrUtils.h"
52a55
> #include	"IPUI.h"
95a99
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
117a122,403
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, &m_hActiveSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	m_hActiveSettingsDialog = NULL;
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.  If the hostname is blank
> 	// on a connect, fail!
> 	//
> 	if ( m_TempHostName[ 0 ] == '\0' )
> 	{
> 		if ( GetType() == ENDPOINT_TYPE_ENUM )
> 		{
> 			DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 			memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 			dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 		}
> 		else
> 		{
> 			hr = DPNERR_ADDRESSING;
> 			DNASSERT( GetType() == ENDPOINT_TYPE_CONNECT );
> 			DPF( 0, "No hostname in dialog!" );
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> //	    	hr = CompleteEnumQuery();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing EnumQuery after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> //
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> //	    	hr = CompleteConnect();
> //	    	if ( hr != DPN_OK )
> //	    	{
> //	    		DPF( 0, "Problem completing Connect after asking user for hostname!" );
> //	    		DisplayDNError( 0, hr );
> //	    	}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// cleanup and close this endpoint
> 	//
> 	switch ( GetType() )
> 	{
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			CleanupConnect();
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			CleanupEnumQuery();
> 			break;
> 		}
> 
> 		//
> 		// other state (note that LISTEN doesn't have a dialog)
> 		//
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	Close( hr );
> 	m_pSPData->CloseEndpointHandle( this );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
222a509
> 	DNASSERT( m_hActiveSettingsDialog == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,67
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
69a85
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
106a107,111
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
108a114,128
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
51a53
> #include	"IPXAddress.h"
55a58
> #include	"IPXEndpt.h"
88a92
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
90a95
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
195a201,207
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
214a227,243
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
339a369,375
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
349a386,391
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
494a537,580
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
504a591,606
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> class	CIPXAddress;
35a37
> class	CIPXEndpoint;
63a66,67
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
65a70
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include	"Registry.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
265a267,273
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
266a275,279
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
383a397,404
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
384a406,410
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
530a557,568
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
970a1009,1291
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> BOOL	CSocketPort::Winsock1ReadService( void )
> {
> 	BOOL		fIOServiced;
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
> 
> 
> 	//
> 	// initialize
> 	//
> 	fIOServiced = FALSE;
> 	
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			fIOServiced = TRUE;
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> BOOL	CSocketPort::Winsock1WriteService( void )
> {
> 	BOOL	fIOServiced;
> 
> 
> 	fIOServiced = FALSE;
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		fIOServiced = SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> 
> 	return	fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> BOOL	CSocketPort::Winsock1ErrorService( void )
> {
> 	//
> 	// this function doesn't do anything because errors on sockets will usually
> 	// result in the socket being closed soon
> 	//
> 	return	FALSE;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
997c1318,1319
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1003a1326,1334
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1009a1341,1344
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
> 
1020a1356,1360
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1061a1402,1404
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1149c1492,1493
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1161a1506,1509
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
1169a1518,1520
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1187a1539,1542
> 			if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 			{
> 				m_pSPData->GetThreadPool()->UnlockReadData();
> 			}
1204a1560,1563
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1222a1582,1585
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1227a1591,1592
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1245a1611,1614
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1272a1642,1643
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1305a1677,1678
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
1946a2320,2326
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1991a2372,2435
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2657a3102,3257
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Win9xWinsock2ReceiveComplete - a Winsock2 socket receive
> //		completed on Win9x
> //
> // Entry:		Poiner to read data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CSocketPort::Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData )
> {
> 	DNASSERT( pReadData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	DNASSERT( pReadData->Win9xOperationPending() == FALSE );
> 
> 	//
> 	// figure out what's happening with this socket port
> 	//
> 	switch ( m_State )
> 	{
> 		//
> 		// we're unbound, discard this message and don't ask for any more
> 		//
> 		case SOCKET_PORT_STATE_UNBOUND:
> 		{
> 			goto Exit;
> 			break;
> 		}
> 
> 		//
> 		// we're initialized, process input data and submit a new receive if
> 		// applicable
> 		//
> 		case SOCKET_PORT_STATE_INITIALIZED:
> 		{
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// the socket was closed on an outstanding read, stop
> 				// receiving
> 				//
> 				case WSAENOTSOCK:					// WinNT return for closed socket
> 				case ERROR_OPERATION_ABORTED:		// Win9x return for closed socket
> 				{
> 					break;
> 				}
> 
> 				//
> 				// ERROR_SUCCESS = no problem
> 				// WSAECONNRESET = previous send failed (who cares!)
> 				// default = other error, just try reading again
> 				//
> 				case WSAECONNRESET:
> 				case ERROR_SUCCESS:
> 				default:
> 				{
> 					HRESULT			hTempResult;
> 
> 
> 					DNASSERT( m_State == SOCKET_PORT_STATE_INITIALIZED );
> 
> 					//					
> 					// attempt another read on this socket.
> 					//
> 					Winsock2Receive();
> 
> 					break;
> 				}
> 			}
> 
> 			//
> 			// now that initial reads have been taken care of, perform error-specific
> 			// processing
> 			//
> 			switch ( pReadData->m_Win9xReceiveWSAReturn )
> 			{
> 				//
> 				// succcess, note the actual number of bytes read and tell
> 				// someone about the received data
> 				//
> 				//	Since this data has been processed then we know that receive buffer has already been returned.
> 				//
> 				case ERROR_SUCCESS:
> 				{
> 					pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = pReadData->m_dwOverlappedBytesReceived;
> 					pReadData->m_dwOverlappedBytesReceived = 0;
> 					ProcessReceivedData( pReadData );
> 
> 					break;
> 				}
> 
> 				//
> 				// Other error, stop in the debugger if it's not 'known'.
> 				//
> 				default:
> 				{
> 					switch ( pReadData->m_Win9xReceiveWSAReturn )
> 					{
> 						//
> 						// WSAECONNRESET = a previous send failed and Winsock is telling
> 						//				   us on an unrelated receive (Thanks WINSOCK).
> 						// WSAENOTSOCK = Socket was closed, user probably cancelled
> 						//				 somethinng.  Just clean up.
> 						// ERROR_OPERATION_ABORTED = something stopped the I/O operation.
> 						//
> 						case WSAECONNRESET:
> 						case WSAENOTSOCK:
> 						case ERROR_OPERATION_ABORTED:
> 						{
> 							break;
> 						}
> 
> 						default:
> 						{
> 							DPF( 0, "Problem with Winsock2 Win9x read: " );
> 							DisplayWinsockError( 0, pReadData->m_Win9xReceiveWSAReturn );
> 							INT3;
> 							
> 							break;
> 						}
> 					}
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other state
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> Exit:
> 	//
> 	// return the current data to the pool and note that
> 	// this I/O operation is complete
> 	//
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();	
> 	DecRef();
> 
> 	return;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
255a256
> 		void	Win9xWinsock2ReceiveComplete( CReadIOData *const pReadData );
262c263,266
< 		void	SendFromWriteQueue( void );
---
> 		BOOL	Winsock1ReadService( void );
> 		BOOL	Winsock1WriteService( void );
> 		BOOL	Winsock1ErrorService( void );
> 		BOOL	SendFromWriteQueue( void );
271c275
< 			m_ActiveListLinkage.InsertBefore( *pBilink );
---
> 			m_ActiveListLinkage.InsertBefore( pBilink );
303,306c307,310
< 		DNCRITICAL_SECTION						m_EndpointDataLock;			// lock for endpoint data
< 		CClassHash< HANDLE, CSocketAddress >	m_ConnectEndpointList;		// list of connect endpoints
< 		CClassHash< HANDLE, CEndpointEnumKey >	m_EnumEndpointList;			// list of enum endpoints
< 		HANDLE									m_hListenEndpoint;			// associated listen endpoint (there can only be one!)
---
> 		DNCRITICAL_SECTION								m_EndpointDataLock;			// lock for endpoint data
> 		CClassHash< HANDLE, const CSocketAddress* >		m_ConnectEndpointList;		// list of connect endpoints
> 		CClassHash< HANDLE, const CEndpointEnumKey* >	m_EnumEndpointList;			// list of enum endpoints
> 		HANDLE											m_hListenEndpoint;			// associated listen endpoint (there can only be one!)
326a331
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,3c1,5
< TARGETNAME=dpnwsock
< TARGETTYPE=DYNLINK
< TARGETPATH=obj
---
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
5c7,17
< !ifdef _BUILD_FOR_WIN2000
---
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
> TARGETNAME=dpnwsock
> DLLDEF=..\wsocksp.def
7,13d18
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
< !endif
15c20,26
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\..\dnaddress
---
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
17c28,29
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> TARGETPATH=obj
> TARGETTYPE=DYNLINK
19c31,35
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
21,22c37,58
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
>            $(BASEDIR)\public\sdk\lib\*\libcpmt$(BUILD_ALT_DIR).lib \
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
> 
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
25c61,71
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
> !endif
27c73,77
< DLLDEF=..\wsocksp.def
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
28a79,88
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
> 
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
30c90
<          ..\Classfac.cpp \
---
> 	 ..\Classfac.cpp \
33a94
> 	 ..\DWinsock.cpp \
38a100,102
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
41a106
>          ..\Registry.cpp \
50a116,118
> #
> # Next specify options for the compiler.
> #
51a120,122
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
54,74c125,126
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.H>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120c120,121
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
143a145
> 		virtual	void	InitializeWithAnyAddress( void ) = 0;
158c160,161
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
175c178
< 		virtual	HRESULT	EnumAdapters( SPENUMADAPTERSDATA *const pEnumData ) const = 0;
---
> 		virtual	HRESULT	EnumAdapters( SPENUMADAPTERSDATA *const pEnumData, const SOCKADDR *const pPublicSocketAddress ) const = 0;
237a241
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
238a243
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
241c246
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
248c253
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
276a282
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include <WSIPX.h>
50a52
> #include	"IPXAddress.h"
56a59,60
> #include	"IPXEndpt.h"
> #include	"Rsip.h"
106a111
> 	m_fIsRsipServer( FALSE ),
140a146
> 	DNASSERT( m_fIsRsipServer == FALSE );
150a157
> 	memset( &m_PublicSocketAddress, 0x00, sizeof( m_PublicSocketAddress ) );
191a199,216
> 	//
> 	// now that there's a threaed pool, attempt to check for Rsip
> 	//
> 	DNASSERT( m_fIsRsipServer == FALSE );
> 	if ( GetType() == TYPE_IP )
> 	{
> 		CRsip	*pRsip;
> 		
> 	
> 		pRsip = CreateRsip();
> 		if ( pRsip != NULL )
> 		{
> 			m_fIsRsipServer = pRsip->RsipIsRunningOnThisMachine( &m_PublicSocketAddress );		
> 			pRsip->DecRef();
> 			pRsip = NULL;
> 		}
> 	}
> 	
238a264,293
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
362d416
< 			const CSocketAddress	*pSocketAddress;
364d417
< 
371c424
< 			while ( m_ActiveSocketPortList.RemoveLastEntry( &pSocketAddress, &pSocketPort ) != FALSE )
---
> 			while ( m_ActiveSocketPortList.RemoveLastEntry( &pSocketPort ) != FALSE )
374,375d426
< 				DNASSERT( pSocketAddress != NULL );
< 				DNASSERT( pSocketPort->GetNetworkAddress() == pSocketAddress );
407a459
> 	m_fIsRsipServer = FALSE;
502a555,558
> 	//
> 	// Initialize the socket address with the provided base addresses.  If there
> 	// is a public address, override the base address.
> 	//
519a576,580
> 	if ( GetPublicSocketAddress() != NULL )
> 	{
> 		pDeviceSocketAddress->InitializeWithAnyAddress();
> 	}
> 
553a615
> 		pAdapterEntry->SetBaseAddress( pDeviceSocketAddress->GetAddress() );
566c628
< 		hTempResult = pAdapterEntry->StartRsip( pDeviceSocketAddress->GetAddress(), GetThreadPool() );
---
> 		hTempResult = pAdapterEntry->StartRsip( pDeviceSocketAddress->GetAddress(), GetThreadPool(), IsRsipServer() );
593c655
< 		if ( m_ActiveSocketPortList.Find( *pDeviceSocketAddress, &pSocketPort ) == FALSE )
---
> 		if ( m_ActiveSocketPortList.Find( pDeviceSocketAddress, &pSocketPort ) == FALSE )
652c714
< 			DNASSERT( m_ActiveSocketPortList.Find( *( pSocketPort->GetNetworkAddress() ), &pDuplicateSocket ) == FALSE );
---
> 			DNASSERT( m_ActiveSocketPortList.Find( pSocketPort->GetNetworkAddress(), &pDuplicateSocket ) == FALSE );
695,699d756
< 	if ( fAdapterEntryCreated != FALSE )
< 	{
< 		pAdapterEntry->SetBaseAddress( pSocketPort->GetNetworkAddress()->GetAddress() );
< 	}
< 
805c862
< 		m_ActiveSocketPortList.Remove( *( pSocketPort->GetNetworkAddress() ) );
---
> 		m_ActiveSocketPortList.Remove( pSocketPort->GetNetworkAddress() );
854a912,917
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1167a1231,1236
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1198a1268,1273
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
114a117,131
> 		BOOL	IsRsipServer( void ) const { return m_fIsRsipServer; }
> 		const SOCKADDR	*GetPublicSocketAddress( void ) const
> 		{
> 			const SOCKADDR	*pReturn;
> 			
> 
> 			pReturn = NULL;
> 			if ( IsRsipServer() != FALSE )
> 			{
> 				pReturn = &m_PublicSocketAddress;
> 			}
> 
> 			return	pReturn;
> 		}
> 
191,196c208,215
< 		DNCRITICAL_SECTION	m_Lock;				// lock
< 		volatile LONG		m_lRefCount;		// reference count
< 		CLSID				m_ClassID;			// ClassID
< 		SP_TYPE				m_SPType;			// type of SP
< 		SPSTATE				m_SPState;			// what state is the SP in?
< 		SPINITIALIZEDATA	m_InitData;			// initialization data
---
> 		DNCRITICAL_SECTION	m_Lock;					// lock
> 		volatile LONG		m_lRefCount;			// reference count
> 		CLSID				m_ClassID;				// ClassID
> 		SP_TYPE				m_SPType;				// type of SP
> 		SPSTATE				m_SPState;				// what state is the SP in?
> 		SPINITIALIZEDATA	m_InitData;				// initialization data
> 		BOOL				m_fIsRsipServer;		// Boolean indication status of Rsip on this machine
> 		SOCKADDR			m_PublicSocketAddress;	// public socket address to be returned to user
220c239
< 		CClassHash< CSocketPort*, CSocketAddress >	m_ActiveSocketPortList;	// list of active socket ports
---
> 		CClassHash< CSocketPort*, const CSocketAddress* >	m_ActiveSocketPortList;	// list of active socket ports
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
85c86
< static const DWORD	g_dwSelectTimeSlice = 5;
---
> static const DWORD	g_dwSelectTimeSlice = 2;
122a124,144
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 	BOOL		fLooping;							// Boolean indicating that this thread is still running
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
129a152,162
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	HWND			*phDialog;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
234c267,274
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
236c276,277
< 	)
---
> 						break;
> 					}
237a279,286
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
244c293,300
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has lame APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
246c302,303
< 	)
---
> 						break;
> 					}
247a305,312
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
281a347,353
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
338a411,415
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
341a419,420
> 		case VER_PLATFORM_WIN32_NT:
> 		{
347a427,453
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
376a483,484
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
383a492,496
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
407a521,527
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
409,413d528
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
438a554,789
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
537a889,890
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
558a912
> 	}
640a995,997
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
> 		pReadData->m_Win9xReceiveWSAReturn = WSAESHUTDOWN;
658a1016,1017
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
803a1163
> 	m_IPXReadIODataPool.Deinitialize();
945d1304
< 			
949a1309,1317
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
976c1344
< 	pTempReadData->m_OutstandingReadListLinkage.InsertBefore( m_OutstandingReadList );
---
> 	pTempReadData->m_OutstandingReadListLinkage.InsertBefore( &m_OutstandingReadList );
1027a1396,1404
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1282a1660,1661
> 	switch ( OSType() )
> 	{
1285a1665,1666
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1302a1684,1712
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1413a1824,1825
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1420a1833
> 	}
1508c1921
< 	pEntry->Linkage.InsertAfter( m_TimerJobList );
---
> 	pEntry->Linkage.InsertAfter( &m_TimerJobList );
1622a2036,2136
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Pointer destination for copy of dialog handle
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( phDialog != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->phDialog = phDialog;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1642a2157,2158
> 	switch ( OSType() )
> 	{
1643a2160,2169
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1645a2172,2173
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1647a2176,2177
> 			break;
> 		}
1648a2179,2188
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1677a2218,2219
> 	switch ( OSType() )
> 	{
1678a2221,2228
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1684a2235,2236
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1724a2277,2289
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1804a2370,2516
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1948a2661,3362
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( &WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		BOOL			fIOServiced;
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		fIOServiced = pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( &ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Win9xWinsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	CoreData.fLooping = TRUE;
> 	while ( CoreData.fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 			
> 			//
> 			// if there is Winsock1 I/O that gets serviced, loop immediately.  If
> 			// there were no Winsock1 sockets serviced, pause before polling again.
> 			//
> 			if ( pThisThreadPool->CheckWinsock1IO( pSocketSet ) != FALSE )
> 			{
> 				dwMaxWaitTime = 0;
> 			}
> 			else
> 			{
> 				if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 				{
> 					dwMaxWaitTime = g_dwSelectTimeSlice;
> 				}
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 dwMaxWaitTime,							// wait timeout
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, don't do anything, we'll probably process timer jobs on
> 			// the next loop
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				break;
> 			}
> 			
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				pThisThreadPool->ProcessWin9xEvents( &CoreData, TRUE );
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the primary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Primary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::SecondaryWin9xThread - secondary thread to handle only Win9x
> //		I/O so developers get bit faster with multithreading issues if they're
> //		developing on Win9x.  This thread will only handle Winsock2 based TCP
> //		I/O.  Winsock 1 is not deemed important enough to hack the rest of the
> //		code to work with two threads.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> DWORD	WINAPI	CThreadPool::SecondaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			INT3;
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Secondary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	CoreData.fLooping = TRUE;
> 	while ( CoreData.fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Check Winsock2 sockets.
> 		//
> 		dwWaitReturn = WaitForMultipleObjectsEx( LENGTHOF( CoreData.hWaitHandles ),		// count of handles
> 												 CoreData.hWaitHandles,					// handles to wait on
> 												 FALSE,									// don't wait for all to be signalled
> 												 INFINITE,								// wait timeout (forever)
> 												 TRUE									// we're alertable for APCs
> 												 );
> 		switch ( dwWaitReturn )
> 		{
> 			//
> 			// timeout, shouldn't ever be here!!
> 			//
> 			case WAIT_TIMEOUT:
> 			{
> 				INT3;
> 				break;
> 			}
> 
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_PENDING_JOB ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_STOP_ALL_THREADS ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ):
> 			case ( WAIT_OBJECT_0 + EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ):
> 			{
> 				pThisThreadPool->ProcessWin9xEvents( &CoreData, FALSE );
> 				break;
> 			}
> 
> 			//
> 			// There are I/O completion routines scheduled on this thread.
> 			// This is not a good thing!
> 			//
> 			case WAIT_IO_COMPLETION:
> 			{
> 				DPF( 1, "WARNING: APC was serviced on the secondary Win9x IO service thread!  What is the application doing??" );
> 				break;
> 			}
> 
> 			//
> 			// wait failed
> 			//
> 			case WAIT_FAILED:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread wait failed!" );
> 				DisplayDNError( 0, dwError );
> 				break;
> 			}
> 
> 			//
> 			// problem
> 			//
> 			default:
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Secondary Win9x thread unknown problem in wait!" );
> 				DisplayDNError( 0, dwError );
> 				DNASSERT( FALSE );
> 				break;
> 			}
> 		}
> 	}
> 
> 	pThisThreadPool->DecrementActiveThreadCount();
> 
> 	DNFree( pParam );
> 
> 	COM_CoUninitialize();
> 
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
2292a3707,4271
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::DialogThreadProc - thread proc for spawning dialogs
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> // ------------------------------
> DWORD WINAPI	CThreadPool::DialogThreadProc( void *pParam )
> {
> 	const DIALOG_THREAD_PARAM	*pThreadParam;
> 	BOOL	fGetMessageReturn;
> 	MSG		Message;
> 	HWND	hDialog;
> 
> 
> 	//
> 	// Initialize COM.  If this fails, we'll have problems later.
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
> 	DNASSERT( pParam != NULL );
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( pParam );
> 	
> 	pThreadParam->pDialogFunction( pThreadParam->phDialog, pThreadParam->pContext );
> 
> 	hDialog = *pThreadParam->phDialog;
> 	if ( hDialog == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> MessageLoop:
> 	fGetMessageReturn = GetMessage( &Message, hDialog, 0, 0 );
> 	switch ( fGetMessageReturn )
> 	{
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		case -1:
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem with GetMessage!" );
> 			DisplayErrorCode( 0, dwError );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			if ( IsDialogMessage( *pThreadParam->phDialog, &Message ) == 0 )
> 			{
> 				TranslateMessage( &Message );
> 				DispatchMessage( &Message );
> 			}
> 			
> 			goto MessageLoop;
> 			break;
> 		}
> 	}
> 
> Exit:
> 	pThreadParam->pThisThreadPool->DecrementActiveThreadCount();
> 	DNFree( pParam );
> 	return	0;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xEvents - process Win9x events
> //
> // Entry:		Pointer to core data
> //				Boolean indicating whether to acknowledge jobs
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xEvents( WIN9X_CORE_DATA *const pCoreData, const BOOL fProcessDelayedJobs )
> {
> 	DNASSERT( pCoreData != NULL );
> 
> 	//
> 	// If delayed jobs are to be processed, process one.  Otherwise sleep and
> 	// let another thread pick up the jobs.
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_PENDING_JOB ], 0 ) )
> 	{
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		case WAIT_OBJECT_0:
> 		{
> 			if ( fProcessDelayedJobs != FALSE )
> 			{
> 			    DPF( 8, "Primary Win9x thread has a pending job!" );
> 				ProcessWin9xJob( pCoreData );
> 			}
> 			else
> 			{
> 				SleepEx( 0, TRUE );
> 			}
> 
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	//
> 	// send complete
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ], 0 ) )
> 	{
> 		case WAIT_OBJECT_0:
> 		{
> 			//
> 			// reset the event so it will be signalled again if anything
> 			// completes while we're scanning the pending write list
> 			//
> 			if ( ResetEvent( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to reset Winsock2 send event!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 
> 			CompleteOutstandingSends();
> 			
> 			break;
> 		}
> 
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	//
> 	// receive complete
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ], 0 ) )
> 	{
> 		case WAIT_OBJECT_0:
> 		{
> 			//
> 			// reset the event so it will be signalled again if anything
> 			// completes while we're scanning the pending read list
> 			//
> 			if ( ResetEvent( pCoreData->hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to reset Winsock2 receive event!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 
> 			CompleteOutstandingReceives();
> 			
> 			break;
> 		}
> 
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	//
> 	// stop all threads
> 	//
> 	switch ( WaitForSingleObject( pCoreData->hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ], 0 ) )
> 	{
> 		case WAIT_OBJECT_0:
> 		{
> 			DPF( 8, "Win9x thread exit because SP closing!" );
> 			pCoreData->fLooping = FALSE;
> 			break;
> 		}
> 	
> 		case WAIT_TIMEOUT:
> 		{
> 			break;
> 		}
> 
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ProcessWin9xJob - process a Win9x job
> //
> // Entry:		Pointer core data
> //
> // Exit:		Nothing
> // ------------------------------
> void	CThreadPool::ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData )
> {
> 	THREAD_POOL_JOB	*pJobInfo;
> 
> 
> 	//
> 	// Remove and process a single job from the list.  If there is no job, skip
> 	// to the end of the function.
> 	//
> 	pJobInfo = GetWorkItem();
> 
> 	if ( pJobInfo == NULL )
> 	{
> 		goto Exit;
> 	}
> 
> 	switch ( pJobInfo->JobType )
> 	{
> 		//
> 		// enum refresh
> 		//
> 		case JOB_REFRESH_TIMER_JOBS:
> 		{
> 			DPF( 8, "WorkThread job REFRESH_ENUM" );
> 			DNASSERT( pJobInfo->JobData.JobRefreshTimedJobs.uDummy == 0 );
> 			LockTimerData();
> 			pCoreData->fTimerJobsActive = ProcessTimerJobs( &m_TimerJobList, &pCoreData->NextTimerJobTime );
> 			UnlockTimerData();
> 
> 			if ( pCoreData->fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active timer jobs left after processing a Win9x REFRESH_TIMER_JOBS" );
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// issue callback for this job
> 		//
> 		case JOB_DELAYED_COMMAND:
> 		{
> 			DPF( 8, "WorkThread job DELAYED_COMMAND" );
> 			DNASSERT( pJobInfo->JobData.JobDelayedCommand.pCommandFunction != NULL );
> 			pJobInfo->JobData.JobDelayedCommand.pCommandFunction( pJobInfo );
> 			break;
> 		}
> 
> 		//
> 		// other job
> 		//
> 		default:
> 		{
> 			DPF( 0, "WorkThread Win9x job unknown!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	DEBUG_ONLY( pJobInfo->JobType = JOB_UNINITIALIZED );
> 	m_JobPool.Release( &m_JobPool, pJobInfo );
> 
> Exit:
> 	return;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CheckWinsock1IO - check the IO status for Winsock1 sockets
> //
> // Entry:		Pointer to sockets to watch
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> BOOL	CThreadPool::CheckWinsock1IO( FD_SET *const pWinsock1Sockets )
> {
> static	const TIMEVAL	SelectNoTime = { 0 };
> 	BOOL		fIOServiced;
> 	INT			iSelectReturn;
> 	FD_SET		ReadSocketSet;
> 	FD_SET		WriteSocketSet;
> 	FD_SET		ErrorSocketSet;
> 
> 
> 	//
> 	// Make a local copy of all of the sockets.  This isn't totally
> 	// efficient, but it works.  Multiplying by active socket count will
> 	// spend half the time in the integer multiply.
> 	//
> 	fIOServiced = FALSE;
> 	Lock();
> 	memcpy( &ReadSocketSet, pWinsock1Sockets, sizeof( ReadSocketSet ) );
> 	memcpy( &WriteSocketSet, pWinsock1Sockets, sizeof( WriteSocketSet ) );
> 	memcpy( &ErrorSocketSet, pWinsock1Sockets, sizeof( ErrorSocketSet ) );
> 	Unlock();
> 
> 	//
> 	// Don't check write sockets here because it's very likely that they're ready
> 	// for service but have no outgoing data and will thrash
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  &ReadSocketSet,	// sockets to check for read
> 							  NULL,				// sockets to check for write (none)
> 							  &ErrorSocketSet,	// sockets to check for error
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select got pissed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// WSAENOTSOCK = This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// WSAEINTR = this operation was interrupted
> 				//
> 				case WSAEINTR:
> 				{
> 					DPF( 1, "Winsock1 reporting interrupted operation when selecting read or error sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting read or error sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing read service and error service.
> 		//
> 		default:
> 		{
> 			fIOServiced |= ServiceWinsock1Sockets( &ReadSocketSet, CSocketPort::Winsock1ReadService );
> 			fIOServiced |= ServiceWinsock1Sockets( &ErrorSocketSet, CSocketPort::Winsock1ErrorService );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Since writes are likely to be ready, check for them separately
> 	//
> 	iSelectReturn = p_select( 0,				// compatibility parameter (ignored)
> 							  NULL,				// sockets to check for read (don't check reads)
> 							  &WriteSocketSet,	// sockets to check for write
> 							  NULL,				// sockets to check for error (don't check errors)
> 							  &SelectNoTime		// wait timeout (zero, do an instant check)
> 							  );
> 	switch ( iSelectReturn )
> 	{
> 		//
> 		// timeout, no write sockets are ready for service
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// select failed
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWSAError;
> 
> 
> 			dwWSAError = p_WSAGetLastError();
> 			switch ( dwWSAError )
> 			{
> 				//
> 				// this socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 1, "Winsock1 reporting 'Not a socket' when selecting write sockets!" );
> 					break;
> 				}
> 
> 				//
> 				// other
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem selecting write sockets for service!" );
> 					DisplayWinsockError( 0, dwWSAError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// Check for sockets needing write service
> 		//
> 		default:
> 		{
> 			fIOServiced |= ServiceWinsock1Sockets( &WriteSocketSet, CSocketPort::Winsock1WriteService );
> 			break;
> 		}
> 	}
> 
> 	return	fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::ServiceWinsock1Sockets - service requests on Winsock1 sockets ports
> //
> // Entry:		Pointer to set of sockets
> //				Pointer to service function
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> BOOL	CThreadPool::ServiceWinsock1Sockets( FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction )
> {
> 	BOOL		fReturn;
> 	UINT_PTR	uWaitingSocketCount;
> 	UINT_PTR	uSocketPortCount;
> 	CSocketPort	*pSocketPorts[ FD_SETSIZE ];
> 
> 
> 	//
> 	// initialize
> 	//
> 	fReturn = FALSE;
> 	uSocketPortCount = 0;
> 	uWaitingSocketCount = pSocketSet->fd_count;
> 	
> 	Lock();
> 	while ( uWaitingSocketCount > 0 )
> 	{
> 		UINT_PTR	uIdx;
> 
> 
> 		uWaitingSocketCount--;
> 		uIdx = m_SocketSet.fd_count;
> 		while ( uIdx != 0 )
> 		{
> 			uIdx--;
> 			if ( p___WSAFDIsSet( m_SocketSet.fd_array[ uIdx ], pSocketSet ) != FALSE )
> 			{
> 				//
> 				// this socket is still available, add a reference to the socket
> 				// port and keep it around to be processed outside of the lock
> 				//
> 				pSocketPorts[ uSocketPortCount ] = m_pSocketPorts[ uIdx ];
> 				pSocketPorts[ uSocketPortCount ]->AddRef();
> 				uSocketPortCount++;
> 				uIdx = 0;
> 			}
> 		}
> 	}
> 	Unlock();
> 
> 	while ( uSocketPortCount != 0 )
> 	{
> 		uSocketPortCount--;
> 		
> 		//
> 		// call the service function and remove the reference
> 		//
> 		fReturn |= (pSocketPorts[ uSocketPortCount ]->*pServiceFunction)();
> 		pSocketPorts[ uSocketPortCount ]->DecRef();
> 	}
> 
> 	return	fReturn;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
50a51
> typedef	struct	_WIN9X_CORE_DATA		WIN9X_CORE_DATA;
60c61
< typedef	void	(CSocketPort::*PSOCKET_SERVICE_FUNCTION)( void );
---
> typedef	BOOL	(CSocketPort::*PSOCKET_SERVICE_FUNCTION)( void );
63a65
> typedef	void	DIALOG_FUNCTION( HWND *const phDialog, void *const pDialogContext );
101c103,104
< 			DNASSERT( m_hIOCompletionPort != NULL );
---
> 			DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( m_hIOCompletionPort != NULL ) ) ||
> 					  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_hIOCompletionPort == NULL ) ) );
125c128
< 				pTemp->m_OutstandingWriteListLinkage.InsertBefore( m_OutstandingWriteList );
---
> 				pTemp->m_OutstandingWriteListLinkage.InsertBefore( &m_OutstandingWriteList );
147a151
> 			DNASSERT( ( m_hWinsock2SendComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
152a157
> 			DNASSERT( ( m_hWinsock2ReceiveComplete != NULL ) || ( OSType() == VER_PLATFORM_WIN32_NT ) );
160a166,168
> 		HRESULT	AddSocketPort( CSocketPort *const pSocketPort );
> 		void	RemoveSocketPort( CSocketPort *const pSocketPort );
> 
171a180,182
> 		HRESULT	SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, HWND *const phDialog, void *const pDialogContext );
> 
> 		
223a235
> 		CContextFixedPool< CReadIOData, READ_IO_DATA_POOL_CONTEXT >	m_IPXReadIODataPool;	// pool for IPX read data
277a290
> 		HRESULT	Win9xInit( void );
287a301,302
> 		void	CompleteOutstandingSends( void );
> 		void	CompleteOutstandingReceives( void );
288a304,305
> 		static	DWORD WINAPI	PrimaryWin9xThread( void *pParam );
> 		static	DWORD WINAPI	SecondaryWin9xThread( void *pParam );
290a308
> 		static	DWORD WINAPI	DialogThreadProc( void *pParam );
295a314,318
> 		void	ProcessWin9xEvents( WIN9X_CORE_DATA *const pCoreData, const BOOL fProcessDelayedJobs );
> 		void	ProcessWin9xJob( WIN9X_CORE_DATA *const pCoreData );
> 
> 		BOOL	CheckWinsock1IO( FD_SET *const pWinsock1Sockets );
> 		BOOL	ServiceWinsock1Sockets( FD_SET *pSocketSet, PSOCKET_SERVICE_FUNCTION pServiceFunction );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\unk.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
14a15,16
> #include <WSIPX.h>
> 
41a44
> #include	"Creg.h"
42a46,49
> #include	"strutils.h"
> 
> #include	"resource.h"
> 
52a60,68
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
> #define DN_REG_LOCAL_WSOCK_IPX_ROOT			L"\\DPNSPWinsockIPX"
> #define DN_REG_LOCAL_WSOCK_TCPIP_ROOT		L"\\DPNSPWinsockTCP"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
75c91,120
< // this is the vtable for IP.
---
> // these are the vtables for IPX and IP.  One or the other is used depending on
> // what is passed to DoCreateInstance.  The interfaces are presently the same,
> // but are different structures to facilitate potential future changes.
> static IDP8ServiceProviderVtbl	ipxInterface =
> {
> 	DNSP_QueryInterface,
> 	DNSP_AddRef,
> 	DNSP_Release,
> 	DNSP_Initialize,
> 	DNSP_Close,
> 	DNSP_Connect,
> 	DNSP_Disconnect,
> 	DNSP_Listen,
> 	DNSP_SendData,
> 	DNSP_EnumQuery,
> 	DNSP_EnumRespond,
> 	DNSP_CancelCommand,
> 	DNSP_CreateGroup,
> 	DNSP_DeleteGroup,
> 	DNSP_AddToGroup,
> 	DNSP_RemoveFromGroup,
> 	DNSP_GetCaps,
> 	DNSP_SetCaps,
> 	DNSP_ReturnReceiveBuffers,
> 	DNSP_GetAddressInfo,
> 	DNSP_IsApplicationSupported,
> 	DNSP_EnumAdapters,
> 	DNSP_ProxyEnumQuery
> };
> 
136a182,238
> // CreateIPXInterface - create an IPX interface
> //
> // Entry:		Pointer to pointer to SP interface
> //				Pointer to pointer to associated SP data
> //
> // Exit:		Error code
> // ------------------------------
> static	HRESULT CreateIPXInterface( IDP8ServiceProvider **const ppiDNSP, CSPData **const ppSPData )
> {
> 	HRESULT 	hr;
> 	CSPData		*pSPData;
> 
> 
> 	DNASSERT( ppiDNSP != NULL );
> 	DNASSERT( ppSPData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pSPData = NULL;
> 	*ppiDNSP = NULL;
> 	*ppSPData = NULL;
> 
> 	//
> 	// create main data class
> 	//
> 	hr = CreateSPData( &pSPData, &CLSID_DP8SP_IPX, TYPE_IPX, &ipxInterface );
> 	if ( hr != DPN_OK )
> 	{
> 		DNASSERT( pSPData == NULL );
> 		DPF( 0, "Problem creating SPData!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> 	DNASSERT( pSPData != NULL );
> 	*ppiDNSP = pSPData->COMInterface();
> 	*ppSPData = pSPData;
> 
> Exit:
> 	return hr;
> 
> Failure:
> 	if ( pSPData != NULL )
> 	{
> 		pSPData->DecRef();
> 		pSPData = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
223a326,328
> 	//
> 	// we can either create an IPX instance or an IP instance
> 	//
229a335,338
> 	else if (IsEqualCLSID(rclsid, CLSID_DP8SP_IPX))
> 	{
> 		hr = CreateIPXInterface( ppIDNSP, &pSPData );
> 	}
270c379
< 	return (IsEqualCLSID(rclsid, CLSID_DP8SP_TCPIP));
---
> 	return ( IsEqualCLSID( rclsid, CLSID_DP8SP_TCPIP ) || IsEqualCLSID( rclsid, CLSID_DP8SP_IPX ) );
361a471,721
> #define MAX_RESOURCE_STRING_LENGTH		_MAX_PATH
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CDPVACMI::LoadAndAllocString"
> HRESULT LoadAndAllocString( UINT uiResourceID, wchar_t **lpswzString )
> {
> 	int length;
> 	HRESULT hr;
> 
> 	if( DNGetOSType() == VER_PLATFORM_WIN32_NT )
> 	{
> 		wchar_t wszTmpBuffer[MAX_RESOURCE_STRING_LENGTH];	
> 		
> 		length = LoadStringW( g_hDLLInstance, uiResourceID, wszTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			wcscpy( *lpswzString, wszTmpBuffer );
> 
> 			return DPN_OK;
> 		}
> 	}
> 	else
> 	{
> 		char szTmpBuffer[MAX_RESOURCE_STRING_LENGTH];
> 		
> 		length = LoadStringA( g_hDLLInstance, uiResourceID, szTmpBuffer, MAX_RESOURCE_STRING_LENGTH );
> 
> 		if( length == 0 )
> 		{
> 			hr = GetLastError();		
> 			
> 			DPF( 0, "Unable to load resource ID %d error 0x%x", uiResourceID, hr );
> 			*lpswzString = NULL;
> 
> 			return hr;
> 		}
> 		else
> 		{
> 			*lpswzString = new wchar_t[length+1];
> 
> 			if( *lpswzString == NULL )
> 			{
> 				DPF( 0, "Alloc failure" );
> 				return DPNERR_OUTOFMEMORY;
> 			}
> 
> 			if( STR_jkAnsiToWide( *lpswzString, szTmpBuffer, length+1 ) == 0 )
> 			{
> 				hr = GetLastError();
> 				
> 				DPF( 0, "Unable to upconvert from ansi to unicode hr=0x%x", hr );
> 				return hr;
> 			}
> 
> 			return DPN_OK;
> 		}
> 		
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 	WCHAR *wszFriendlyName = NULL;
> 	HRESULT hr;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_IPX_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create IPX sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_IPX, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_IPX );
> 
> 	creg.Close();
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB DN_REG_LOCAL_WSOCK_TCPIP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create TCPIP sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 
> 	creg.WriteString( DN_REG_KEYNAME_ALL_APPLICATIONS, L"Y" );
> 
> 	hr = LoadAndAllocString( IDS_FRIENDLYNAME_TCPIP, &wszFriendlyName );
> 
> 	if( FAILED( hr ) )
> 	{
> 		DPF( 0, "Could not load IPX name hr=0x%x", hr );
> 		return hr;
> 	}
> 
> 	// Load from resource file
> 	creg.WriteString( DN_REG_KEYNAME_FRIENDLY_NAME, wszFriendlyName );
> 
> 	delete [] wszFriendlyName;
> 
> 	creg.WriteGUID( DN_REG_KEYNAME_GUID, CLSID_DP8SP_TCPIP );
> 
> 	creg.Close();
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_IPX_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove IPX sub-key, could have elements" );
> 		}
> 
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_WSOCK_TCPIP_ROOT)[1] ) )
> 		{
> 			DPFERR( "Cannot remove TCPIP sub-key, could have elements" );
> 		}
> 
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.IPX.1", L"DirectPlay8 WSock IPX Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_IPX, L"DirectPlay8SPWSock.IPX") )
> 	{
> 		DPFERR( "Could not register dp8 IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8SPWSock.TCPIP.1", L"DirectPlay8 WSock TCPIP Provider Object",
> 							  L"dpnwsock.dll", CLSID_DP8SP_TCPIP, L"DirectPlay8SPWSock.TCPIP") )
> 	{
> 		DPFERR( "Could not register dp8 IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_IPX) )
> 	{
> 		DPF( 0, "Failed to unregister IPX object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DP8SP_TCPIP) )
> 	{
> 		DPF( 0, "Failed to unregister IP object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
22a24
> #include	"DWinsock.h"
51,54d52
< // provides us winsock1/2 support
< #include "dwnsock1.inc"
< #include "dwnsock2.inc"
< 
81a80,81
> static	DWSSTATE	g_dwsState;		// state info for the WS1/2 glue lib
> 
84a85
> static DWORD_PTR	OverrideWinsockVersion( void );
92a94,161
> // OverrideWinsockVersion - override the Winsock version used by the SP
> //
> // Entry:		Nothing
> //
> // Exit:		Max Winsock version to ask for
> // ------------------------------
> static DWORD_PTR	OverrideWinsockVersion( void )
> {
> 	DWORD_PTR	WinsockVersion;
> 
> 
> 	//
> 	// check for override for OS version and Winsock version
> 	//
> 	g_uOSType = DNGetOSType();
> 	WinsockVersion = 2;
> 
> 	switch ( GetProfileInt( "DirectPlay8", "WinsockVersion", 0 ) )
> 	{
> 		//
> 		// Use Winsock1.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 1:
> 		{
> 			DPF( 0, "Winsock overridden to Winsock1 support!" );
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			WinsockVersion = 1;
> 				
> 			break;
> 		}
> 
> 		//
> 		// Use Winsock2.  If this is an NT machine, fake it into
> 		// thinking it's Win9x.
> 		//
> 		case 2:
> 		{
> 			DPF( 0, "Winsock overridden to Win9x Winsock2 support!" );
> 			if ( g_uOSType == VER_PLATFORM_WIN32_NT )
> 			{
> 				g_uOSType = VER_PLATFORM_WIN32_WINDOWS;
> 			}
> 			DNASSERT( WinsockVersion == 2 );
> 
> 			break;
> 		}
> 
> 		//
> 		// OS default
> 		//
> 		default:
> 		{
> 			DNASSERT( WinsockVersion == 2 );
> 			break;
> 		}
> 	}
> 
> 	return	WinsockVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
106a176,177
> 	INT			iVersion;
> 	DWORD_PTR	MaxWinsockVersion;
116a188,189
> 	MaxWinsockVersion = OverrideWinsockVersion();
> 
132c205
< 	// initialize Winsock
---
> 	// initialize the bindings to Winsock
134,140c207,208
< 	WORD wVersionRequested;
< 	WSADATA wsaData;
< 	int nRet;
< 
< 	wVersionRequested = MAKEWORD(2,2);
< 	nRet = p_WSAStartup(wVersionRequested, &wsaData);
< 	if (nRet || wVersionRequested != wsaData.wVersion)
---
> 	iVersion = DWSInitWinSock( &g_dwsState, MaxWinsockVersion );
> 	if ( iVersion == 0 )	// failure
142,144c210,212
< 		DPF( 0, "Problem starting winsock!" );
< 	    fReturn = FALSE;
< 	    goto Failure;
---
> 		DPF( 0, "Problem binding dynamic winsock functions!" );
> 		fReturn = FALSE;
> 		goto Failure;
146d213
< 
148a216,217
> 	DPF( 8, "Detected WinSock version %d.%d\n", LOBYTE( iVersion ), HIBYTE( iVersion ) );	
> 
158c227,235
< 		p_WSACleanup();
---
> 		BOOL	fFreeReturn;
> 
> 
> 		fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 		if ( fFreeReturn == FALSE )
> 		{
> 			DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 		}
> 
188a266,268
> 	BOOL	fFreeReturn;
> 
> 
192c272,276
< 	p_WSACleanup();
---
> 	fFreeReturn = DWSFreeWinSock( &g_dwsState );
> 	if ( fFreeReturn == FALSE )
> 	{
> 		DPF( 0, "Problem unbinding dynamic winsock functions!" );
> 	}
199a284,296
> //**********************************************************************
> // ------------------------------
> // GetWinsockVersion - get the version of Winsock
> //
> // Entry:		Nothing
> //
> // Exit:		Winsock version
> // ------------------------------
> INT	GetWinsockVersion( void )
> {
> 	return	g_dwsState.nVersion;
> }
> //**********************************************************************
200a298
> 
286a385
> 	INT_PTR iWinsockVersion;
296a396
> 	iWinsockVersion = GetWinsockVersion();
595c695
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
627c727
< */
---
> 
637c737
< /*	AdapterInfo.guid = *pAdapterGUID;
---
> 	AdapterInfo.guid = *pAdapterGUID;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\utils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
48a49,50
> INT		GetWinsockVersion( void );
> 
60c62
< /* BUGBUG: [mgere] [xbox] Removed -- multiple adapters not supported on xbox
---
> 
64d65
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23
> #include	<WSIPX.h>
165a167,170
>  	switch ( pSPData->GetType() )
> 	{
> 		case TYPE_IP:
> 		{
167a173,188
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			DPF( 9, "Attempting to create IPX datagram socket." );
> 			TestSocket = p_socket( AF_IPX, SOCK_DGRAM, NSPROTO_IPX );
> 			break;
> 		}
> 
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
232a254
> 		case TYPE_IPX:
318a341
> 	IDirectPlay8Address		*pSPOnlyAddress;
326c349
< 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
---
> 	DNASSERT( ( pEnumQueryData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_NOBROADCASTFALLBACK ) ) == 0 );
341a365
> 	pSPOnlyAddress = NULL;
391a416,463
> 		HRESULT	hTempResult;
> 		GUID	SPGuid;
> 
> 
> 		//
> 		// get the SP
> 		//
> 		hTempResult = IDirectPlay8Address_GetSP( pEnumQueryData->pAddressDeviceInfo, &SPGuid );
> 		switch ( hTempResult )
> 		{
> 			//
> 			// no problem
> 			//
> 			case DPN_OK:
> 			{
> 				DNASSERT( hr == DPNERR_PENDING );
> 				break;
> 			}
> 
> 			//
> 			// pass these errors throug
> 			//
> 			case DPNERR_OUTOFMEMORY:
> 			{
> 				hr = hTempResult;
> 				goto Failure;
> 				break;
> 			}
> 
> 			//
> 			// remap other errors to addressing errors
> 			//
> 			default:
> 			{
> 				hr = DPNERR_ADDRESSING;
> 				goto Failure;
> 				break;
> 			}
> 		}
> 
> 		//
> 		// The host address is NULL, if we're using TCPIP and we're not allowed to query,
> 		// use the broadcast address.  If we're on IPX, use the broadcast address.
> 		//
> 		if ( ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) == 0 ) &&
> 			   ( IsEqualCLSID( SPGuid, CLSID_DP8SP_TCPIP ) != FALSE ) ) ||
> 			 ( IsEqualCLSID( SPGuid, CLSID_DP8SP_IPX ) != FALSE ) )
> 		{
393a466,513
> 		}
>         else
>         {
> 			HRESULT	hTempResult;
> 
> 
> 			//
> 			// Need to build address with just the SP guid.  Get it from the
> 			// device address.
> 			//
> 			DNASSERT( pSPOnlyAddress == NULL );
> 			hTempResult = COM_CoCreateInstance( CLSID_DirectPlay8Address,
> 											NULL,
> 											CLSCTX_INPROC_SERVER,
> 											IID_IDirectPlay8Address,
> 											reinterpret_cast<void**>( &pSPOnlyAddress ) );
> 			if ( hTempResult != S_OK )
> 			{
> 				DPF( 0, "Failed to create SP-Only address when non was supplied!" );
> 				hr = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 
> 			hTempResult = IDirectPlay8Address_SetSP( pSPOnlyAddress, &SPGuid );
> 			switch ( hTempResult )
> 			{
> 				//
> 				// set SP, no problem
> 				//
> 				case DPN_OK:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// failed to set SP, map error to an addressing error
> 				//
> 				default:
> 				{
> 					hr = DPNERR_ADDRESSING;
> 					goto Failure;
> 
> 					break;
> 				}
> 			}
> 
> 			pHostAddress = pSPOnlyAddress;
> 		}
526a647,678
> 			if ( ( ( pEnumQueryData->dwFlags & DPNSPF_OKTOQUERY ) != 0 ) &&
> 				 ( pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since the dialog is being popped, this command is in progress,
> 				// not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyEnumQueryData( pEnumQueryData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for enum query!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
540a693,694
> 			}
> 
618a773,778
> 	if ( pSPOnlyAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pSPOnlyAddress );
> 		pSPOnlyAddress = NULL;
> 	}
> 
811c971
< 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
---
> 	DNASSERT( ( pConnectData->dwFlags & ~( DPNSPF_OKTOSHOWSTATUS | DPNSPF_OKTOQUERY | DPNSPF_RELIABLE | DPNSPF_UNRELIABLE ) ) == 0 );
1024a1185,1213
> 			if ( ( pConnectData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the connect data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since a dialog is being displayed, the command is in-progress,
> 				// not pending.
> 				//
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				pEndpoint->CopyConnectData( pConnectData, pDeviceAddress );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for connect!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove our reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1025a1215,1216
> 			}
> 
1296a1488
> 										  DPNSPF_OKTOQUERY |
1513a1706,1737
> 			if ( ( pListenData->dwFlags & DPNSPF_OKTOQUERY ) != 0 )
> 			{
> 				//
> 				// Copy the listen data locally and start the dialog.  When the
> 				// dialog completes, the connection will attempt to complete.
> 				// Since this endpoint is being handed off to another thread,
> 				// make sure it's in the unbound list.  Since a dialog is being
> 				// displayed, the command state is in progress, not pending.
> 				//
> 				DNASSERT( pSPData != NULL );
> 
> 				pEndpoint->CopyListenData( pListenData, pDeviceAddress );
> 				pCommand->SetState( COMMAND_STATE_INPROGRESS );
> 				hr = pEndpoint->ShowSettingsDialog( pSPData->GetThreadPool() );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem showing settings dialog for listen!" );
> 					DisplayDNError( 0, hr );
> 
> 					goto Failure;
> 				}
> 
> 				//
> 				// this endpoint has been handed off, remove out reference to it
> 				//
> 				pEndpoint = NULL;
> 				hr = DPNERR_PENDING;
> 
> 				goto Exit;
> 			}
> 			else
> 			{
1514a1739,1740
> 			}
> 
2417a2644,2655
> 		// Multicast groups are unsupported on IPX.
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
2608a2847,2858
> 		// multicast groups are unsupported on IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DPF( 0, "Attempted to AddToGroup on IPX!" );
> 			goto Failure;
> 
> 			break;
> 		}
> 
> 		//
3260c3510
< 	hr = pSPAddress->EnumAdapters( pEnumAdaptersData );
---
> 	hr = pSPAddress->EnumAdapters( pEnumAdaptersData, pSPData->GetPublicSocketAddress() );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
6a7,8
>   DllRegisterServer PRIVATE
>   DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\wsocksp.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
28a29,30
> 	TYPE_IPX			// IPX type
> 
.  
.  
()---()---()---()---()---()---()---()---()---(--)---()---()---()---()---()---()---()---()---()---()  
.  
.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dplay\diff\09081430.txt ===
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes differing files
.\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\comutil.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\comutil.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dndbg.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\dneterrors.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\guidutil.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	1ece02cc	6bb05875
.\common\osind.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\osind.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\packbuff.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\common\sources	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\common\strutils.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\appdesc.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\appdesc.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\async.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\classfac.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\client.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\common.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dllmain.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dncore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\dnet.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\dnet.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\enum_sp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\migration.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\msghandler.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\ntentry.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\paramval.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\core\peer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\server.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\core\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addbase.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\addcore.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addcore.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\addparse.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\dnaddress\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dllmain.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\dnadd.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\dnaddress\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\inc\dpaddr.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dplay8.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\inc\dpsp8.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\connect.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\enum.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\protocol\sources	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\protocol\timer.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\classfac.cpp	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\cmddata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\debugutils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dirs	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dnwsock.rc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\dwnsock1.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\dwnsock2.inc	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\endpoint.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\endpoint.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\iodata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\ipendpt.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\locals.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\pools.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\rsip.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sendqueue.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\socketport.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\sources.inc	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spaddress.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\spdata.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\threadpool.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\unk.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\utils.h	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.cpp	different (D:\xbox\private\windows\directx\dplay is more recent)	????????	????????
.\sp\wsock\wsocksp.def	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
.\sp\wsock\wsocksp.h	different (D:\nt\MULTIM~1\DirectX\dplay\dnet is more recent)	????????	????????
-- 88 files listed
-- D:\xbox\private\windows\directx\dplay : D:\nt\MULTIM~1\DirectX\dplay\dnet -- includes left-only,right-only, files
.\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\common\callstack.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\creg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\memlog.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\dnmisc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\dpguid.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\core\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\core\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04041115.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04061145.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04101330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04121430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04181430.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04201700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04211500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04241015.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\04261045.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05010945.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05021600.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05031030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05081300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05091400.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05111530.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05121300.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05151130.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05161345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05221345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\05231030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06021030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121345.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06121445.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06141200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\06191100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07171100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07261030.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07281500.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\07311100.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08071630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091615.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08091700.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141000.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08141630.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08151200.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\08241230.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\09061330.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\09071230.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.lst	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\diff.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\dxdiff.cmd	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\lastsync.bat	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\diff\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\dplegacy.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\dplegacy.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dnaddress\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dnaddress\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\doc\connect.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directnet.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\directplay8core.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dndbg.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dnregister.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8context.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dp8protocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpaddress.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpclassinfo.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpcustombuild.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplay8.xls	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dplobby8.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpnsvr.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpv8dmo.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoice.mpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\dpvoicenote.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\hostmigration.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\lobby8update.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametable.vsd	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\nametbl.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\rfc1738.txt	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\spintf.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\usercb.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\doc\winsockspwireprotocol.doc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvlib.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\dpnsvrq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvlib\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpnsvr.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\dpsvr8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\proctbl.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\dpnsvr\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsdef.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dpnsvr\inc\dpnsvmsg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\dvoice\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\classfac.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\createin.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dllmain.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacm.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacmi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvacmi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvaconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvaconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvautil.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\dpvautil.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\msgvacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\msrgacm.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\unk.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvacm\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\dpvcpi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\dpvcpi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvcplib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\classfac.c	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\createin.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dllmain.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvconv.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvconv.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvox.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvoxi.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\dpvvoxi.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\msgvvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\msrgvox.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\unk.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\dpvvox\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vci.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcierror.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcisc3.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcisc6.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\vcivr12.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\i386\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\i386\voxlib.lib	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\ia64\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\codecs\voxlib\obj\ia64\voxlib.lib	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\classhash.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\dvntos.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\fpm.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\common\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dpvoice.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcleng.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcleng.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvclient.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvclient.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvcreate.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvdxtran.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvdxtran.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvengine.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvengine.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvoice.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvprot.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvrecsub.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvrecsub.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsereng.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsereng.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvserver.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvserver.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvshared.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvshared.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsndt.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvsndt.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\dvtran.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\fpm.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\frame.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\frame.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\in_core.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\innerque.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\innerque.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\inqueue2.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\inqueue2.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\mixutils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\mixutils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\msgvve.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\msrgve.def	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\resource.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\sndutils.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\sndutils.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\trnotify.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\trnotify.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\va.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\va.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vnametbl.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vnametbl.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vplayer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\vplayer.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\xboxfull\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvoice\xboxfull\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\directx.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dxvt.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\dxvt.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\sources.inc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\daytona\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvt\win9x\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtcfg.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtcfg.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtglob.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtglob.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtipc.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fdtipc.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fulldup.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\fulldup.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\loopback.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\loopback.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\peakmetr.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\peakmetr.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\priority.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\priority.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\supervis.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\dxvtlib\supervis.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\dpvcp.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\dvoice.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\dvoice\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\inc\dplobby8.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\inc\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\lobby\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\classfac.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\comstuff.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dllmain.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dnlobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplapp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplclient.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplcommon.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconnect.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplconset.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplmsgq.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplobby8int.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplparam.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplproc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\dplreg.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\globals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\handles.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\lobby\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\protocol\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\protocol\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\serial\classfac.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\commanddata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\comportui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\contextfixedpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\crc.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dataport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dirs	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dnserial.rc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\dpnmodem.def	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\endpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\handletable.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\iodata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\jobqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\locals.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemendpoint.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemport.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\modemutils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\parseclass.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\pools.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sendqueue.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\serialsp.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\sources.inc	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\spdata.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\threadpool.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\unk.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\utils.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\workthread.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\daytona\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\makefile	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\serial\win9x\sources	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\dwinsock.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipui.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxaddress.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\ipxendpt.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.cpp	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\registry.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\resource.h	only in D:\nt\MULTIM~1\DirectX\dplay\dnet	--------	????????
.\sp\wsock\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\bchecker\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\daytona\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\sp\wsock\win9x\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\dirs	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\directx.ico	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\dxutil.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\makefile	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnect.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\netconnectres.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\readme.txt	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\resource.h	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.cpp	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\simplepeer.rc	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\slm.ini	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\sources	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\obj\_objects.mac	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\obj\i386\rca02052	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\obj\i386\rcb02052	only in D:\xbox\private\windows\directx\dplay	????????	--------
.\test\simplepeer\obj\i386\simplepeer.obj	only in D:\xbox\private\windows\directx\dplay	????????	--------
-- 402 files listed
.  
.  
()---()---()---()---()---()---()---()---()---(.\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
3a4
>       lobby \
5c6,7
<       core
---
>       core \
>       dpnsvr 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21a22
> #include "creg.h"
24a26
> #include <stdlib.h>
43c45
<     WCHAR                   wszFileName[_MAX_PATH];
---
>     CHAR                    szFileName[_MAX_PATH];
137c139
<     hr = COM_GetDLLName( clsid, pEntry->wszFileName, &dwSize );
---
>     hr = COM_GetDLLName( clsid, pEntry->szFileName, &dwSize );
145c147
<     pEntry->hDLL = LoadLibraryW( pEntry->wszFileName );
---
>     pEntry->hDLL = LoadLibraryA( pEntry->szFileName );
181c183
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *wszPath, DWORD *pdwSize )
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize )
183,187c185,187
< // BUGBUG: [mgere] [xbox] These com wrapper functions will only be called to
< // retrieve the wsock com object, so I hard coded the dpwsock.dll to always
< // return from this function.
< //
<     WCHAR wszDLL[] = L"dpnwsock.dll";
---
>     CRegistry cregRoot;
>     CRegistry cregCLSID;
>     CRegistry cregInProc;
189c189,194
<     wcscpy( wszPath, wszDLL);
---
>     HRESULT hr;
>     BOOL fSuccess;
>     WCHAR *wszTmpPath = NULL;
>     DWORD dwTmpSize = 0;
>     int res;
>     BOOL fDefault;
191c196
<     return S_OK;
---
>     fSuccess = cregRoot.Open( HKEY_CLASSES_ROOT, L"CLSID", TRUE, FALSE );
192a198,281
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening HKEY_CLASSES_ROOT\\CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregCLSID.Open( cregRoot, &guidCLSID, TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening specified CLSID" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     fSuccess = cregInProc.Open( cregCLSID, L"InprocServer32", TRUE, FALSE );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening inprocserver key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     cregCLSID.Close();
>     cregRoot.Close();
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !dwTmpSize )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( dwTmpSize > *pdwSize )
>     {
>     	DPF( 0, "Buffer too small" );
>     	hr = DPNERR_BUFFERTOOSMALL;
>     	*pdwSize = dwTmpSize;
>     	goto COM_GETDLLNAME_ERROR;
>     }
> 
>     *pdwSize = dwTmpSize;
> 
>     wszTmpPath = new WCHAR[dwTmpSize];
> 
> 	if( !wszTmpPath )
> 	{
> 		DPF( 0, "Error allocating memory" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto COM_GETDLLNAME_ERROR;
> 	}
> 
>     fSuccess = cregInProc.ReadString( L"", wszTmpPath, &dwTmpSize );
> 
>     if( !fSuccess )
>     {
>         DPF( 0, "Error opening default key" );
>         hr = E_FAIL;
>         goto COM_GETDLLNAME_ERROR;
>     }
> 
>     if( FAILED( hr = STR_jkWideToAnsi(szPath,wszTmpPath, *pdwSize ) ) )
>     {
>         DPF( 0, "Error converting path to DLL to ANSI hr=0x%x", hr );
>         hr = E_FAIL;
>     }
> 
>     
> 
>     delete [] wszTmpPath;
> 
>     return hr;
> 
> COM_GETDLLNAME_ERROR:
> 
>     if( wszTmpPath )
>         delete [] wszTmpPath;
> 
>     return hr;
> 
210a300,303
>     hr = CoCreateInstance( rclsid, pUnkOuter, dwClsContext, riid, ppv );
> 
>     if( hr == CO_E_NOTINITIALIZED )
>     {
232a326,329
> 
>         return hr;
> 
>     }
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\comutil.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
21c21
< HRESULT COM_GetDLLName( GUID guidCLSID, WCHAR *szPath, DWORD *pdwSize );
---
> HRESULT COM_GetDLLName( GUID guidCLSID, CHAR *szPath, DWORD *pdwSize );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dndbg.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> #include "memlog.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\dneterrors.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,23
> // vanceo - changed to stdio for printf
> //#include	<iostream.h>
> #include	<stdio.h>
> 
83a88,97
> 			// output to console
> 			case DPNERR_OUT_CONSOLE:
> 			{
> 				// Also see the change from <iostream.h> to <stdio.h> above
> 				#pragma TODO(vanceo, "Changed cout to printf so NT build environment will work, figure this out.")
> 				//cout << endl << pString << endl;
> 				printf("\n%s\n", pString);
> 				break;
> 			}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\guidutil.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
15c15
< #include <wchar.h>
---
> #include "stdio.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
37a38,41
> #ifdef	_WIN64
> #define	MEMORY_CRC			0X5AA55AA55AA55AA5
> #define	GUARD_SIGNATURE		0x0F1E2D3C4B5A6978
> #else
39a44
> #endif	// _WIN64
44a50,56
> //
> // enumerated values to indicate how to report memory leaks
> //
> #define	MEMORY_LEAK_REPORT_NONE		0x00000000
> #define	MEMORY_LEAK_REPORT_DPF		0x00000001
> #define	MEMORY_LEAK_REPORT_DIALOG	0x00000002
> 
64a77
> #ifdef	_X86_
65a79,81
> #else
> #define	ASSERT( arg )	if ( arg == FALSE ) { DebugBreak(); }
> #endif
98a115,120
> // OS items
> //
> static	UINT_PTR			g_OSVersion;
> static	HINSTANCE			g_hApplicationInstance;
> 
> //
107a130,132
> static int	DisplayCallStack( const char *const pszMsg,
> 							  const char *const pszTitle,
> 							  const char *const pCallStack );
128a154
> 	OSVERSIONINFO	OSVersionInfo;
129a156
> 
137a165,193
> 	// note OS version
> 	//
> 	memset( &OSVersionInfo, 0x00, sizeof( OSVersionInfo ) );
> 	OSVersionInfo.dwOSVersionInfoSize = sizeof( OSVersionInfo );
> 	if ( GetVersionEx( &OSVersionInfo ) == FALSE )
> 	{
> 		goto Failure;
> 	}
> 	g_OSVersion = OSVersionInfo.dwPlatformId;
> 
> 	//
> 	// note application instance
> 	//
> 	g_hApplicationInstance = GetModuleHandle( NULL );
> 	if ( g_hApplicationInstance == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to GetModuleHandle: 0x%x", dwError );
> 		goto Failure;
> 	}
> 
> //#pragma	BUGBUG( johnkan, "---->  Hard-coded Win9x emulation!!  <----" )
> //	g_OSVersion = VER_PLATFORM_WIN32_WINDOWS;
> 
> 
> 	//
239a296,297
> 		switch ( DNGetOSType() )
> 		{
242a301,302
> 			case VER_PLATFORM_WIN32_NT:
> 			{
267a328,338
> 				break;
> 			}
> 
> 			//
> 			// other OS, heap checking not available
> 			//
> 			default:
> 			{
> 				break;
> 			}
> 		}
300a372,409
> // DNGetOSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OS type
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNGetOSType"
> 
> UINT_PTR	DNGetOSType( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_OSVersion;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DNGetApplcationInstance - application instance
> //
> // Entry:		Nothing
> //
> // Exit:		Application instance
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNGetApplicationInstance"
> 
> HINSTANCE	DNGetApplicationInstance( void )
> {
> 	DNASSERT( g_fOSIndirectionLayerInitialized != FALSE );
> 	return	g_hApplicationInstance;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
377a487
> //#ifdef	_WIN32
406a517
> //#endif	// _WIN32
407a519,540
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	if ( pTime1->Time < pTime2->Time )
> //	{
> //		iReturnValue = -1;
> //	}
> //	else
> //	{
> //		if ( pTime1->Time == pTime2->Time )
> //		{
> //			iReturnValue = 0;
> //		}
> //		else
> //		{
> //			iReturnValue = 1;
> //		}
> //	}
> //#endif	// _WIN64
> 
436a570
> #ifdef	_X86_
448a583,633
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	__asm{ mov	$t0, *pTime1
> 		   mov	$t1, *pTime2
> 		   addq	$t0, $t1
> 		   mov	*pTimeResult, $t0
> 	};
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow + pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh + pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for overflow in low 32-bits and increment high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow < dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 		pTimeResult->Time32.TimeHigh++;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	DEBUG_ONLY( UINT_PTR	ReferenceTime );
> //
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DEBUG_ONLY( ReferenceTime = pTime1->Time );
> //	*pTimeResult = pTime1->Time + pTime2->Time;
> //	DNASSERT( *pTimeResult >= ReferenceTime );
> //
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
477a663,664
> #ifdef	_X86_
> 
489a677,723
> 
> #else	// _X86_
> 
> /*
> #ifdef	_ALPHA_
> 	// debug me
> 	DebugBreak();
> 
> 	mov		$t0, *pTime1
> 	mov		$t1, *pTime2
> 	addq	$t0, $t1
> 	mov		*pTimeResult, $t0
> #else	// _ALPHA_
> */
> 
> //#ifdef	_WIN32
> 	DWORD	dwTempLowTime;
> 
> 
> 	dwTempLowTime = pTime1->Time32.TimeLow;
> 	pTimeResult->Time32.TimeLow = pTime1->Time32.TimeLow - pTime2->Time32.TimeLow;
> 	pTimeResult->Time32.TimeHigh = pTime1->Time32.TimeHigh - pTime2->Time32.TimeHigh;
> 
> 	//
> 	// check for underflow in low 32-bits and decrement high value if applicable
> 	//
> 	if ( pTimeResult->Time32.TimeLow > dwTempLowTime )
> 	{
> #pragma	BUGBUG( johnkan, "Test this!" )
> 		// debug me
> 		DebugBreak();
> 
> 		pTimeResult->Time32.TimeHigh--;
> 	}
> //#endif	// _WIN32
> 
> //#ifdef	_WIN64
> //	// debug me!
> //	DNASSERT( FALSE );
> //
> //	DNASSERT( pTime1->Time > pTime2->Time );
> //	pTimeResult = pTime1->Time - pTime2->Time;
> //#endif	// _WIN64
> 
> // #endif	// _ALPHA_
> 
> #endif	// _X86_
714a949,951
> 		void	NoteCurrentCallStack( void ) { m_CallStack.NoteCurrentCallStack(); }
> 		void	GetCallStack( char *const pBuffer ) const { m_CallStack.GetCallStackString( pBuffer ); }
> 
733a971
> 		CCallStack<DN_MEMORY_CALL_STACK_DEPTH>	m_CallStack;
833a1072
> 		pMemoryLink->NoteCurrentCallStack();
952a1192
> 	char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
969a1210,1213
> #ifdef _IA64_
>                       // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 					  "Memory block: 0x%p\tAllocated size: 0x%p bytes\nCorruption Type: ",
> #else
970a1215
> #endif
987,988c1232,1243
< 			DPF( 0, "%s%s\n", "Memory Corruption!", MessageString );
< //					DNASSERT( FALSE );
---
> 			pMemoryLink->GetCallStack( CallStackBuffer );
> 			MessageReturn = DisplayCallStack( MessageString, "Memory Corruption!", CallStackBuffer );
> 			switch ( MessageReturn )
> 			{
> 				case IDABORT:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 
> 				case IDIGNORE:
> 				{
992a1248,1256
> 					break;
> 				}
> 
> 				case IDRETRY:
> 				{
> 					DNASSERT( FALSE );
> 					break;
> 				}
> 			}
1026a1291
> 	DWORD		dwDisplayFlags;
1027a1293
> 
1030a1297
> 	fDisplayLeaks = TRUE;
1033a1301,1302
> 	dwDisplayFlags = GetProfileIntA( PROF_SECT, "MemoryLeakOutput", MEMORY_LEAK_REPORT_DPF );
> 	
1040a1310
> 		char		CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
1048a1319,1322
> #ifdef _IA64_
>         // 8/05/2000(RichGr) - IA64: GetSize() returns UINT_PTR (64-bit), so we may as well handle in hex as %d expects a DWORD.
> 		wsprintf( LeakSizeString, "0x%p bytes leaked at address 0x%p!\n", pTemp->GetSize(), pTemp->GetDataPointer() );
> #else
1049a1324
> #endif
1054,1055c1329
< 			DPF( 0, "%s%s\n", DialogTitle, LeakSizeString );
< //						DNASSERT( FALSE );
---
> 		pTemp->GetCallStack( CallStackBuffer );
1056a1331,1381
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DPF ) != 0 )
> 		{
> 			DPF( 0, "%s%s%s\n", DialogTitle, LeakSizeString, CallStackBuffer );
> 		}
> 
> 		if ( ( dwDisplayFlags & MEMORY_LEAK_REPORT_DIALOG ) != 0  )
> 		{
> 			if ( fDisplayLeaks != FALSE )
> 			{
> 				MessageReturn = DisplayCallStack( LeakSizeString, DialogTitle, CallStackBuffer );
> 				switch ( MessageReturn )
> 				{	
> 					//
> 					// stop application now
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayLeaks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// display next leak
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in the debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 
> 					//
> 					// unknown
> 					//
> 					default:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 		}
> 
1069a1395,1541
> 
> 
> #if	defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> //**********************************************************************
> //**
> //** THIS IS THE STACK TRACKING SECTION.  ONLY ADD FUNCTIONS HERE THAT ARE
> //** RELATED TO TRACKING THE CALL STACK!!
> //**
> //**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackTop - return pointer to top of stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to top of stack
> //// ------------------------------
> //static void	*DNGetStackTop( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[4]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> //
> //
> ////**********************************************************************
> //// ------------------------------
> //// DNGetStackBottom - return pointer to bottom of call stack
> ////
> //// Entry:		Nothing
> ////
> //// Exit:		Pointer to bottom of call stack
> //// ------------------------------
> //static void	*DNGetStackBottom( void )
> //{
> //	void	*pReturn;
> //
> //	_asm	mov eax,dword ptr fs:[8]
> //	_asm	mov pReturn, eax
> //	return	pReturn;
> //}
> ////**********************************************************************
> 
> 
> ////**********************************************************************
> //// ------------------------------
> //// DNGetCallStack - get a call stack
> ////
> //// Entry:		Pointer to call stack array
> ////				Number of calls to report
> ////
> //// Exit:		Nothing
> //// ------------------------------
> //static	void	DNGetCallStack( const void **const pCallStack, const UINT_PTR Depth )
> //{
> //	void		**CallersEBP;
> //	void		*ReturnAddr;
> //	UINT_PTR	i,iCount;
> //	void		*StackTop;
> //	void		*StackBottom;
> //	static const	void	*min_dll_base = NULL;
> //
> //
> //	StackTop = DNGetStackTop();
> //	StackBottom = DNGetStackBottom();
> //	memset(	pCallStack, 0x00, sizeof( *pCallStack ) * Depth );
> //
> //	_asm
> //	{
> //		mov eax,[ebp]
> //		mov CallersEBP,eax
> //	}
> //
> //	__try
> //	{
> //		//
> //		// this code can generate exception if it steps back too far...
> //		//
> //		for ( i = 0, iCount = 0; i < Depth; iCount++ )
> //		{
> //			if ( ( CallersEBP < StackBottom ) || ( CallersEBP >= StackTop ) )
> //				break;
> //			ReturnAddr = CallersEBP[ 1 ];
> //			if ( ( iCount > 0 ) || ( ReturnAddr >= min_dll_base ) ) // iCount check skips memory_alloc_debug
> //				pCallStack[ i++ ] = ReturnAddr;
> //			CallersEBP = reinterpret_cast<void**>( *CallersEBP ); // get callers callers ebp
> //		}
> //	}
> //	__except( 1 )  // went too far back on the stack, fill up rest of array with zeros
> //	{
> //		DPF( 0, "Benign access violation creating return address stack." );
> //	}
> //}
> ////**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // DisplayCallStack - display a call stack message box
> //
> // Entry:		Pointer to information string
> //				Pointer to title string
> //				Pointer to call stack string
> //
> // Exit:		Dialog return code
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "DisplayCallStack"
> 
> static int	DisplayCallStack( const char *const pszMsg, const char *const pszTitle, const char *const pCallStackString )
> {
> 	MSGBOXPARAMS	MessageBoxParams;
> 	char 			szStackTraceMsg[ CALLSTACK_BUFFER_SIZE ];
> 
> 
>     strcpy( szStackTraceMsg, pszMsg );
> 	strcat( szStackTraceMsg, pCallStackString );
> 
> 	//
> 	// display message box
> 	//
> 	memset( &MessageBoxParams, 0x00, sizeof( MessageBoxParams ) );
> 	MessageBoxParams.cbSize = sizeof( MessageBoxParams );
> 	MessageBoxParams.lpszText = szStackTraceMsg;
> 	MessageBoxParams.lpszCaption = pszTitle;
> 	MessageBoxParams.dwStyle = MB_ABORTRETRYIGNORE | MB_SETFOREGROUND | MB_TOPMOST | MB_DEFBUTTON2;
> 	MessageBoxParams.hInstance = NULL;
> 
> 	return MessageBoxIndirect( &MessageBoxParams );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> //**
> //** END OF CALL STACK TRACKING SECTION.
> //**
> //**********************************************************************
> #endif	// defined( DN_MEMORY_TRACKING ) || defined( DN_CRITICAL_SECTION_TRACKING )
> 
> 
> 
1176a1649
> 	static	BOOL	fDisplayCallStacks = TRUE;
1194a1668,1671
> 	if ( pCriticalSection->LockCount == 0 )
> 	{
> 		pCriticalSection->CallStack.NoteCurrentCallStack();
> 	}
1200a1678,1682
> 			if ( fDisplayCallStacks != FALSE )
> 			{
> 				char	CallStackBuffer[ CALLSTACK_BUFFER_SIZE ];
> 
> 
1205,1206c1687,1719
< 			    DPF( 0, "%s%s\n", "DNCritical section has been reentered!", "Check stack trace for function that originally held the lock." );
< //						DNASSERT( FALSE );
---
> 				pCriticalSection->CallStack.GetCallStackString( CallStackBuffer );
> 				switch ( DisplayCallStack( "Stack trace of function that originally held the lock:",
> 										   "DNCritical section has been reentered!",
> 										   CallStackBuffer ) )
> 				{
> 					//
> 					// don't display any more critical section warnings!
> 					//
> 					case IDABORT:
> 					{
> 						fDisplayCallStacks = FALSE;
> 						break;
> 					}
> 
> 					//
> 					// acknowledged
> 					//
> 					case IDIGNORE:
> 					{
> 						break;
> 					}
> 
> 					//
> 					// stop in debugger
> 					//
> 					case IDRETRY:
> 					{
> 						DNASSERT( FALSE );
> 						break;
> 					}
> 				}
> 			}
> 
1242a1756
> 		memset( &pCriticalSection->CallStack, 0x00, sizeof( pCriticalSection->CallStack ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\osind.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21,22
> #include	"CallStack.h"
> 
46a49,51
> #define	DN_MEMORY_CALL_STACK_DEPTH				12
> #define	DN_CRITICAL_SECTION_CALL_STACK_DEPTH	10
> 
70a76
> 	CCallStack< DN_CRITICAL_SECTION_CALL_STACK_DEPTH > 	CallStack;
93d98
< DEFINE_GUID(GUID_NULL, 0L, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
103a109,120
> 
> //
> // Function to get OS version.  Supported returns:
> //	VER_PLATFORM_WIN32_WINDOWS
> //	VER_PLATFORM_WIN32_NT
> //	VER_PLATFORM_WIN32s
> //	
> //
> UINT_PTR	DNGetOSType( void );
> HINSTANCE	DNGetApplicationInstance( void );
> 
> #define		IsUnicodePlatform (DNGetOSType() == VER_PLATFORM_WIN32_NT)
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
145a146,218
> // CPackedBuffer::AddStringToBack
> //
> // Entry:		Pointer to source string
> //
> // Exit:		Error Code:	DPN_OK					if able to add
> //							DPNERR_BUFFERTOOSMALL	if buffer is full
> // ------------------------------
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CPackedBuffer::AddStringToBack"
> HRESULT CPackedBuffer::AddStringToBack( const char *const pszString )
> {
> 	HRESULT	hr;
> 	DWORD	dwStringSize;
> 	DWORD	dwBufferSize;
> 
> 
> 	DNASSERT( pszString != NULL );
> 	
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	dwStringSize = 0;
> 	hr = STR_AnsiToWide( pszString,
> 						 -1,
> 						 NULL,
> 						 &dwStringSize );
> 	if ( hr != DPNERR_BUFFERTOOSMALL )
> 	{
> 		DNASSERT( hr != DPN_OK );
> 		goto Failure;
> 	}
> 	
> 	dwBufferSize = dwStringSize * sizeof( WCHAR );
> 	m_dwRequired += dwBufferSize;
> 	if ( !m_bBufferTooSmall )
> 	{
> 		if (m_dwRemaining >= dwBufferSize)
> 		{
> 			m_pTail -= dwBufferSize;
> 			m_dwRemaining -= dwBufferSize;
> 			hr = STR_AnsiToWide( pszString,
> 								 -1,
> 								 reinterpret_cast<WCHAR*>( m_pTail ),
> 								 &dwStringSize );
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			DNASSERT( ( dwStringSize * sizeof( WCHAR ) ) == dwBufferSize );
> 		}
> 		else
> 		{
> 			m_bBufferTooSmall = TRUE;
> 		}
> 	}
> 
> 	if ( m_bBufferTooSmall )
> 	{
> 		hr = DPNERR_BUFFERTOOSMALL;
> 	}
> 
> Exit:
> 	return	hr;
> 
> Failure:
> 	goto Exit;
> }
> //**********************************************************************
> // ------------------------------
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\packbuff.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63
> 	HRESULT	AddStringToBack( const char *const pszString );
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\inc
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15c43,47
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
17,18c49,52
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> INCLUDES=$(DXROOT)\inc;..\inc
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21d54
< MSC_WARNING_LEVEL=/W3 /WX
22a56,62
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
29a70
>         creg.cpp \
35c76,87
< TARGETLIBS=
---
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
26a27,28
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_WideToAnsi"
28c30,53
< // BUGBUG: [mgere] [xbox] UnicodeToMultiByteN and MultiByteToUnicodeN were Taken from nlsxlat.c
---
> //**********************************************************************
> // ------------------------------
> // WideToANSI - convert a wide string to an ANSI string
> //
> // Entry:		Pointer to source wide string
> //				Size of source string (in WCHAR units, -1 implies NULL-terminated)
> //				Pointer to ANSI string destination
> //				Pointer to size of ANSI destination
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength )
> {
> 	HRESULT	hr;
> 	int		iReturn;
> 	BOOL	fDefault;
> 	char	cMilleniumHackBuffer;	
> 	char	*pMilleniumHackBuffer;
30,35d54
< HRESULT
< UnicodeToMultiByteN(
<     OUT PCH MultiByteString,
<     IN ULONG MaxBytesInMultiByteString,
<     IN PWCH UnicodeString,
<     IN ULONG BytesInUnicodeString)
37c56,58
< /*++
---
> 	DNASSERT( pWCHARString != NULL );
> 	DNASSERT( pdwStringLength != NULL );
> 	DNASSERT( ( pString != NULL ) || ( *pdwStringLength == 0 ) );
39c60,65
< Routine Description:
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
41,43c67,74
<     This functions converts the specified unicode source string into an
<     ansi string. The translation is done with respect to the
<     ANSI Code Page (ACP) loaded at boot time.
---
> 	if ( *pdwStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &cMilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pString;
> 	}
45c76,88
< Arguments:
---
> 	fDefault = FALSE;
> 	iReturn = WideCharToMultiByte( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pWCHARString,			// pointer to WCHAR string
> 								   dwWCHARStringLength,		// size of WCHAR string
> 								   pMilleniumHackBuffer,	// pointer to destination ANSI string
> 								   *pdwStringLength,		// size of destination string
> 								   NULL,					// pointer to default for unmappable characters (none)
> 								   &fDefault				// pointer to flag indicating that default was used
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
47,49d89
<     MultiByteString - Returns an ansi string that is equivalent to the
<         unicode source string.  If the translation can not be done,
<         an error is returned.
51,53c91,105
<     MaxBytesInMultiByteString - Supplies the maximum number of bytes to be
<         written to MultiByteString.  If this causes MultiByteString to be a
<         truncated equivalent of UnicodeString, no error condition results.
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert WCHAR to multi-byte!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
55,56c107,108
<     BytesInMultiByteString - Returns the number of bytes in the returned
<         ansi string pointed to by MultiByteString.
---
> 		*pdwStringLength = iReturn;
> 	}
58,59c110,114
<     UnicodeString - Supplies the unicode source string that is to be
<         converted to ansi.
---
> 	//
> 	// if you hit this ASSERT it's because you've probably got ASCII text as your
> 	// input WCHAR string.  Double-check your input!!
> 	//
> 	DNASSERT( fDefault == FALSE );
61,62c116,118
<     BytesInUnicodeString - The number of bytes in the the string pointed to by
<         UnicodeString.
---
> 	return	hr;
> }
> //**********************************************************************
64d119
< Return Value:
66,69c121,140
<     SUCCESS - The conversion was successful
< 
< --*/
< 
---
> //**********************************************************************
> // ------------------------------
> // ANSIToWide - convert an ANSI string to a wide string
> //
> // Entry:		Pointer to source multi-byte (ANSI) string
> //				Size of source string (-1 imples NULL-terminated)
> //				Pointer to multi-byte string destination
> //				Pointer to size of multi-byte destination (in WCHAR units)
> //
> // Exit:		Error code:
> //				DPNERR_GENERIC = operation failed
> //				DPN_OK = operation succeded
> //				DPNERR_BUFFERTOOSMALL = destination buffer too small
> // ------------------------------
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_AnsiToWide"
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength )
71,72c142,145
<     ULONG LoopCount;
<     ULONG CharsInUnicodeString;
---
> 	HRESULT	hr;
> 	int		iReturn;
> 	WCHAR	MilleniumHackBuffer;
> 	WCHAR	*pMilleniumHackBuffer;
74d146
<     CharsInUnicodeString = BytesInUnicodeString / sizeof(WCHAR);
76,77c148,150
<     LoopCount = (CharsInUnicodeString < MaxBytesInMultiByteString) ?
<                  CharsInUnicodeString : MaxBytesInMultiByteString;
---
> 	DNASSERT( pString != NULL );
> 	DNASSERT( pdwWCHARStringLength != NULL );
> 	DNASSERT( ( pWCHARString != NULL ) || ( *pdwWCHARStringLength == 0 ) );
79c152,157
<     while (LoopCount) {
---
> 	//
> 	// Initialize.  A hack needs to be implemented because their paramter
> 	// validation is screwed and when you pass zero for a destination size, you
> 	// MUST have a valid pointer.  Works on Win95, 98, NT4, Win2K, etc.....
> 	//
> 	hr = DPN_OK;
81c159,177
<         *MultiByteString = (*UnicodeString < 256) ? (UCHAR)*UnicodeString : '?';
---
> 	if ( *pdwWCHARStringLength == 0 )
> 	{
> 		pMilleniumHackBuffer = &MilleniumHackBuffer;
> 	}
> 	else
> 	{
> 		pMilleniumHackBuffer = pWCHARString;
> 	}
> 	
> 	iReturn = MultiByteToWideChar( CP_ACP,					// code page (default ANSI)
> 								   0,						// flags (none)
> 								   pString,					// pointer to multi-byte string			
> 								   dwStringLength,			// size of string (assume null-terminated)
> 								   pMilleniumHackBuffer,	// pointer to destination wide-char string
> 								   *pdwWCHARStringLength	// size of destination in WCHARs
> 								   );
> 	if ( iReturn == 0 )
> 	{
> 		DWORD	dwError;
83,86d178
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
88,89c180,194
<     return DPN_OK;
< }
---
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to convert multi-byte to WCHAR!" );
> 		DisplayDNError( 0, dwError );
> 		hr = DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		if ( *pdwWCHARStringLength == 0 )
> 		{
> 			hr = DPNERR_BUFFERTOOSMALL;
> 		}
> 		else
> 		{
> 			DNASSERT( hr == DPN_OK );
> 		}
90a196,197
> 		*pdwWCHARStringLength = iReturn;
> 	}
92,157c199
< HRESULT
< MultiByteToUnicodeN(
<     OUT PWCH UnicodeString,
<     IN ULONG MaxBytesInUnicodeString,
<     IN PCH MultiByteString,
<     IN ULONG BytesInMultiByteString)
< 
< /*++
< 
< Routine Description:
< 
<     This functions converts the specified ansi source string into a
<     Unicode string. The translation is done with respect to the
<     ANSI Code Page (ACP) installed at boot time.  Single byte characters
<     in the range 0x00 - 0x7f are simply zero extended as a performance
<     enhancement.  In some far eastern code pages 0x5c is defined as the
<     Yen sign.  For system translation we always want to consider 0x5c
<     to be the backslash character.  We get this for free by zero extending.
< 
<     NOTE: This routine only supports precomposed Unicode characters.
< 
< Arguments:
< 
<     UnicodeString - Returns a unicode string that is equivalent to
<         the ansi source string.
< 
<     MaxBytesInUnicodeString - Supplies the maximum number of bytes to be
<         written to UnicodeString.  If this causes UnicodeString to be a
<         truncated equivalent of MultiByteString, no error condition results.
< 
<     BytesInUnicodeString - Returns the number of bytes in the returned
<         unicode string pointed to by UnicodeString.
< 
<     MultiByteString - Supplies the ansi source string that is to be
<         converted to unicode.  For single-byte character sets, this address
<         CAN be the same as UnicodeString.
< 
<     BytesInMultiByteString - The number of bytes in the string pointed to
<         by MultiByteString.
< 
< Return Value:
< 
<     SUCCESS - The conversion was successful.
< 
< 
< --*/
< 
< {
<     ULONG LoopCount;
<     ULONG MaxCharsInUnicodeString;
< 
<     MaxCharsInUnicodeString = MaxBytesInUnicodeString / sizeof(WCHAR);
< 
<     LoopCount = (MaxCharsInUnicodeString < BytesInMultiByteString) ?
<                  MaxCharsInUnicodeString : BytesInMultiByteString;
< 
<     while (LoopCount) {
< 
<         *UnicodeString = (WCHAR)(UCHAR)(*MultiByteString);
< 
<         UnicodeString++;
<         MultiByteString++;
<         LoopCount--;
<     }
< 
<     return DPN_OK;
---
> 	return	hr;
158a201
> //**********************************************************************
160a204
> 
182a227,229
> 	int rval;
> 	BOOL bDefault = FALSE;
> 
190c237,247
< 	UnicodeToMultiByteN( lpStr, cchStr, (PWCH) lpWStr, cchStr*sizeof(WCHAR));
---
> 	// use the default code page (CP_ACP)
> 	// -1 indicates WStr must be null terminated
> 	rval = WideCharToMultiByte(CP_ACP,0,lpWStr,-1,lpStr,cchStr,
> 			NULL,&bDefault);
> 
> 	if (bDefault)
> 	{
> 		DPF(3,"!!! WARNING - used default string in WideToAnsi conversion.!!!");
> 		DPF(3,"!!! Possible bad unicode string - (you're not hiding ansi in there are you?) !!! ");
> 		return DPNERR_CONVERSION;
> 	}
196a254,282
> //	WideToAnsi
> //
> //	Convert a WCHAR (Wide) string to a CHAR (ANSI) string
> //
> //	CHAR	*pStr		CHAR string
> //	WCHAR	*pWStr		WCHAR string
> //	int		iStrSize	size (in bytes) of buffer pointed to by lpStr
> #undef DPF_MODNAME
> #define DPF_MODNAME "STR_AllocAndConvertToANSI"
> /*
>  ** GetAnsiString
>  *
>  *  CALLED BY: Everywhere
>  *
>  *  PARAMETERS: *ppszAnsi - pointer to string
>  *				lpszWide - string to copy
>  *
>  *  DESCRIPTION:	  handy utility function
>  *				allocs space for and converts lpszWide to ansi
>  *
>  *  RETURNS: string length
>  *
>  */
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide)
> {
> 	int iStrLen;
> 	BOOL bDefault;
> 	
> 	DNASSERT(ppszAnsi);
197a284,288
> 	if (!lpszWide)
> 	{
> 		*ppszAnsi = NULL;
> 		return S_OK;
> 	}
198a290,303
> 	*ppszAnsi = new char[wcslen(lpszWide)+1];
> 	if (!*ppszAnsi)	
> 	{
> 		DPF(0, "could not get ansi string -- out of memory");
> 		return E_OUTOFMEMORY;
> 	}
> 
> 	iStrLen = WideCharToMultiByte(CP_ACP,0,lpszWide,-1,*ppszAnsi,wcslen(lpszWide)+1,
> 			NULL,&bDefault);
> 
> 	return DPN_OK;
> } // OSAL_AllocAndConvertToANSI
> 
> 
218a324,325
> 	int rval;
> 
226,228c333,342
< 	MultiByteToUnicodeN( lpWStr, cchWStr*sizeof(WCHAR), (CHAR *) lpStr, cchWStr );
< 
< 	return DPN_OK;
---
> 	rval =  MultiByteToWideChar(CP_ACP,0,lpStr,-1,lpWStr,cchWStr);
> 	if (!rval)
> 	{
> 		DPF(0,"MultiByteToWideChar failed in STR_jkAnsiToWide");
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\common\strutils.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> HRESULT STR_AllocAndConvertToANSI(LPSTR * ppszAnsi,LPCWSTR lpszWide);
21a23,31
> HRESULT	STR_WideToAnsi( const WCHAR *const pWCHARString,
> 						const DWORD dwWCHARStringLength,
> 						char *const pString,
> 						DWORD *const pdwStringLength );
> 
> HRESULT	STR_AnsiToWide( const char *const pString,
> 						const DWORD dwStringLength,
> 						WCHAR *const pWCHARString,
> 						DWORD *const pdwWCHARStringLength );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <stdio.h>
26a28,30
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
773a778,801
> 	return(hResultCode);
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CApplicationDecs::RegisterWithDPNSVR"
> 
> HRESULT	CApplicationDesc::RegisterWithDPNSVR( IDirectPlay8Address *const pListenAddr )
> {
> 	HRESULT		hResultCode;
> 
> 	hResultCode = DPNSVR_Register( &m_guidApplication,&m_guidInstance,pListenAddr );
> 	return(hResultCode);
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "CApplicationDecs::UnregisterWithDPNSVR"
> 
> HRESULT CApplicationDesc::UnregisterWithDPNSVR( void )
> {
> 	HRESULT		hResultCode;
> 
> 	hResultCode = DPNSVR_UnRegister( &m_guidApplication,&m_guidInstance );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\appdesc.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
111a112,115
> 	HRESULT	CApplicationDesc::RegisterWithDPNSVR( IDirectPlay8Address *const pListenAddr );
> 
> 	HRESULT CApplicationDesc::UnregisterWithDPNSVR( void );
> 
152a157,165
> 		};
> 
> 	BOOL UseDPNSVR( void )
> 		{
> 			if (m_dwFlags & DPNSESSION_NODPNSVR)
> 			{
> 				return( FALSE );
> 			}
> 			return( TRUE );
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
153c153,155
< #include <mmsystem.h>
---
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
218,219c220
< // BUGBUG: [mgere] [xbox] Completely removed this function since Xbox doesn't have multiple adapters.
< /*
---
> 
334d334
< */
420,421c420
< // BUGBUG: [mgere] [xbox] Need to figure out what to do with this.  We can't enumerate adapters.
< /*
---
> 
475c474
< */
---
> 
532c531
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
554c553
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
708d706
< // BUGBUG: [mgere] [xbox] This shouldn't be needed since we don't have multiple adapters.
1253c1251
< 		//	generate a completion for the buffer.
---
> 		//	generate a completion for the buffer.
1298,1299c1296,1297
< 	WCHAR			DP8ABuffer[512];
< 	WCHAR			DP8ABuffer2[512];
---
> 	CHAR			DP8ABuffer[512];
> 	CHAR			DP8ABuffer2[512];
1315c1313
< 	pRemoteAddr->lpVtbl->GetURLW(pRemoteAddr,DP8ABuffer,&DP8ASize);
---
> 	pRemoteAddr->lpVtbl->GetURLA(pRemoteAddr,DP8ABuffer,&DP8ASize);
1318c1316
< 	pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer2,&DP8ASize);
---
> 	pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer2,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\async.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
128,129c128
< // BUGBUG: [mgere] [xbox] Removed (see cpp file)
< /*
---
> 
135c134
< */
---
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #include "dplobby8.h"
260a262,281
> 	/*
> 	*
> 	*	TIME BOMB
> 	*
> 	*/
> 
> #ifndef DX_FINAL_RELEASE
> {
> #pragma message("BETA EXPIRATION TIME BOMB!  Remove for final build!")
> 	SYSTEMTIME st;
> 	GetSystemTime(&st);
> 
> 	if ( st.wYear > DX_EXPIRE_YEAR || ((st.wYear == DX_EXPIRE_YEAR) && (MAKELONG(st.wDay, st.wMonth) > MAKELONG(DX_EXPIRE_DAY, DX_EXPIRE_MONTH))) )
> 	{
> 		MessageBox(0, DX_EXPIRE_TEXT,TEXT("Microsoft Direct Play"), MB_OK);
> //		return E_FAIL;
> 	}
> }
> #endif
> 
324a346,347
> 	pdnObject->pIDP8LobbiedApplication = NULL;
> 	pdnObject->dpnhLobbyConnection = NULL;
920a944,949
> 	if( pdnObject->pIDP8LobbiedApplication)
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release( pdnObject->pIDP8LobbiedApplication );
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1087c1116
< 	{
---
> 	{
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\client.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
64d63
< #include <wchar.h>
102c101
< typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ClientRegisterLobby(IDirectPlay8Client *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
179a180
> #include "DPLobby8.h"
209a211
> #include "DNMisc.h"
219a222,224
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
221,222d225
< #include <mmsystem.h>
< #include <wchar.h>
721a725,733
> 	pdnObject->dpnhLobbyConnection = NULL;
> 
> 	// Release our hold on the lobbiedapplication
> 	if( pdnObject->pIDP8LobbiedApplication) 
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 	}
> 
1164a1177,1180
> 	if (dwFlags & DPNCONNECT_OKTOQUERYFORADDRESSING)
> 	{
> 		dwConnectFlags |= DPNCONNECT_OKTOQUERYFORADDRESSING;
> 	}
1282d1297
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
1298,1300d1312
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
1331d1342
< */
1948a1960,1967
> 	//	Update Lobby status
> 	//
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 
> 	//
2143c2162
< 	{
---
> 	{
2723a2743,2747
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
2738a2763,2770
> 	//
> 	//	Register with DPNSVR
> 	//
> 	if (pdnObject->ApplicationDesc.UseDPNSVR())
> 	{
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
4083c4115
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
4134c4166
< 		pAddrHost->lpVtbl->GetURLW(pAddrHost,DP8ABuffer,&DP8ASize);
---
> 		pAddrHost->lpVtbl->GetURLA(pAddrHost,DP8ABuffer,&DP8ASize);
4141c4173
< 		pDeviceInfo->lpVtbl->GetURLW(pDeviceInfo,DP8ABuffer,&DP8ASize);
---
> 		pDeviceInfo->lpVtbl->GetURLA(pDeviceInfo,DP8ABuffer,&DP8ASize);
4256c4288
< 	pIHost->lpVtbl->GetURLW(pIHost,DP8ABuffer,&DP8ASize);
---
> 	pIHost->lpVtbl->GetURLA(pIHost,DP8ABuffer,&DP8ASize);
4260c4292
< 	pIDevice->lpVtbl->GetURLW(pIDevice,DP8ABuffer,&DP8ASize);
---
> 	pIDevice->lpVtbl->GetURLA(pIDevice,DP8ABuffer,&DP8ASize);
4324c4356
< 	//
---
> 	//
4342d4373
< // BUGBUG: [mgere] [xbox] Set breakpoint here and see if it ever gets in here.
4358,4360d4388
< // BUGBUG: [mgere] [xbox] I know this is busted.  Remove this whole section about enumerating adapters
< // and check if it's ok.
< /*
4392d4419
< */
5080c5107
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
5083c5110,5179
< 	return DPNERR_UNSUPPORTED;
---
> 	DIRECTNETOBJECT		*pdnObject;
> 	HRESULT             hResultCode;
> 
> 	DPF(3,"Parameters: pInterface [0x%p], pIDP8LobbiedApplication [0x%p], dwFlags [0x%lx]",
> 			pInterface,pIDP8LobbiedApplication,dwFlags);
> 
> 	TRY
> 	{
>     	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
>     	DNASSERT(pdnObject != NULL);
> 
>     	if( pdnObject->dwFlags & DN_OBJECT_FLAG_PARAMVALIDATION )
>     	{
>     	    if( FAILED( hResultCode = DN_ValidateRegisterLobby( pInterface, dpnhLobbyConnection, pIDP8LobbiedApplication, dwFlags ) ) )
>     	    {
>     	        DPFERR( "Error validating register lobby params" );
>     	        DPF_RETURN( hResultCode );
>     	    }
>     	}
> 
>     	// Check to ensure message handler registered
>     	if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_INITIALIZED))
>     	{
>     		DPFERR( "Object is not initialized" );
>     		DPF_RETURN(DPNERR_UNINITIALIZED);
>     	}
> 
> 	}
> 	EXCEPT(EXCEPTION_EXECUTE_HANDLER)
> 	{
> 	    DPFERR("Invalid object" );
> 	    DPF_RETURN(DPNERR_INVALIDOBJECT);
> 	}	
> 
> 	pdnObject = static_cast<DIRECTNETOBJECT*>(GET_OBJECT_FROM_INTERFACE(pInterface));
> 	DNASSERT(pdnObject != NULL);
> 
> 	if (dwFlags == DPNLOBBY_REGISTER)
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE)
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_ALREADYREGISTERED);
> 		}
> 				
> 		pIDP8LobbiedApplication->lpVtbl->AddRef(pIDP8LobbiedApplication);
> 
> 		pdnObject->pIDP8LobbiedApplication = pIDP8LobbiedApplication;
> 		pdnObject->dpnhLobbyConnection = dpnhLobbyConnection;
> 		pdnObject->dwFlags |= DN_OBJECT_FLAG_LOBBY_AWARE;
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 	else
> 	{
> 		DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 		if (!(pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE))
> 		{
> 			DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 			return(DPNERR_NOTREGISTERED);
> 		}
> 				
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->Release(pdnObject->pIDP8LobbiedApplication);
> 		pdnObject->dpnhLobbyConnection = NULL;
> 		pdnObject->pIDP8LobbiedApplication = NULL;
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_LOBBY_AWARE);
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	}
> 
> 	return(DPN_OK);
5085a5182,5204
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNNotifyLobbyClientOfSettings"
> // 
> // DNNotifyLobbyClientOfSettings
> //
> // This function sends a connection settings update to the lobby client informing it that the lobby 
> // client settings have changed.  
> //
> HRESULT DNNotifyLobbyClientOfSettings(
> 	DIRECTNETOBJECT * const pdnObject,
> 	IDirectPlay8LobbiedApplication *pdpLobbiedApp, 
> 	DPNHANDLE dpnConnection, 
> 	IDirectPlay8Address *pHostAddress, 
> 	IDirectPlay8Address *pConnectFromAddress )
> {
> 	HRESULT						hResultCode = DPN_OK;
> 	DPL_CONNECTION_SETTINGS		dplConnectionSettings;
> 	BOOL						fIsHost = FALSE;
> 	CPackedBuffer				packBuffer;
> 	PBYTE						pBuffer = NULL;
> 	BOOL						fINCriticalSection = FALSE;
> 	CNameTableEntry				*pNTEntry = NULL;
> 	DWORD						dwIndex;
5086a5206,5351
> 	fIsHost = DN_CHECK_LOCALHOST( pdnObject );
> 
> 	ZeroMemory( &dplConnectionSettings, sizeof( DPL_CONNECTION_SETTINGS ) );
> 	dplConnectionSettings.dwSize = sizeof( DPL_CONNECTION_SETTINGS );
> 	dplConnectionSettings.dwFlags = (fIsHost) ? DPLCONNECTSETTINGS_HOST : 0;
> 
> 	// Lock the object while we make a copy of the app desc.  
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = TRUE;
> 	
> 	// Determine the size of buffer
> 	packBuffer.Initialize(NULL, 0 );
> 	hResultCode = pdnObject->ApplicationDesc.Pack(&packBuffer,DN_APPDESCINFO_FLAG_SESSIONNAME|DN_APPDESCINFO_FLAG_RESERVEDDATA|
> 			DN_APPDESCINFO_FLAG_APPRESERVEDDATA);
> 
> 	if( hResultCode != DPNERR_BUFFERTOOSMALL ) 
> 	{
> 		DPF( 0, "Error getting app desc size hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	pBuffer = new BYTE[packBuffer.GetSizeRequired()];
> 
> 	if( !pBuffer )
> 	{
> 		DPF( 0, "Error allocating memory for buffer" );
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	packBuffer.Initialize(pBuffer,packBuffer.GetSizeRequired());
> 	hResultCode = pdnObject->ApplicationDesc.Pack(&packBuffer,DN_APPDESCINFO_FLAG_SESSIONNAME|DN_APPDESCINFO_FLAG_RESERVEDDATA|
> 			DN_APPDESCINFO_FLAG_APPRESERVEDDATA);
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error packing app desc hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	fINCriticalSection = FALSE;
> 
> 	memcpy( &dplConnectionSettings.dpnAppDesc, pBuffer, sizeof( DPN_APPLICATION_DESC ) );
> 
> 	hResultCode = pdnObject->NameTable.GetLocalPlayerRef( &pNTEntry );
> 
> 	if( FAILED( hResultCode ) )
> 	{
> 		DPF( 0, "Error getting local player hr=0x%x", hResultCode );
> 		goto NOTIFY_EXIT;
> 	}
> 
> 	// Make sure player name isn't changed while we are working with the entry
> 	pNTEntry->Lock();
> 	if( pNTEntry->GetName() )
> 	{
> 		dplConnectionSettings.pwszPlayerName = new WCHAR[wcslen(pNTEntry->GetName())+1];
> 
> 		if( !dplConnectionSettings.pwszPlayerName )
> 		{
> 			pNTEntry->Unlock();
> 			DPF( 0, "Error allocating memory" );
> 			goto NOTIFY_EXIT;
> 		}
> 		
> 		wcscpy( dplConnectionSettings.pwszPlayerName, pNTEntry->GetName() );
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pwszPlayerName = NULL;		
> 	}
> 	pNTEntry->Unlock();
> 
> 	// Release our reference
> 	pNTEntry->Release();
> 
> 	// Host address field
> 	if( fIsHost )
> 	{
> 		dplConnectionSettings.pdp8HostAddress = NULL;
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( hResultCode != DPNERR_BUFFERTOOSMALL )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		dplConnectionSettings.ppdp8DeviceAddresses = new IDirectPlay8Address*[dplConnectionSettings.cNumDeviceAddresses];
> 
> 		if( !dplConnectionSettings.ppdp8DeviceAddresses )
> 		{
> 			DPF( 0, "Error allocating memory" );
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			hResultCode = DPNERR_OUTOFMEMORY;
> 			goto NOTIFY_EXIT;
> 		}
> 
> 		hResultCode = DNGetHostAddressHelper( pdnObject, dplConnectionSettings.ppdp8DeviceAddresses, &dplConnectionSettings.cNumDeviceAddresses );
> 
> 		if( FAILED( hResultCode ) )
> 		{
> 			dplConnectionSettings.cNumDeviceAddresses = 0;
> 			DPF( 0, "Could not get host addresses for lobby update hr=0x%x", hResultCode );
> 			goto NOTIFY_EXIT;
> 		}
> 	}
> 	else
> 	{
> 		dplConnectionSettings.pdp8HostAddress = pHostAddress;
> 		dplConnectionSettings.ppdp8DeviceAddresses = &pConnectFromAddress;
> 		dplConnectionSettings.cNumDeviceAddresses = 1;	
> 	}
> 
> 	// Update the settings
> 	hResultCode = pdpLobbiedApp->lpVtbl->SetConnectionSettings( pdpLobbiedApp, dpnConnection, &dplConnectionSettings, 0 );
> 
> NOTIFY_EXIT:
> 
> 	if( dplConnectionSettings.ppdp8DeviceAddresses && fIsHost )
> 	{
> 		for( dwIndex = 0; dwIndex < dplConnectionSettings.cNumDeviceAddresses; dwIndex++ )
> 		{
> 			dplConnectionSettings.ppdp8DeviceAddresses[dwIndex]->lpVtbl->Release( dplConnectionSettings.ppdp8DeviceAddresses[dwIndex] );
> 		}
> 
> 		delete [] dplConnectionSettings.ppdp8DeviceAddresses;
> 	}
> 
> 	if( dplConnectionSettings.pwszPlayerName )
> 		delete [] dplConnectionSettings.pwszPlayerName;
> 
> 	if( fINCriticalSection ) 
> 		DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if( pBuffer )
> 		delete [] pBuffer;
> 
> 	return hResultCode;
> 
> }
> 
> 
5087a5353,5433
> #define DPF_MODNAME "DNUpdateLobbyStatus"
> 
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus)
> {
> 	HRESULT		hResultCode;
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	DPNHANDLE dpnhLobbyConnection = NULL;
> 	IDirectPlay8Address *pHostAddress = NULL;
> 	IDirectPlay8Address *pConnectFromAddress = NULL;
> 
> 	DPF(4,"Parameters: dwStatus [0x%lx]",dwStatus);
> 
> 	DNASSERT(pdnObject != NULL);
> 
> 	pIDP8LobbiedApplication = NULL;
> 
> 	//
> 	//	Get lobbied application interface, if it exists and other settings we need
> 	//
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if ((pdnObject->dwFlags & DN_OBJECT_FLAG_LOBBY_AWARE) && (pdnObject->pIDP8LobbiedApplication))
> 	{
> 		pdnObject->pIDP8LobbiedApplication->lpVtbl->AddRef(pdnObject->pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = pdnObject->pIDP8LobbiedApplication;
> 		dpnhLobbyConnection = pdnObject->dpnhLobbyConnection;
> 
> 		pConnectFromAddress = pdnObject->pIDP8ADevice;
> 		pHostAddress = pdnObject->pConnectAddress;
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->AddRef( pConnectFromAddress );			
> 		}
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->AddRef( pHostAddress );
> 		}
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	//
> 	//	Update status and release object
> 	//
> 	if (pIDP8LobbiedApplication)
> 	{
> 		// If we are about to do a connection notification
> 		// we send the updated connection settings.  
> 		// 
> 		// This gives lobby client full picture. 
> 		//
> 		if( dwStatus == DPLSESSION_CONNECTED )
> 		{
> 			DNNotifyLobbyClientOfSettings(pdnObject, pIDP8LobbiedApplication, dpnhLobbyConnection, pHostAddress, pConnectFromAddress );
> 		}
> 
> 		pIDP8LobbiedApplication->lpVtbl->UpdateStatus(pIDP8LobbiedApplication,dpnhLobbyConnection,dwStatus,0);
> 
> 		pIDP8LobbiedApplication->lpVtbl->Release(pIDP8LobbiedApplication);
> 		pIDP8LobbiedApplication = NULL;
> 
> 		if( pHostAddress )
> 		{
> 			pHostAddress->lpVtbl->Release( pHostAddress );
> 		}		
> 
> 		if( pConnectFromAddress )
> 		{
> 			pConnectFromAddress->lpVtbl->Release( pConnectFromAddress );
> 		}
> 	}
> 
> 	hResultCode = DPN_OK;
> 
> 	DPF(4,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 						
> #undef DPF_MODNAME
5448a5795,5992
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterWithDPNSVR"
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject)
> {
> 	DPF(6,"Parameters: (none)");
> 
> 	HRESULT		hResultCode;
> 	CAsyncOp	*pListenParent;
> 
> 	hResultCode = DPNERR_GENERIC;
> 	pListenParent = NULL;
> 
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->pListenParent)
> 	{
> 		pdnObject->pListenParent->AddRef();
> 		pListenParent = pdnObject->pListenParent;
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 
> 	if (pListenParent)
> 	{
> 		BOOL		fCoUninitialize = FALSE;
> 		CBilink		*pBilinkSP;
> 		CBilink		*pBilink;
> 		CAsyncOp	*pListenSP;
> 		CAsyncOp	*pAsyncOp;
> 		CAsyncOp	**ListenList;
> 		DWORD		dwCount;
> 		DWORD		dwActual;
> 
> 		if (SUCCEEDED(COM_CoInitialize(NULL)))
> 		{
> 			fCoUninitialize = TRUE;
> 		}
> 
> 		dwCount = 0;
> 		dwActual = 0;
> 		ListenList = NULL;
> 
> 		pListenParent->Lock();
> 
> 		pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 		while (pBilinkSP != &pListenParent->m_bilinkParent)
> 		{
> 			pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 			pListenSP->Lock();
> 
> 			pBilink = pListenSP->m_bilinkParent.GetNext();
> 			while (pBilink != &pListenSP->m_bilinkParent)
> 			{
> 				dwCount++;
> 				pBilink = pBilink->GetNext();
> 			}
> 			pListenSP->Unlock();
> 
> 			pBilinkSP = pBilinkSP->GetNext();
> 		}
> 
> 		if (dwCount > 0)
> 		{
> 			if ((ListenList = static_cast<CAsyncOp**>(DNMalloc(dwCount*sizeof(CAsyncOp*)))) != NULL)
> 			{
> 				pBilinkSP = pListenParent->m_bilinkParent.GetNext();
> 				while (pBilinkSP != &pListenParent->m_bilinkParent)
> 				{
> 					pListenSP = CONTAINING_OBJECT(pBilinkSP,CAsyncOp,m_bilinkChildren);
> 					pListenSP->Lock();
> 
> 					pBilink = pListenSP->m_bilinkParent.GetNext();
> 					while (pBilink != &pListenSP->m_bilinkParent)
> 					{
> 						pAsyncOp = CONTAINING_OBJECT(pBilink,CAsyncOp,m_bilinkChildren);
> 						pAsyncOp->AddRef();
> 						ListenList[dwActual] = pAsyncOp;
> 
> 						dwActual++;
> 						if (dwActual > dwCount)
> 						{
> 							DNASSERT(FALSE);
> 							break;
> 						}
> 						pBilink = pBilink->GetNext();
> 					}
> 					pListenSP->Unlock();
> 					pBilinkSP = pBilinkSP->GetNext();
> 				}
> 			}
> 		}
> 
> 		pListenParent->Unlock();
> 
> 		if ((ListenList != NULL) && (dwActual > 0))
> 		{
> 			DWORD	dw;
> 
> 			for (dw = 0 ; dw < dwActual ; dw++)
> 			{
> 				if (ListenList[dw]->GetProtocolHandle() != 0)
> 				{
> 					if (DNRegisterListenWithDPNSVR(pdnObject,ListenList[dw]->GetProtocolHandle()) == DPN_OK)
> 					{
> 						hResultCode = DPN_OK;
> 					}
> 				}
> 
> 				ListenList[dw]->Release();
> 				ListenList[dw] = NULL;
> 			}
> 
> 			DNFree(ListenList);
> 			ListenList = NULL;
> 		}
> 
> 		if (fCoUninitialize)
> 		{
> 			COM_CoUninitialize();
> 		}
> 
> 		pListenParent->Release();
> 		pListenParent = NULL;
> 	}
> 
> 	DPF(6,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
> }
> 
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DNRegisterListenWithDPNSVR"
> 
> HRESULT DNRegisterListenWithDPNSVR(DIRECTNETOBJECT *const pdnObject,
> 								   const HANDLE hProtocol)
> {
> 	HRESULT	hResultCode;
> 	DWORD	dwRetry;
> 	SPGETADDRESSINFODATA	spInfo;
> #ifdef	DEBUG
> 	CHAR	DP8ABuffer[512];
> 	DWORD	DP8ASize;
> #endif
> 
> 	DPF(6,"Parameters: hProtocol [0x%lx]",hProtocol);
> 
> 	//
> 	//	Determine the address we're actually listening on
> 	//
> 	spInfo.hEndpoint = hProtocol;
> 	spInfo.pAddress = NULL;
> 	spInfo.Flags = SP_GET_ADDRESS_INFO_LOCAL_ADAPTER;
> 	if ((hResultCode = DNPGetListenAddressInfo(hProtocol,&spInfo)) == DPN_OK)
> 	{
> 		DNASSERT(spInfo.pAddress != NULL);
> #ifdef	DEBUG
> 		DP8ASize = 512;
> 		spInfo.pAddress->lpVtbl->GetURLA(spInfo.pAddress,DP8ABuffer,&DP8ASize);
> 		DPF(7,"Listen address [%s]",DP8ABuffer);
> #endif
> 
> 		//
> 		//	We re-try the registration to catch the case where DPNSVR is shutting
> 		//	down while we are trying to register.  Unlikely but has to be handled.
> 		//
> 		for( dwRetry = 0; dwRetry < DPNSVR_REGISTER_ATTEMPTS ; dwRetry ++ )
> 		{
>     		if ((hResultCode = pdnObject->ApplicationDesc.RegisterWithDPNSVR( spInfo.pAddress )) == DPN_OK)
> 			{
> 				//
> 				//	Flag registering with DPNSVR for cleanup
> 				//
> 				DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 				pdnObject->dwFlags |= DN_OBJECT_FLAG_DPNSVR_REGISTERED;
> 				DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 				break;
> 			}
> 			else
> 			{
>     			if( dwRetry < DPNSVR_REGISTER_ATTEMPTS )
>     			{
> 	    			DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x, retrying", hResultCode );    				
> 	    			Sleep( DPNSVR_REGISTER_SLEEP );    				
> 	    		}
> 				else
>     			{
> 	    			DPF( 0, "Unable to register ourselves with DPNSVR hr=0x%x", hResultCode );
> 	    		}
> 	    	}
> 		}
> 		spInfo.pAddress->lpVtbl->Release(spInfo.pAddress);
> 		spInfo.pAddress = NULL;
> 	}
> 
> 	DPF(6,"Returning: [0x%lx]",hResultCode);
> 	return(hResultCode);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\common.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
206c206
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
208a209,211
> HRESULT DNUpdateLobbyStatus(DIRECTNETOBJECT *const pdnObject,
> 							const DWORD dwStatus);
> 
217a221,225
> 
> HRESULT DNRegisterWithDPNSVR(DIRECTNETOBJECT *const pdnObject);
> 
> HRESULT DNRegisterListenWithDPNSVR(DIRECTNETOBJECT *const pdnObject,
> 								   const HANDLE hProtocol);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
90a91
> #include "DPLobby8.h"
124,127d124
< #define CompareGuid(a,b)                                         \
<     (memcmp((PVOID)(a), (PVOID)(b), sizeof(GUID)))
< 
< 
196c193
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
271,272c268,269
< 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLW(	pAddress,
< 															static_cast<WCHAR*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
---
> 		if ((hResultCode = pAddress->lpVtbl->BuildFromURLA(	pAddress,
> 															static_cast<char*>(pvBuffer) + pInfo->dwURLOffset )) != DPN_OK)
299c296
< 		pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 		pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
750c747
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
836c833
< 	if (pguidInstance && CompareGuid(pguidInstance,&GUID_NULL))
---
> 	if (pguidInstance && !UuidIsNil(pguidInstance,&rpcStatus))
849c846
< 	if (pguidApplication && CompareGuid(pguidApplication,&GUID_NULL))
---
> 	if (pguidApplication && !UuidIsNil(pguidApplication,&rpcStatus))
888c885
< 		pDevice->lpVtbl->GetURLW(pDevice,DP8ABuffer,&DP8ASize);
---
> 		pDevice->lpVtbl->GetURLA(pDevice,DP8ABuffer,&DP8ASize);
1197c1194
< 	WCHAR				DP8ABuffer[512];
---
> 	CHAR				DP8ABuffer[512];
1222,1223c1219
< 				pAddress->lpVtbl->GetURLW(pAddress,NULL,&dwAddressSize);
< 				dwAddressSize = dwAddressSize * sizeof(WCHAR);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,NULL,&dwAddressSize);
1227c1223
< 				pAddress->lpVtbl->GetURLW(pAddress,DP8ABuffer,&DP8ASize);
---
> 				pAddress->lpVtbl->GetURLA(pAddress,DP8ABuffer,&DP8ASize);
1354,1355c1350,1351
< 		if ((hResultCode = pAddress->lpVtbl->GetURLW(pAddress,
< 													static_cast<WCHAR*>(packedBuffer.GetTailAddress()),
---
> 		if ((hResultCode = pAddress->lpVtbl->GetURLA(pAddress,
> 													static_cast<char*>(packedBuffer.GetTailAddress()),
1721a1718,1722
> 	//	Update Lobby status
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_CONNECTED);
> 
> 	//
2018a2020,2028
> 	if (fWasConnected)
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_DISCONNECTED);
> 	}
> 	else
> 	{
> 		DNUpdateLobbyStatus(pdnObject,DPLSESSION_COULDNOTCONNECT);
> 	}	
> 
2952c2962
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
2986c2996
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
3009c3019
< 	WCHAR					DP8ABuffer[512];
---
> 	CHAR					DP8ABuffer[512];
3036c3046
< 		(*ppAddress)->lpVtbl->GetURLW(*ppAddress,DP8ABuffer,&DP8ASize);
---
> 		(*ppAddress)->lpVtbl->GetURLA(*ppAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
40a41
> #include "creg.h"
45a47,183
> #undef DPF_MODNAME
> #define DPF_MODNAME "RegisterDefaultSettings"
> //
> // RegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT RegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot create app sub-aread" );
> 		return DPNERR_GENERIC;
> 	}
> 	else
> 	{
> 		return DPN_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "UnRegisterDefaultSettings"
> //
> // UnRegisterDefaultSettings
> //
> // This function registers the default settings for this module.  
> //
> // For DPVOICE.DLL this is making sure the compression provider sub-key is created.
> //
> HRESULT UnRegisterDefaultSettings()
> {
> 	CRegistry creg;
> 
> 	if( !creg.Open( HKEY_LOCAL_MACHINE, DN_REG_LOCAL_SP_ROOT, FALSE, TRUE ) )
> 	{
> 		DPFERR( "Cannot remove app, does not exist" );
> 	}
> 	else
> 	{
> 		if( !creg.DeleteSubKey( &(DN_REG_LOCAL_SP_SUB)[1] ) )
> 		{
> 			DPFERR( "Cannot remove cp sub-key, could have elements" );
> 		}
> 	}
> 
> 	return DPN_OK;
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Client.1", L"DirectPlay8Client Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Client, L"DirectPlay8.Client") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Server.1", L"DirectPlay8Server Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Server, L"DirectPlay8.Server") )
> 	{
> 		DPFERR( "Could not register dp8 Server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::Register( L"DirectPlay8.Peer.1", L"DirectPlay8Peer Object", 
> 							  L"dpnet.dll", CLSID_DirectPlay8Peer, L"DirectPlay8.Peer") )
> 	{
> 		DPFERR( "Could not register dp8 client object" );
> 		fFailed = TRUE;
> 	}
> 
> 
> 	if( FAILED( hr = RegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Could not register default settings hr = 0x%x", hr );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Client) )
> 	{
> 		DPF( 0, "Failed to unregister client object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Server) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Peer) )
> 	{
> 		DPF( 0, "Failed to unregister peer object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( FAILED( hr = UnRegisterDefaultSettings() ) )
> 	{
> 		DPF( 0, "Failed to remove default settings hr=0x%x", hr );
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dncore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
94a95
> #define	DN_OBJECT_FLAG_DPNSVR_REGISTERED	0x20000000
108a110,112
> #define DN_REG_LOCAL_SP_ROOT				L"Software\\Microsoft\\DirectPlay8"
> #define DN_REG_LOCAL_SP_SUB					L"\\Service Providers"
> #define DN_REG_LOCAL_SP_SUBKEY				DN_REG_LOCAL_SP_ROOT DN_REG_LOCAL_SP_SUB
109a114,118
> #define	DN_REG_KEYNAME_ADAPTER_LIST			L"Adapter List"
> #define	DN_REG_KEYNAME_ALL_APPLICATIONS		L"All Applications"
> #define	DN_REG_KEYNAME_FRIENDLY_NAME		L"Friendly Name"
> #define DN_REG_KEYNAME_GUID					L"GUID"
> 
132a142
> typedef struct IDirectPlay8LobbiedApplication	IDirectPlay8LobbiedApplication;
273a284
> 	// Lobby additions
274a286,289
> 	DPNHANDLE				dpnhLobbyConnection;	// Lobby Connection to update
> 
> 	IDirectPlay8LobbiedApplication	*pIDP8LobbiedApplication;
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer	PRIVATE
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\dnet.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnet.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,62
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\enum_sp.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47a48
> #include "DNMisc.h"
49a51
> #include "CReg.h"
63c65,74
< // BUGBUG: [xbox] [mgere] Removed since we don't support registry
---
> 	DWORD	dwAllAppLen;
> 	WCHAR	lpwszAllAppStr[DN_FLAG_STR_LEN+1];
> 
> 	dwAllAppLen = (DN_FLAG_STR_LEN + 1) * sizeof(WCHAR);
> 	if (RegQueryValueExW(hSPKey,DN_REG_KEYNAME_ALL_APPLICATIONS,NULL,NULL,(PBYTE)lpwszAllAppStr,&dwAllAppLen) != ERROR_SUCCESS)
> 		return(FALSE);
> 
> 	if (towupper(lpwszAllAppStr[0]) == L'N')
> 		return(TRUE);
> 
78,79c89
< // BUGBUG:  [mgere] [xbox] this function changed substantially.  Need to verify that it's still working properly.
< 	HRESULT	hResultCode = DPN_OK;
---
> 	GUID	guid;
81c91,101
< 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
---
> 	DWORD	dwEntrySize;
> 	DWORD	dwEnumCount;
> 	DWORD	dwEnumIndex;
> 	DWORD	dwFriendlyNameLen;
> 	DWORD	dwGuidSize;
> 	DWORD	dwKeyLen;
> 	DWORD	dwMaxFriendlyNameLen;
> 	DWORD	dwMaxKeyLen;
> 	PWSTR	pwszFriendlyName;
> 	PWSTR	pwszKeyName;
> 	HRESULT	hResultCode = DPN_OK;
83,84c103,106
<     WCHAR wszSP[] = L"DirectPlay8 TCP/IP Service Provider";
< 	GUID guidSP = { 0xEBFE7BA0, 0x628D, 0x11D2, { 0xAE, 0x0F, 0x00, 0x60, 0x97, 0xB0, 0x14, 0x11 } };
---
> 	DPN_SERVICE_PROVIDER_INFO	dnSpInfo;
> 	CRegistry	RegistryEntry;
> 	CRegistry	SubEntry;
> 	CServiceProvider	*pSP;
92a115,118
> 	pwszFriendlyName = NULL;
> 	pwszKeyName = NULL;
> 	pSP = NULL;
> 
96,97c122,127
< 	hResultCode = packedBuffer.AddToBack(wszSP,(wcslen(wszSP)+1)*sizeof(WCHAR));
< 	dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
---
> 	if (!RegistryEntry.Open(HKEY_LOCAL_MACHINE,DN_REG_LOCAL_SP_SUBKEY,TRUE,FALSE))
> 	{
> 		DPFERR("RegistryEntry.Open() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
99c129,156
< 	memcpy(&dnSpInfo.guid,&guidSP,sizeof(GUID));
---
> 	//
> 	//	Set up to enumerate
> 	//
> 	if (!RegistryEntry.GetMaxKeyLen(dwMaxKeyLen))
> 	{
> 		DPFERR("RegistryEntry.GetMaxKeyLen() failed");
> 		hResultCode = DPNERR_GENERIC;
> 		goto Failure;
> 	}
> 	dwMaxKeyLen++;	// Null terminator
> 	DPF(5,"dwMaxKeyLen = %ld",dwMaxKeyLen);
> 	if ((pwszKeyName = static_cast<WCHAR*>(DNMalloc(dwMaxKeyLen * sizeof(WCHAR)))) == NULL)
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwMaxFriendlyNameLen = dwMaxKeyLen;
> 	if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof(WCHAR)))) == NULL)	// Seed friendly name size
> 	{
> 		DPFERR("DNMalloc() failed");
> 		hResultCode = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 	dwGuidSize = (GUID_STRING_LENGTH + 1) * sizeof(WCHAR);
> 	dwEnumIndex = 0;
> 	dwKeyLen = dwMaxKeyLen;
> 	dwEnumCount = 0;
101,104c158,171
< 	dnSpInfo.dwFlags = 0;
< 	dnSpInfo.dwReserved = 0;
< 	dnSpInfo.pvReserved = NULL;
< 	hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
---
> 	//
> 	//	Enumerate SP's !
> 	//
> 	while (RegistryEntry.EnumKeys(pwszKeyName,&dwKeyLen,dwEnumIndex))
> 	{
> 		dwEntrySize = 0;
> 		DPF(5,"%ld - %S (%ld)",dwEnumIndex,pwszKeyName,dwKeyLen);
> 		if (!SubEntry.Open(RegistryEntry,pwszKeyName,TRUE,FALSE))
> 		{
> 			DPF(0,"Couldn't open subentry.  Skipping [%S]", pwszKeyName);
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
105a173,264
> 		//
> 		//	GUID
> 		//
> 		dwGuidSize = (DN_GUID_STR_LEN + 1) * sizeof(WCHAR);
> 		if (!SubEntry.ReadGUID(DN_REG_KEYNAME_GUID,guid))
> 		{
> 			DPF(0,"SubEntry.ReadGUID failed.  Skipping [%S]", pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 
> 		//
> 		//	Attempt to instantiate SP and initialize it, to ensure that it is in fact usable.
> 		//
> 		if (!(dwFlags & DPNENUMSERVICEPROVIDERS_ALL))
> 		{
> 			DPF(5,"Checking [%S]",pwszKeyName);
> 			if ((hResultCode = DN_SPFindEntry(pdnObject,&guid,&pSP)) != DPN_OK)
> 			{
> 				if ((hResultCode = DN_SPInstantiate(pdnObject,&guid,&pSP)) != DPN_OK)
> 				{
> 					DPFERR("Could not find or instantiate SP");
> 					SubEntry.Close();
> 					dwEnumIndex++;
> 					dwKeyLen = dwMaxKeyLen;
> 					hResultCode = DPN_OK; // override return code
> 					continue;
> 				}
> 			}
> 			pSP->Release();
> 			pSP = NULL;
> 		}
> 
> 		//
> 		//	Friendly Name
> 		//
> 		if (!SubEntry.GetValueLength(DN_REG_KEYNAME_FRIENDLY_NAME,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not get FriendlyName length.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		if (dwFriendlyNameLen > dwMaxFriendlyNameLen)
> 		{
> 			// grow buffer (noting that the registry functions always return WCHAR) and try again
> 			DPF(5,"Need to grow pwszFriendlyName from %ld to %ld",
> 					dwMaxFriendlyNameLen * sizeof(WCHAR),dwFriendlyNameLen * sizeof(WCHAR));
> 			if (pwszFriendlyName != NULL)
> 			{
> 				DNFree(pwszFriendlyName);
> 			}
> 			dwMaxFriendlyNameLen = dwFriendlyNameLen;
> 			if ((pwszFriendlyName = static_cast<WCHAR*>(DNMalloc(dwMaxFriendlyNameLen * sizeof( WCHAR )))) == NULL)
> 			{
> 				DPFERR("DNMalloc() failed");
> 				hResultCode = DPNERR_OUTOFMEMORY;
> 				goto Failure;
> 			}
> 		}
> 		if (!SubEntry.ReadString(DN_REG_KEYNAME_FRIENDLY_NAME,pwszFriendlyName,&dwFriendlyNameLen))
> 		{
> 			DPF(0,"Could not read friendly name.  Skipping [%S]",pwszKeyName);
> 			SubEntry.Close();
> 			dwEnumIndex++;
> 			dwKeyLen = dwMaxKeyLen;
> 			continue;
> 		}
> 		DPF(5,"Friendly Name = %S (%ld WCHARs)",pwszFriendlyName,dwFriendlyNameLen);
> 
> 		hResultCode = packedBuffer.AddToBack(pwszFriendlyName,dwFriendlyNameLen * sizeof(WCHAR));
> 		dnSpInfo.pwszName = static_cast<WCHAR*>(packedBuffer.GetTailAddress());
> 		memcpy(&dnSpInfo.guid,&guid,sizeof(GUID));
> 		dnSpInfo.dwFlags = 0;
> 		dnSpInfo.dwReserved = 0;
> 		dnSpInfo.pvReserved = NULL;
> 		hResultCode = packedBuffer.AddToFront(&dnSpInfo,sizeof(DPN_SERVICE_PROVIDER_INFO));
> 
> 		dwEnumCount++;
> 		SubEntry.Close();
> 		dwEnumIndex++;
> 		dwKeyLen = dwMaxKeyLen;
> 	}
> 
> 	RegistryEntry.Close();
> 
> 	//
> 	//	Success ?
> 	//
111c270
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
113c272
< 		goto Exit;
---
> 		goto Failure;
117c276,277
< 		*pcReturned = 1;
---
> 		*pcReturned = dwEnumCount;
> 		hResultCode = DPN_OK;
121a282,286
> 	DNFree(pwszKeyName);
> 	pwszKeyName = NULL;
> 	DNFree(pwszFriendlyName);
> 	pwszFriendlyName = NULL;
> 
124a290,315
> 
> Failure:
> 	if (pwszKeyName)
> 	{
> 		DNFree(pwszKeyName);
> 		pwszKeyName = NULL;
> 	}
> 	if (pwszFriendlyName)
> 	{
> 		DNFree(pwszFriendlyName);
> 		pwszFriendlyName = NULL;
> 	}
> 	if (SubEntry.IsOpen())
> 	{
> 		SubEntry.Close();
> 	}
> 	if (RegistryEntry.IsOpen())
> 	{
> 		RegistryEntry.Close();
> 	}
> 	if (pSP)
> 	{
> 		pSP->Release();
> 		pSP = NULL;
> 	}
> 	goto Exit;
138,142d328
< // BUGBUG
< // [mgere] [xbox] Removed this whole function.  It uses registry to enumerate adapters
< //         and XBox doesn't have a registry.  Need to figure out some other way to
< //         handle this, if at all.
< /*
292d477
< */	return(E_FAIL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\migration.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
91a92,94
> #include "dpnsvrq.h"
> #include "dpnsdef.h"
> #include "dpnsvlib.h"
92a96
> #include "dplobby8.h"
301a306
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATEDHERE);	
718a724,731
> 	//
> 	//	Register with DPNSVR
> 	//
> 	if(pdnObject->ApplicationDesc.UseDPNSVR())
> 	{
> 		DNRegisterWithDPNSVR(pdnObject);
> 	}
> 
810a824,828
> 
> 	// 
> 	// Indicate to lobby (if there is one) that a host migration has occured
> 	//
> 	DNUpdateLobbyStatus(pdnObject,DPLSESSION_HOSTMIGRATED);		
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\msghandler.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
70a71,73
> #include "dpnsdef.h"
> #include "dpnsvrq.h"
> #include "dpnsvlib.h"
707a711
> 	BOOL		fUnregister;
729a734,749
> 	//
> 	//	Unregister from DPNSVR when LISTENs start to terminate
> 	//
> 	fUnregister = FALSE;
> 	DNEnterCriticalSection(&pdnObject->csDirectNetObject);
> 	if (pdnObject->dwFlags & DN_OBJECT_FLAG_DPNSVR_REGISTERED)
> 	{
> 		pdnObject->dwFlags &= (~DN_OBJECT_FLAG_DPNSVR_REGISTERED);
> 		fUnregister = TRUE;
> 	}
> 	DNLeaveCriticalSection(&pdnObject->csDirectNetObject);
> 	if (fUnregister)
> 	{
> 		pdnObject->ApplicationDesc.UnregisterWithDPNSVR();
> 	}
> 
1175c1195
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1191c1211
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1195c1215
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1226c1246
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1242c1262
< 	pHostAddress->lpVtbl->GetURLW(pHostAddress,DP8ABuffer,&DP8ASize);
---
> 	pHostAddress->lpVtbl->GetURLA(pHostAddress,DP8ABuffer,&DP8ASize);
1246c1266
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
1275c1295
< 	WCHAR			DP8ABuffer[512];
---
> 	CHAR			DP8ABuffer[512];
1291c1311
< 	pDeviceAddress->lpVtbl->GetURLW(pDeviceAddress,DP8ABuffer,&DP8ASize);
---
> 	pDeviceAddress->lpVtbl->GetURLA(pDeviceAddress,DP8ABuffer,&DP8ASize);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\ntentry.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
447,448c447
< 		hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,NULL,&dwURLSize);
< 		dwURLSize = dwURLSize * sizeof(WCHAR);
---
> 		hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,NULL,&dwURLSize);
460,461c459,460
< 				if ((hResultCode = m_pAddress->lpVtbl->GetURLW(m_pAddress,
< 						static_cast<WCHAR*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
---
> 				if ((hResultCode = m_pAddress->lpVtbl->GetURLA(m_pAddress,
> 						static_cast<char*>(pPackedBuffer->GetTailAddress()),&dwURLSize)) == DPN_OK)
550c549
< 		hResultCode = pAddress->lpVtbl->BuildFromURLW(pAddress,reinterpret_cast<WCHAR*>(pBufferStart + pdnEntryInfo->dwURLOffset));
---
> 		hResultCode = pAddress->lpVtbl->BuildFromURLA(pAddress,reinterpret_cast<char*>(pBufferStart + pdnEntryInfo->dwURLOffset));
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
214c214
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
222a223,229
>     if( pIDP8LobbiedApplication != NULL &&
>         !DNVALID_READPTR( pIDP8LobbiedApplication, sizeof( IDirectPlay8LobbiedApplication * ) ) )
>     {
>         DPFERR( "Invalid interface pointer specified for register lobby" );
>         return DPNERR_INVALIDPOINTER;
>     }
> 
248a256,261
> 
> 	    if( !pIDP8LobbiedApplication )
> 	    {
> 	    	DPFERR( "You must specify a lobby application interface to use" );
> 	    	return DPNERR_INVALIDPOINTER;
> 	    }
1064c1077
<     if( dwFlags & ~(DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
---
>     if( dwFlags & ~(DPNENUMHOSTS_OKTOQUERYFORADDRESSING | DPNENUMHOSTS_SYNC | DPNENUMHOSTS_NOBROADCASTFALLBACK ) )
1602a1616,1621
>     if( ( dwFlags & ~( DPNHOST_OKTOQUERYFORADDRESSING ) ) != 0 )
>     {
>         DPFERR("Invalid flags specified" );
>         return( DPNERR_INVALIDFLAGS );
>     }
> 
1815c1834
<     if( dwFlags & ~(DPNCONNECT_SYNC) )
---
>     if( dwFlags & ~(DPNCONNECT_SYNC | DPNCONNECT_OKTOQUERYFORADDRESSING) )
2143c2162
<     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD) )
---
>     if( pdnAppDesc->dwFlags & ~(DPNSESSION_CLIENT_SERVER | DPNSESSION_MIGRATE_HOST | DPNSESSION_REQUIREPASSWORD | DPNSESSION_NODPNSVR) )
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\paramval.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
47c47
< 							  PVOID const pIDP8LobbiedApplication,
---
> 							  IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\peer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
69d68
< #include <wchar.h>
120c119
< typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP PeerRegisterLobby(IDirectPlay8Peer *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\server.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62d61
< #include <wchar.h>
111c110
< typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,PVOID const pIDP8LobbiedApplication,const DWORD dwFlags);
---
> typedef STDMETHODIMP ServerRegisterLobby(IDirectPlay8Server *pInterface,const DPNHANDLE dpnHandle,IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags);
.  
.  
()---()---()---()---()---()---()---()---()---(.\core\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnet.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,9c31,49
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
> 
> PASS1_PUBLISH={ $(O)\dpnet.lib = $(SDK_LIB_PATH)\dpnet.lib}
> 
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
> 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
>            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
>            ..\..\dpnsvr\dpnsvlib\obj$(BUILD_ALT_DIR)\*\dpnsvlib.lib \
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> 	   $(BASEDIR)\public\sdk\lib\*\libcmtd.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmtd.lib \
11,13c51,52
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmt.lib \
14a54,61
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
16d62
< INCLUDES=..\;..\..\inc;..\..\protocol;..\..\common;..\..\dvoice\inc
18c64,66
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
> !endif
20c68,72
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
22,24c74
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
< !endif
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\protocol;..\..\common;..\..\dpnsvr\dpnsvlib;..\..\dpnsvr\inc
26d75
< MSC_WARNING_LEVEL=/W3 /WX
28c77,82
< DLLDEF=..\dnet.def
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
70a125,132
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
73,94c135,137
< TARGETLIBS= \
< 	   ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            ..\..\protocol\obj$(BUILD_ALT_DIR)\*\protocol.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
<            ..\..\sp\wsock\daytona\obj$(BUILD_ALT_DIR)\*\dpnwsock.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<              $(SDK_LIB_PATH)\libcntpr.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addbase.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
260d259
< /* BUGBUG: [mgere] [xbox] Removed this function.
291d289
< */  return DPNERR_UNSUPPORTED;
302,303c300,359
< // BUGBUG: [mgere] [xbox] ANSI not supported
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pszAddress == NULL )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer to address.  An address must be specified" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	if( !DNVALID_STRING_A( pszAddress ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid string specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDSTRING );
> 	}
> 
> 	DPF( DP8A_PARAMLEVEL, "pszAddress = %s", pszAddress );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	DWORD dwStrSize = 0;
> 
> 	if( pszAddress != NULL )
> 	{
> 		dwStrSize = strlen(pszAddress)+1;
> 		
> 		szShadowBuffer = new WCHAR[dwStrSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 
> 		if( FAILED( hr = STR_jkAnsiToWide( szShadowBuffer, pszAddress, dwStrSize ) )  )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting URL to ANSI hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto BUILDFROMURLW_RETURN;
> 		}
> 	}
> 
> 	hr = pdp8Address->SetURL( szShadowBuffer );
> 
> BUILDFROMURLW_RETURN:
> 
> 	if( szShadowBuffer )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );	
448,449c504,571
< // BUGBUG: [mgere] [xbox] ANSI not supported.
< 	return DPNERR_UNSUPPORTED;
---
> 	if( pInterface == NULL ||
> 	   !DP8A_VALID( pInterface ) )
> 	{
> 		DPF( DP8A_ENTERLEVEL, "Invalid object" );
> 		DP8A_RETURN( DPNERR_INVALIDOBJECT );
> 	}
> 	
> 	DP8ADDRESSOBJECT *pdp8Address = (DP8ADDRESSOBJECT *) GET_OBJECT_FROM_INTERFACE( pInterface );
> 
> 	HRESULT hr;
> 
> 	DPF( DP8A_ENTERLEVEL, "Enter" );	
> 
> 	if( pdwAddressSize == NULL ||
> 	   !DNVALID_WRITEPTR( pdwAddressSize, sizeof(DWORD) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address size" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );		
> 	}
> 
> 	if( *pdwAddressSize > 0 &&
> 	   (pszAddress == NULL ||
> 	    !DNVALID_WRITEPTR( pszAddress, (*pdwAddressSize) ) ) )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Invalid pointer specified for address" );
> 		DP8A_RETURN( DPNERR_INVALIDPOINTER );
> 	}
> 
> 	// 7/28/2000(a-JiTay): IA64: Use %p format specifier for 32/64-bit pointers, addresses, and handles.
> 	DPF( DP8A_PARAMLEVEL, "pwszAddress = 0x%p pdwAddressSize = 0x%p (%u)",
> 	     pszAddress , pdwAddressSize, *pdwAddressSize );
> 
> 	WCHAR *szShadowBuffer = NULL;
> 
> 	if( *pdwAddressSize  != 0 )
> 	{
> 		szShadowBuffer = new WCHAR[*pdwAddressSize];
> 
> 		if( szShadowBuffer == NULL )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error allocating memory" );
> 			hr = DPNERR_OUTOFMEMORY;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	else
> 	{	
> 		szShadowBuffer= NULL;
> 	}
> 
> 	hr = pdp8Address->BuildURL( szShadowBuffer, pdwAddressSize );
> 
> 	if( hr == DPN_OK )
> 	{
> 		if( FAILED( hr = STR_jkWideToAnsi( pszAddress, szShadowBuffer, *pdwAddressSize ) ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Error converting ANSI->WIDE hr=0x%x", hr );
> 			hr = DPNERR_CONVERSION;
> 			goto GETURLW_RETURN;
> 		}
> 	}
> 	
> GETURLW_RETURN:
> 
> 	if( szShadowBuffer != NULL )
> 		delete [] szShadowBuffer;
> 
> 	DP8A_RETURN( hr );
873c995,996
< 	   dwDataType != DPNA_DATATYPE_BINARY )
---
> 	   dwDataType != DPNA_DATATYPE_BINARY &&
> 	   dwDataType != DPNA_DATATYPE_STRING_ANSI )
887a1011,1024
> 		{
> 			DPF( DP8A_ERRORLEVEL, "String size and component size don't match" );
> 			DP8A_RETURN( DPNERR_INVALIDPARAM );
> 		}
> 	}
> 	else if( dwDataType == DPNA_DATATYPE_STRING_ANSI )
> 	{
> 		if( !DNVALID_STRING_A( (const CHAR * const) pComponentData ) )
> 		{
> 			DPF( DP8A_ERRORLEVEL, "Invalid string component specified" );
> 			DP8A_RETURN( DPNERR_INVALIDSTRING );
> 		}
> 
> 		if( ((strlen( (const CHAR * const) pComponentData)+1)*sizeof(char)) != dwComponentSize )
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50
> #include <stdio.h>
50a52
> #include "dplegacy.h"
52d53
< #include <wchar.h>
400a402,420
> 	case DPNA_DATATYPE_STRING_ANSI:
>         wszUnicodeString = new WCHAR[dwRealDataSize];
>         if( wszUnicodeString == NULL )
>         {
>             DPF( 0, "Error allocating memory for conversion" );
>             return DPNERR_OUTOFMEMORY;
>         }
> 
> 		hr = STR_jkAnsiToWide( wszUnicodeString, (const char * const) pvData, dwRealDataSize );
> 
> 		if( FAILED( hr ) )
> 		{
> 		    DPF( 0, "Error unable to convert element ANSI->Unicode 0x%x", hr );
>             return DPNERR_CONVERSION;
> 		}
> 		pvRealData = wszUnicodeString;
> 	    dwRealDataSize = dwDataSize*sizeof(WCHAR);
> 		dwRealDataType = DPNA_DATATYPE_STRING;
> 	    break;
424a445,456
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_IPXPROVIDER ) == 0 )
>                 {
>                     hr= SetSP( &CLSID_DP8SP_IPX );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_MODEMPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_MODEM );
>                 }
>                 else if( _wcsicmp( (const WCHAR * const) pvRealData, DPNA_VALUE_SERIALPROVIDER ) == 0 )
>                 {
>                     hr = SetSP( &CLSID_DP8SP_SERIAL );
>                 }
1378a1411,1479
> #undef DPF_MODNAME
> #define DPF_MODNAME "DP8ADDRESSOBJECT::SetDirectPlay4Address"
> HRESULT DP8ADDRESSOBJECT::SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize )
> {
>     PBYTE pbCurrentLocation;
>     PDPADDRESS pdpAddressChunk;
>     LONG lRemaining;
>     HRESULT hr = DPN_OK;
>     DWORD dwCurrentChunkSize;
>     DWORD dwNumElementsParsed = 0;
> 
> 	if( IsLocked() )
> 	{
> 		DPF( DP8A_ERRORLEVEL, "Cannot set element, object read-only" );
> 		return DPNERR_NOTALLOWED;
> 	}
> 
>     // XBOX! This function will not be required on XBOX.  Have it return DPNERR_NOTSUPPORTED
>     ENTERLOCK();
> 
>     hr = Clear();
> 
>     if( FAILED( hr ) )
>     {
>         DPF( 0, "Failed to clear old address data hr=[0x%lx]", hr );
>         LEAVELOCK();
>         return hr;
>     }
> 
>     pbCurrentLocation = (PBYTE) pvDataBuffer;
>     lRemaining = dwDataSize;
> 
>     while( lRemaining > 0 )
>     {
>         pdpAddressChunk = (PDPADDRESS) pbCurrentLocation;
> 
>         if( sizeof( DPADDRESS ) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end of address" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         dwCurrentChunkSize = sizeof( DPADDRESS ) + pdpAddressChunk->dwDataSize;
> 
>         if( ((LONG) dwCurrentChunkSize) > lRemaining )
>         {
>             DPF( 0, "Error parsing address, unexpected end during data" );
> 			LEAVELOCK();
>             return DPNERR_INVALIDADDRESSFORMAT;
>         }
> 
>         hr = AddDP4Element( pdpAddressChunk, this );
> 
>         if( FAILED( hr ) )
>         {
>             DPF( 0, "Error adding next element" );
>             break;
>         }
> 
>         lRemaining -= dwCurrentChunkSize;
> 
>         pbCurrentLocation += dwCurrentChunkSize;
>     }
> 
>     LEAVELOCK();
> 
>     return hr;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addcore.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
143a144,145
>     HRESULT SetDirectPlay4Address( void * pvDataBuffer, const DWORD dwDataSize );
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\addparse.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
27c27
< #include <wchar.h>
---
> #include <stdio.h>
569d568
< // BUGBUG: [mgere] [xbox] Removed wtol temporarily until it is implemented on xbox
571d569
< #ifdef _BUILD_FOR_WIN2000
573d570
< #endif
581,582d577
< // BUGBUG: [mgere] [xbox] Removed swscanf temporarily until it is implemented on xbox
< #ifdef _BUILD_FOR_WIN2000
607d601
< #endif
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dllmain.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
29a30
> #include "creg.h"
38a40,87
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllRegisterServer"
> HRESULT WINAPI DllRegisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::Register( L"DirectPlay8Address.Address.1", L"DirectPlay8Address Object", 
> 							  L"dpnaddr.dll", CLSID_DirectPlay8Address, L"DirectPlay8Address.Address") )
> 	{
> 		DPFERR( "Could not register address object" );
> 		fFailed = TRUE;
> 	}
> 	
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> }
> 
> #undef DPF_MODNAME
> #define DPF_MODNAME "DllUnregisterServer"
> STDAPI DllUnregisterServer()
> {
> 	HRESULT hr = S_OK;
> 	BOOL fFailed = FALSE;
> 
> 	if( !CRegistry::UnRegister(CLSID_DirectPlay8Address) )
> 	{
> 		DPF( 0, "Failed to unregister server object" );
> 		fFailed = TRUE;
> 	}
> 
> 	if( fFailed )
> 	{
> 		return E_FAIL;
> 	}
> 	else
> 	{
> 		return S_OK;
> 	}
> 
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.def)---()---()---()---()---()---()---()---()---()---()  
.  
.  
5a6,8
> 	DirectPlay8AddressCreate	@1
> 	DllRegisterServer	PRIVATE
> 	DllUnregisterServer PRIVATE
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\dnadd.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #define APSTUDIO_HIDDEN_SYMBOLS
> #include "windows.h"
> #undef APSTUDIO_HIDDEN_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnaddr.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Address \0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,61
> 
> #endif
> 
> #endif    // !_MAC
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\dnaddress\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2,3c17,27
< TARGETPATHLIB=$(BASEDIR)\public\sdk\lib
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\dnadd.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
4a29
> TARGETTYPE=DYNLINK
6,9c31,48
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
> 
> PASS1_PUBLISH={ $(O)\dpnaddr.lib = $(SDK_LIB_PATH)\dpnaddr.lib}
> 
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\wsock32.lib \
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> 	   $(BASEDIR)\public\sdk\lib\*\libcmtd.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmtd.lib \
11,13c50,51
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmt.lib \
14a53,59
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
16d60
< INCLUDES=..\;..\..\inc;..\..\common;..\..\dvoice\inc
18c62,64
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
> !endif
20c66,70
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
22,24c72
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
< !endif
---
> INCLUDES=..\;..\..\..\dvoice\inc;$(DXROOT)\inc;..\..\inc;..\..\common
26d73
< MSC_WARNING_LEVEL=/W3 /WX
28c75,80
< DLLDEF=..\dnadd.def
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
38a91
>          ..\dplegacy.cpp \
40a94,100
> #
> # Next specify options for the compiler.
> #
> 
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNET_EXPORT /DCINTERFACE /DMICHAEL
> 
> USER_C_FLAGS=-nologo -W3
43,62c103,105
< TARGETLIBS= \
<            ..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\winsockx.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpaddr.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
99a100
> #define DPNA_DATATYPE_STRING_ANSI           0x00000005
131a133,168
> // values for baud rate
> #define DPNA_BAUD_RATE_110					110
> #define DPNA_BAUD_RATE_300					300
> #define DPNA_BAUD_RATE_600					600
> #define DPNA_BAUD_RATE_1200					1200
> #define DPNA_BAUD_RATE_2400					2400
> #define DPNA_BAUD_RATE_4800					4800
> #define DPNA_BAUD_RATE_9600					9600
> #define DPNA_BAUD_RATE_14400				14400
> #define DPNA_BAUD_RATE_19200				19200
> #define DPNA_BAUD_RATE_38400				38400
> #define DPNA_BAUD_RATE_56000				56000
> #define DPNA_BAUD_RATE_57600				57600
> #define DPNA_BAUD_RATE_115200				115200
> #define DPNA_BAUD_RATE_128000				128000
> #define DPNA_BAUD_RATE_256000				256000
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE					L"1"
> #define DPNA_STOP_BITS_ONE_FIVE				L"1.5"
> #define DPNA_STOP_BITS_TWO					L"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE					L"NONE"
> #define DPNA_PARITY_EVEN					L"EVEN"
> #define DPNA_PARITY_ODD						L"ODD"
> #define DPNA_PARITY_MARK					L"MARK"
> #define DPNA_PARITY_SPACE					L"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE				L"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF			L"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS				L"RTS"
> #define DPNA_FLOW_CONTROL_DTR				L"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR			L"RTSDTR"
> 
136a174,227
> #define DPNA_VALUE_IPXPROVIDER              L"IPX"
> #define DPNA_VALUE_MODEMPROVIDER            L"MODEM"
> #define DPNA_VALUE_SERIALPROVIDER           L"SERIAL"
> 
> 
> //// ANSI DEFINITIONS
> 
> // Header
> #define DPNA_HEADER_A						"x-directplay:/"
> #define DPNA_SEPARATOR_KEYVALUE_A			'='
> #define DPNA_SEPARATOR_USERDATA_A			'#'
> #define DPNA_SEPARATOR_COMPONENT_A			';'
> #define DPNA_ESCAPECHAR_A					'%'
> 
> // key names for address components
> #define DPNA_KEY_APPLICATION_INSTANCE_A		"applicationinstance"
> #define DPNA_KEY_BAUD_A						"baud"
> #define DPNA_KEY_DEVICE_A					"device"
> #define DPNA_KEY_FLOWCONTROL_A				"flowcontrol"
> #define DPNA_KEY_HOSTNAME_A					"hostname"
> #define DPNA_KEY_PARITY_A					"parity"
> #define DPNA_KEY_PHONENUMBER_A				"phonenumber"
> #define DPNA_KEY_PORT_A						"port"
> #define DPNA_KEY_PROGRAM_A					"program"
> #define DPNA_KEY_PROVIDER_A					"provider"
> #define DPNA_KEY_STOPBITS_A					"stopbits"
> 
> // values for stop bits
> #define DPNA_STOP_BITS_ONE_A				"1"
> #define DPNA_STOP_BITS_ONE_FIVE_A			"1.5"
> #define DPNA_STOP_BITS_TWO_A				"2"
> 
> // values for parity
> #define DPNA_PARITY_NONE_A					"NONE"
> #define DPNA_PARITY_EVEN_A					"EVEN"
> #define DPNA_PARITY_ODD_A					"ODD"
> #define DPNA_PARITY_MARK_A					"MARK"
> #define DPNA_PARITY_SPACE_A					"SPACE"
> 
> // values for flow control
> #define DPNA_FLOW_CONTROL_NONE_A			"NONE"
> #define DPNA_FLOW_CONTROL_XONXOFF_A 		"XONXOFF"
> #define DPNA_FLOW_CONTROL_RTS_A				"RTS"
> #define DPNA_FLOW_CONTROL_DTR_A				"DTR"
> #define DPNA_FLOW_CONTROL_RTSDTR_A			"RTSDTR"
> 
> // Shortcut values
> //
> // These can be used instead of the corresponding CLSID_DP8SP_XXXX guids
> //
> #define DPNA_VALUE_TCPIPPROVIDER_A          "IP"
> #define DPNA_VALUE_IPXPROVIDER_A            "IPX"
> #define DPNA_VALUE_MODEMPROVIDER_A          "MODEM"
> #define DPNA_VALUE_SERIALPROVIDER_A         "SERIAL"
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dplay8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
180a181,189
> // {53934290-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_IPX, 0x53934290, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {6D4A3650-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_MODEM, 0x6d4a3650, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
> // {743B5D60-628D-11D2-AE0F-006097B01411}
> DEFINE_GUID(CLSID_DP8SP_SERIAL, 0x743b5d60, 0x628d, 0x11d2, 0xae, 0xf, 0x0, 0x60, 0x97, 0xb0, 0x14, 0x11);
> 
206a216
> typedef struct IDirectPlay8LobbiedApplication	*PDNLOBBIEDAPPLICATION;
316a327
> #define	DPNCONNECT_OKTOQUERYFORADDRESSING	0x0001
337a349
> #define	DPNENUMHOSTS_OKTOQUERYFORADDRESSING	0x0001
360a373
> #define	DPNHOST_OKTOQUERYFORADDRESSING		0x0001
407a421
> #define DPNSESSION_NODPNSVR					0x0040
913c927
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
958c972
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
1008c1022
< 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, PVOID const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
---
> 	STDMETHOD(RegisterLobby)			(THIS_ const DPNHANDLE dpnHandle, IDirectPlay8LobbiedApplication *const pIDP8LobbiedApplication,const DWORD dwFlags) PURE;
.  
.  
()---()---()---()---()---()---()---()---()---(.\inc\dpsp8.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
56a57
> #define DPNSPF_OKTOQUERY			0x00000002		// OK for SP to ask the user for clarification on addresses
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\connect.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
104c104
< 	DNASSERT( ulFlags == 0 );
---
> 	DNASSERT( ( ulFlags & ~( DPNCONNECT_OKTOQUERYFORADDRESSING ) ) == 0 );
105a106,110
> 	if ( ( ulFlags & DPNCONNECT_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		ConnData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\enum.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
120a121,125
> 	if ( ( dwFlags & DPNENUMHOSTS_OKTOQUERYFORADDRESSING ) != 0 )
> 	{
> 		EnumData.dwFlags |= DPNSPF_OKTOQUERY;
> 	}
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\sources)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,26
< TARGETTYPE=LIBRARY
---
> 
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a28
> TARGETTYPE=LIBRARY
5,9d29
< !ifdef _BUILD_FOR_WIN2000
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
< !else
< LINKER_FLAGS=-align:32
< !endif
11c31,35
< INCLUDES=..\common;..\inc;..\dnaddress
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
13c37,41
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE -DMICHAEL
---
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc 
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS)
15d42
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
17,18c44,55
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> 
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
> 
> INCLUDES=$(DXROOT)\inc;..\common;..\inc;..\dnaddress
> 
> 
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
21c58,63
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
34c76,78
< USE_NOLIBS=1
---
> #
> # Next specify options for the compiler.
> #
36c80,86
< TARGETLIBS=
---
> C_DEFINES= $(C_DEFINES) /D_LIB /D_MBCS /DWIN32 /D_MT /DCINTERFACE /DMICHAEL
> MSC_OPTIMIZATION=/Odi /Zi
> NTDEBUGTYPE=both
> 
> USER_C_FLAGS=-nologo -W3
> 
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\protocol\timer.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
130a131
> SYSTEM_INFO SystemInfo;
611c612,613
< 	MAX_TIMER_THREADS = MAX_TIMER_THREADS_PER_PROCESSOR;
---
> 	GetSystemInfo(&SystemInfo);
> 	MAX_TIMER_THREADS = SystemInfo.dwNumberOfProcessors * MAX_TIMER_THREADS_PER_PROCESSOR;
621c623
< 	hWorkToDoSem=CreateSemaphore(NULL,0,65535,NULL);
---
> 	hWorkToDoSem=CreateSemaphoreA(NULL,0,65535,NULL);
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,2
< DIRS= wsock
---
> DIRS= serial \
>       wsock
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\classfac.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
198,199c198,228
< // BUGBUG: [mgere] [xbox]  Removed all code in here.  I don't believe it's necessary anymore and it was using some COM functions that we don't have.
< 	return S_OK;
---
>     HRESULT		hr;
>     HINSTANCE	hdll;
>     LPGPCLASSFACTORY	pcf;
> 
> 
>     pcf = (LPGPCLASSFACTORY) This;
> 
>     /*
>      * call CoLockObjectExternal
>      */
>     hr = E_UNEXPECTED;
>     hdll = LoadLibraryA( "OLE32.DLL" );
>     if( hdll != NULL )
>     {
>         PCOLOCKOBJECTEXTERNAL	lpCoLockObjectExternal;
> 
> 
> 		lpCoLockObjectExternal = reinterpret_cast<PCOLOCKOBJECTEXTERNAL>( GetProcAddress( hdll, "CoLockObjectExternal" ) );
>         if( lpCoLockObjectExternal != NULL )
>         {
>             hr = lpCoLockObjectExternal( (LPUNKNOWN) This, fLock, TRUE );
>         }
>         else
>         {
>         }
>     }
>     else
>     {
>     }
> 
> 	return hr;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\cmddata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\debugutils.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
127a129,148
> 		case AF_IPX:
> 		{
> 			const SOCKADDR_IPX *const pIPXAddress = reinterpret_cast<const SOCKADDR_IPX*>( pSocketAddress );
> 
> 			DPF ( dwDebugLevel, "IPX socket:\tNet (hex) %x-%x-%x-%x\tNode (hex): %x-%x-%x-%x-%x-%x\tSocket: %d",
> 					(BYTE)pIPXAddress->sa_netnum[ 0 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 1 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 2 ],
> 					(BYTE)pIPXAddress->sa_netnum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 0 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 1 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 2 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 3 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 4 ],
> 					(BYTE)pIPXAddress->sa_nodenum[ 5 ],
> 					p_ntohs( pIPXAddress->sa_socket )
> 					);
> 			break;
> 		}
> 
154,155d174
< // BUGBUG: [mgere] [xbox] Must convert this to unicode
< /*
203d221
< */
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dirs)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1
< DIRS = daytona
---
> DIRS = win9x{32} daytona
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dnwsock.rc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1c1,20
< //LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
---
> //Microsoft Developer Studio generated resource script.
> //
> #include "resource.h"
> 
> #define APSTUDIO_READONLY_SYMBOLS
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 2 resource.
> //
> #include "windows.h"
> 
> /////////////////////////////////////////////////////////////////////////////
> #undef APSTUDIO_READONLY_SYMBOLS
> 
> /////////////////////////////////////////////////////////////////////////////
> // English (U.S.) resources
> 
> #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
> #ifdef _WIN32
> LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US
2a22
> #endif //_WIN32
3a24,31
> #ifndef _MAC
> /////////////////////////////////////////////////////////////////////////////
> //
> // Version
> //
> 
> #ifdef WIN95
> 
4a33,48
> #include "verinfo.h"
> 
> #define VERSIONNAME               "dpnwsock.dll\0"
> #ifdef DEBUG
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider Debug\0"
> #else
> #define VERSIONDESCRIPTION        "Microsoft DirectPlay8 Winsock Provider\0"
> #endif
> #define VERSIONTYPE               VFT_DLL
> #define VERSIONSUBTYPE            VFT2_UNKNOWN
> 
> #include "verinfo.ver"
> 
> #else // WinNT
> 
> #include <windows.h>
12a57,153
> 
> #endif
> 
> #endif    // !_MAC
> 
> 
> 
> #ifdef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // TEXTINCLUDE
> //
> 
> 1 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "resource.h\0"
> END
> 
> 2 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "#include ""afxres.h""\r\n"
>     "\0"
> END
> 
> 3 TEXTINCLUDE DISCARDABLE
> BEGIN
>     "\r\n"
>     "\0"
> END
> 
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // Dialog
> //
> 
> IDD_IP_SETTINGS DIALOG DISCARDABLE  0, 0, 194, 66
> STYLE DS_MODALFRAME | DS_SETFOREGROUND | DS_CENTER | WS_POPUP | WS_VISIBLE | WS_CAPTION |
>     WS_SYSMENU
> CAPTION "Enter host name"
> FONT 8, "MS Shell Dlg"
> BEGIN
>     LTEXT           "Enter the remote machine address:",
>                     IDC_STATIC_IP_HOSTNAME,7,7,110,8
>     EDITTEXT        IDC_EDIT_IP_HOSTNAME,7,45,180,14,ES_AUTOHSCROLL
>     DEFPUSHBUTTON   "OK",IDOK,137,7,50,14
>     PUSHBUTTON      "Cancel",IDCANCEL,137,24,50,14
> END
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // DESIGNINFO
> //
> 
> #ifdef APSTUDIO_INVOKED
> GUIDELINES DESIGNINFO DISCARDABLE
> BEGIN
>     IDD_IP_SETTINGS, DIALOG
>     BEGIN
>         LEFTMARGIN, 7
>         RIGHTMARGIN, 187
>         TOPMARGIN, 7
>         BOTTOMMARGIN, 59
>     END
> END
> #endif    // APSTUDIO_INVOKED
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> //
> // String Table
> //
> 
> STRINGTABLE DISCARDABLE
> BEGIN
>     IDS_FRIENDLYNAME_IPX    "DirectPlay8 IPX Service Provider"
>     IDS_FRIENDLYNAME_TCPIP  "DirectPlay8 TCP/IP Service Provider"
> END
> 
> #endif    // English (U.S.) resources
> /////////////////////////////////////////////////////////////////////////////
> 
> 
> 
> #ifndef APSTUDIO_INVOKED
> /////////////////////////////////////////////////////////////////////////////
> //
> // Generated from the TEXTINCLUDE 3 resource.
> //
> 
> 
> /////////////////////////////////////////////////////////////////////////////
> #endif    // not APSTUDIO_INVOKED
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock1.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,42c1,78
< #define p_accept accept
< #define p_bind bind
< #define p_closesocket closesocket
< #define p_connect connect
< #define p_gethostbyaddr gethostbyaddr
< #define p_gethostbyname gethostbyname
< #define p_gethostname gethostname
< #define p_getpeername getpeername
< #define p_getprotobyname getprotobyname
< #define p_getprotobynumber getprotobynumber
< #define p_getservbyname getservbyname
< #define p_getservbyport getservbyport
< #define p_getsockname getsockname
< #define p_getsockopt getsockopt
< #define p_htonl htonl
< #define p_htons htons
< #define p_inet_addr inet_addr
< #define p_inet_ntoa inet_ntoa
< #define p_ioctlsocket ioctlsocket
< #define p_listen listen
< #define p_ntohl ntohl
< #define p_ntohs ntohs
< #define p_recv recv
< #define p_recvfrom recvfrom
< #define p_select select
< #define p_send send
< #define p_sendto sendto
< #define p_setsockopt setsockopt
< #define p_shutdown shutdown
< #define p_socket socket
< //#define p_WSAAsyncGetHostByAddr WSAAsyncGetHostByAddr
< //#define p_WSAAsyncGetHostByName WSAAsyncGetHostByName
< //#define p_WSAAsyncGetProtoByName WSAAsyncGetProtoByName
< //#define p_WSAAsyncGetProtoByNumber WSAAsyncGetProtoByNumber
< //#define p_WSAAsyncGetServByName WSAAsyncGetServByName
< //#define p_WSAAsyncGetServByPort WSAAsyncGetServByPort
< //#define p_WSAAsyncSelect WSAAsyncSelect
< //#define p_WSACancelAsyncRequest WSACancelAsyncRequest
< #define p_WSACleanup WSACleanup
< #define p_WSAGetLastError WSAGetLastError
< #define p_WSASetLastError WSASetLastError
< #define p_WSAStartup WSAStartup
---
> //
> // DWNSOCK1.INC	Macros for dynamically linking to WinSock 1.1
> //
> 
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> #ifndef ___WSAFDISSET___
> typedef
> int
> (WSAAPI * LPFN_WSAFDISSET)(
>     IN SOCKET s,
>     OUT fd_set FAR *fds
>     );
> #define ___WSAFDISSET___
> #endif
> 
> 	//
> 	// Function available in both versions
> 	//
> 	DYNAMICWINSOCK(accept, LPFN_ACCEPT);
> 	DYNAMICWINSOCK(bind, LPFN_BIND);
> 	DYNAMICWINSOCK(closesocket, LPFN_CLOSESOCKET);
> 	DYNAMICWINSOCK(connect, LPFN_CONNECT);
> 	DYNAMICWINSOCK(gethostbyaddr, LPFN_GETHOSTBYADDR);
> 	DYNAMICWINSOCK(gethostbyname, LPFN_GETHOSTBYNAME);
> 	DYNAMICWINSOCK(gethostname, LPFN_GETHOSTNAME);
> 	DYNAMICWINSOCK(getpeername, LPFN_GETPEERNAME);
> 	DYNAMICWINSOCK(getprotobyname, LPFN_GETPROTOBYNAME);
> 	DYNAMICWINSOCK(getprotobynumber, LPFN_GETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(getservbyname, LPFN_GETSERVBYNAME);
> 	DYNAMICWINSOCK(getservbyport, LPFN_GETSERVBYPORT);
> 	DYNAMICWINSOCK(getsockname, LPFN_GETSOCKNAME);
> 	DYNAMICWINSOCK(getsockopt, LPFN_GETSOCKOPT);
> 	DYNAMICWINSOCK(htonl, LPFN_HTONL);
> 	DYNAMICWINSOCK(htons, LPFN_HTONS);
> 	DYNAMICWINSOCK(inet_addr, LPFN_INET_ADDR);
> 	DYNAMICWINSOCK(inet_ntoa, LPFN_INET_NTOA);
> 	DYNAMICWINSOCK(ioctlsocket, LPFN_IOCTLSOCKET);
> 	DYNAMICWINSOCK(listen, LPFN_LISTEN);
> 	DYNAMICWINSOCK(ntohl, LPFN_NTOHL);
> 	DYNAMICWINSOCK(ntohs, LPFN_NTOHS);
> 	DYNAMICWINSOCK(recv, LPFN_RECV);
> 	DYNAMICWINSOCK(recvfrom, LPFN_RECVFROM);
> 	DYNAMICWINSOCK(select, LPFN_SELECT);
> 	DYNAMICWINSOCK(send, LPFN_SEND);
> 	DYNAMICWINSOCK(sendto, LPFN_SENDTO);
> 	DYNAMICWINSOCK(setsockopt, LPFN_SETSOCKOPT);
> 	DYNAMICWINSOCK(shutdown, LPFN_SHUTDOWN);
> 	DYNAMICWINSOCK(socket, LPFN_SOCKET);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByAddr, LPFN_WSAASYNCGETHOSTBYADDR);
> 	DYNAMICWINSOCK(WSAAsyncGetHostByName, LPFN_WSAASYNCGETHOSTBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByName, LPFN_WSAASYNCGETPROTOBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetProtoByNumber, LPFN_WSAASYNCGETPROTOBYNUMBER);
> 	DYNAMICWINSOCK(WSAAsyncGetServByName, LPFN_WSAASYNCGETSERVBYNAME);
> 	DYNAMICWINSOCK(WSAAsyncGetServByPort, LPFN_WSAASYNCGETSERVBYPORT);
> 	DYNAMICWINSOCK(WSAAsyncSelect, LPFN_WSAASYNCSELECT);
> 	DYNAMICWINSOCK(WSACancelAsyncRequest, LPFN_WSACANCELASYNCREQUEST);
> 	DYNAMICWINSOCK(WSACleanup, LPFN_WSACLEANUP);
> 	DYNAMICWINSOCK(WSAGetLastError, LPFN_WSAGETLASTERROR);
> 	DYNAMICWINSOCK(WSASetLastError, LPFN_WSASETLASTERROR);
> 	DYNAMICWINSOCK(WSAStartup, LPFN_WSASTARTUP);
> 	DYNAMICWINSOCK(__WSAFDIsSet, LPFN_WSAFDISSET);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\dwnsock2.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
1,27c1,3
< #ifdef UNICODE
< //	#define p_WSAAddressToString				WSAAddressToStringW
< //	#define p_WSADuplicateSocket				WSADuplicateSocketW
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersW
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsW
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoW
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdW
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassW
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginW
< //	#define p_WSALookupServiceNext				WSALookupServiceNextW
< //	#define p_WSASetService						WSASetServiceW
< //	#define p_WSASocket							WSASocketW
< //	#define p_WSAStringToAddress				WSAStringToAddressW
< #else
< //	#define p_WSAAddressToString				WSAAddressToStringA
< //	#define p_WSADuplicateSocket				WSADuplicateSocketA
< //	#define p_WSAEnumNameSpaceProviders			WSAEnumNameSpaceProvidersA
< 	#define p_WSAEnumProtocols					WSAEnumProtocolsA
< //	#define p_WSAGetServiceClassInfo			WSAGetServiceClassInfoA
< //	#define p_WSAGetServiceClassNameByClassId	WSAGetServiceClassNameByClassIdA
< //	#define p_WSAInstallServiceClass			WSAInstallServiceClassA
< //	#define p_WSALookupServiceBegin				WSALookupServiceBeginA
< //	#define p_WSALookupServiceNext				WSALookupServiceNextA
< //	#define p_WSASetService						WSASetServiceA
< //	#define p_WSASocket							WSASocketA
< //	#define p_WSAStringToAddress				WSAStringToAddressA
< #endif // UNICODE
---
> //
> // DWNSOCK2.INC	Macros for dynamically linking to WinSock 2
> //
29,53c5,71
< //#define p_WSAAccept WSAAccept
< #define p_WSACloseEvent WSACloseEvent
< //#define p_WSAConnect WSAConnect
< #define p_WSACreateEvent WSACreateEvent
< #define p_WSAEnumNetworkEvents WSAEnumNetworkEvents
< #define p_WSAEventSelect WSAEventSelect
< #define p_WSAGetOverlappedResult WSAGetOverlappedResult
< //#define p_WSAGetQOSByName WSAGetQOSByName
< //#define p_WSAHtonl WSAHtonl
< //#define p_WSAHtons WSAHtons
< #define p_WSAIoctl WSAIoctl
< //#define p_WSAJoinLeaf WSAJoinLeaf
< //#define p_WSALookupServiceEnd WSALookupServiceEnd
< //#define p_WSANtohl WSANtohl
< //#define p_WSANtohs WSANtohs
< #define p_WSARecv WSARecv
< //#define p_WSARecvDisconnect WSARecvDisconnect
< #define p_WSARecvFrom WSARecvFrom
< //#define p_WSARemoveServiceClass WSARemoveServiceClass
< #define p_WSAResetEvent WSAResetEvent
< #define p_WSASend WSASend
< //#define p_WSASendDisconnect WSASendDisconnect
< #define p_WSASendTo WSASendTo
< #define p_WSASetEvent WSASetEvent
< #define p_WSAWaitForMultipleEvents WSAWaitForMultipleEvents
---
> #ifdef DWINSOCK_GLOBAL
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_EXTERN
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr) extern ptr p_##name
> #endif
> 
> #ifdef DWINSOCK_GETPROCADDRESS
> 	#undef DYNAMICWINSOCK
> 	#define DYNAMICWINSOCK(name, ptr)							\
> 				p_##name = (ptr)GetProcAddress(hndlWinSock, #name);	\
> 				if (p_##name == NULL) fOK = FALSE
> #endif
> 
> 	DYNAMICWINSOCK(WSAAccept, LPFN_WSAACCEPT);
> 	DYNAMICWINSOCK(WSAAddressToStringA, LPFN_WSAADDRESSTOSTRINGA);
> 	DYNAMICWINSOCK(WSAAddressToStringW, LPFN_WSAADDRESSTOSTRINGW);
> 	DYNAMICWINSOCK(WSACloseEvent, LPFN_WSACLOSEEVENT);
> 	DYNAMICWINSOCK(WSAConnect, LPFN_WSACONNECT);
> 	DYNAMICWINSOCK(WSACreateEvent, LPFN_WSACREATEEVENT);
> 	DYNAMICWINSOCK(WSADuplicateSocketA, LPFN_WSADUPLICATESOCKETA);
> 	DYNAMICWINSOCK(WSADuplicateSocketW, LPFN_WSADUPLICATESOCKETW);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersA, LPFN_WSAENUMNAMESPACEPROVIDERSA);
> 	DYNAMICWINSOCK(WSAEnumNameSpaceProvidersW, LPFN_WSAENUMNAMESPACEPROVIDERSW);
> 	DYNAMICWINSOCK(WSAEnumNetworkEvents, LPFN_WSAENUMNETWORKEVENTS);
> 	DYNAMICWINSOCK(WSAEnumProtocolsA, LPFN_WSAENUMPROTOCOLSA);
> 	DYNAMICWINSOCK(WSAEnumProtocolsW, LPFN_WSAENUMPROTOCOLSW);
> 	DYNAMICWINSOCK(WSAEventSelect, LPFN_WSAEVENTSELECT);
> 	DYNAMICWINSOCK(WSAGetOverlappedResult, LPFN_WSAGETOVERLAPPEDRESULT);
> 	DYNAMICWINSOCK(WSAGetQOSByName, LPFN_WSAGETQOSBYNAME);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoA, LPFN_WSAGETSERVICECLASSINFOA);
> 	DYNAMICWINSOCK(WSAGetServiceClassInfoW, LPFN_WSAGETSERVICECLASSINFOW);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdA, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA);
> 	DYNAMICWINSOCK(WSAGetServiceClassNameByClassIdW, LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW);
> 	DYNAMICWINSOCK(WSAHtonl, LPFN_WSAHTONL);
> 	DYNAMICWINSOCK(WSAHtons, LPFN_WSAHTONS);
> 	DYNAMICWINSOCK(WSAInstallServiceClassA, LPFN_WSAINSTALLSERVICECLASSA);
> 	DYNAMICWINSOCK(WSAInstallServiceClassW, LPFN_WSAINSTALLSERVICECLASSW);
> 	DYNAMICWINSOCK(WSAIoctl, LPFN_WSAIOCTL);
> 	DYNAMICWINSOCK(WSAJoinLeaf, LPFN_WSAJOINLEAF);
> 	DYNAMICWINSOCK(WSALookupServiceBeginA, LPFN_WSALOOKUPSERVICEBEGINA);
> 	DYNAMICWINSOCK(WSALookupServiceBeginW, LPFN_WSALOOKUPSERVICEBEGINW);
> 	DYNAMICWINSOCK(WSALookupServiceEnd, LPFN_WSALOOKUPSERVICEEND);
> 	DYNAMICWINSOCK(WSALookupServiceNextA, LPFN_WSALOOKUPSERVICENEXTA);
> 	DYNAMICWINSOCK(WSALookupServiceNextW, LPFN_WSALOOKUPSERVICENEXTW);
> 	DYNAMICWINSOCK(WSANtohl, LPFN_WSANTOHL);
> 	DYNAMICWINSOCK(WSANtohs, LPFN_WSANTOHS);
> 	DYNAMICWINSOCK(WSARecv, LPFN_WSARECV);
> 	DYNAMICWINSOCK(WSARecvDisconnect, LPFN_WSARECVDISCONNECT);
> 	DYNAMICWINSOCK(WSARecvFrom, LPFN_WSARECVFROM);
> 	DYNAMICWINSOCK(WSARemoveServiceClass, LPFN_WSAREMOVESERVICECLASS);
> 	DYNAMICWINSOCK(WSAResetEvent, LPFN_WSARESETEVENT);
> 	DYNAMICWINSOCK(WSASend, LPFN_WSASEND);
> 	DYNAMICWINSOCK(WSASendDisconnect, LPFN_WSASENDDISCONNECT);
> 	DYNAMICWINSOCK(WSASendTo, LPFN_WSASENDTO);
> 	DYNAMICWINSOCK(WSASetEvent, LPFN_WSASETEVENT);
> 	DYNAMICWINSOCK(WSASetServiceA, LPFN_WSASETSERVICEA);
> 	DYNAMICWINSOCK(WSASetServiceW, LPFN_WSASETSERVICEW);
> 	DYNAMICWINSOCK(WSASocketA, LPFN_WSASOCKETA);
> 	DYNAMICWINSOCK(WSASocketW, LPFN_WSASOCKETW);
> 	DYNAMICWINSOCK(WSAStringToAddressA, LPFN_WSASTRINGTOADDRESSA);
> 	DYNAMICWINSOCK(WSAStringToAddressW, LPFN_WSASTRINGTOADDRESSW);
> 	DYNAMICWINSOCK(WSAWaitForMultipleEvents, LPFN_WSAWAITFORMULTIPLEEVENTS);
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20
> #include	<WSIPX.h>
111a113
> 	m_hActiveSettingsDialog( NULL ),
142a145
> 	DNASSERT( GetActiveDialogHandle() == NULL );
387a391,398
> 		//
> 		// cancel any active dialogs
> 		// if there are no dialogs, cancel the active command
> 		//
> 		if ( GetActiveDialogHandle() != NULL )
> 		{
> 			StopSettingsDialog( GetActiveDialogHandle() );
> 		}
390a402,408
> 	else
> 	{
> 		//
> 		// there should be no active dialog if there isn't an active command
> 		//
> 		DNASSERT( GetActiveDialogHandle() == NULL );
> 	}
392d409
< 
872a890,896
> 	if ( GetActiveDialogHandle() != NULL )
> 	{
> 		StopSettingsDialog( GetActiveDialogHandle() );
> 		Unlock();
> 	}
> 	else
> 	{
878a903
> 	}
1765,1766c1790
< 
< // BUGBUG: [mgere] [xbox] Not sure if we ever get into this next block on the Xbox.  Put breakpoint and see.	
---
> 	
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\endpoint.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
400a401,417
> 		// UI functions
> 		//
> 		virtual	HRESULT	ShowSettingsDialog( CThreadPool *const pThreadPool ) = 0;
> 		virtual	void	StopSettingsDialog( const HWND hDlg ) = 0;
> 		virtual	void	SettingsDialogComplete( const HRESULT hr ) = 0;
> 		HWND	GetActiveDialogHandle( void ) const { return m_hActiveSettingsDialog; }
> 
> 		#undef DPF_MODNAME
> 		#define DPF_MODNAME "CEndpoint::SetActiveDialogHandle"
> 		void	SetActiveDialogHandle( const HWND hDialog )
> 		{
> 			DNASSERT( ( GetActiveDialogHandle() == NULL ) ||
> 					  ( hDialog == NULL ) );
> 			m_hActiveSettingsDialog = hDialog;
> 		}
> 
> 		//
442a460
> 		HWND		m_hActiveSettingsDialog;	// handle of active settings dialog
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18
> #include <WSIPX.h>
41a43
> #include	"IPXAddress.h"
104a107,108
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
209a214,219
> 		case TYPE_IPX:
> 		{
> 			pSocketAddress = CreateIPXAddress();
> 			break;
> 		}
> 
257a268,269
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
295a308,309
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
333a348,353
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( m_pSourceSocketAddress ) );
> 			break;
> 		}
> 
524a545,546
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
549a572,573
> 	DNASSERT( ( Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\iodata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
86a87,89
> 		BOOL	Win9xOperationPending( void ) const { return m_Flags.fWin9xOperationPending; }
> 		void	SetWin9xOperationPending( const BOOL fOperationPending ) { m_Flags.fWin9xOperationPending = fOperationPending; }
> 
119a123
> 			BOOL	fWin9xOperationPending : 1;		// this structure has been initialized and the operation is pending on Win9x
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
20a21
> #include	<WSIPX.h>
1058,1060d1058
< // BUGBUG: [mgere] [xbox] No need to enum adapters anymore since we only have one.
< // need to complete the removal of this functionality at a later date.
< /*
1412d1409
< */	return DPNERR_UNSUPPORTED;
1601a1599,1604
> 	//
> 	// Since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1602a1606,1624
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_ADD_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 5;
> 			break;
> 		}
> 
> 		//
1605a1628,1630
> 		case 2:
> 		default:
> 		{
1606a1632,1634
> 			break;
> 		}
> 	}
1679a1708,1713
> 	//
> 	// since the IP multicast constants are different for Winsock1 vs. Winsock2,
> 	// make sure we use the proper constant.
> 	//
> 	switch ( GetWinsockVersion() )
> 	{
1680a1715,1733
> 		// Winsock 0 doesn't exist!
> 		//
> 		case 0:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// Winsock1, use the IP_DROP_MEMBERSHIP value for Winsock1
> 		// see WINSOCK.H
> 		//
> 		case 1:
> 		{
> 			SocketOption = 6;
> 			break;
> 		}
> 
> 		//
1683a1737,1739
> 		case 2:
> 		default:
> 		{
1684a1741,1743
> 			break;
> 		}
> 	}
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
18a19
> #include	<WSIPX.h>
35a37
> #include	"StrUtils.h"
49a52
> #include	"IPUI.h"
98a102
> 	memset( m_TempHostName, 0x00, sizeof( m_TempHostName ) );
117a122
> 	DNASSERT( GetActiveDialogHandle() == NULL );
123a129,407
> // CIPEndpoint::ShowSettingsDialog - show dialog for settings
> //
> // Entry:		Pointer to thread pool
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CIPEndpoint::ShowSettingsDialog"
> 
> HRESULT	CIPEndpoint::ShowSettingsDialog( CThreadPool *const pThreadPool )
> {
> 	HRESULT	hr;
> 
> 
> 	DNASSERT( pThreadPool != NULL );
> 	DNASSERT( GetActiveDialogHandle() == NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 
> 	AddRef();
> 	hr = pThreadPool->SpawnDialogThread( DisplayIPHostNameSettingsDialog, this );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to start IP hostname dialog!" );
> 		DisplayDNError( 0, hr );
> 		goto Failure;
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:	
> 	DecRef();
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::SettingsDialogComplete - dialog has completed
> //
> // Entry:		Error code for dialog
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CIPEndpoint::SettingsDialogComplete"
> 
> void	CIPEndpoint::SettingsDialogComplete( const HRESULT hDialogResult )
> {
> 	HRESULT					hr;
> 	HRESULT					hTempResult;
> 	IDirectPlay8Address		*pBaseAddress;
> 	DWORD					dwTotalAddressBufferSize;
> 	char					*pTempAddressString;
> 	WCHAR					WCharHostName[ sizeof( m_TempHostName ) + 1 ];
> 	DWORD					dwWCharHostNameSize;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = hDialogResult;
> 	pBaseAddress = NULL;
> 	pTempAddressString = NULL;
> 
> 	//
> 	// since the dialog is exiting, clear our handle to the dialog
> 	//
> 	SetActiveDialogHandle( NULL );
> 
> 	//
> 	// dialog failed, fail the user's command
> 	//
> 	if ( hr != DPN_OK )
> 	{
> 		if ( hr != DPNERR_USERCANCEL)
> 		{
> 			DPF( 0, "Failing endpoint hostname dialog!" );
> 			DisplayErrorCode( 0, hr );
> 
> 		}
> 
> 		goto Failure;
> 	}
> 
> 	//
> 	// The dialog completed OK, rebuild remote address and complete command
> 	//
> 
> 	//
> 	// get the base DNADDRESS
> 	//
> 	pBaseAddress = m_pRemoteMachineAddress->DP8AddressFromSocketAddress();
> 	if ( pBaseAddress == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "SettingsDialogComplete: Failed to get base address when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// Add the new 'HOSTNAME' parameter to the address.  If the hostname is blank
> 	// and this is an enum, copy the broadcast hostname.  If the hostname is blank
> 	// on a connect, fail!
> 	//
> 	if ( m_TempHostName[ 0 ] == '\0' )
> 	{
> 		if ( GetType() == ENDPOINT_TYPE_ENUM )
> 		{
> 			DNASSERT( sizeof( WCharHostName ) >= g_dwIPBroadcastAddressSize );
> 			memcpy( WCharHostName, g_IPBroadcastAddress, g_dwIPBroadcastAddressSize );
> 			dwWCharHostNameSize = g_dwIPBroadcastAddressSize;
> 		}
> 		else
> 		{
> 			hr = DPNERR_ADDRESSING;
> 			DNASSERT( GetType() == ENDPOINT_TYPE_CONNECT );
> 			DPF( 0, "No hostname in dialog!" );
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		dwWCharHostNameSize = LENGTHOF( WCharHostName );
> 		hr = STR_AnsiToWide( m_TempHostName, -1, WCharHostName, &dwWCharHostNameSize );
> 		DNASSERT( hr == DPN_OK );
> 		dwWCharHostNameSize *= sizeof( WCHAR );
> 	}
> 
> 	hr = IDirectPlay8Address_AddComponent( pBaseAddress, DPNA_KEY_HOSTNAME, WCharHostName, dwWCharHostNameSize, DPNA_DATATYPE_STRING );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "SettingsDialogComplete: Failed to add hostname to address!" );
> 		goto Failure;
> 	}
> 
> 	//
> 	// set the address
> 	//
> 	hr = m_pRemoteMachineAddress->SocketAddressFromDP8Address( pBaseAddress, SP_ADDRESS_TYPE_HOST );
> 	if ( hr != DPN_OK )
> 	{
> 		DPF( 0, "Failed to rebuild DNADDRESS when completing IP hostname dialog!" );
> 		goto Failure;
> 	}
> 
> 	AddRef();
> 
> 	//
> 	// Since any asynchronous I/O posted on a thread is quit when the thread
> 	// exits, it's necessary for the completion of this operation to happen
> 	// on one of the thread pool threads.
> 	//
> 	switch ( GetType() )
> 	{
> 	    case ENDPOINT_TYPE_ENUM:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( EnumQueryJobCallback,
> 																   CancelEnumQueryJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> 	    	break;
> 	    }
> 
> 	    case ENDPOINT_TYPE_CONNECT:
> 	    {
> 			hr = m_pSPData->GetThreadPool()->SubmitDelayedCommand( ConnectJobCallback,
> 																   CancelConnectJobCallback,
> 																   this );
> 			if ( hr != DPN_OK )
> 			{
> 				DecRef();
> 				DPF( 0, "Failed to set enum query!" );
> 				DisplayDNError( 0, hr );
> 				goto Failure;
> 			}
> 
> 	    	break;
> 	    }
> 
> 	    //
> 	    // unknown!
> 	    //
> 	    default:
> 	    {
> 	    	INT3;
> 			hr = DPNERR_GENERIC;
> 	    	goto Failure;
> 
> 	    	break;
> 	    }
> 	}
> 
> Exit:
> 	if ( pBaseAddress != NULL )
> 	{
> 		IDirectPlay8Address_Release( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DNASSERT( pTempAddressString == NULL );
> 	if ( pBaseAddress != NULL )
> 	{
> 		DNFree( pBaseAddress );
> 		pBaseAddress = NULL;
> 	}
> 
> 	DecRef();
> 
> 	return;
> 
> Failure:
> 	//
> 	// cleanup and close this endpoint
> 	//
> 	switch ( GetType() )
> 	{
> 		case ENDPOINT_TYPE_CONNECT:
> 		{
> 			CleanupConnect();
> 			break;
> 		}
> 
> 		case ENDPOINT_TYPE_ENUM:
> 		{
> 			CleanupEnumQuery();
> 			break;
> 		}
> 
> 		//
> 		// other state (note that LISTEN doesn't have a dialog)
> 		//
> 		default:
> 		{
> 			INT3;
> 			break;
> 		}
> 	}
> 
> 	Close( hr );
> 	m_pSPData->CloseEndpointHandle( this );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CIPEndpoint::StopSettingsDialog - stop an active settings dialog
> //
> // Entry:		Handle of dialog to close
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CIPEndpoint::StopSettingsDialog"
> 
> void	CIPEndpoint::StopSettingsDialog( const HWND hDlg)
> {
> 	StopIPHostNameSettingsDialog( hDlg );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
237a522
> 	DNASSERT( GetActiveDialogHandle() == NULL );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\ipendpt.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
22a23,24
> #define	TEMP_HOSTNAME_LENGTH	100
> 
52a55,70
> 		// UI functions
> 		//
> 		HRESULT		ShowSettingsDialog( CThreadPool *const pThreadPool );
> 		void		SettingsDialogComplete( const HRESULT hr );
> 		void		StopSettingsDialog( const HWND hDlg );
> 
> 		#undef DPF_MODNAME
> 		#define DPF_MODNAME "CIPEndpoint::SetTempHostName"
> 		void		SetTempHostName( const char *const pHostName, const UINT_PTR uHostNameLength )
> 		{
> 			DNASSERT( pHostName[ uHostNameLength ] == '\0' );
> 			DNASSERT( ( uHostNameLength + 1 ) <= LENGTHOF( m_TempHostName ) );
> 			memcpy( m_TempHostName, pHostName, ( uHostNameLength + 1 ) );
> 		}
> 
> 		//
74a93
> 		char		m_TempHostName[ TEMP_HOSTNAME_LENGTH ];
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
62a63,67
> //
> // OS version
> //
> UINT_PTR	g_uOSType;
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\locals.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
109a110,114
> //
> // OS version
> //
> extern	UINT_PTR	g_uOSType;
> 
111a117,131
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // OSType - get OS type
> //
> // Entry:		Nothing
> //
> // Exit:		OSType
> // ------------------------------
> inline UINT_PTR	OSType( void )
> {
> 	return	g_uOSType;
> }
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include <WSIPX.h>
48a50
> #include	"IPXAddress.h"
52a55
> #include	"IPXEndpt.h"
88a92
> static	CFixedPool< CIPXAddress >	*g_pIPXAddressPool = NULL;
90a95
> static	CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >	*g_pIPXEndpointPool = NULL;
198a204,210
> 	DNASSERT( g_pIPXAddressPool == NULL );
> 	g_pIPXAddressPool = new CFixedPool< CIPXAddress >;
> 	if ( g_pIPXAddressPool == NULL )
> 	{
> 		goto Failure;
> 	}
> 
217a230,246
> 	DNASSERT( g_pIPXEndpointPool == NULL );
> 	g_pIPXEndpointPool = new CLockedContextFixedPool< CIPXEndpoint, ENDPOINT_POOL_CONTEXT* >;
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		if ( g_pIPXEndpointPool->Initialize() == FALSE )
> 		{
> 			delete	g_pIPXEndpointPool;
> 			g_pIPXEndpointPool = NULL;
> 			goto Failure;
> 		}
> 	}
> 	else
> 	{
> 		goto Failure;
> 	}
> 
> 	
345a375,381
> 	if ( g_pIPXEndpointPool != NULL )
> 	{
> 		g_pIPXEndpointPool->Deinitialize();
> 		delete	g_pIPXEndpointPool;
> 		g_pIPXEndpointPool = NULL;
> 	}
> 
355a392,397
> 	if ( g_pIPXAddressPool != NULL )
> 	{
> 		delete	g_pIPXAddressPool;
> 		g_pIPXAddressPool = NULL;
> 	}
> 
518a561,610
> // CreateIPXAddress - create IPX address
> //
> // Entry:		Nothing
> //
> // Exit:		Pointer to IPX address
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CreateIPXAddress"
> 
> CIPXAddress	*CreateIPXAddress( void )
> {
> 	CIPXAddress	*pReturnAddress;
> 
> 	
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	pReturnAddress = g_pIPXAddressPool->Get();
> 	DNLeaveCriticalSection( &g_AddressLock );
> 
> 	return	pReturnAddress;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // ReturnIPXAddress - return an IPX address
> //
> // Entry:		Pointer to IPX address
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "ReturnIPXAddress"
> 
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress )
> {
> 	DNASSERT( pIPXAddress != NULL );
> 	DNASSERT( g_pIPXAddressPool != NULL );
> 	
> 	DNEnterCriticalSection( &g_AddressLock );
> 	g_pIPXAddressPool->Release( pIPXAddress );
> 	DNLeaveCriticalSection( &g_AddressLock );
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
531a624,642
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CreateIPXEndpoint - create IPX endpoint
> //
> // Entry:		Pointer to context
> //
> // Exit:		Pointer to IPX endpoint
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CreateIPXEndpoint"
> 
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *const pContext )
> {
> 	DNASSERT( g_pIPXEndpointPool != NULL );
> 	return	g_pIPXEndpointPool->Get( pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\pools.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
34a35
> class	CIPXAddress;
35a37
> class	CIPXEndpoint;
63a66,67
> CIPXAddress	*CreateIPXAddress( void );
> void	ReturnIPXAddress( CIPXAddress *const pIPXAddress );
65a70
> CIPXEndpoint	*CreateIPXEndpoint( ENDPOINT_POOL_CONTEXT *pContext );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\rsip.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
45a46
> #include	"Registry.h"
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sendqueue.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17
> #include	<WSIPX.h>
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,21
> #include	<WSIPX.h>
> 
272a275,281
> //	//
> //	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> //	// only use Winsock2 interfaces for TCP.
> //	//
> //	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> //		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> //	{
273a283,287
> //	}
> //	else
> //	{
> //		m_pSendFunction = Winsock1Send;
> //	}
393a408,415
> 	
> 	//
> 	// Winsock 2 functionality always exists on WinNT.  If we're on Win9x, we can
> 	// only use Winsock2 interfaces for TCP.
> 	//
> 	if ( ( OSType() == VER_PLATFORM_WIN32_NT ) ||
> 		 ( ( LOWORD( GetWinsockVersion() ) >= 2 ) && ( m_pSPData->GetType() == TYPE_IP ) ) )
> 	{
394a417,421
> 	}
> 	else
> 	{
> 		m_pSendFunction = Winsock1Send;
> 	}
549a577,588
> 		//
> 		// No more endpoints are referencing this item, unbind this socket port
> 		// from the network and then remove it from the active socket port list.
> 		// If we're on Winsock1, tell the other thread that this socket needs to
> 		// be removed so we can get rid of our outstanding I/O reference.
> 		//
> 		if ( ( LOWORD( GetWinsockVersion() ) == 1 ) ||
> 			 ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( m_pSPData->GetType() == TYPE_IPX ) ) )
> 		{
> 			m_pSPData->GetThreadPool()->RemoveSocketPort( this );
> 		}
> 
1010a1050,1344
> // CSocketPort::Winsock1ReadService - service a read request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1ReadService"
> 
> BOOL	CSocketPort::Winsock1ReadService( void )
> {
> 	BOOL		fIOServiced;
> 	INT			iSocketReturn;
> 	READ_IO_DATA_POOL_CONTEXT	PoolContext;
> 	CReadIOData		*pReadData;
> 
> 
> 	//
> 	// initialize
> 	//
> 	fIOServiced = FALSE;
> 	
> 	//
> 	// Attempt to get a new receive buffer from the pool.  If we fail, we'll
> 	// just fail to service this read and the socket will still be labeled
> 	// as ready to receive so we'll try again later.
> 	//
> 	PoolContext.SPType = m_pSPData->GetType();
> 	pReadData = m_pThreadPool->GetNewReadIOData( &PoolContext );
> 	if ( pReadData == NULL )
> 	{
> 		DPF( 0, "Could not get read data to perform a Winsock1 read!" );
> 		goto Exit;
> 	}
> 
> 	DBG_CASSERT( sizeof( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ) == sizeof( char* ) );
> 	pReadData->m_iSocketAddressSize = pReadData->m_pSourceSocketAddress->GetAddressSize();
> 	pReadData->SetSocketPort( NULL );
> 	iSocketReturn = p_recvfrom( GetSocket(),												// socket to read from
> 								reinterpret_cast<char*>( pReadData->ReceivedBuffer()->BufferDesc.pBufferData ),	// pointer to receive buffer
> 								pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize,		// size of receive buffer
> 								0,															// flags (none)
> 								pReadData->m_pSourceSocketAddress->GetWritableAddress(),	// address of sending socket
> 								&pReadData->m_iSocketAddressSize							// size of address of sending socket
> 								);
> 	switch ( iSocketReturn )
> 	{
> 		//
> 		// socket has been closed
> 		//
> 		case 0:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// problem
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// one of our previous sends failed to get through,
> 				// and we don't really care anymore
> 				//
> 				case WSAECONNRESET:
> 				{
> 					break;
> 				}
> 
> 				//
> 				// This socket was probably closed
> 				//
> 				case WSAENOTSOCK:
> 				{
> 					DPF( 8, "Winsock1 reporting 'Not a socket' on receive!" );
> 					break;
> 				}
> 
> 				//
> 				// something bad happened
> 				//
> 				default:
> 				{
> 					DPF( 0, "Problem with Winsock1 recvfrom!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					INT3;
> 
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// bytes were read
> 		//
> 		default:
> 		{
> 			fIOServiced = TRUE;
> 			pReadData->ReceivedBuffer()->BufferDesc.dwBufferSize = iSocketReturn;
> 			ProcessReceivedData( pReadData );
> 
> 			break;
> 		}
> 	}
> 
> 	DNASSERT( pReadData != NULL );
> 	pReadData->DecRef();
> 
> Exit:
> 	return fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1WriteService - service a write request on a socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1WriteService"
> 
> BOOL	CSocketPort::Winsock1WriteService( void )
> {
> 	BOOL	fIOServiced;
> 
> 
> 	fIOServiced = FALSE;
> 	m_SendQueue.Lock();
> 
> 	//
> 	// if there's data to send, attempt to send it
> 	//
> 	if ( m_SendQueue.IsEmpty() == FALSE )
> 	{
> 		fIOServiced = SendFromWriteQueue();
> 	}
> 
> 	m_SendQueue.Unlock();
> 
> 	return	fIOServiced;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1ErrorService - service an error on this socket
> //
> // Entry:		Nothing
> //
> // Exit:		Boolean indicating whether I/O was serviced
> //				TRUE = I/O serviced
> //				FALSE = I/O not serviced
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1ErrorService"
> 
> BOOL	CSocketPort::Winsock1ErrorService( void )
> {
> 	//
> 	// this function doesn't do anything because errors on sockets will usually
> 	// result in the socket being closed soon
> 	//
> 	return	FALSE;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CSocketPort::Winsock1Send - send data in a Winsock 1.0 fashion
> //
> // Entry:		Pointer to write data
> //
> // Exit:		Send completion code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME "CSocketPort::Winsock1Send"
> 
> SEND_COMPLETION_CODE	CSocketPort::Winsock1Send( CWriteIOData *const pWriteData )
> {
> 	SEND_COMPLETION_CODE	SendCompletionCode;
> 	INT			iSendToReturn;
> 	UINT_PTR	uOutputBufferIndex;
> 	INT			iOutputByteCount;
> 	char		TempBuffer[ MAX_MESSAGE_SIZE ];
> 
> 
> 	DNASSERT( pWriteData != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	SendCompletionCode = SEND_COMPLETED_IMMEDIATELY_WS1;
> 
> 	//
> 	// flatten output data
> 	//
> 	iOutputByteCount = 0;
> 	uOutputBufferIndex = 0;
> 
> 	DNASSERT( pWriteData->m_uBufferCount != 0 );
> 	do
> 	{
> 		DNASSERT( ( iOutputByteCount + pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize ) <= LENGTHOF( TempBuffer ) );
> 		memcpy( &TempBuffer[ iOutputByteCount ], pWriteData->m_pBuffers[ uOutputBufferIndex ].pBufferData, pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize );
> 		iOutputByteCount += pWriteData->m_pBuffers[ uOutputBufferIndex ].dwBufferSize;
> 
> 		uOutputBufferIndex++;
> 	} while( uOutputBufferIndex < pWriteData->m_uBufferCount );
> 
> 	//
> 	// there is no need to note an I/O reference because our Winsock1 I/O is synchronous
> 	//
> 	iSendToReturn = p_sendto( GetSocket(),			// socket
> 							  TempBuffer,			// data to send
> 							  iOutputByteCount,		// number of bytes to send
> 							  0,					// flags (none)
> 							  pWriteData->m_pDestinationSocketAddress->GetAddress(),		// pointer to destination address
> 							  pWriteData->m_pDestinationSocketAddress->GetAddressSize()		// size of destination address
> 							  );
> 	switch ( iSendToReturn )
> 	{
> 		//
> 		// problem with send
> 		//
> 		case SOCKET_ERROR:
> 		{
> 			DWORD	dwWinsockError;
> 
> 
> 			dwWinsockError = p_WSAGetLastError();
> 			switch ( dwWinsockError )
> 			{
> 				//
> 				// socket would block on call
> 				//
> 				case WSAEWOULDBLOCK:
> 				{
> 					SendCompletionCode = SEND_WINSOCK_BUSY;
> 					break;
> 				}
> 
> 				//
> 				// other problem
> 				//
> 				default:
> 				{
> 					SendCompletionCode = SEND_FAILED;
> 					DNASSERT( pWriteData->Win9xOperationPending() == FALSE );
> 
> 					DPF( 0, "Problem with Winsock1 sendto!" );
> 					DisplayWinsockError( 0, dwWinsockError );
> 					break;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// send went through, make sure all bytes were sent
> 		//
> 		default:
> 		{
> 			DNASSERT( iSendToReturn == iOutputByteCount );
> 			DNASSERT( SendCompletionCode == SEND_COMPLETED_IMMEDIATELY_WS1 );
> 
> 			break;
> 		}
> 	}
> 
> 	return	SendCompletionCode;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1040c1374,1375
< 	DNASSERT( pWriteData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pWriteData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pWriteData->OverlapEvent() != NULL ) ) );
1046a1382,1390
> 	// lock the 'pending operation' list over the call to Winsock to prevent the
> 	// operation from being completed while it's being set up.
> 	//
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockWriteData();
> 	}
> 	
> 	//
1052a1397,1400
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pWriteData->SetWin9xOperationPending( TRUE );
> 
1063a1412,1416
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->UnlockWriteData();
> 	}
> 
1104a1458,1460
> 				DNASSERT( pWriteData->Win9xOperationPending() != FALSE );
> 				pWriteData->SetWin9xOperationPending( FALSE );
> 
1195c1551,1552
< 	DNASSERT( pReadData->OverlapEvent() == NULL );
---
> 	DNASSERT( ( ( OSType() == VER_PLATFORM_WIN32_NT ) && ( pReadData->OverlapEvent() == NULL ) ) ||
> 			  ( ( OSType() == VER_PLATFORM_WIN32_WINDOWS ) && ( pReadData->OverlapEvent() != NULL ) ) );
1207a1565,1568
> 	if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 	{
> 		m_pSPData->GetThreadPool()->LockReadData();
> 	}
1215a1577,1579
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
> 	pReadData->SetWin9xOperationPending( TRUE );
1233a1598,1601
> 			if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 			{
> 				m_pSPData->GetThreadPool()->UnlockReadData();
> 			}
1250a1619,1622
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1268a1641,1644
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1273a1650,1651
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1291a1670,1673
> 				if ( OSType() == VER_PLATFORM_WIN32_WINDOWS )
> 				{
> 					m_pSPData->GetThreadPool()->UnlockReadData();
> 				}
1318a1701,1702
> 				DNASSERT( pReadData->Win9xOperationPending() != FALSE );
> 				pReadData->SetWin9xOperationPending( FALSE );
1354a1739,1740
> 	DNASSERT( ( pWriteData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
2021a2408,2414
> 	switch ( OSType() )
> 	{
> 		//
> 		// we're on NT, bind to the completion port, issue a read and we're done
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
2066a2460,2523
> 			break;
> 		}
> 
> 		//
> 		// Win9x.
> 		// If this is not an IPX socket and Winsock 2 (or greater) is available,
> 		// call the Winsock 2 read function.  If this is IPX or we're stuck with
> 		// Winsock 1, inform the thread pool as such.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( hIOCompletionPort == NULL );
> 
> 			if ( ( LOWORD( GetWinsockVersion() ) >= 2 ) &&
> 				 ( m_pSPData->GetType() == TYPE_IP ) )
> 			{
> 				//
> 				// we're using Winsock2, call for two outstanding reads per socket.
> 				//
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #1 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 				hr = Winsock2Receive();
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Problem issuing Win9x read #2 in StartReceiving!" );
> 					DisplayDNError( 0, hr );
> 					INT3;
> 				}
> 
> 			}
> 			else
> 			{
> 				DNASSERT( m_pSPData != NULL );
> 				hr = m_pSPData->GetThreadPool()->AddSocketPort( this );
> 				if ( hr != DPN_OK )
> 				{
> 					DPF( 0, "Failed to add to active socket list!" );
> 					DisplayDNError( 0, hr );
> 					goto Failure;
> 				}
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			hr = DPNERR_UNSUPPORTED;
> 			DNASSERT( FALSE );
> 			goto Failure;
> 
> 			break;
> 		}
> 	}
> 
2574a3032,3033
> 	DNASSERT( ( pReadData->Win9xOperationPending() == FALSE ) ||
> 			  ( OSType() == VER_PLATFORM_WIN32_NT ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\socketport.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
267a268,270
> 		BOOL	Winsock1ReadService( void );
> 		BOOL	Winsock1WriteService( void );
> 		BOOL	Winsock1ErrorService( void );
336a340
> 		SEND_COMPLETION_CODE	Winsock1Send( CWriteIOData *const pWriteData );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\sources.inc)---()---()---()---()---()---()---()---()---()---()  
.  
.  
0a1,15
> #
> # The MAJORCOMP and MINORCOMP variables are defined
> # so that $(MAJORCOMP)$(MINORCOMP)filename can be used in
> # cross compiling to provide unique filenames in a flat namespace.
> #
> 
> MAJORCOMP=windows
> MINORCOMP=media
> 
> #
> # The TARGETNAME variable is defined by the developer.  It is the name of
> # the target (component) that is being built by this makefile.  It
> # should NOT include any path or file extension information.
> #
> 
2c17,27
< TARGETTYPE=DYNLINK
---
> DLLDEF=..\wsocksp.def
> UMTYPE=windows
> 
> #
> # The TARGETPATH and TARGETTYPE variables are defined by the developer.
> # The first specifies where the target is to be build.  The second specifies
> # the type of target (either PROGRAM, DYNLINK, LIBRARY, DRIVER, etc
> # UMAPPL_NOLIB is used when you're only building user-mode
> # apps and don't need to build a library.
> #
> 
3a29
> TARGETTYPE=DYNLINK
5,8c31,45
< !ifdef _BUILD_FOR_WIN2000
< UMTYPE=windows
< DLLENTRY=_DllMainCRTStartup
< C_DEFINES=$(C_DEFINES) -D_BUILD_FOR_WIN2000
---
> #
> # The TARGETLIBS specifies additional libraries to link with you target
> # image.  Each library path specification should contain an asterisk (*)
> # where the machine specific subdirectory name should go.
> #
> 
> #
> # 04/10/2000 - allows for addition of BoundsChecker, etc
> #  libs specified in the OS environment
> #
> TARGETLIBS=$(TARGETLIBS) \
>            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> 	   $(BASEDIR)\public\sdk\lib\*\libcmtd.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmtd.lib \
10,12c47,48
< UMTYPE=xboxdll
< DLLENTRY=DllMain
< LINKER_FLAGS=-align:32
---
> 	   $(BASEDIR)\public\sdk\lib\*\libcmt.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\libcpmt.lib \
13a50,56
> 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
> 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
> 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib
15,16c58,64
< INCLUDES=..\..\;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
< C_DEFINES=$(C_DEFINES) -D_UNICODE -DUNICODE -DCINTERFACE
---
> #
> # If a debug mode is selected, make sure we include the defines to make the
> # logging code operate.
> #
> !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
> C_DEFINES=$(C_DEFINES) /DDEBUG /D_DEBUG
> !endif
18,21c66,75
< USER_C_FLAGS=$(USER_C_FLAGS) /FAcs /Od
< 
< !if "$(NTDEBUG)" == "ntsd" || "$(NTDEBUG)" == "ntsdnodbg" || "$(NTDEBUG)" == "cvp" || "$(NTDEBUG)" == "sym"
< USER_C_FLAGS=$(USER_C_FLAGS) /Od
---
> #
> # If we're in the release mode, force the compiler output debug information
> # in the form of a .PDB file.  The MSC_OPTIMIZATION lines are to force the compiler
> # to generate MSDEV compatible .PDB files with /Zi.  The /FAcs line is used to
> # generate mixed source and code files for easier debugging.
> #
> !if "$(NTDEBUG)" == ""
> #MSC_OPTIMIZATION=/Oxs /Zi
> #MSC_OPTIMIZATION= $(MSC_OPTIMIZATION) /FAcs
> NTDEBUGTYPE=both
24c78,82
< MSC_WARNING_LEVEL=/W3 /WX
---
> #
> # The INCLUDES variable specifies any include paths that are specific to
> # this source directory.  Separate multiple directory paths with single
> # semicolons.  Relative path specifications are okay.
> #
26c84
< DLLDEF=..\wsocksp.def
---
> INCLUDES=$(DXROOT)\inc;..\..\..\inc;..\..\..\common;..\..\..\dnaddress
27a86,93
> 
> #
> # The SOURCES variable is defined by the developer.  It is a list of all the
> # source files for this component.  Each source file should be on a separate
> # line using the line continuation character.  This will minimize merge
> # conflicts if two developers adding source files to the same component.
> #
> 
29c95
<          ..\Classfac.cpp \
---
> 	 ..\Classfac.cpp \
32a99
> 	 ..\DWinsock.cpp \
37a105,107
> 	 ..\IPUI.cpp \
> 	 ..\IPXAddress.cpp \
> 	 ..\IPXEndpt.cpp \
40a111
>          ..\Registry.cpp \
49a121,123
> #
> # Next specify options for the compiler.
> #
50a125,127
> C_DEFINES= $(C_DEFINES) /D_USRDLL /D_MBCS /DWIN32 /D_MT /DDNWSock_EXPORTS /DCINTERFACE
> 
> USER_C_FLAGS=-nologo -W3
53,73c130,131
< TARGETLIBS= \
<            ..\..\..\common\obj$(BUILD_ALT_DIR)\*\common.lib \
<            $(BASEDIR)\public\sdk\lib\*\dpnaddr.lib \
< !ifdef _BUILD_FOR_WIN2000
< 	   $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
<            $(BASEDIR)\public\sdk\lib\*\libcmt$(BUILD_ALT_DIR).lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ws2_32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\kernel32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\user32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\gdi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\winmm.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\advapi32.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\ole32.lib  \
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
< 	   $(BASEDIR)\public\sdk\lib\*\rpcrt4.lib
< !else
< 	   $(BASEDIR)\public\sdk\lib\*\uuid.lib \
<            $(BASEDIR)\public\sdk\lib\*\xapi.lib \
<            $(DDK_LIB_PATH)\ntoskrnl.lib \
<            $(BASEDIR)\public\sdk\lib\*\winsockx.lib
< !endif
---
> DLLENTRY=_DllMainCRTStartup
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
17a18,19
> #include	<WSIPX.H>
> 
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spaddress.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
122c122,123
< 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) );
---
> 						 ( sizeof( m_SocketAddress.SocketAddress ) == sizeof( m_SocketAddress.IPSocketAddress ) ) &&
> 						 ( sizeof( m_SocketAddress.IPSocketAddress ) == ( sizeof( m_SocketAddress.IPXSocketAddress ) + 2 ) ) );
168c169,170
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) ||
> 					  ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
253a256
> 			DBG_CASSERT( sizeof( m_SocketAddress.SocketAddress.sa_family ) == sizeof( m_SocketAddress.IPXSocketAddress.sa_family ) );
254a258
> 			DBG_CASSERT( OFFSETOF( SOCKADDR, sa_family ) == OFFSETOF( SOCKADDR_IPX, sa_family ) );
257c261
< 			DNASSERT( m_SocketAddress.SocketAddress.sa_family == AF_INET );
---
> 			DNASSERT( ( m_SocketAddress.SocketAddress.sa_family == AF_INET ) || ( m_SocketAddress.SocketAddress.sa_family == AF_IPX ) );
266c270
< 			DNASSERT( m_iSocketProtocol == IPPROTO_UDP );
---
> 			DNASSERT( ( m_iSocketProtocol == IPPROTO_UDP ) || ( m_iSocketProtocol == NSPROTO_IPX ) );
294a299
> 			SOCKADDR_IPX	IPXSocketAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
19a20,21
> #include <WSIPX.h>
> 
47a50
> #include	"IPXAddress.h"
53a57
> #include	"IPXEndpt.h"
207a212,213
> 	if ( GetType() == TYPE_IP )
> 	{
217a224
> 	}
265a273,302
> 	switch ( OSType() )
> 	{
> 		//
> 		// Windows NT.  Nothing to do.
> 		//
> 		case VER_PLATFORM_WIN32_NT:
> 		{
> 			DPF( 8, "WinNT detected!" );
> 			break;
> 		}
> 
> 		//
> 		// Windows 95, 98
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DPF( 8, "Win9x detected!" );
> 			break;
> 		}
> 
> 		// other version (unsupported!)
> //		case VER_PLATFORM_WIN32_CE:
> 		case VER_PLATFORM_WIN32s:
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
907a945,950
> 		case TYPE_IPX:
> 		{
> 			pEndpoint = CreateIPXEndpoint( &PoolContext );
> 			break;
> 		}
> 
1238a1282,1287
> 		case TYPE_IPX:
> 		{
> 			pReturn = CreateIPXAddress();
> 			break;
> 		}
> 
1272a1322,1327
> 			break;
> 		}
> 
> 		case TYPE_IPX:
> 		{
> 			ReturnIPXAddress( static_cast<CIPXAddress*>( pAddress ) );
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\spdata.h)---()---()---()---()---()---()---()---()---()---()  
.  
.  
49a50,51
> class	CIPXEndpoint;
> class	CIPXAddress;
.  
.  
()---()---()---()---()---()---()---()---()---(.\sp\wsock\threadpool.cpp)---()---()---()---()---()---()---()---()---()---()  
.  
.  
16a17,18
> #include	<WSIPX.h>
> 
124a127,147
> // structure for common data in Win9x thread
> //
> typedef	struct	_WIN9X_CORE_DATA
> {
> 	DN_TIME		NextTimerJobTime;					// time when the next timer job needs service
> 	HANDLE		hWaitHandles[ EVENT_INDEX_MAX ];	// handles for waiting on
> 	DWORD		dwTimeToNextJob;					// time to next job
> 	BOOL		fTimerJobsActive;					// Boolean indicating that there are active jobs
> 	BOOL		fLooping;							// Boolean indicating that this thread is still running
> 
> } WIN9X_CORE_DATA;
> 
> //
> // information passed to the Win9x workhorse thread
> //
> typedef struct	_WIN9X_THREAD_DATA
> {
> 	CThreadPool		*pThisThreadPool;	// pointer to this object
> } WIN9X_THREAD_DATA;
> 
> //
131a155,164
> //
> // structure passed to dialog threads
> //
> typedef	struct	_DIALOG_THREAD_PARAM
> {
> 	DIALOG_FUNCTION	*pDialogFunction;
> 	void			*pContext;
> 	CThreadPool		*pThisThreadPool;
> } DIALOG_THREAD_PARAM;
> 
245c278,285
< 	DEBUG_ONLY( 
---
> 	//
> 	// Win9x has poor APC support and as part of the workaround, the read data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
247c287,288
< 	)
---
> 						break;
> 					}
248a290,297
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_ReadDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
255c304,311
< 	DEBUG_ONLY(
---
> 	//
> 	// Win9x has poor APC support and as part of the workaround, the write data
> 	// lock needs to be taken twice.  Adjust the recursion counts accordingly.
> 	//
> 	DEBUG_ONLY( switch ( OSType() )
> 				{
> 					case VER_PLATFORM_WIN32_WINDOWS:
> 					{
257c313,314
< 	)
---
> 						break;
> 					}
258a316,323
> 					default:
> 					{
> 						DebugSetCriticalSectionRecursionCount( &m_WriteDataLock, 1 );
> 						break;
> 					}
> 				} )
> 
> 
292a358,364
> 	// pool of IPX read requests
> 	m_IPXReadIODataPool.Initialize( CReadIOData::ReadIOData_Alloc,
> 									CReadIOData::ReadIOData_Get,
> 									CReadIOData::ReadIOData_Release,
> 									CReadIOData::ReadIOData_Dealloc
> 									);
> 
349a422,426
> 	//
> 	// OS-specific initialization
> 	//
> 	switch ( OSType() )
> 	{
352a430,431
> 		case VER_PLATFORM_WIN32_NT:
> 		{
358a438,464
> 			break;
> 		}
> 
> 		//
> 		// Windows 9x
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			hr = Win9xInit();
> 			if ( hr != DPN_OK )
> 			{
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 	
390a497,498
> 	SYSTEM_INFO		SystemInfo;
> 	UINT_PTR		uDesiredThreads;
397a506,510
> 	//
> 	// get machine information
> 	//
> 	memset( &SystemInfo, 0x00, sizeof( SystemInfo ) );
> 	GetSystemInfo( &SystemInfo );
421a535,541
> 	uDesiredThreads = ( SystemInfo.dwNumberOfProcessors * 2 ) + 2;
> 	DNASSERT( uDesiredThreads != 0 );
> 	while ( uDesiredThreads > 0 )
> 	{
> 		uDesiredThreads--;
> 		StartNTCompletionThread();
> 	}
423,427d542
<     StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 	StartNTCompletionThread();
< 
452a568,806
> // CThreadPool::Win9xInit - initialize Win9x components
> //
> // Entry:		Nothing
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::Win9xInit"
> 
> HRESULT	CThreadPool::Win9xInit( void )
> {
> 	HRESULT				hr;
> 	HANDLE				hPrimaryThread;
> 	HANDLE				hSecondaryThread;
> 	DWORD				dwPrimaryThreadID;
> 	DWORD				dwSecondaryThreadID;
> 	WIN9X_THREAD_DATA	*pPrimaryThreadInput;
> 	WIN9X_THREAD_DATA	*pSecondaryThreadInput;
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	hPrimaryThread = NULL;
> 	hSecondaryThread = NULL;
> 	pPrimaryThreadInput = NULL;
> 	pSecondaryThreadInput = NULL;
> 
> 	//
> 	// Win9x requires completion events for Winsock2.  Always allocate the
> 	// events even though the they might not be used.
> 	//
> 	DNASSERT( m_hWinsock2SendComplete == NULL );
> 	m_hWinsock2SendComplete = CreateEvent( NULL,	// pointer to security (none)
> 										   TRUE,	// manual reset
> 										   FALSE,	// start unsignalled
> 										   NULL		// pointer to name (none)
> 										   );
> 	if ( m_hWinsock2SendComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Send!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	DNASSERT( m_hWinsock2ReceiveComplete == NULL );
> 	m_hWinsock2ReceiveComplete = CreateEvent( NULL,		// pointer to security (none)
> 											  TRUE,		// manual reset
> 											  FALSE,	// start unsignalled
> 											  NULL		// pointer to name (none)
> 											  );
> 	if ( m_hWinsock2ReceiveComplete == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to create event for Winsock2Receive!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	//
> 	// create parameters to worker threads
> 	//
> 	pPrimaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pPrimaryThreadInput ) ) );
> 	if ( pPrimaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for primary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	pSecondaryThreadInput = static_cast<WIN9X_THREAD_DATA*>( DNMalloc( sizeof( *pSecondaryThreadInput ) ) );
> 	if ( pSecondaryThreadInput == NULL )
> 	{
> 		DPF( 0, "Problem allocating memory for secondary Win9x thread!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> 	memset( pPrimaryThreadInput, 0x00, sizeof( *pPrimaryThreadInput ) );
> 	pPrimaryThreadInput->pThisThreadPool = this;
> 	
> 	DBG_CASSERT( sizeof( *pPrimaryThreadInput ) == sizeof( *pSecondaryThreadInput ) );
> 	memcpy( pSecondaryThreadInput, pPrimaryThreadInput, sizeof( *pSecondaryThreadInput ) );
> 
> 	//
> 	// assume that the thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 	
> 	//
> 	// Create one worker thread and boost its priority.  If the primary thread
> 	// can be created and boosted, create a secondary thread.  Do not create a
> 	// secondary thread if the primary could not be boosted because the system
> 	// is probably low on resources.
> 	//
> 	hPrimaryThread = CreateThread( NULL,					// pointer to security attributes (none)
> 								   0,						// stack size (default)
> 								   PrimaryWin9xThread,		// pointer to thread function
> 								   pPrimaryThreadInput,		// pointer to input parameter
> 								   0,						// let it run
> 								   &dwPrimaryThreadID		// pointer to destination of thread ID
> 								   );
> 	if ( hPrimaryThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// Failed to create thread, decrement active thread count and report
> 		// error.
> 		//
> 		DecrementActiveThreadCount();
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem creating Win9x thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		hr = DPNERR_OUTOFMEMORY;
> 
> 		goto Failure;
> 	}
> 	pPrimaryThreadInput = NULL;
> 
> 
> 	DPF( 8, "Created primary Win9x thread: 0x%x\tTotal Thread Count: %d", dwPrimaryThreadID, ThreadCount() );
> 	DNASSERT( hPrimaryThread != NULL );
> 	if ( SetThreadPriority( hPrimaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to boost priority of primary Win9x read thread!  Not starting secondary thread" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 	else
> 	{
> 		//
> 		// primary thread was created and boosted, create a secondary thread
> 		//
> 		IncrementActiveThreadCount();
> 		hSecondaryThread = CreateThread( NULL,						// pointer to security attributes (none)
> 										 0,							// stack size (default)
> 										 SecondaryWin9xThread,		// pointer to thread function
> 										 pSecondaryThreadInput,		// pointer to input parameter
> 										 0,							// let it run
> 										 &dwSecondaryThreadID		// pointer to destination of thread ID
> 										 );
> 		if ( hSecondaryThread != NULL )
> 		{
> 			DPF( 8, "Created secondary Win9x thread: 0x%x\tTotal Thread Count: %d", dwSecondaryThreadID, ThreadCount() );
> 			
> 			pSecondaryThreadInput = NULL;
> 			DNASSERT( hSecondaryThread != NULL );
> 			if ( SetThreadPriority( hSecondaryThread, THREAD_PRIORITY_ABOVE_NORMAL ) == FALSE )
> 			{
> 				DWORD	dwError;
> 
> 
> 				dwError = GetLastError();
> 				DPF( 0, "Failed to boost priority of secondary Win9x thread!" );
> 				DisplayErrorCode( 0, dwError );
> 			}
> 		}
> 		else
> 		{
> 			//
> 			// thread startup failed, decrement active thread count
> 			//
> 			DecrementActiveThreadCount();
> 		}
> 	}
> 
> 
> Exit:
> 	if ( pPrimaryThreadInput != NULL )
> 	{
> 		DNFree( pPrimaryThreadInput );
> 		pPrimaryThreadInput = NULL;
> 	}
> 
> 	if ( pSecondaryThreadInput != NULL )
> 	{
> 		DNFree( pSecondaryThreadInput );
> 		pSecondaryThreadInput = NULL;
> 	}
> 
> 	if ( hPrimaryThread != NULL )
> 	{
> 		if ( CloseHandle( hPrimaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hPrimaryThread = NULL;
> 	}
> 
> 	if ( hSecondaryThread != NULL )
> 	{
> 		if ( CloseHandle( hSecondaryThread ) == FALSE )
> 		{
> 			DWORD	dwError;
> 
> 
> 			dwError = GetLastError();
> 			DPF( 0, "Problem closing Win9x thread hanle!" );
> 			DisplayErrorCode( 0, dwError );
> 		}
> 
> 		hSecondaryThread = NULL;
> 	}
> 
> 	return	hr;
> 
> Failure:
> 	DPF( 0, "Failed Win9x Initialization!" );
> 	DisplayDNError( 0, hr );
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
557a912,913
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{	
578a935
> 	}
666a1024,1025
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pReadData->Win9xOperationPending() != FALSE ) );
> 		pReadData->SetWin9xOperationPending( FALSE );
685a1045,1046
> 		DNASSERT( ( OSType() == VER_PLATFORM_WIN32_NT ) || ( pWriteData->Win9xOperationPending() != FALSE ) );
> 		pWriteData->SetWin9xOperationPending( FALSE );
836a1198
> 	m_IPXReadIODataPool.Deinitialize();
927d1288
< 			
931a1293,1301
> 		// IPX
> 		//
> 		case TYPE_IPX:
> 		{
> 			pTempReadData = m_IPXReadIODataPool.Get( pContext );
> 			break;
> 		}
> 
> 		//
1012a1383,1391
> 		// IPX
> 		//
> 		case AF_IPX:
> 		{
> 			m_IPXReadIODataPool.Release( pReadData );
> 			break;
> 		}
> 
> 		//
1276a1656,1657
> 	switch ( OSType() )
> 	{
1279a1661,1662
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1296a1680,1708
> 			break;
> 		}
> 
> 		//
> 		// Win9x, set event that the work thread will listen for
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			DNASSERT( m_JobQueue.GetPendingJobHandle() != NULL );
> 			if ( m_JobQueue.SignalPendingJob() == FALSE )
> 			{
> 				hr = DPNERR_OUTOFMEMORY;
> 				DPF( 0, "Failed to signal pending job!" );
> 				goto Failure;
> 			}
> 
> 			break;
> 		}
> 
> 		//
> 		// unknown platform
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1413a1826,1827
> 	if ( OSType() == VER_PLATFORM_WIN32_NT )
> 	{
1420a1835
> 	}
1629a2045,2145
> // CThreadPool::SpawnDialogThread - start a secondary thread to display service
> //		provider UI.
> //
> // Entry:		Pointer to dialog function
> //				Dialog context
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::SpawnDialogThread"
> 
> HRESULT	CThreadPool::SpawnDialogThread( DIALOG_FUNCTION *const pDialogFunction, void *const pDialogContext )
> {
> 	HRESULT	hr;
> 	HANDLE	hDialogThread;
> 	DIALOG_THREAD_PARAM		*pThreadParam;
> 	DWORD	dwThreadID;
> 
> 
> 	DNASSERT( pDialogFunction != NULL );
> 	DNASSERT( pDialogContext != NULL );		// why would anyone not want a dialog context??
> 
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	pThreadParam = NULL;
> 
> 	//
> 	// create and initialize thread param
> 	//
> 	pThreadParam = static_cast<DIALOG_THREAD_PARAM*>( DNMalloc( sizeof( *pThreadParam ) ) );
> 	if ( pThreadParam == NULL )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "Failed to allocate memory for dialog thread!" );
> 		goto Failure;
> 	}
> 
> 	pThreadParam->pDialogFunction = pDialogFunction;
> 	pThreadParam->pContext = pDialogContext;
> 	pThreadParam->pThisThreadPool = this;
> 
> 	//
> 	// assume that a thread will be created
> 	//
> 	IncrementActiveThreadCount();
> 
> 	//
> 	// create thread
> 	//
> 	hDialogThread = CreateThread( NULL,					// pointer to security (none)
> 								  0,					// stack size (default)
> 								  DialogThreadProc,		// thread procedure
> 								  pThreadParam,			// thread param
> 								  0,					// creation flags (none)
> 								  &dwThreadID );		// pointer to thread ID
> 	if ( hDialogThread == NULL )
> 	{
> 		DWORD	dwError;
> 
> 
> 		//
> 		// decrement active thread count and report error
> 		//
> 		DecrementActiveThreadCount();
> 		
> 		dwError = GetLastError();
> 		DPF( 0, "Failed to start dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 		goto Failure;
> 	}
>   								
> 	if ( CloseHandle( hDialogThread ) == FALSE )
> 	{
> 		DWORD	dwError;
> 
> 
> 		dwError = GetLastError();
> 		DPF( 0, "Problem closing handle from create dialog thread!" );
> 		DisplayErrorCode( 0, dwError );
> 	}
> 
> Exit:	
> 	return	hr;
> 
> Failure:
> 	if ( pThreadParam != NULL )
> 	{
> 		DNFree( pThreadParam );
> 		pThreadParam = NULL;
> 	}
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1652a2169,2170
> 	switch ( OSType() )
> 	{
1653a2172,2181
> 		// Win9x only has one thread
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			*piThreadCount = 1;
> 			DNASSERT( NTCompletionThreadCount() == 0 );
> 			break;
> 		}
> 
> 		//
1655a2184,2185
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1657a2188,2189
> 			break;
> 		}
1658a2191,2200
> 		//
> 		// other
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1690a2233,2234
> 	switch ( OSType() )
> 	{
1691a2236,2243
> 		// Win9x has only 1 thread, too bad.
> 		//
> 		case VER_PLATFORM_WIN32_WINDOWS:
> 		{
> 			break;
> 		}
> 
> 		//
1697a2250,2251
> 		case VER_PLATFORM_WIN32_NT:
> 		{
1737a2292,2304
> 			break;
> 		}
> 
> 		//
> 		// other OS
> 		//
> 		default:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
1820a2388,2540
> // CThreadPool::AddSocketPort - add a socket to the Win9x watch list
> //
> // Entry:		Pointer to SocketPort
> //
> // Exit:		Error code
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::AddSocketPort"
> 
> HRESULT	CThreadPool::AddSocketPort( CSocketPort *const pSocketPort )
> {
> 	HRESULT	hr;
> 	BOOL	fSocketAdded;
> 
> 	
> 	DNASSERT( pSocketPort != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	hr = DPN_OK;
> 	fSocketAdded = FALSE;
> 
> 	Lock();
> 
> 	//
> 	// We're capped by the number of sockets we can use for Winsock1.  Make
> 	// sure we don't allocate too many sockets.
> 	//
> 	if ( m_uReservedSocketCount == FD_SETSIZE )
> 	{
> 		hr = DPNERR_OUTOFMEMORY;
> 		DPF( 0, "There are too many sockets allocated on Winsock1!" );
> 		goto Failure;
> 	}
> 
> 	m_uReservedSocketCount++;
> 	
> 	DNASSERT( m_SocketSet.fd_count < FD_SETSIZE );
> 	m_pSocketPorts[ m_SocketSet.fd_count ] = pSocketPort;
> 	m_SocketSet.fd_array[ m_SocketSet.fd_count ] = pSocketPort->GetSocket();
> 	m_SocketSet.fd_count++;
> 	fSocketAdded = TRUE;
> 
> 	//
> 	// add a reference to note that this socket port is being used by the thread
> 	// pool
> 	//
> 	pSocketPort->AddRef();
> 
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when adding socket port to active list!" );
> 		hr = DPNERR_OUTOFMEMORY;
> 		goto Failure;
> 	}
> 
> Exit:
> 	Unlock();
> 	
> 	return	hr;
> 
> Failure:
> 	if ( fSocketAdded != FALSE )
> 	{
> 		AssertCriticalSectionIsTakenByThisThread( &m_Lock, TRUE );
> 		m_SocketSet.fd_count--;
> 		m_pSocketPorts[ m_SocketSet.fd_count ] = NULL;
> 		m_SocketSet.fd_array[ m_SocketSet.fd_count ] = NULL;
> 		fSocketAdded = FALSE;
> 	}
> 
> 	m_uReservedSocketCount--;
> 
> 	goto Exit;
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::RemoveSocketPort - remove a socket from the Win9x watch list
> //
> // Entry:		Pointer to socket port to remove
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::RemoveSocketPort"
> 
> void	CThreadPool::RemoveSocketPort( CSocketPort *const pSocketPort )
> {
> 	UINT_PTR	uIndex;
> 
> 
> 	DNASSERT( pSocketPort != NULL );
> 	
> 	Lock();
> 
> 	uIndex = m_SocketSet.fd_count;
> 	DNASSERT( uIndex != 0 );
> 	while ( uIndex != 0 )
> 	{
> 		uIndex--;
> 
> 		if ( m_pSocketPorts[ uIndex ] == pSocketPort )
> 		{
> 			m_uReservedSocketCount--;
> 			m_SocketSet.fd_count--;
> 
> 			memmove( &m_pSocketPorts[ uIndex ],
> 					 &m_pSocketPorts[ uIndex + 1 ],
> 					 ( sizeof( m_pSocketPorts[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			memmove( &m_SocketSet.fd_array[ uIndex ],
> 					 &m_SocketSet.fd_array[ uIndex + 1 ],
> 					 ( sizeof( m_SocketSet.fd_array[ uIndex ] ) * ( m_SocketSet.fd_count - uIndex ) ) );
> 
> 			//
> 			// clear last entry which is now unused
> 			//
> 			memset( &m_pSocketPorts[ m_SocketSet.fd_count ], 0x00, sizeof( m_pSocketPorts[ m_SocketSet.fd_count ] ) );
> 			memset( &m_SocketSet.fd_array[ m_SocketSet.fd_count ], 0x00, sizeof( m_SocketSet.fd_array[ m_SocketSet.fd_count ] ) );
> 
> 			//
> 			// end the loop
> 			//
> 			uIndex = 0;
> 		}
> 	}
> 
> 	Unlock();
> 	
> 	pSocketPort->DecRef();
> 
> 	//
> 	// It's really not necessary to signal a new job here because there were
> 	// active sockets on the last iteration of the Win9x thread.  That means the
> 	// Win9x thread was in a polling mode to check for sockets and the next time
> 	// through it will notice that there is a missing socket.  By signalling the
> 	// job event we reduce the time needed for the thread to figure out that the
> 	// socket is gone.
> 	//
> 	if ( m_JobQueue.SignalPendingJob() == FALSE )
> 	{
> 		DPF( 0, "Failed to signal pending job when removeing socket port to active list!" );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
1973a2694,3407
> // CThreadPool::CompleteOutstandingSends - check for completed sends and
> //		indicate send completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::CompleteOutstandingSends"
> 
> void	CThreadPool::CompleteOutstandingSends( void )
> {
> 	CBilink		*pCurrentOutstandingWrite;
> 	CBilink		WritesToBeProcessed;
> 
> 
> 	WritesToBeProcessed.Initialize();
> 	LockWriteData();
> 
> 	//
> 	// Loop through the list out outstanding sends.  Any completed sends are
> 	// removed from the list and processed after we release the write data lock.
> 	//
> 	pCurrentOutstandingWrite = m_OutstandingWriteList.GetNext();
> 	while ( pCurrentOutstandingWrite != &m_OutstandingWriteList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CWriteIOData	*pWriteIOData;
> 		DWORD			dwFlags;
> 
> 
> 		//
> 		// note this send and advance pointer to the next pending send
> 		//
> 		pWriteIOData = pWriteIOData->WriteDataFromBilink( pCurrentOutstandingWrite );
> 		pCurrentOutstandingWrite = pCurrentOutstandingWrite->GetNext();
> 
> 		if ( pWriteIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pWriteIOData->SocketPort()->GetSocket(),
> 										   pWriteIOData->Overlap(),
> 										   &pWriteIOData->m_dwOverlappedBytesSent,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the sent bytes
> 				// for zero (we'll never send zero bytes).
> 				//
> 				if ( pWriteIOData->m_dwOverlappedBytesSent == 0 )
> 				{
> 					goto SkipSendCompletion;
> 				}
> 
> 				pWriteIOData->m_Win9xSendHResult = DPN_OK;
> 				pWriteIOData->m_dwOverlappedBytesSent = 0;
> 			}
> 			else
> 			{
> 				DWORD	dwWSAError;
> 
> 
> 				dwWSAError = p_WSAGetLastError();
> 				switch( dwWSAError )
> 				{
> 					//
> 					// this I/O operation is incomplete, don't send notification to the user
> 					//
> 					case ERROR_IO_PENDING:
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipSendCompletion;
> 						break;
> 					}
> 
> 					//
> 					// WSAENOTSOCK = the socket has been closed, most likely
> 					// as a result of a command completing or being cancelled.
> 					//
> 					case WSAENOTSOCK:
> 					{
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_USERCANCEL;
> 						break;
> 					}
> 
> 					//
> 					// other error, stop and look
> 					//
> 					default:
> 					{
> 						INT3;
> 						pWriteIOData->m_Win9xSendHResult = DPNERR_GENERIC;
> 						DisplayWinsockError( 0, dwWSAError );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pWriteIOData->Win9xOperationPending() != FALSE );
> 			pWriteIOData->SetWin9xOperationPending( FALSE );
> 
> 			pWriteIOData->m_OutstandingWriteListLinkage.RemoveFromList();
> 			pWriteIOData->m_OutstandingWriteListLinkage.InsertBefore( &WritesToBeProcessed );
> 		}
> 
> SkipSendCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockWriteData();
> 
> 	//
> 	// process all writes that have been pulled to the side.
> 	//
> 	while (  WritesToBeProcessed.GetNext() != &WritesToBeProcessed )
> 	{
> 		BOOL			fIOServiced;
> 		CWriteIOData	*pTempWrite;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempWrite = CWriteIOData::WriteDataFromBilink( WritesToBeProcessed.GetNext() );
> 		pTempWrite->m_OutstandingWriteListLinkage.RemoveFromList();
> 		pSocketPort = pTempWrite->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 
> 		fIOServiced = pSocketPort->SendFromWriteQueue();
> 		pSocketPort->SendComplete( pTempWrite, pTempWrite->m_Win9xSendHResult );
> 		pSocketPort->DecRef();
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::CompleteOutstandingReceives - check for completed receives and
> //		indicate completion for them.
> //
> // Entry:		Nothing
> //
> // Exit:		Nothing
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::CompleteOutstandingReceives"
> 
> void	CThreadPool::CompleteOutstandingReceives( void )
> {
> 	CBilink		*pCurrentOutstandingRead;
> 	CBilink		ReadsToBeProcessed;
> 
> 
> 	ReadsToBeProcessed.Initialize();
> 	LockReadData();
> 
> 	//
> 	// Loop through the list of outstanding reads and pull out the ones that need
> 	// to be serviced.  We don't want to service them while the read data lock
> 	// is taken.
> 	//
> 	pCurrentOutstandingRead = m_OutstandingReadList.GetNext();
> 	while ( pCurrentOutstandingRead != &m_OutstandingReadList )
> 	{
> 		CSocketPort		*pSocketPort;
> 		CReadIOData		*pReadIOData;
> 		DWORD			dwFlags;
> 
> 
> 		pReadIOData = pReadIOData->ReadDataFromBilink( pCurrentOutstandingRead );
> 		pCurrentOutstandingRead = pCurrentOutstandingRead->GetNext();
> 
> 		//
> 		// Make sure this operation is really pending before attempting to check
> 		// for completion.  It's possible that the read was added to the list, but
> 		// we haven't actually called Winsock yet.
> 		//
> 		if ( pReadIOData->Win9xOperationPending() != FALSE )
> 		{
> 			if ( p_WSAGetOverlappedResult( pReadIOData->SocketPort()->GetSocket(),
> 										   pReadIOData->Overlap(),
> 										   &pReadIOData->m_dwOverlappedBytesReceived,
> 										   FALSE,
> 										   &dwFlags
> 										   ) != FALSE )
> 			{
> 				//
> 				// Overlapped results will complete with success and zero bytes
> 				// transferred when the overlapped structure is checked BEFORE
> 				// the operation has really been subnitted.  This is a possibility
> 				// with the current code.  To combat this, check the received bytes
> 				// for zero (the return when the overlapped request was checked before
> 				// it was sent) and check the return address (it's possible that someone
> 				// really sent zero bytes).
> 				//
> 				DBG_CASSERT( ERROR_SUCCESS == 0 );
> 				if ( ( pReadIOData->m_dwOverlappedBytesReceived != 0 ) &&
> 					 ( pReadIOData->m_pSourceSocketAddress->IsUndefinedHostAddress() == FALSE ) )
> 				{
> 					pReadIOData->m_Win9xReceiveWSAReturn = ERROR_SUCCESS;
> 				}
> 				else
> 				{
> 					goto SkipReceiveCompletion;
> 				}
> 			}
> 			else
> 			{
> 				pReadIOData->m_Win9xReceiveWSAReturn = p_WSAGetLastError();
> 				switch( pReadIOData->m_Win9xReceiveWSAReturn )
> 				{
> 					//
> 					// If this I/O operation is incomplete, don't send notification to the user.
> 					//
> 					case WSA_IO_INCOMPLETE:
> 					{
> 						goto SkipReceiveCompletion;
> 						break;
> 					}
> 
> 					//
> 					// socket was closed with an outstanding read, no problem
> 					// Win9x reports 'WSAENOTSOCK'
> 					// WinNT reports 'ERROR_OPERATION_ABORTED'
> 					//
> 					// If this is an indication that the connection was reset,
> 					// pass it on to the socket port so it can issue another
> 					// read
> 					//
> 					case ERROR_OPERATION_ABORTED:
> 					case WSAENOTSOCK:
> 					case WSAECONNRESET:
> 					{
> 						break;
> 					}
> 
> 					default:
> 					{
> 						DisplayWinsockError( 0, pReadIOData->m_Win9xReceiveWSAReturn );
> 
> 						// debug me!
> 						DNASSERT( FALSE );
> 
> 						break;
> 					}
> 				}
> 			}
> 
> 			DNASSERT( pReadIOData->Win9xOperationPending() != FALSE );
> 			pReadIOData->SetWin9xOperationPending( FALSE );
> 
> 			pReadIOData->m_OutstandingReadListLinkage.RemoveFromList();
> 			pReadIOData->m_OutstandingReadListLinkage.InsertBefore( &ReadsToBeProcessed );
> 		}
> 
> SkipReceiveCompletion:
> 		//
> 		// the following line is present to prevent the compiler from whining
> 		// about a blank line
> 		//
> 		;
> 	}
> 
> 	UnlockReadData();
> 
> 	//
> 	// loop through the list of reads that have completed and dispatch them
> 	//
> 	while ( ReadsToBeProcessed.GetNext() != &ReadsToBeProcessed )
> 	{
> 		CReadIOData		*pTempRead;
> 		CSocketPort		*pSocketPort;
> 
> 
> 		pTempRead = CReadIOData::ReadDataFromBilink( ReadsToBeProcessed.GetNext() );
> 		pTempRead->m_OutstandingReadListLinkage.RemoveFromList();
> 
> 		pSocketPort = pTempRead->SocketPort();
> 		DNASSERT( pSocketPort != NULL );
> 		pSocketPort->Winsock2ReceiveComplete( pTempRead );
> 	}
> }
> //**********************************************************************
> 
> 
> //**********************************************************************
> // ------------------------------
> // CThreadPool::PrimaryWin9xThread - main thread to do everything that the SP is
> //		supposed to do under Win9x.
> //
> // Entry:		Pointer to startup parameter
> //
> // Exit:		Error Code
> //
> // Note:	The startup parameter is allocated for this thread and must be
> //			deallocated by this thread when it exits
> // ------------------------------
> #undef DPF_MODNAME
> #define	DPF_MODNAME	"CThreadPool::PrimaryWin9xThread"
> 
> DWORD	WINAPI	CThreadPool::PrimaryWin9xThread( void *pParam )
> {
> 	WIN9X_CORE_DATA		CoreData;
> 	DN_TIME				CurrentTime;
> 	DWORD				dwMaxWaitTime;
> 	DN_TIME				DeltaT;
> 
> 	CThreadPool		*const pThisThreadPool = static_cast<WIN9X_THREAD_DATA *>( pParam )->pThisThreadPool;
> 	FD_SET 			*const pSocketSet = &pThisThreadPool->m_SocketSet;
> 
> 	
> 	DNASSERT( pParam != NULL );
> 	DNASSERT( pThisThreadPool != NULL );
> 	DNASSERT( pSocketSet != NULL );
> 
> 	//
> 	// initialize
> 	//
> 	memset( &CoreData, 0x00, sizeof CoreData );
> 
> 	//
> 	// before we do anything we need to make sure COM is happy
> 	//
> 	switch ( COM_CoInitialize( NULL ) )
> 	{
> 		//
> 		// no problem
> 		//
> 		case S_OK:
> 		{
> 			break;
> 		}
> 
> 		//
> 		// COM already initialized, huh?
> 		//
> 		case S_FALSE:
> 		{
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 
> 		//
> 		// COM init failed!
> 		//
> 		default:
> 		{
> 			DPF( 0, "Primary Win9x thread failed to initialize COM!" );
> 			DNASSERT( FALSE );
> 			break;
> 		}
> 	}
> 
> 	//
> 	// Clear socket data.  Since we need to correlate a CSocketPort with a SOCKET,
> 	// we're going to manage the FD_SET ourselves.  See Winsock.h for the FD_SET
> 	// structure definition.
> 	//
> 	DBG_CASSERT( OFFSETOF( FD_SET, fd_count ) == 0 );
> //#ifdef	_WIN32
> //	DBG_CASSERT( OFFSETOF( FD_SET, fd_array ) == sizeof( pSocketSet->fd_count ) );
> //#endif	// _WIN32
> //	DNASSERT( pThisThreadPool->m_uReservedSocketCount == 0 );
> //	DNASSERT( pSocketSet->fd_count == 0 );
> 	DNASSERT( CoreData.fTimerJobsActive == FALSE );
> 
> 	//
> 	// set enums to happen infinitely in the future
> 	//
> 	memset( &CoreData.NextTimerJobTime, 0xFF, sizeof( CoreData.NextTimerJobTime ) );
> 
> 	//
> 	// set wait handles
> 	//
> 	CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] = pThisThreadPool->m_hStopAllThreads;
> 	CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] = pThisThreadPool->m_JobQueue.GetPendingJobHandle();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] = pThisThreadPool->GetWinsock2SendCompleteEvent();
> 	CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] = pThisThreadPool->GetWinsock2ReceiveCompleteEvent();
> 	
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_STOP_ALL_THREADS ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_PENDING_JOB ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_SEND_COMPLETE ] != NULL );
> 	DNASSERT( CoreData.hWaitHandles[ EVENT_INDEX_WINSOCK_2_RECEIVE_COMPLETE ] != NULL );
> 	
> 	//
> 	// go until we're told to stop
> 	//
> 	CoreData.fLooping = TRUE;
> 	while ( CoreData.fLooping != FALSE )
> 	{
> 		DWORD	dwWaitReturn;
> 
> 		
> 		//
> 		// Update the job time so we know how long to wait.  We can
> 		// only get here if a socket was just added to the socket list, or
> 		// we've been servicing sockets.
> 		//
> 		DNTimeGet( &CurrentTime );
> 		if ( DNTimeCompare( &CurrentTime, &CoreData.NextTimerJobTime ) >= 0 )
> 		{
> 			pThisThreadPool->LockTimerData();
> 			CoreData.fTimerJobsActive = pThisThreadPool->ProcessTimerJobs( &pThisThreadPool->m_TimerJobList,
> 																		   &CoreData.NextTimerJobTime );
> 			if ( CoreData.fTimerJobsActive != FALSE )
> 			{
> 				DPF( 8, "There are active jobs left with Winsock1 sockets active!" );
> 			}
> 			pThisThreadPool->UnlockTimerData();
> 		}
> 
> 		DNTimeSubtract( &CoreData.NextTimerJobTime, &CurrentTime, &DeltaT );
> #pragma	BUGBUG( johnkan, "Busted Win64!" )
> 		dwMaxWaitTime = static_cast<DWORD>( SaturatedWaitTime( DeltaT ) );
> 
> 
> 		//
> 		// Check for Winsock1 sockets.  If there are some around, do a quick poll
> 		// of them to check of I/O before entering the main Winsock2 loop for
> 		// the real timing.
> 		//
> 		pThisThreadPool->Lock();
> 		if ( pSocketSet->fd_count != 0 )
> 		{
> 			pThisThreadPool->Unlock();
> 			
> 			//
> 			// if there is Winsock1 I/O that gets serviced, loop immediately.  If
> 			// there were no Winsock1 sockets serviced, pause before polling again.
> 			//
> 			if ( pThisThreadPool->CheckWinsock1IO( pSocketSet ) != FALSE )
> 			{
> 				dwMaxWaitTime = 0;
> 			}
> 			else
> 			{
> 				if ( g_dwSelectTimeSlice < dwMaxWaitTime )
> 				{
> 					dwMaxWaitTime = g_dwSelectTimeSlice;
> 				}
> 			}
> 		}
> 		else
> 		{
> 			pThisThreadPool->Unlock();
> 		}
> 
> 
> 		//
> 		/