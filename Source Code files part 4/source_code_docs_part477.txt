ter)">
            <summary>
            Saves the HTML document to the specified XmlWriter.
            </summary>
            <param name="writer">The XmlWriter to which you want to save.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateNavigator">
            <summary>
            Creates a new XPathNavigator object for navigating this HTML document.
            </summary>
            <returns>An XPathNavigator object. The XPathNavigator is positioned on the root of the document.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.GetXmlName(System.String)">
            <summary>
            Gets a valid XML name.
            </summary>
            <param name="name">Any text.</param>
            <returns>A string that is a valid XML name.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.GetElementbyId(System.String)">
            <summary>
            Gets the HTML node with the specified 'id' attribute value.
            </summary>
            <param name="id">The attribute id to match. May not be null.</param>
            <returns>The HTML node with the matching id or null if not found.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateElement(System.String)">
            <summary>
            Creates an HTML element node with the specified name.
            </summary>
            <param name="name">The qualified name of the element. May not be null.</param>
            <returns>The new HTML node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateComment">
            <summary>
            Creates an HTML comment node.
            </summary>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateComment(System.String)">
            <summary>
            Creates an HTML comment node with the specified comment text.
            </summary>
            <param name="comment">The comment text. May not be null.</param>
            <returns>The new HTML comment node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateTextNode">
            <summary>
            Creates an HTML text node.
            </summary>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateTextNode(System.String)">
            <summary>
            Creates an HTML text node with the specified text.
            </summary>
            <param name="text">The text of the node. May not be null.</param>
            <returns>The new HTML text node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CreateAttribute(System.String,System.String)">
            <summary>
            Creates an HTML attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute. May not be null.</param>
            <param name="value">The value of the attribute.</param>
            <returns>The new HTML attribute.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlDocument.IsWhiteSpace(System.Int32)">
            <summary>
            Determines if the specified character is considered as a whitespace character.
            </summary>
            <param name="c">The character to check.</param>
            <returns>true if if the specified character is considered as a whitespace character.</returns>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.Remainder">
            <summary>
            Gets the remaining text.
            Will always be null if OptionStopperNodeName is null.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.RemainderOffset">
            <summary>
            Gets the offset of Remainder in the original Html text.
            If OptionStopperNodeName is null, this will return the length of the original Html text.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.ParseErrors">
            <summary>
            Gets a list of parse errors found in the document.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.StreamEncoding">
            <summary>
            Gets the document's stream encoding.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.DeclaredEncoding">
            <summary>
            Gets the document's declared encoding.
            Declared encoding is determined using the meta http-equiv="content-type" content="text/html;charset=XXXXX" html node.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.Encoding">
            <summary>
            Gets the document's output encoding.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.DocumentNode">
            <summary>
            Gets the root node of the document.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlDocument.CheckSum">
            <summary>
            Gets the document CRC32 checksum if OptionComputeChecksum was set to true before parsing, 0 otherwise.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.HtmlEntity">
            <summary>
            A utility class to replace special characters by entities and vice-versa.
            Follows HTML 4.0 specification found at http://www.w3.org/TR/html4/sgml/entities.html
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlEntity.Entitize(Test.Common.Library.HtmlAgilityPack.HtmlNode)">
            <summary>
            Clone and entitize an HtmlNode. This will affect attribute values and nodes' text. It will also entitize all child nodes.
            </summary>
            <param name="node">The node to entitize.</param>
            <returns>An entitized cloned node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlEntity.Entitize(System.String)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <returns>The result text.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlEntity.Entitize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Replace characters above 127 by entities.
            </summary>
            <param name="text">The source text.</param>
            <param name="useNames">If set to false, the function will not use known entities name. Default is true.</param>
            <param name="entitizeQuotAmpAndLtGt">If set to true, the [quote], [ampersand], [lower than] and [greather than] characters will be entitized.</param>
            <returns>The result text</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlEntity.DeEntitize(System.String)">
            <summary>
            Replace known entities by characters.
            </summary>
            <param name="text">The source text.</param>
            <returns>The result text.</returns>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlEntity.EntityName">
            <summary>
            A collection of entities indexed by name.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlEntity.EntityValue">
            <summary>
            A collection of entities indexed by value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator">
            <summary>
            Represents an HTML navigator on an HTML document seen as a data store.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the stream.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the HtmlNavigator and loads an HTML document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToNext">
            <summary>
            Moves to the next sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the next sibling node, false if there are no more siblings or if the navigator is currently positioned on an attribute node. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToPrevious">
            <summary>
            Moves to the previous sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the previous sibling node, false if there is no previous sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToFirst">
            <summary>
            Moves to the first sibling of the current node.
            </summary>
            <returns>true if the navigator is successful moving to the first sibling node, false if there is no first sibling or if the navigator is currently positioned on an attribute node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstChild">
            <summary>
            Moves to the first child of the current node.
            </summary>
            <returns>true if there is a first child node, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToParent">
            <summary>
            Moves to the parent of the current node.
            </summary>
            <returns>true if there is a parent node, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToRoot">
            <summary>
            Moves to the root node to which the current node belongs.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
            <summary>
            Moves to the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator positioned on the node that you want to move to.</param>
            <returns>true if successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToId(System.String)">
            <summary>
            Moves to the node that has an attribute of type ID whose value matches the specified string.
            </summary>
            <param name="id">A string representing the ID value of the node to which you want to move. This argument does not need to be atomized.</param>
            <returns>true if the move was successful, otherwise false. If false, the position of the navigator is unchanged.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
            <summary>
            Determines whether the current HtmlNavigator is at the same position as the specified HtmlNavigator.
            </summary>
            <param name="other">The HtmlNavigator that you want to compare against.</param>
            <returns>true if the two navigators have the same position, otherwise, false.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.Clone">
            <summary>
            Creates a new HtmlNavigator positioned at the same node as this HtmlNavigator.
            </summary>
            <returns>A new HtmlNavigator object positioned at the same node as the original HtmlNavigator.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the HTML attribute with the specified LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>The value of the specified HTML attribute. String.Empty or null if a matching attribute is not found or if the navigator is not positioned on an element node.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the HTML attribute with matching LocalName and NamespaceURI.
            </summary>
            <param name="localName">The local name of the HTML attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute. Unsupported with the HtmlNavigator implementation.</param>
            <returns>true if the HTML attribute is found, otherwise, false. If false, the position of the navigator does not change.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstAttribute">
            <summary>
            Moves to the first HTML attribute.
            </summary>
            <returns>true if the navigator is successful moving to the first HTML attribute, otherwise, false.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToNextAttribute">
            <summary>
            Moves to the next HTML attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.GetNamespace(System.String)">
            <summary>
            Returns the value of the namespace node corresponding to the specified local name.
            Always returns string.Empty for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns string.Empty for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToNamespace(System.String)">
            <summary>
            Moves the XPathNavigator to the namespace node with the specified local name. 
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="name">The local name of the namespace node.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the first namespace node of the current element.
            Always returns false for the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
            <summary>
            Moves the XPathNavigator to the next namespace node.
            Always returns falsefor the HtmlNavigator implementation.
            </summary>
            <param name="scope">An XPathNamespaceScope value describing the namespace scope.</param>
            <returns>Always returns false for the HtmlNavigator implementation.</returns>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.LocalName">
            <summary>
            Gets the name of the current HTML node without the namespace prefix.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.NamespaceURI">
            <summary>
            Gets the namespace URI (as defined in the W3C Namespace Specification) of the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.Name">
            <summary>
            Gets the qualified name of the current node.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.Prefix">
            <summary>
            Gets the prefix associated with the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.BaseURI">
            <summary>
            Gets the base URI for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.XmlLang">
            <summary>
            Gets the xml:lang scope for the current node.
            Always returns string.Empty in the case of HtmlNavigator implementation.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.HasChildren">
            <summary>
            Gets a value indicating whether the current node has child nodes.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.CurrentNode">
            <summary>
            Gets the current HTML node.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlNodeNavigator.CurrentDocument">
            <summary>
            Gets the current HTML document.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.HtmlWeb">
            <summary>
            A utility class to get HTML document from HTTP.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.HtmlWeb.PreRequest">
            <summary>
            Occurs before an HTTP request is executed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.HtmlWeb.PostResponse">
            <summary>
            Occurs after an HTTP request has been executed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.HtmlWeb.PreHandleDocument">
            <summary>
            Occurs before an HTML document is handled.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.#ctor">
            <summary>
            Creates an instance of an HtmlWeb class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.Get(System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.Get(System.String,System.String,System.String)">
            <summary>
            Gets an HTML document from an Internet resource and saves it to the specified file.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="path">The location of the file where you want to save the document.</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.Load(System.String)">
            <summary>
            Gets an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.Load(System.String,System.String)">
            <summary>
            Loads an HTML document from an Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND.</param>
            <returns>A new HTML document.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.GetCachePath(System.Uri)">
            <summary>
            Gets the cache file path for a specified url.
            </summary>
            <param name="uri">The url fo which to retrieve the cache path. May not be null.</param>
            <returns>The cache file path.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.GetExtensionForContentType(System.String,System.String)">
            <summary>
            Gets the path extension for a given MIME content type.
            </summary>
            <param name="contentType">The input MIME content type.</param>
            <param name="def">The default path extension to return if any error occurs.</param>
            <returns>The MIME content type's path extension.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.GetContentTypeForExtension(System.String,System.String)">
            <summary>
            Gets the MIME content type for a given path extension.
            </summary>
            <param name="extension">The input path extension.</param>
            <param name="def">The default content type to return if any error occurs.</param>
            <returns>The path extention's MIME content type.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.Xml.XmlTextWriter)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter, after an XSLT transformation.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.LoadHtmlAsXml(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlTextWriter,System.String)">
            <summary>
            Loads an HTML document from an Internet resource and saves it to the specified XmlTextWriter, after an XSLT transformation.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp". May not be null.</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="writer">The XmlTextWriter to which you want to save.</param>
            <param name="xmlPath">A file path where the temporary XML before transformation will be saved. Mostly used for debugging purposes.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.Type)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="url">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="type">The requested type.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="type">The requested type.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.HtmlWeb.CreateInstance(System.String,System.String,System.Xml.Xsl.XsltArgumentList,System.Type,System.String)">
            <summary>
            Creates an instance of the given type from the specified Internet resource.
            </summary>
            <param name="htmlUrl">The requested URL, such as "http://Myserver/Mypath/Myfile.asp".</param>
            <param name="xsltUrl">The URL that specifies the XSLT stylesheet to load.</param>
            <param name="xsltArgs">An XsltArgumentList containing the namespace-qualified arguments used as input to the transform.</param>
            <param name="type">The requested type.</param>
            <param name="xmlPath">A file path where the temporary XML before transformation will be saved. Mostly used for debugging purposes.</param>
            <returns>An newly created instance.</returns>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.FromCache">
            <summary>
            Gets a value indicating if the last document was retrieved from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.ResponseUri">
            <summary>
            Gets the URI of the Internet resource that actually responded to the request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.CacheOnly">
            <summary>
            Gets or Sets a value indicating whether to get document only from the cache.
            If this is set to true and document is not found in the cache, nothing will be loaded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.UseCookies">
            <summary>
            Gets or Sets a value indicating if cookies will be stored.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.RequestDuration">
            <summary>
            Gets the last request duration in milliseconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.AutoDetectEncoding">
            <summary>
            Gets or Sets a value indicating if document encoding must be automatically detected.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.StatusCode">
            <summary>
            Gets the last request status.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.StreamBufferSize">
            <summary>
            Gets or Sets the size of the buffer used for memory operations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.CachePath">
            <summary>
            Gets or Sets the cache path. If null, no caching mechanism will be used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.HtmlWeb.UsingCache">
            <summary>
            Gets or Sets a value indicating whether the caching mechanisms should be used or not.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.HtmlWeb.PreRequestHandler">
            <summary>
            Represents the method that will handle the PreRequest event.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.HtmlWeb.PostResponseHandler">
            <summary>
            Represents the method that will handle the PostResponse event.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.HtmlWeb.PreHandleDocumentHandler">
            <summary>
            Represents the method that will handle the PreHandleDocument event.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument">
            <summary>
            Represents a document with mixed code and text. ASP, ASPX, JSP, are good example of such documents.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.TokenCodeStart">
            <summary>
            Gets or sets the token representing code start.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.TokenCodeEnd">
            <summary>
            Gets or sets the token representing code end.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.TokenDirective">
            <summary>
            Gets or sets the token representing code directive.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.TokenResponseWrite">
            <summary>
            Gets or sets the token representing response write directive.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.#ctor">
            <summary>
            Creates a mixed code document instance.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads a mixed code document from a stream.
            </summary>
            <param name="stream">The input stream.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.String)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Boolean)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Loads a mixed code document from a file.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="buffersize">The minimum buffer size.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.LoadHtml(System.String)">
            <summary>
            Loads a mixed document from a text
            </summary>
            <param name="html">The text to load.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the mixed code document from the specified TextReader.
            </summary>
            <param name="reader">The TextReader used to feed the HTML data into the document.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Save(System.IO.Stream)">
            <summary>
            Saves the mixed document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified stream.
            </summary>
            <param name="outStream">The stream to which you want to save.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Save(System.String)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Save(System.String,System.Text.Encoding)">
            <summary>
            Saves the mixed document to the specified file.
            </summary>
            <param name="filename">The location of the file where you want to save the document.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Save(System.IO.StreamWriter)">
            <summary>
            Saves the mixed document to the specified StreamWriter.
            </summary>
            <param name="writer">The StreamWriter to which you want to save.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Save(System.IO.TextWriter)">
            <summary>
            Saves the mixed document to the specified TextWriter.
            </summary>
            <param name="writer">The TextWriter to which you want to save.</param>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.CreateTextFragment">
            <summary>
            Create a text fragment instances.
            </summary>
            <returns>The newly created text fragment instance.</returns>
        </member>
        <member name="M:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.CreateCodeFragment">
            <summary>
            Create a code fragment instances.
            </summary>
            <returns>The newly created code fragment instance.</returns>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.StreamEncoding">
            <summary>
            Gets the encoding of the stream used to read the document.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.CodeFragments">
            <summary>
            Gets the list of code fragments in the document.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.TextFragments">
            <summary>
            Gets the list of text fragments in the document.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Fragments">
            <summary>
            Gets the list of all fragments in the document.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HtmlAgilityPack.MixedCodeDocument.Code">
            <summary>
            Gets the code represented by the mixed code document seen as a template.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\HTTPWatcherPreReq.txt ===
﻿To use this library, you must have HTTP Watch 5.3 installed on your machine. 
The APIs rely on the HTTP Watch Plugin installed on Internet Explorer.

HTTP Watch is a Site Licensed software, which can be downloaded from http://productsweb
HTTP Watch Official Site: http://www.httpwatch.com

NOTE: Version 5.3 of the plugin does NOT support FireFox.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\bin\Debug\PageLoadTimeDaemon\Test.Common.Library.HTTPWatchWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWatchWrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.CacheInfo">
            <summary>
            Represents information about the state of a URL in the browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.ETag">
            <summary>
            Represents a value that is used by the web server to identify this version
            of the cached resource.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.Expires">
            <summary>
            Indicates when this cache entry is no longer valid and will need to be updated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.HitCount">
            <summary>
            Represents how many times this cached resource has been used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsExpiresSet">
            <summary>
            Indicates whether an expiration date/time was set by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsLastModifiedSet">
            <summary>
            Indicates whether a modification date/time was supplied by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastUpdate">
            <summary>
            Represents when this cache entry was last updated with content from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastAccess">
            <summary>
            Represents when the cache entry was last accessed by the browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastModified">
            <summary>
            Represents a value supplied by the server indicating when the
            content was last modified.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.URLInCache">
            <summary>
            Indicates whether the URL's content is stored in the browser cache.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Content">
            <summary>
            Represents information about an HTTP resource that was requested.
            E.g. an image or an HTML page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressedSize">
            <summary>
            Represents the compressed size of the content in bytes.
            If the content was not compressed (i.e. IsCompressed returns false) the value
            will be the same as the Size property.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressionType">
            <summary>
            Represents the type of compression used by the server.
            E.g. "gzip" or "deflate". If no compression was used this property returns an empty string.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Data">
            <summary>
            Represents the actual content. For web pages this is the HTML of the page
            and for images this is the binary data in the image file.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsFromCache">
            <summary>
            Indicates whether the content was read from the local browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsCompressed">
            <summary>
            Indicates whether the content was compressed in the HTTP response message from the server.
            This value will always be false if IsFromCache returns true.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.MimeType">
            <summary>
            Represents the type of the content.
            E.g. "text/html" or "image/gif".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Size">
            <summary>
            Represents the size of the content in bytes. If the content was compressed by the server
            this is the uncompressed size of the content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookie">
            <summary>
            Represents a single cookie that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Domain">
            <summary>
            Represents the internet domain name to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Expires">
            <summary>
            Indicates when this cookie expires.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.IsSessionCookie">
            <summary>
            Indicates whether this cookie will be destroyed at the end of the browser session.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Name">
            <summary>
            Represents the name of the cookie.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Path">
            <summary>
            Represents the URL path to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Value">
            <summary>
            Represents the value of the cookie.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookies">
            <summary>
            Represents a collection of Cookie objects that 
            contains cookies that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor">
            <summary>
            Create an empty collection of Cookie objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Create a collection of Cookie objects with the specified Cookie
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.Add(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Adds the specified Cookie object to the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookies.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Cookie object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entries">
            <summary>
            Represents a collection of Entry objects that 
            contains request entries for a page or the whole log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor">
            <summary>
            Create an empty collection of Entry objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Create a collection of Entry objects with the specified Entry
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.Add(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Adds the specified Entry object to the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Entry object corresponding to the specified index.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Summary">
            <summary>
            Represents summarized information about the HTTP requests that were used to download the page.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entry">
            <summary>
            Represents a single HTTP transaction.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesReceived">
            <summary>
            Represents the size of the HTTP response message in bytes.
            This is the amount of data that was received over the network from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesSent">
            <summary>
            Represents the size of the HTTP request message in bytes.
            This is the amount of data that was sent over the network from the browser to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheAfter">
            <summary>
            Represents the state of this URL in the browser cache after the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheBefore">
            <summary>
            Represents the state of this URL in the browser cache before the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientIP">
            <summary>
            Represents the local IP address that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientPort">
            <summary>
            Represents the local TCP port number that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Content">
            <summary>
            Represents the information about the HTTP resource that was requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Error">
            <summary>
            Represents details of any error that occurred while processing the HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsComplete">
            <summary>
            Indicates whether the request has finished processing.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsRedirect">
            <summary>
            Indicates whether a redirection request was received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Method">
            <summary>
            Represents the HTTP method (e.g. "GET" or "POST").
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Page">
            <summary>
            Represents the Page in which this request was recorded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.RedirectURL">
            <summary>
            Represents the URL to which a redirect has been requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Result">
            <summary>
            Represents the result of the request in the same format displayed in HttpWatch
            E.g. "200", "(Cached)", etc.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerIP">
            <summary>
            Represents the IP address of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerPort">
            <summary>
            Represents the TCP port number of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Started">
            <summary>
            Represents the time when this request was started as an offset from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedDateTime">
            <summary>
            Represents the date and time when this request was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedSecs">
            <summary>
            Represents the time when this request was started as an offset in seconds from the
            start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StatusCode">
            <summary>
            Represent the HTTP status code from the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Time">
            <summary>
            Represents the time in seconds required to complete this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Timings">
            <summary>
            Represents the timing information for this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.URL">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Header">
            <summary>
            Represents a single HTTP header that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Name">
            <summary>
            Represents the name of the HTTP header.
            E.g. "User-Agent" or "Content-Length".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Value">
            <summary>
            Represents the value of the HTTP header.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Headers">
            <summary>
            Represents a collection of Header objects that 
            contains HTTP headers that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor">
            <summary>
            Create an empty collection of Header objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Create a collection of Header objects with the specified Header
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.Add(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Adds the specified Header object to the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Headers.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Header object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher">
            <summary>
            Represents the wrapper for HTTP Watcher.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.#ctor">
            <summary>
            Initializes a new instance of the HTTPWatcher class. <br/>
            NOTE: You must have <b>HTTPWatch 5.3</b> installed on your machine to use this library.
            See HTTPWatcherPreReq.txt in the dll folder for more details.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.NavigateTo(System.String,System.Int32)">
            <summary>
            Navigates to the specified URI in a Internet Explorer window.
            </summary>
            <param name="URI">The URI to navigate to.</param>
            <param name="WaitTimeOut">The maximum time in seconds to wait for page to finish loading. If the page does not load within
            this time, the function returns false. If it loads within the specified time, it will return true as soon as the page
            completes loading. Specify a value of -1 for infinite wait.</param>
            <remarks>True if the page was loaded within the specified wait time out, otherwise False.</remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.TimerExpire(System.Object)">
            <summary>
            Callback for IE Load Timer.
            </summary>
            <param name="StateInfo">A state object. Not used.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.OpenBrowser">
            <summary>
            Opens a new Internet Explorer browser window. If a window handle already exists then it will do nothing.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose">
            <summary>
            Does a proper dispose of the object including releasing
            all COM components.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="Disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloseBrowser">
            <summary>
            Closes the Internet Explorer browser window. If no browser window is open, then it does nothing.
            </summary>
            <remarks>
            The browser must have been opened via the <i>OpenBrowser</i> or <i>NavigateTo</i> method. Any browsers
            already open via other means, will not be effected.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveHTTPWatchLog">
            <summary>
            Saves the HTTP Watch Log file to Local Application Data folder.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneCOMLog">
            <summary>
            Clones the HTTPWatch COM Log object to a .NET object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogEntries(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType)">
            <summary>
            Clones the specified type of entries object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="EntriesType">The type of entries to clone.</param>
            <returns>An object of Entries class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogPages(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType)">
            <summary>
            Clones the specified type of pages object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="PagesType">The type of pages to clone.</param>
            <returns>An object of Pages class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ReleaseCOMPluginObjects">
            <summary>
            Releases all the COM objects held by the Plugin class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.GetHTTPWatchLog">
            <summary>
            Gets the .NET HTTP Watch Log object for the last session.
            </summary>
            <returns>An object of HTTPWatchLog class representing the log for the last session.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCache">
            <summary>
            Clears the temporary internet cache. <br/>
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCookies">
            <summary>
            Clears all stored and session cookies.
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveLog(System.String)">
            <summary>
            Saves the HTTP Watch log file to disk. <br/>
            NOTE: This method can be called only once during the object lifetime, and after <i>CloseBrowser</i>
            has been called.
            </summary>
            <param name="HWLFileName">The path and name of the HTTP Watch log file.</param>
            <remarks>
            Calling this multiple times, will have no effect. The HWL log will be save with the filename
            you specified in the first call.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType">
            <summary>
            Represents the type of entries object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.RAWEntries">
            <summary>
            Represents the RAW, unfiltered entries.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.FilteredEntries">
            <summary>
            Represents the filtered entries.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType">
            <summary>
            Represents the type of pages object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.RAWPages">
            <summary>
            Represents the RAW, unfiltered pages.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.FilteredPages">
            <summary>
            Represents the filtered pages.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog">
            <summary>
            Represents the HTTP Watch Log.
            NOTE: This object is copied from the actual COM object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Entries">
            <summary>
            Represents a list of all the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredEntries">
            <summary>
            Represents a filtered list of the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredPages">
            <summary>
            Represents a filtered list of pages in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasNetworkTimings">
            <summary>
            Indicates whether the log contains detailed, request level timings.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasPageGrouping">
            <summary>
            Indicates whether the log contains page grouping information.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.IsFilterEnabled">
            <summary>
            Indicates whether the current filter is enabled.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Pages">
            <summary>
            Represents a list of all the pages in the log.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger">
            <summary>
            Represents the logger for the HTTPWatch module.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Page">
            <summary>
            Represents information about a web page and the HTTP
            requests that were used to download it.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Dynamic">
            <summary>
            Indicates whether this page was a dynamic update to an existing web page.
            E.g. modified by AJAX / Javascript.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Started">
            <summary>
            Represents the time when this request was started as an offset
            from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedDateTime">
            <summary>
            Represents the date and time when this page was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedSecs">
            <summary>
            Represents the time when this page was started as an offset
            in seconds from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Title">
            <summary>
            Represents the title of this page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Unknown">
            <summary>
            Indicates whether this page contains a single request that was not directly
            associated with a window or tab in Internet Explorer.
            E.g. the download of a icon for a bookmark or location bar.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Pages">
            <summary>
            Represents a collection of Page objects. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor">
            <summary>
            Create an empty collection of Page objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Create a collection of Page objects with the specified Page
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.Add(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Adds the specified Page object to the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Pages.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Page object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameter">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Name">
            <summary>
            Represents the name of the parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Value">
            <summary>
            Represents the value of the parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameters">
            <summary>
            Represents a collection of POSTParameter objects that 
            contains a list of parameters that were sent in a POST request message.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor">
            <summary>
            Create an empty collection of POSTParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Create a collection of POSTParameter objects with the specified POSTParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Add(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Adds the specified POSTParameter object to the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A POSTParameter object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValue">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Name">
            <summary>
            Represents the name of the query string parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Value">
            <summary>
            Represents the value of the query string parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValues">
            <summary>
            Represents a collection of QueryStringValue objects that 
            contains a list of parameters that were encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor">
            <summary>
            Create an empty collection of QueryStringValue objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Create a collection of QueryStringValue objects with the specified QueryStringValue
            as the first item in the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Add(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Adds the specified QueryStringValue object to the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A QueryStringValue object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Cookies">
            <summary>
            Represents the list of cookies that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Headers">
            <summary>
            Represents the list of HTTP headers that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTMimeType">
            <summary>
            Represents the encoding scheme used in a POST request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTParameters">
            <summary>
            Represents the list of parameters sent in a POST message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.QueryStringValues">
            <summary>
            Represents the list of parameters encoded in the query string section of the URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.RequestLine">
            <summary>
            Represents the HTTP request line that was sent to the server.
            E.g. "GET / HTTP/1.1".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Stream">
            <summary>
            Represents the raw HTTP request data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Chunks">
            <summary>
            Represents the number of chunks in the HTTP response.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Cookies">
            <summary>
            Represents the list of cookies that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Headers">
            <summary>
            Represents the list of HTTP headers that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.StatusLine">
            <summary>
            Represents the HTTP response line that from the server.
            E.g. "HTTP/1.1 200 OK".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Stream">
            <summary>
            Represents the raw HTTP response data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummaries">
            <summary>
            Represents a collection of ResultSummary objects that 
            hold information about errors and status codes.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor">
            <summary>
            Create an empty collection of ResultSummary objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Create a collection of ResultSummary objects with the specified ResultSummary
            as the first item in the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Add(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Adds the specified ResultSummary object to the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A ResultSummary object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummary">
            <summary>
            Represents information about the number of requests that returned a specific
            status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Result">
            <summary>
            Represents the error or status returned by the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Description">
            <summary>
            Represents the full description of the status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Occurrences">
            <summary>
            Represents the number of requests in the current Summary that result
            this status or error code.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Summary">
            <summary>
            Represents summarized information requests in a single page or the whole log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.AverageHTTPSOverhead">
            <summary>
            Represents the average overhead in bytes of each HTTPS request.
            If this value is high (more than a few hundred bytes), it may indicate that
            the server is incorrectly configured and is causing an excessive 
            number of HTTPS renegotiations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesReceived">
            <summary>
            Represents the total number of bytes of data that have been received from web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesSent">
            <summary>
            Represents the total number of bytes of data that have been sent to web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.CompressionSavedBytes">
            <summary>
            Represents the total number of bytes by which downloaded content was reduced in size by
            HTTP compression.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.DNSLookUps">
            <summary>
            Represents the total number of times that a network name was converted to an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Errors">
            <summary>
            Represents a list of the error codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.RoundTrips">
            <summary>
            Represents the number of requests that caused an HTTP request and response message being exchanged 
            with a web server. Some entries do not cause a network round trip because either an error occurred
            or because no network request was required.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.StatusCodes">
            <summary>
            Represents a list of the status codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TCPConnects">
            <summary>
            Represents the number of times that a new TCP level connection had to be made with web server(s) in
            the summary data. An excessively high number of TCP connects may indicate that HTTP persistent
            connections, also known as keep-alive connections, have not been correctly configured on the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Time">
            <summary>
            Represents the time in seconds from the start of the first request in the summary to the end
            of the last item. This can be used to find the total time to download a page or set of pages.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TotalHTTPSOverhead">
            <summary>
            Represents how many extra bytes of data were required to encrypt the request and response messages,
            if there are any HTTPS requests in the summary data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timing">
            <summary>
            Represents information about a single timing such as Blocked or Connect.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Duration">
            <summary>
            Represents the duration of the timing in seconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Started">
            <summary>
            Represents the start time as an offset in seconds from the start of the current request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Valid">
            <summary>
            Indicates whether this timing is populated with data and applies to the current request.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timings">
            <summary>
            Represents the request level timings for a request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Blocked">
            <summary>
            Represents the Blocked time.
            The Blocked time includes any pre-processing time (such as cache lookup) and the time spent waiting
            for a network connection to become available. Internet Explorer will only create a maximum of two
            concurrent network connections per host name and will queue up requests until a network connection
            is available. Often the Blocked time is the most significant factor in the download time of images
            embedded in a web page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.DNSLookup">
            <summary>
            Represents the DNS Lookup time.
            DNS Lookup is the time required to resolve a host name into an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Connect">
            <summary>
            Represents the Connect time.
            Connect is the time required to create a TCP connection to the web server (or proxy). If a secure 
            HTTPS connection is being used this time includes the SSL handshake process.
            "Keep-Alive connections are often used to avoid the overhead of repeatedly connecting to the web
            server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Send">
            <summary>
            Represents the Send time.
            Send is the time required to send the HTTP request message to the server and will depend on the 
            amount of data that is sent to the server. For example, long Send times will result from uploading
            files using an HTTP POST.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Wait">
            <summary>
            Represents the Wait time.
            Wait is the idle time spent waiting for a response message from the server. This value includes delays
            introduced due to network latency and the time required to process the request on the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Receive">
            <summary>
            Represents the Receive time.
            Receive is the time taken to read the response message from the server. This value will depend on the
            size of the content returned, network bandwidth and whether HTTP compression was used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.CacheRead">
            <summary>
            Represents the Cache Read time.
            Cache Read is the time taken to read the content from the browser cache during
            (Cache) or 304 responses.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Network">
            <summary>
            Represents the Network time.
            Network is the total duration of all network related operations for an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.TTFB">
            <summary>
            Represents the TTFB time.
            TTFB (or Time To First Byte) is the duration from the initial network request being initiated
            by the browser to the first byte being received from the server. It includes TCP connection 
            time, the time to send the request and the time taken to get the first byte of the response 
            message.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\bin\Debug\HTTPWatchWrapper\Test.Common.Library.HTTPWatchWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWatchWrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.CacheInfo">
            <summary>
            Represents information about the state of a URL in the browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.ETag">
            <summary>
            Represents a value that is used by the web server to identify this version
            of the cached resource.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.Expires">
            <summary>
            Indicates when this cache entry is no longer valid and will need to be updated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.HitCount">
            <summary>
            Represents how many times this cached resource has been used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsExpiresSet">
            <summary>
            Indicates whether an expiration date/time was set by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsLastModifiedSet">
            <summary>
            Indicates whether a modification date/time was supplied by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastUpdate">
            <summary>
            Represents when this cache entry was last updated with content from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastAccess">
            <summary>
            Represents when the cache entry was last accessed by the browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastModified">
            <summary>
            Represents a value supplied by the server indicating when the
            content was last modified.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.URLInCache">
            <summary>
            Indicates whether the URL's content is stored in the browser cache.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Content">
            <summary>
            Represents information about an HTTP resource that was requested.
            E.g. an image or an HTML page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressedSize">
            <summary>
            Represents the compressed size of the content in bytes.
            If the content was not compressed (i.e. IsCompressed returns false) the value
            will be the same as the Size property.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressionType">
            <summary>
            Represents the type of compression used by the server.
            E.g. "gzip" or "deflate". If no compression was used this property returns an empty string.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Data">
            <summary>
            Represents the actual content. For web pages this is the HTML of the page
            and for images this is the binary data in the image file.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsFromCache">
            <summary>
            Indicates whether the content was read from the local browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsCompressed">
            <summary>
            Indicates whether the content was compressed in the HTTP response message from the server.
            This value will always be false if IsFromCache returns true.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.MimeType">
            <summary>
            Represents the type of the content.
            E.g. "text/html" or "image/gif".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Size">
            <summary>
            Represents the size of the content in bytes. If the content was compressed by the server
            this is the uncompressed size of the content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookie">
            <summary>
            Represents a single cookie that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Domain">
            <summary>
            Represents the internet domain name to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Expires">
            <summary>
            Indicates when this cookie expires.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.IsSessionCookie">
            <summary>
            Indicates whether this cookie will be destroyed at the end of the browser session.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Name">
            <summary>
            Represents the name of the cookie.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Path">
            <summary>
            Represents the URL path to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Value">
            <summary>
            Represents the value of the cookie.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookies">
            <summary>
            Represents a collection of Cookie objects that 
            contains cookies that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor">
            <summary>
            Create an empty collection of Cookie objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Create a collection of Cookie objects with the specified Cookie
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.Add(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Adds the specified Cookie object to the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookies.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Cookie object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entries">
            <summary>
            Represents a collection of Entry objects that 
            contains request entries for a page or the whole log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor">
            <summary>
            Create an empty collection of Entry objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Create a collection of Entry objects with the specified Entry
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.Add(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Adds the specified Entry object to the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Entry object corresponding to the specified index.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Summary">
            <summary>
            Represents summarized information about the HTTP requests that were used to download the page.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entry">
            <summary>
            Represents a single HTTP transaction.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesReceived">
            <summary>
            Represents the size of the HTTP response message in bytes.
            This is the amount of data that was received over the network from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesSent">
            <summary>
            Represents the size of the HTTP request message in bytes.
            This is the amount of data that was sent over the network from the browser to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheAfter">
            <summary>
            Represents the state of this URL in the browser cache after the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheBefore">
            <summary>
            Represents the state of this URL in the browser cache before the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientIP">
            <summary>
            Represents the local IP address that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientPort">
            <summary>
            Represents the local TCP port number that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Content">
            <summary>
            Represents the information about the HTTP resource that was requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Error">
            <summary>
            Represents details of any error that occurred while processing the HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsComplete">
            <summary>
            Indicates whether the request has finished processing.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsRedirect">
            <summary>
            Indicates whether a redirection request was received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Method">
            <summary>
            Represents the HTTP method (e.g. "GET" or "POST").
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Page">
            <summary>
            Represents the Page in which this request was recorded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.RedirectURL">
            <summary>
            Represents the URL to which a redirect has been requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Result">
            <summary>
            Represents the result of the request in the same format displayed in HttpWatch
            E.g. "200", "(Cached)", etc.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerIP">
            <summary>
            Represents the IP address of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerPort">
            <summary>
            Represents the TCP port number of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Started">
            <summary>
            Represents the time when this request was started as an offset from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedDateTime">
            <summary>
            Represents the date and time when this request was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedSecs">
            <summary>
            Represents the time when this request was started as an offset in seconds from the
            start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StatusCode">
            <summary>
            Represent the HTTP status code from the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Time">
            <summary>
            Represents the time in seconds required to complete this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Timings">
            <summary>
            Represents the timing information for this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.URL">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Header">
            <summary>
            Represents a single HTTP header that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Name">
            <summary>
            Represents the name of the HTTP header.
            E.g. "User-Agent" or "Content-Length".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Value">
            <summary>
            Represents the value of the HTTP header.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Headers">
            <summary>
            Represents a collection of Header objects that 
            contains HTTP headers that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor">
            <summary>
            Create an empty collection of Header objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Create a collection of Header objects with the specified Header
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.Add(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Adds the specified Header object to the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Headers.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Header object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher">
            <summary>
            Represents the wrapper for HTTP Watcher.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.#ctor">
            <summary>
            Initializes a new instance of the HTTPWatcher class. <br/>
            NOTE: You must have <b>HTTPWatch 5.3</b> installed on your machine to use this library.
            See HTTPWatcherPreReq.txt in the dll folder for more details.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.NavigateTo(System.String,System.Int32)">
            <summary>
            Navigates to the specified URI in a Internet Explorer window.
            </summary>
            <param name="URI">The URI to navigate to.</param>
            <param name="WaitTimeOut">The maximum time in seconds to wait for page to finish loading. If the page does not load within
            this time, the function returns false. If it loads within the specified time, it will return true as soon as the page
            completes loading. Specify a value of -1 for infinite wait.</param>
            <remarks>True if the page was loaded within the specified wait time out, otherwise False.</remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.TimerExpire(System.Object)">
            <summary>
            Callback for IE Load Timer.
            </summary>
            <param name="StateInfo">A state object. Not used.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.OpenBrowser">
            <summary>
            Opens a new Internet Explorer browser window. If a window handle already exists then it will do nothing.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose">
            <summary>
            Does a proper dispose of the object including releasing
            all COM components.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="Disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloseBrowser">
            <summary>
            Closes the Internet Explorer browser window. If no browser window is open, then it does nothing.
            </summary>
            <remarks>
            The browser must have been opened via the <i>OpenBrowser</i> or <i>NavigateTo</i> method. Any browsers
            already open via other means, will not be effected.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveHTTPWatchLog">
            <summary>
            Saves the HTTP Watch Log file to Local Application Data folder.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneCOMLog">
            <summary>
            Clones the HTTPWatch COM Log object to a .NET object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogEntries(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType)">
            <summary>
            Clones the specified type of entries object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="EntriesType">The type of entries to clone.</param>
            <returns>An object of Entries class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogPages(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType)">
            <summary>
            Clones the specified type of pages object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="PagesType">The type of pages to clone.</param>
            <returns>An object of Pages class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ReleaseCOMPluginObjects">
            <summary>
            Releases all the COM objects held by the Plugin class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.GetHTTPWatchLog">
            <summary>
            Gets the .NET HTTP Watch Log object for the last session.
            </summary>
            <returns>An object of HTTPWatchLog class representing the log for the last session.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCache">
            <summary>
            Clears the temporary internet cache. <br/>
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCookies">
            <summary>
            Clears all stored and session cookies.
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveLog(System.String)">
            <summary>
            Saves the HTTP Watch log file to disk. <br/>
            NOTE: This method can be called only once during the object lifetime, and after <i>CloseBrowser</i>
            has been called.
            </summary>
            <param name="HWLFileName">The path and name of the HTTP Watch log file.</param>
            <remarks>
            Calling this multiple times, will have no effect. The HWL log will be save with the filename
            you specified in the first call.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType">
            <summary>
            Represents the type of entries object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.RAWEntries">
            <summary>
            Represents the RAW, unfiltered entries.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.FilteredEntries">
            <summary>
            Represents the filtered entries.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType">
            <summary>
            Represents the type of pages object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.RAWPages">
            <summary>
            Represents the RAW, unfiltered pages.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.FilteredPages">
            <summary>
            Represents the filtered pages.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog">
            <summary>
            Represents the HTTP Watch Log.
            NOTE: This object is copied from the actual COM object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Entries">
            <summary>
            Represents a list of all the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredEntries">
            <summary>
            Represents a filtered list of the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredPages">
            <summary>
            Represents a filtered list of pages in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasNetworkTimings">
            <summary>
            Indicates whether the log contains detailed, request level timings.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasPageGrouping">
            <summary>
            Indicates whether the log contains page grouping information.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.IsFilterEnabled">
            <summary>
            Indicates whether the current filter is enabled.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Pages">
            <summary>
            Represents a list of all the pages in the log.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger">
            <summary>
            Represents the logger for the HTTPWatch module.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Page">
            <summary>
            Represents information about a web page and the HTTP
            requests that were used to download it.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Dynamic">
            <summary>
            Indicates whether this page was a dynamic update to an existing web page.
            E.g. modified by AJAX / Javascript.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Started">
            <summary>
            Represents the time when this request was started as an offset
            from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedDateTime">
            <summary>
            Represents the date and time when this page was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedSecs">
            <summary>
            Represents the time when this page was started as an offset
            in seconds from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Title">
            <summary>
            Represents the title of this page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Unknown">
            <summary>
            Indicates whether this page contains a single request that was not directly
            associated with a window or tab in Internet Explorer.
            E.g. the download of a icon for a bookmark or location bar.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Pages">
            <summary>
            Represents a collection of Page objects. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor">
            <summary>
            Create an empty collection of Page objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Create a collection of Page objects with the specified Page
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.Add(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Adds the specified Page object to the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Pages.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Page object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameter">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Name">
            <summary>
            Represents the name of the parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Value">
            <summary>
            Represents the value of the parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameters">
            <summary>
            Represents a collection of POSTParameter objects that 
            contains a list of parameters that were sent in a POST request message.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor">
            <summary>
            Create an empty collection of POSTParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Create a collection of POSTParameter objects with the specified POSTParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Add(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Adds the specified POSTParameter object to the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A POSTParameter object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValue">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Name">
            <summary>
            Represents the name of the query string parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Value">
            <summary>
            Represents the value of the query string parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValues">
            <summary>
            Represents a collection of QueryStringValue objects that 
            contains a list of parameters that were encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor">
            <summary>
            Create an empty collection of QueryStringValue objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Create a collection of QueryStringValue objects with the specified QueryStringValue
            as the first item in the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Add(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Adds the specified QueryStringValue object to the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A QueryStringValue object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Cookies">
            <summary>
            Represents the list of cookies that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Headers">
            <summary>
            Represents the list of HTTP headers that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTMimeType">
            <summary>
            Represents the encoding scheme used in a POST request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTParameters">
            <summary>
            Represents the list of parameters sent in a POST message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.QueryStringValues">
            <summary>
            Represents the list of parameters encoded in the query string section of the URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.RequestLine">
            <summary>
            Represents the HTTP request line that was sent to the server.
            E.g. "GET / HTTP/1.1".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Stream">
            <summary>
            Represents the raw HTTP request data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Chunks">
            <summary>
            Represents the number of chunks in the HTTP response.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Cookies">
            <summary>
            Represents the list of cookies that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Headers">
            <summary>
            Represents the list of HTTP headers that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.StatusLine">
            <summary>
            Represents the HTTP response line that from the server.
            E.g. "HTTP/1.1 200 OK".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Stream">
            <summary>
            Represents the raw HTTP response data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummaries">
            <summary>
            Represents a collection of ResultSummary objects that 
            hold information about errors and status codes.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor">
            <summary>
            Create an empty collection of ResultSummary objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Create a collection of ResultSummary objects with the specified ResultSummary
            as the first item in the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Add(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Adds the specified ResultSummary object to the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A ResultSummary object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummary">
            <summary>
            Represents information about the number of requests that returned a specific
            status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Result">
            <summary>
            Represents the error or status returned by the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Description">
            <summary>
            Represents the full description of the status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Occurrences">
            <summary>
            Represents the number of requests in the current Summary that result
            this status or error code.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Summary">
            <summary>
            Represents summarized information requests in a single page or the whole log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.AverageHTTPSOverhead">
            <summary>
            Represents the average overhead in bytes of each HTTPS request.
            If this value is high (more than a few hundred bytes), it may indicate that
            the server is incorrectly configured and is causing an excessive 
            number of HTTPS renegotiations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesReceived">
            <summary>
            Represents the total number of bytes of data that have been received from web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesSent">
            <summary>
            Represents the total number of bytes of data that have been sent to web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.CompressionSavedBytes">
            <summary>
            Represents the total number of bytes by which downloaded content was reduced in size by
            HTTP compression.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.DNSLookUps">
            <summary>
            Represents the total number of times that a network name was converted to an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Errors">
            <summary>
            Represents a list of the error codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.RoundTrips">
            <summary>
            Represents the number of requests that caused an HTTP request and response message being exchanged 
            with a web server. Some entries do not cause a network round trip because either an error occurred
            or because no network request was required.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.StatusCodes">
            <summary>
            Represents a list of the status codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TCPConnects">
            <summary>
            Represents the number of times that a new TCP level connection had to be made with web server(s) in
            the summary data. An excessively high number of TCP connects may indicate that HTTP persistent
            connections, also known as keep-alive connections, have not been correctly configured on the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Time">
            <summary>
            Represents the time in seconds from the start of the first request in the summary to the end
            of the last item. This can be used to find the total time to download a page or set of pages.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TotalHTTPSOverhead">
            <summary>
            Represents how many extra bytes of data were required to encrypt the request and response messages,
            if there are any HTTPS requests in the summary data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timing">
            <summary>
            Represents information about a single timing such as Blocked or Connect.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Duration">
            <summary>
            Represents the duration of the timing in seconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Started">
            <summary>
            Represents the start time as an offset in seconds from the start of the current request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Valid">
            <summary>
            Indicates whether this timing is populated with data and applies to the current request.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timings">
            <summary>
            Represents the request level timings for a request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Blocked">
            <summary>
            Represents the Blocked time.
            The Blocked time includes any pre-processing time (such as cache lookup) and the time spent waiting
            for a network connection to become available. Internet Explorer will only create a maximum of two
            concurrent network connections per host name and will queue up requests until a network connection
            is available. Often the Blocked time is the most significant factor in the download time of images
            embedded in a web page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.DNSLookup">
            <summary>
            Represents the DNS Lookup time.
            DNS Lookup is the time required to resolve a host name into an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Connect">
            <summary>
            Represents the Connect time.
            Connect is the time required to create a TCP connection to the web server (or proxy). If a secure 
            HTTPS connection is being used this time includes the SSL handshake process.
            "Keep-Alive connections are often used to avoid the overhead of repeatedly connecting to the web
            server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Send">
            <summary>
            Represents the Send time.
            Send is the time required to send the HTTP request message to the server and will depend on the 
            amount of data that is sent to the server. For example, long Send times will result from uploading
            files using an HTTP POST.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Wait">
            <summary>
            Represents the Wait time.
            Wait is the idle time spent waiting for a response message from the server. This value includes delays
            introduced due to network latency and the time required to process the request on the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Receive">
            <summary>
            Represents the Receive time.
            Receive is the time taken to read the response message from the server. This value will depend on the
            size of the content returned, network bandwidth and whether HTTP compression was used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.CacheRead">
            <summary>
            Represents the Cache Read time.
            Cache Read is the time taken to read the content from the browser cache during
            (Cache) or 304 responses.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Network">
            <summary>
            Represents the Network time.
            Network is the total duration of all network related operations for an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.TTFB">
            <summary>
            Represents the TTFB time.
            TTFB (or Time To First Byte) is the duration from the initial network request being initiated
            by the browser to the first byte being received from the server. It includes TCP connection 
            time, the time to send the request and the time taken to get the first byte of the response 
            message.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\bin\Debug\PLTScheduler\Test.Common.Library.HTTPWatchWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWatchWrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.CacheInfo">
            <summary>
            Represents information about the state of a URL in the browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.ETag">
            <summary>
            Represents a value that is used by the web server to identify this version
            of the cached resource.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.Expires">
            <summary>
            Indicates when this cache entry is no longer valid and will need to be updated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.HitCount">
            <summary>
            Represents how many times this cached resource has been used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsExpiresSet">
            <summary>
            Indicates whether an expiration date/time was set by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsLastModifiedSet">
            <summary>
            Indicates whether a modification date/time was supplied by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastUpdate">
            <summary>
            Represents when this cache entry was last updated with content from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastAccess">
            <summary>
            Represents when the cache entry was last accessed by the browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastModified">
            <summary>
            Represents a value supplied by the server indicating when the
            content was last modified.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.URLInCache">
            <summary>
            Indicates whether the URL's content is stored in the browser cache.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Content">
            <summary>
            Represents information about an HTTP resource that was requested.
            E.g. an image or an HTML page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressedSize">
            <summary>
            Represents the compressed size of the content in bytes.
            If the content was not compressed (i.e. IsCompressed returns false) the value
            will be the same as the Size property.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressionType">
            <summary>
            Represents the type of compression used by the server.
            E.g. "gzip" or "deflate". If no compression was used this property returns an empty string.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Data">
            <summary>
            Represents the actual content. For web pages this is the HTML of the page
            and for images this is the binary data in the image file.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsFromCache">
            <summary>
            Indicates whether the content was read from the local browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsCompressed">
            <summary>
            Indicates whether the content was compressed in the HTTP response message from the server.
            This value will always be false if IsFromCache returns true.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.MimeType">
            <summary>
            Represents the type of the content.
            E.g. "text/html" or "image/gif".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Size">
            <summary>
            Represents the size of the content in bytes. If the content was compressed by the server
            this is the uncompressed size of the content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookie">
            <summary>
            Represents a single cookie that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Domain">
            <summary>
            Represents the internet domain name to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Expires">
            <summary>
            Indicates when this cookie expires.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.IsSessionCookie">
            <summary>
            Indicates whether this cookie will be destroyed at the end of the browser session.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Name">
            <summary>
            Represents the name of the cookie.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Path">
            <summary>
            Represents the URL path to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Value">
            <summary>
            Represents the value of the cookie.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookies">
            <summary>
            Represents a collection of Cookie objects that 
            contains cookies that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor">
            <summary>
            Create an empty collection of Cookie objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Create a collection of Cookie objects with the specified Cookie
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.Add(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Adds the specified Cookie object to the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookies.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Cookie object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entries">
            <summary>
            Represents a collection of Entry objects that 
            contains request entries for a page or the whole log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor">
            <summary>
            Create an empty collection of Entry objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Create a collection of Entry objects with the specified Entry
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.Add(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Adds the specified Entry object to the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Entry object corresponding to the specified index.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Summary">
            <summary>
            Represents summarized information about the HTTP requests that were used to download the page.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entry">
            <summary>
            Represents a single HTTP transaction.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesReceived">
            <summary>
            Represents the size of the HTTP response message in bytes.
            This is the amount of data that was received over the network from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesSent">
            <summary>
            Represents the size of the HTTP request message in bytes.
            This is the amount of data that was sent over the network from the browser to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheAfter">
            <summary>
            Represents the state of this URL in the browser cache after the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheBefore">
            <summary>
            Represents the state of this URL in the browser cache before the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientIP">
            <summary>
            Represents the local IP address that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientPort">
            <summary>
            Represents the local TCP port number that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Content">
            <summary>
            Represents the information about the HTTP resource that was requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Error">
            <summary>
            Represents details of any error that occurred while processing the HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsComplete">
            <summary>
            Indicates whether the request has finished processing.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsRedirect">
            <summary>
            Indicates whether a redirection request was received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Method">
            <summary>
            Represents the HTTP method (e.g. "GET" or "POST").
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Page">
            <summary>
            Represents the Page in which this request was recorded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.RedirectURL">
            <summary>
            Represents the URL to which a redirect has been requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Result">
            <summary>
            Represents the result of the request in the same format displayed in HttpWatch
            E.g. "200", "(Cached)", etc.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerIP">
            <summary>
            Represents the IP address of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerPort">
            <summary>
            Represents the TCP port number of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Started">
            <summary>
            Represents the time when this request was started as an offset from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedDateTime">
            <summary>
            Represents the date and time when this request was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedSecs">
            <summary>
            Represents the time when this request was started as an offset in seconds from the
            start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StatusCode">
            <summary>
            Represent the HTTP status code from the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Time">
            <summary>
            Represents the time in seconds required to complete this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Timings">
            <summary>
            Represents the timing information for this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.URL">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Header">
            <summary>
            Represents a single HTTP header that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Name">
            <summary>
            Represents the name of the HTTP header.
            E.g. "User-Agent" or "Content-Length".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Value">
            <summary>
            Represents the value of the HTTP header.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Headers">
            <summary>
            Represents a collection of Header objects that 
            contains HTTP headers that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor">
            <summary>
            Create an empty collection of Header objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Create a collection of Header objects with the specified Header
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.Add(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Adds the specified Header object to the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Headers.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Header object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher">
            <summary>
            Represents the wrapper for HTTP Watcher.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.#ctor">
            <summary>
            Initializes a new instance of the HTTPWatcher class. <br/>
            NOTE: You must have <b>HTTPWatch 5.3</b> installed on your machine to use this library.
            See HTTPWatcherPreReq.txt in the dll folder for more details.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.NavigateTo(System.String,System.Int32)">
            <summary>
            Navigates to the specified URI in a Internet Explorer window.
            </summary>
            <param name="URI">The URI to navigate to.</param>
            <param name="WaitTimeOut">The maximum time in seconds to wait for page to finish loading. If the page does not load within
            this time, the function returns false. If it loads within the specified time, it will return true as soon as the page
            completes loading. Specify a value of -1 for infinite wait.</param>
            <remarks>True if the page was loaded within the specified wait time out, otherwise False.</remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.TimerExpire(System.Object)">
            <summary>
            Callback for IE Load Timer.
            </summary>
            <param name="StateInfo">A state object. Not used.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.OpenBrowser">
            <summary>
            Opens a new Internet Explorer browser window. If a window handle already exists then it will do nothing.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose">
            <summary>
            Does a proper dispose of the object including releasing
            all COM components.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="Disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloseBrowser">
            <summary>
            Closes the Internet Explorer browser window. If no browser window is open, then it does nothing.
            </summary>
            <remarks>
            The browser must have been opened via the <i>OpenBrowser</i> or <i>NavigateTo</i> method. Any browsers
            already open via other means, will not be effected.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveHTTPWatchLog">
            <summary>
            Saves the HTTP Watch Log file to Local Application Data folder.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneCOMLog">
            <summary>
            Clones the HTTPWatch COM Log object to a .NET object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogEntries(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType)">
            <summary>
            Clones the specified type of entries object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="EntriesType">The type of entries to clone.</param>
            <returns>An object of Entries class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogPages(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType)">
            <summary>
            Clones the specified type of pages object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="PagesType">The type of pages to clone.</param>
            <returns>An object of Pages class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ReleaseCOMPluginObjects">
            <summary>
            Releases all the COM objects held by the Plugin class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.GetHTTPWatchLog">
            <summary>
            Gets the .NET HTTP Watch Log object for the last session.
            </summary>
            <returns>An object of HTTPWatchLog class representing the log for the last session.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCache">
            <summary>
            Clears the temporary internet cache. <br/>
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCookies">
            <summary>
            Clears all stored and session cookies.
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveLog(System.String)">
            <summary>
            Saves the HTTP Watch log file to disk. <br/>
            NOTE: This method can be called only once during the object lifetime, and after <i>CloseBrowser</i>
            has been called.
            </summary>
            <param name="HWLFileName">The path and name of the HTTP Watch log file.</param>
            <remarks>
            Calling this multiple times, will have no effect. The HWL log will be save with the filename
            you specified in the first call.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType">
            <summary>
            Represents the type of entries object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.RAWEntries">
            <summary>
            Represents the RAW, unfiltered entries.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.FilteredEntries">
            <summary>
            Represents the filtered entries.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType">
            <summary>
            Represents the type of pages object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.RAWPages">
            <summary>
            Represents the RAW, unfiltered pages.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.FilteredPages">
            <summary>
            Represents the filtered pages.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog">
            <summary>
            Represents the HTTP Watch Log.
            NOTE: This object is copied from the actual COM object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Entries">
            <summary>
            Represents a list of all the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredEntries">
            <summary>
            Represents a filtered list of the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredPages">
            <summary>
            Represents a filtered list of pages in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasNetworkTimings">
            <summary>
            Indicates whether the log contains detailed, request level timings.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasPageGrouping">
            <summary>
            Indicates whether the log contains page grouping information.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.IsFilterEnabled">
            <summary>
            Indicates whether the current filter is enabled.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Pages">
            <summary>
            Represents a list of all the pages in the log.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger">
            <summary>
            Represents the logger for the HTTPWatch module.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Page">
            <summary>
            Represents information about a web page and the HTTP
            requests that were used to download it.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Dynamic">
            <summary>
            Indicates whether this page was a dynamic update to an existing web page.
            E.g. modified by AJAX / Javascript.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Started">
            <summary>
            Represents the time when this request was started as an offset
            from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedDateTime">
            <summary>
            Represents the date and time when this page was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedSecs">
            <summary>
            Represents the time when this page was started as an offset
            in seconds from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Title">
            <summary>
            Represents the title of this page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Unknown">
            <summary>
            Indicates whether this page contains a single request that was not directly
            associated with a window or tab in Internet Explorer.
            E.g. the download of a icon for a bookmark or location bar.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Pages">
            <summary>
            Represents a collection of Page objects. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor">
            <summary>
            Create an empty collection of Page objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Create a collection of Page objects with the specified Page
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.Add(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Adds the specified Page object to the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Pages.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Page object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameter">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Name">
            <summary>
            Represents the name of the parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Value">
            <summary>
            Represents the value of the parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameters">
            <summary>
            Represents a collection of POSTParameter objects that 
            contains a list of parameters that were sent in a POST request message.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor">
            <summary>
            Create an empty collection of POSTParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Create a collection of POSTParameter objects with the specified POSTParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Add(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Adds the specified POSTParameter object to the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A POSTParameter object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValue">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Name">
            <summary>
            Represents the name of the query string parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Value">
            <summary>
            Represents the value of the query string parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValues">
            <summary>
            Represents a collection of QueryStringValue objects that 
            contains a list of parameters that were encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor">
            <summary>
            Create an empty collection of QueryStringValue objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Create a collection of QueryStringValue objects with the specified QueryStringValue
            as the first item in the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Add(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Adds the specified QueryStringValue object to the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A QueryStringValue object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Cookies">
            <summary>
            Represents the list of cookies that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Headers">
            <summary>
            Represents the list of HTTP headers that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTMimeType">
            <summary>
            Represents the encoding scheme used in a POST request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTParameters">
            <summary>
            Represents the list of parameters sent in a POST message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.QueryStringValues">
            <summary>
            Represents the list of parameters encoded in the query string section of the URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.RequestLine">
            <summary>
            Represents the HTTP request line that was sent to the server.
            E.g. "GET / HTTP/1.1".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Stream">
            <summary>
            Represents the raw HTTP request data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Chunks">
            <summary>
            Represents the number of chunks in the HTTP response.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Cookies">
            <summary>
            Represents the list of cookies that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Headers">
            <summary>
            Represents the list of HTTP headers that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.StatusLine">
            <summary>
            Represents the HTTP response line that from the server.
            E.g. "HTTP/1.1 200 OK".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Stream">
            <summary>
            Represents the raw HTTP response data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummaries">
            <summary>
            Represents a collection of ResultSummary objects that 
            hold information about errors and status codes.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor">
            <summary>
            Create an empty collection of ResultSummary objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Create a collection of ResultSummary objects with the specified ResultSummary
            as the first item in the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Add(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Adds the specified ResultSummary object to the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A ResultSummary object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummary">
            <summary>
            Represents information about the number of requests that returned a specific
            status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Result">
            <summary>
            Represents the error or status returned by the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Description">
            <summary>
            Represents the full description of the status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Occurrences">
            <summary>
            Represents the number of requests in the current Summary that result
            this status or error code.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Summary">
            <summary>
            Represents summarized information requests in a single page or the whole log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.AverageHTTPSOverhead">
            <summary>
            Represents the average overhead in bytes of each HTTPS request.
            If this value is high (more than a few hundred bytes), it may indicate that
            the server is incorrectly configured and is causing an excessive 
            number of HTTPS renegotiations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesReceived">
            <summary>
            Represents the total number of bytes of data that have been received from web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesSent">
            <summary>
            Represents the total number of bytes of data that have been sent to web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.CompressionSavedBytes">
            <summary>
            Represents the total number of bytes by which downloaded content was reduced in size by
            HTTP compression.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.DNSLookUps">
            <summary>
            Represents the total number of times that a network name was converted to an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Errors">
            <summary>
            Represents a list of the error codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.RoundTrips">
            <summary>
            Represents the number of requests that caused an HTTP request and response message being exchanged 
            with a web server. Some entries do not cause a network round trip because either an error occurred
            or because no network request was required.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.StatusCodes">
            <summary>
            Represents a list of the status codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TCPConnects">
            <summary>
            Represents the number of times that a new TCP level connection had to be made with web server(s) in
            the summary data. An excessively high number of TCP connects may indicate that HTTP persistent
            connections, also known as keep-alive connections, have not been correctly configured on the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Time">
            <summary>
            Represents the time in seconds from the start of the first request in the summary to the end
            of the last item. This can be used to find the total time to download a page or set of pages.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TotalHTTPSOverhead">
            <summary>
            Represents how many extra bytes of data were required to encrypt the request and response messages,
            if there are any HTTPS requests in the summary data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timing">
            <summary>
            Represents information about a single timing such as Blocked or Connect.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Duration">
            <summary>
            Represents the duration of the timing in seconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Started">
            <summary>
            Represents the start time as an offset in seconds from the start of the current request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Valid">
            <summary>
            Indicates whether this timing is populated with data and applies to the current request.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timings">
            <summary>
            Represents the request level timings for a request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Blocked">
            <summary>
            Represents the Blocked time.
            The Blocked time includes any pre-processing time (such as cache lookup) and the time spent waiting
            for a network connection to become available. Internet Explorer will only create a maximum of two
            concurrent network connections per host name and will queue up requests until a network connection
            is available. Often the Blocked time is the most significant factor in the download time of images
            embedded in a web page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.DNSLookup">
            <summary>
            Represents the DNS Lookup time.
            DNS Lookup is the time required to resolve a host name into an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Connect">
            <summary>
            Represents the Connect time.
            Connect is the time required to create a TCP connection to the web server (or proxy). If a secure 
            HTTPS connection is being used this time includes the SSL handshake process.
            "Keep-Alive connections are often used to avoid the overhead of repeatedly connecting to the web
            server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Send">
            <summary>
            Represents the Send time.
            Send is the time required to send the HTTP request message to the server and will depend on the 
            amount of data that is sent to the server. For example, long Send times will result from uploading
            files using an HTTP POST.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Wait">
            <summary>
            Represents the Wait time.
            Wait is the idle time spent waiting for a response message from the server. This value includes delays
            introduced due to network latency and the time required to process the request on the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Receive">
            <summary>
            Represents the Receive time.
            Receive is the time taken to read the response message from the server. This value will depend on the
            size of the content returned, network bandwidth and whether HTTP compression was used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.CacheRead">
            <summary>
            Represents the Cache Read time.
            Cache Read is the time taken to read the content from the browser cache during
            (Cache) or 304 responses.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Network">
            <summary>
            Represents the Network time.
            Network is the total duration of all network related operations for an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.TTFB">
            <summary>
            Represents the TTFB time.
            TTFB (or Time To First Byte) is the duration from the initial network request being initiated
            by the browser to the first byte being received from the server. It includes TCP connection 
            time, the time to send the request and the time taken to get the first byte of the response 
            message.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\bin\Release\HTTPWatchWrapper\Test.Common.Library.HTTPWatchWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWatchWrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.CacheInfo">
            <summary>
            Represents information about the state of a URL in the browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.ETag">
            <summary>
            Represents a value that is used by the web server to identify this version
            of the cached resource.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.Expires">
            <summary>
            Indicates when this cache entry is no longer valid and will need to be updated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.HitCount">
            <summary>
            Represents how many times this cached resource has been used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsExpiresSet">
            <summary>
            Indicates whether an expiration date/time was set by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsLastModifiedSet">
            <summary>
            Indicates whether a modification date/time was supplied by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastUpdate">
            <summary>
            Represents when this cache entry was last updated with content from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastAccess">
            <summary>
            Represents when the cache entry was last accessed by the browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastModified">
            <summary>
            Represents a value supplied by the server indicating when the
            content was last modified.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.URLInCache">
            <summary>
            Indicates whether the URL's content is stored in the browser cache.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Content">
            <summary>
            Represents information about an HTTP resource that was requested.
            E.g. an image or an HTML page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressedSize">
            <summary>
            Represents the compressed size of the content in bytes.
            If the content was not compressed (i.e. IsCompressed returns false) the value
            will be the same as the Size property.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressionType">
            <summary>
            Represents the type of compression used by the server.
            E.g. "gzip" or "deflate". If no compression was used this property returns an empty string.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Data">
            <summary>
            Represents the actual content. For web pages this is the HTML of the page
            and for images this is the binary data in the image file.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsFromCache">
            <summary>
            Indicates whether the content was read from the local browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsCompressed">
            <summary>
            Indicates whether the content was compressed in the HTTP response message from the server.
            This value will always be false if IsFromCache returns true.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.MimeType">
            <summary>
            Represents the type of the content.
            E.g. "text/html" or "image/gif".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Size">
            <summary>
            Represents the size of the content in bytes. If the content was compressed by the server
            this is the uncompressed size of the content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookie">
            <summary>
            Represents a single cookie that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Domain">
            <summary>
            Represents the internet domain name to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Expires">
            <summary>
            Indicates when this cookie expires.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.IsSessionCookie">
            <summary>
            Indicates whether this cookie will be destroyed at the end of the browser session.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Name">
            <summary>
            Represents the name of the cookie.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Path">
            <summary>
            Represents the URL path to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Value">
            <summary>
            Represents the value of the cookie.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookies">
            <summary>
            Represents a collection of Cookie objects that 
            contains cookies that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor">
            <summary>
            Create an empty collection of Cookie objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Create a collection of Cookie objects with the specified Cookie
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.Add(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Adds the specified Cookie object to the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookies.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Cookie object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entries">
            <summary>
            Represents a collection of Entry objects that 
            contains request entries for a page or the whole log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor">
            <summary>
            Create an empty collection of Entry objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Create a collection of Entry objects with the specified Entry
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.Add(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Adds the specified Entry object to the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Entry object corresponding to the specified index.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Summary">
            <summary>
            Represents summarized information about the HTTP requests that were used to download the page.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entry">
            <summary>
            Represents a single HTTP transaction.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesReceived">
            <summary>
            Represents the size of the HTTP response message in bytes.
            This is the amount of data that was received over the network from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesSent">
            <summary>
            Represents the size of the HTTP request message in bytes.
            This is the amount of data that was sent over the network from the browser to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheAfter">
            <summary>
            Represents the state of this URL in the browser cache after the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheBefore">
            <summary>
            Represents the state of this URL in the browser cache before the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientIP">
            <summary>
            Represents the local IP address that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientPort">
            <summary>
            Represents the local TCP port number that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Content">
            <summary>
            Represents the information about the HTTP resource that was requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Error">
            <summary>
            Represents details of any error that occurred while processing the HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsComplete">
            <summary>
            Indicates whether the request has finished processing.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsRedirect">
            <summary>
            Indicates whether a redirection request was received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Method">
            <summary>
            Represents the HTTP method (e.g. "GET" or "POST").
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Page">
            <summary>
            Represents the Page in which this request was recorded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.RedirectURL">
            <summary>
            Represents the URL to which a redirect has been requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Result">
            <summary>
            Represents the result of the request in the same format displayed in HttpWatch
            E.g. "200", "(Cached)", etc.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerIP">
            <summary>
            Represents the IP address of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerPort">
            <summary>
            Represents the TCP port number of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Started">
            <summary>
            Represents the time when this request was started as an offset from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedDateTime">
            <summary>
            Represents the date and time when this request was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedSecs">
            <summary>
            Represents the time when this request was started as an offset in seconds from the
            start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StatusCode">
            <summary>
            Represent the HTTP status code from the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Time">
            <summary>
            Represents the time in seconds required to complete this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Timings">
            <summary>
            Represents the timing information for this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.URL">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Header">
            <summary>
            Represents a single HTTP header that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Name">
            <summary>
            Represents the name of the HTTP header.
            E.g. "User-Agent" or "Content-Length".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Value">
            <summary>
            Represents the value of the HTTP header.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Headers">
            <summary>
            Represents a collection of Header objects that 
            contains HTTP headers that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor">
            <summary>
            Create an empty collection of Header objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Create a collection of Header objects with the specified Header
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.Add(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Adds the specified Header object to the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Headers.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Header object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher">
            <summary>
            Represents the wrapper for HTTP Watcher.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.#ctor">
            <summary>
            Initializes a new instance of the HTTPWatcher class. <br/>
            NOTE: You must have <b>HTTPWatch 5.3</b> installed on your machine to use this library.
            See HTTPWatcherPreReq.txt in the dll folder for more details.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.NavigateTo(System.String,System.Int32)">
            <summary>
            Navigates to the specified URI in a Internet Explorer window.
            </summary>
            <param name="URI">The URI to navigate to.</param>
            <param name="WaitTimeOut">The maximum time in seconds to wait for page to finish loading. If the page does not load within
            this time, the function returns false. If it loads within the specified time, it will return true as soon as the page
            completes loading. Specify a value of -1 for infinite wait.</param>
            <remarks>True if the page was loaded within the specified wait time out, otherwise False.</remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.TimerExpire(System.Object)">
            <summary>
            Callback for IE Load Timer.
            </summary>
            <param name="StateInfo">A state object. Not used.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.OpenBrowser">
            <summary>
            Opens a new Internet Explorer browser window. If a window handle already exists then it will do nothing.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose">
            <summary>
            Does a proper dispose of the object including releasing
            all COM components.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="Disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloseBrowser">
            <summary>
            Closes the Internet Explorer browser window. If no browser window is open, then it does nothing.
            </summary>
            <remarks>
            The browser must have been opened via the <i>OpenBrowser</i> or <i>NavigateTo</i> method. Any browsers
            already open via other means, will not be effected.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveHTTPWatchLog">
            <summary>
            Saves the HTTP Watch Log file to Local Application Data folder.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneCOMLog">
            <summary>
            Clones the HTTPWatch COM Log object to a .NET object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogEntries(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType)">
            <summary>
            Clones the specified type of entries object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="EntriesType">The type of entries to clone.</param>
            <returns>An object of Entries class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogPages(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType)">
            <summary>
            Clones the specified type of pages object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="PagesType">The type of pages to clone.</param>
            <returns>An object of Pages class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ReleaseCOMPluginObjects">
            <summary>
            Releases all the COM objects held by the Plugin class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.GetHTTPWatchLog">
            <summary>
            Gets the .NET HTTP Watch Log object for the last session.
            </summary>
            <returns>An object of HTTPWatchLog class representing the log for the last session.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCache">
            <summary>
            Clears the temporary internet cache. <br/>
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCookies">
            <summary>
            Clears all stored and session cookies.
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveLog(System.String)">
            <summary>
            Saves the HTTP Watch log file to disk. <br/>
            NOTE: This method can be called only once during the object lifetime, and after <i>CloseBrowser</i>
            has been called.
            </summary>
            <param name="HWLFileName">The path and name of the HTTP Watch log file.</param>
            <remarks>
            Calling this multiple times, will have no effect. The HWL log will be save with the filename
            you specified in the first call.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType">
            <summary>
            Represents the type of entries object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.RAWEntries">
            <summary>
            Represents the RAW, unfiltered entries.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.FilteredEntries">
            <summary>
            Represents the filtered entries.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType">
            <summary>
            Represents the type of pages object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.RAWPages">
            <summary>
            Represents the RAW, unfiltered pages.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.FilteredPages">
            <summary>
            Represents the filtered pages.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog">
            <summary>
            Represents the HTTP Watch Log.
            NOTE: This object is copied from the actual COM object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Entries">
            <summary>
            Represents a list of all the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredEntries">
            <summary>
            Represents a filtered list of the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredPages">
            <summary>
            Represents a filtered list of pages in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasNetworkTimings">
            <summary>
            Indicates whether the log contains detailed, request level timings.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasPageGrouping">
            <summary>
            Indicates whether the log contains page grouping information.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.IsFilterEnabled">
            <summary>
            Indicates whether the current filter is enabled.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Pages">
            <summary>
            Represents a list of all the pages in the log.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger">
            <summary>
            Represents the logger for the HTTPWatch module.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Page">
            <summary>
            Represents information about a web page and the HTTP
            requests that were used to download it.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Dynamic">
            <summary>
            Indicates whether this page was a dynamic update to an existing web page.
            E.g. modified by AJAX / Javascript.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Started">
            <summary>
            Represents the time when this request was started as an offset
            from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedDateTime">
            <summary>
            Represents the date and time when this page was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedSecs">
            <summary>
            Represents the time when this page was started as an offset
            in seconds from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Title">
            <summary>
            Represents the title of this page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Unknown">
            <summary>
            Indicates whether this page contains a single request that was not directly
            associated with a window or tab in Internet Explorer.
            E.g. the download of a icon for a bookmark or location bar.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Pages">
            <summary>
            Represents a collection of Page objects. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor">
            <summary>
            Create an empty collection of Page objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Create a collection of Page objects with the specified Page
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.Add(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Adds the specified Page object to the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Pages.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Page object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameter">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Name">
            <summary>
            Represents the name of the parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Value">
            <summary>
            Represents the value of the parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameters">
            <summary>
            Represents a collection of POSTParameter objects that 
            contains a list of parameters that were sent in a POST request message.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor">
            <summary>
            Create an empty collection of POSTParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Create a collection of POSTParameter objects with the specified POSTParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Add(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Adds the specified POSTParameter object to the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A POSTParameter object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValue">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Name">
            <summary>
            Represents the name of the query string parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Value">
            <summary>
            Represents the value of the query string parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValues">
            <summary>
            Represents a collection of QueryStringValue objects that 
            contains a list of parameters that were encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor">
            <summary>
            Create an empty collection of QueryStringValue objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Create a collection of QueryStringValue objects with the specified QueryStringValue
            as the first item in the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Add(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Adds the specified QueryStringValue object to the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A QueryStringValue object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Cookies">
            <summary>
            Represents the list of cookies that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Headers">
            <summary>
            Represents the list of HTTP headers that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTMimeType">
            <summary>
            Represents the encoding scheme used in a POST request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTParameters">
            <summary>
            Represents the list of parameters sent in a POST message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.QueryStringValues">
            <summary>
            Represents the list of parameters encoded in the query string section of the URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.RequestLine">
            <summary>
            Represents the HTTP request line that was sent to the server.
            E.g. "GET / HTTP/1.1".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Stream">
            <summary>
            Represents the raw HTTP request data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Chunks">
            <summary>
            Represents the number of chunks in the HTTP response.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Cookies">
            <summary>
            Represents the list of cookies that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Headers">
            <summary>
            Represents the list of HTTP headers that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.StatusLine">
            <summary>
            Represents the HTTP response line that from the server.
            E.g. "HTTP/1.1 200 OK".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Stream">
            <summary>
            Represents the raw HTTP response data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummaries">
            <summary>
            Represents a collection of ResultSummary objects that 
            hold information about errors and status codes.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor">
            <summary>
            Create an empty collection of ResultSummary objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Create a collection of ResultSummary objects with the specified ResultSummary
            as the first item in the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Add(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Adds the specified ResultSummary object to the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A ResultSummary object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummary">
            <summary>
            Represents information about the number of requests that returned a specific
            status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Result">
            <summary>
            Represents the error or status returned by the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Description">
            <summary>
            Represents the full description of the status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Occurrences">
            <summary>
            Represents the number of requests in the current Summary that result
            this status or error code.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Summary">
            <summary>
            Represents summarized information requests in a single page or the whole log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.AverageHTTPSOverhead">
            <summary>
            Represents the average overhead in bytes of each HTTPS request.
            If this value is high (more than a few hundred bytes), it may indicate that
            the server is incorrectly configured and is causing an excessive 
            number of HTTPS renegotiations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesReceived">
            <summary>
            Represents the total number of bytes of data that have been received from web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesSent">
            <summary>
            Represents the total number of bytes of data that have been sent to web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.CompressionSavedBytes">
            <summary>
            Represents the total number of bytes by which downloaded content was reduced in size by
            HTTP compression.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.DNSLookUps">
            <summary>
            Represents the total number of times that a network name was converted to an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Errors">
            <summary>
            Represents a list of the error codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.RoundTrips">
            <summary>
            Represents the number of requests that caused an HTTP request and response message being exchanged 
            with a web server. Some entries do not cause a network round trip because either an error occurred
            or because no network request was required.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.StatusCodes">
            <summary>
            Represents a list of the status codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TCPConnects">
            <summary>
            Represents the number of times that a new TCP level connection had to be made with web server(s) in
            the summary data. An excessively high number of TCP connects may indicate that HTTP persistent
            connections, also known as keep-alive connections, have not been correctly configured on the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Time">
            <summary>
            Represents the time in seconds from the start of the first request in the summary to the end
            of the last item. This can be used to find the total time to download a page or set of pages.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TotalHTTPSOverhead">
            <summary>
            Represents how many extra bytes of data were required to encrypt the request and response messages,
            if there are any HTTPS requests in the summary data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timing">
            <summary>
            Represents information about a single timing such as Blocked or Connect.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Duration">
            <summary>
            Represents the duration of the timing in seconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Started">
            <summary>
            Represents the start time as an offset in seconds from the start of the current request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Valid">
            <summary>
            Indicates whether this timing is populated with data and applies to the current request.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timings">
            <summary>
            Represents the request level timings for a request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Blocked">
            <summary>
            Represents the Blocked time.
            The Blocked time includes any pre-processing time (such as cache lookup) and the time spent waiting
            for a network connection to become available. Internet Explorer will only create a maximum of two
            concurrent network connections per host name and will queue up requests until a network connection
            is available. Often the Blocked time is the most significant factor in the download time of images
            embedded in a web page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.DNSLookup">
            <summary>
            Represents the DNS Lookup time.
            DNS Lookup is the time required to resolve a host name into an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Connect">
            <summary>
            Represents the Connect time.
            Connect is the time required to create a TCP connection to the web server (or proxy). If a secure 
            HTTPS connection is being used this time includes the SSL handshake process.
            "Keep-Alive connections are often used to avoid the overhead of repeatedly connecting to the web
            server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Send">
            <summary>
            Represents the Send time.
            Send is the time required to send the HTTP request message to the server and will depend on the 
            amount of data that is sent to the server. For example, long Send times will result from uploading
            files using an HTTP POST.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Wait">
            <summary>
            Represents the Wait time.
            Wait is the idle time spent waiting for a response message from the server. This value includes delays
            introduced due to network latency and the time required to process the request on the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Receive">
            <summary>
            Represents the Receive time.
            Receive is the time taken to read the response message from the server. This value will depend on the
            size of the content returned, network bandwidth and whether HTTP compression was used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.CacheRead">
            <summary>
            Represents the Cache Read time.
            Cache Read is the time taken to read the content from the browser cache during
            (Cache) or 304 responses.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Network">
            <summary>
            Represents the Network time.
            Network is the total duration of all network related operations for an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.TTFB">
            <summary>
            Represents the TTFB time.
            TTFB (or Time To First Byte) is the duration from the initial network request being initiated
            by the browser to the first byte being received from the server. It includes TCP connection 
            time, the time to send the request and the time taken to get the first byte of the response 
            message.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\bin\Release\PageLoadTimeDaemon\Test.Common.Library.HTTPWatchWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWatchWrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.CacheInfo">
            <summary>
            Represents information about the state of a URL in the browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.ETag">
            <summary>
            Represents a value that is used by the web server to identify this version
            of the cached resource.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.Expires">
            <summary>
            Indicates when this cache entry is no longer valid and will need to be updated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.HitCount">
            <summary>
            Represents how many times this cached resource has been used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsExpiresSet">
            <summary>
            Indicates whether an expiration date/time was set by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsLastModifiedSet">
            <summary>
            Indicates whether a modification date/time was supplied by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastUpdate">
            <summary>
            Represents when this cache entry was last updated with content from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastAccess">
            <summary>
            Represents when the cache entry was last accessed by the browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastModified">
            <summary>
            Represents a value supplied by the server indicating when the
            content was last modified.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.URLInCache">
            <summary>
            Indicates whether the URL's content is stored in the browser cache.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Content">
            <summary>
            Represents information about an HTTP resource that was requested.
            E.g. an image or an HTML page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressedSize">
            <summary>
            Represents the compressed size of the content in bytes.
            If the content was not compressed (i.e. IsCompressed returns false) the value
            will be the same as the Size property.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressionType">
            <summary>
            Represents the type of compression used by the server.
            E.g. "gzip" or "deflate". If no compression was used this property returns an empty string.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Data">
            <summary>
            Represents the actual content. For web pages this is the HTML of the page
            and for images this is the binary data in the image file.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsFromCache">
            <summary>
            Indicates whether the content was read from the local browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsCompressed">
            <summary>
            Indicates whether the content was compressed in the HTTP response message from the server.
            This value will always be false if IsFromCache returns true.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.MimeType">
            <summary>
            Represents the type of the content.
            E.g. "text/html" or "image/gif".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Size">
            <summary>
            Represents the size of the content in bytes. If the content was compressed by the server
            this is the uncompressed size of the content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookie">
            <summary>
            Represents a single cookie that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Domain">
            <summary>
            Represents the internet domain name to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Expires">
            <summary>
            Indicates when this cookie expires.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.IsSessionCookie">
            <summary>
            Indicates whether this cookie will be destroyed at the end of the browser session.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Name">
            <summary>
            Represents the name of the cookie.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Path">
            <summary>
            Represents the URL path to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Value">
            <summary>
            Represents the value of the cookie.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookies">
            <summary>
            Represents a collection of Cookie objects that 
            contains cookies that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor">
            <summary>
            Create an empty collection of Cookie objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Create a collection of Cookie objects with the specified Cookie
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.Add(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Adds the specified Cookie object to the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookies.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Cookie object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entries">
            <summary>
            Represents a collection of Entry objects that 
            contains request entries for a page or the whole log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor">
            <summary>
            Create an empty collection of Entry objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Create a collection of Entry objects with the specified Entry
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.Add(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Adds the specified Entry object to the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Entry object corresponding to the specified index.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Summary">
            <summary>
            Represents summarized information about the HTTP requests that were used to download the page.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entry">
            <summary>
            Represents a single HTTP transaction.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesReceived">
            <summary>
            Represents the size of the HTTP response message in bytes.
            This is the amount of data that was received over the network from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesSent">
            <summary>
            Represents the size of the HTTP request message in bytes.
            This is the amount of data that was sent over the network from the browser to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheAfter">
            <summary>
            Represents the state of this URL in the browser cache after the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheBefore">
            <summary>
            Represents the state of this URL in the browser cache before the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientIP">
            <summary>
            Represents the local IP address that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientPort">
            <summary>
            Represents the local TCP port number that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Content">
            <summary>
            Represents the information about the HTTP resource that was requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Error">
            <summary>
            Represents details of any error that occurred while processing the HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsComplete">
            <summary>
            Indicates whether the request has finished processing.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsRedirect">
            <summary>
            Indicates whether a redirection request was received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Method">
            <summary>
            Represents the HTTP method (e.g. "GET" or "POST").
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Page">
            <summary>
            Represents the Page in which this request was recorded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.RedirectURL">
            <summary>
            Represents the URL to which a redirect has been requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Result">
            <summary>
            Represents the result of the request in the same format displayed in HttpWatch
            E.g. "200", "(Cached)", etc.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerIP">
            <summary>
            Represents the IP address of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerPort">
            <summary>
            Represents the TCP port number of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Started">
            <summary>
            Represents the time when this request was started as an offset from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedDateTime">
            <summary>
            Represents the date and time when this request was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedSecs">
            <summary>
            Represents the time when this request was started as an offset in seconds from the
            start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StatusCode">
            <summary>
            Represent the HTTP status code from the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Time">
            <summary>
            Represents the time in seconds required to complete this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Timings">
            <summary>
            Represents the timing information for this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.URL">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Header">
            <summary>
            Represents a single HTTP header that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Name">
            <summary>
            Represents the name of the HTTP header.
            E.g. "User-Agent" or "Content-Length".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Value">
            <summary>
            Represents the value of the HTTP header.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Headers">
            <summary>
            Represents a collection of Header objects that 
            contains HTTP headers that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor">
            <summary>
            Create an empty collection of Header objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Create a collection of Header objects with the specified Header
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.Add(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Adds the specified Header object to the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Headers.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Header object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher">
            <summary>
            Represents the wrapper for HTTP Watcher.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.#ctor">
            <summary>
            Initializes a new instance of the HTTPWatcher class. <br/>
            NOTE: You must have <b>HTTPWatch 5.3</b> installed on your machine to use this library.
            See HTTPWatcherPreReq.txt in the dll folder for more details.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.NavigateTo(System.String,System.Int32)">
            <summary>
            Navigates to the specified URI in a Internet Explorer window.
            </summary>
            <param name="URI">The URI to navigate to.</param>
            <param name="WaitTimeOut">The maximum time in seconds to wait for page to finish loading. If the page does not load within
            this time, the function returns false. If it loads within the specified time, it will return true as soon as the page
            completes loading. Specify a value of -1 for infinite wait.</param>
            <remarks>True if the page was loaded within the specified wait time out, otherwise False.</remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.TimerExpire(System.Object)">
            <summary>
            Callback for IE Load Timer.
            </summary>
            <param name="StateInfo">A state object. Not used.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.OpenBrowser">
            <summary>
            Opens a new Internet Explorer browser window. If a window handle already exists then it will do nothing.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose">
            <summary>
            Does a proper dispose of the object including releasing
            all COM components.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="Disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloseBrowser">
            <summary>
            Closes the Internet Explorer browser window. If no browser window is open, then it does nothing.
            </summary>
            <remarks>
            The browser must have been opened via the <i>OpenBrowser</i> or <i>NavigateTo</i> method. Any browsers
            already open via other means, will not be effected.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveHTTPWatchLog">
            <summary>
            Saves the HTTP Watch Log file to Local Application Data folder.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneCOMLog">
            <summary>
            Clones the HTTPWatch COM Log object to a .NET object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogEntries(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType)">
            <summary>
            Clones the specified type of entries object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="EntriesType">The type of entries to clone.</param>
            <returns>An object of Entries class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogPages(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType)">
            <summary>
            Clones the specified type of pages object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="PagesType">The type of pages to clone.</param>
            <returns>An object of Pages class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ReleaseCOMPluginObjects">
            <summary>
            Releases all the COM objects held by the Plugin class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.GetHTTPWatchLog">
            <summary>
            Gets the .NET HTTP Watch Log object for the last session.
            </summary>
            <returns>An object of HTTPWatchLog class representing the log for the last session.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCache">
            <summary>
            Clears the temporary internet cache. <br/>
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCookies">
            <summary>
            Clears all stored and session cookies.
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveLog(System.String)">
            <summary>
            Saves the HTTP Watch log file to disk. <br/>
            NOTE: This method can be called only once during the object lifetime, and after <i>CloseBrowser</i>
            has been called.
            </summary>
            <param name="HWLFileName">The path and name of the HTTP Watch log file.</param>
            <remarks>
            Calling this multiple times, will have no effect. The HWL log will be save with the filename
            you specified in the first call.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType">
            <summary>
            Represents the type of entries object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.RAWEntries">
            <summary>
            Represents the RAW, unfiltered entries.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.FilteredEntries">
            <summary>
            Represents the filtered entries.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType">
            <summary>
            Represents the type of pages object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.RAWPages">
            <summary>
            Represents the RAW, unfiltered pages.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.FilteredPages">
            <summary>
            Represents the filtered pages.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog">
            <summary>
            Represents the HTTP Watch Log.
            NOTE: This object is copied from the actual COM object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Entries">
            <summary>
            Represents a list of all the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredEntries">
            <summary>
            Represents a filtered list of the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredPages">
            <summary>
            Represents a filtered list of pages in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasNetworkTimings">
            <summary>
            Indicates whether the log contains detailed, request level timings.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasPageGrouping">
            <summary>
            Indicates whether the log contains page grouping information.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.IsFilterEnabled">
            <summary>
            Indicates whether the current filter is enabled.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Pages">
            <summary>
            Represents a list of all the pages in the log.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger">
            <summary>
            Represents the logger for the HTTPWatch module.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Page">
            <summary>
            Represents information about a web page and the HTTP
            requests that were used to download it.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Dynamic">
            <summary>
            Indicates whether this page was a dynamic update to an existing web page.
            E.g. modified by AJAX / Javascript.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Started">
            <summary>
            Represents the time when this request was started as an offset
            from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedDateTime">
            <summary>
            Represents the date and time when this page was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedSecs">
            <summary>
            Represents the time when this page was started as an offset
            in seconds from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Title">
            <summary>
            Represents the title of this page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Unknown">
            <summary>
            Indicates whether this page contains a single request that was not directly
            associated with a window or tab in Internet Explorer.
            E.g. the download of a icon for a bookmark or location bar.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Pages">
            <summary>
            Represents a collection of Page objects. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor">
            <summary>
            Create an empty collection of Page objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Create a collection of Page objects with the specified Page
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.Add(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Adds the specified Page object to the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Pages.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Page object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameter">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Name">
            <summary>
            Represents the name of the parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Value">
            <summary>
            Represents the value of the parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameters">
            <summary>
            Represents a collection of POSTParameter objects that 
            contains a list of parameters that were sent in a POST request message.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor">
            <summary>
            Create an empty collection of POSTParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Create a collection of POSTParameter objects with the specified POSTParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Add(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Adds the specified POSTParameter object to the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A POSTParameter object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValue">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Name">
            <summary>
            Represents the name of the query string parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Value">
            <summary>
            Represents the value of the query string parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValues">
            <summary>
            Represents a collection of QueryStringValue objects that 
            contains a list of parameters that were encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor">
            <summary>
            Create an empty collection of QueryStringValue objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Create a collection of QueryStringValue objects with the specified QueryStringValue
            as the first item in the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Add(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Adds the specified QueryStringValue object to the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A QueryStringValue object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Cookies">
            <summary>
            Represents the list of cookies that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Headers">
            <summary>
            Represents the list of HTTP headers that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTMimeType">
            <summary>
            Represents the encoding scheme used in a POST request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTParameters">
            <summary>
            Represents the list of parameters sent in a POST message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.QueryStringValues">
            <summary>
            Represents the list of parameters encoded in the query string section of the URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.RequestLine">
            <summary>
            Represents the HTTP request line that was sent to the server.
            E.g. "GET / HTTP/1.1".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Stream">
            <summary>
            Represents the raw HTTP request data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Chunks">
            <summary>
            Represents the number of chunks in the HTTP response.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Cookies">
            <summary>
            Represents the list of cookies that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Headers">
            <summary>
            Represents the list of HTTP headers that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.StatusLine">
            <summary>
            Represents the HTTP response line that from the server.
            E.g. "HTTP/1.1 200 OK".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Stream">
            <summary>
            Represents the raw HTTP response data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummaries">
            <summary>
            Represents a collection of ResultSummary objects that 
            hold information about errors and status codes.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor">
            <summary>
            Create an empty collection of ResultSummary objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Create a collection of ResultSummary objects with the specified ResultSummary
            as the first item in the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Add(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Adds the specified ResultSummary object to the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A ResultSummary object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummary">
            <summary>
            Represents information about the number of requests that returned a specific
            status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Result">
            <summary>
            Represents the error or status returned by the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Description">
            <summary>
            Represents the full description of the status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Occurrences">
            <summary>
            Represents the number of requests in the current Summary that result
            this status or error code.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Summary">
            <summary>
            Represents summarized information requests in a single page or the whole log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.AverageHTTPSOverhead">
            <summary>
            Represents the average overhead in bytes of each HTTPS request.
            If this value is high (more than a few hundred bytes), it may indicate that
            the server is incorrectly configured and is causing an excessive 
            number of HTTPS renegotiations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesReceived">
            <summary>
            Represents the total number of bytes of data that have been received from web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesSent">
            <summary>
            Represents the total number of bytes of data that have been sent to web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.CompressionSavedBytes">
            <summary>
            Represents the total number of bytes by which downloaded content was reduced in size by
            HTTP compression.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.DNSLookUps">
            <summary>
            Represents the total number of times that a network name was converted to an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Errors">
            <summary>
            Represents a list of the error codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.RoundTrips">
            <summary>
            Represents the number of requests that caused an HTTP request and response message being exchanged 
            with a web server. Some entries do not cause a network round trip because either an error occurred
            or because no network request was required.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.StatusCodes">
            <summary>
            Represents a list of the status codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TCPConnects">
            <summary>
            Represents the number of times that a new TCP level connection had to be made with web server(s) in
            the summary data. An excessively high number of TCP connects may indicate that HTTP persistent
            connections, also known as keep-alive connections, have not been correctly configured on the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Time">
            <summary>
            Represents the time in seconds from the start of the first request in the summary to the end
            of the last item. This can be used to find the total time to download a page or set of pages.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TotalHTTPSOverhead">
            <summary>
            Represents how many extra bytes of data were required to encrypt the request and response messages,
            if there are any HTTPS requests in the summary data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timing">
            <summary>
            Represents information about a single timing such as Blocked or Connect.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Duration">
            <summary>
            Represents the duration of the timing in seconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Started">
            <summary>
            Represents the start time as an offset in seconds from the start of the current request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Valid">
            <summary>
            Indicates whether this timing is populated with data and applies to the current request.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timings">
            <summary>
            Represents the request level timings for a request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Blocked">
            <summary>
            Represents the Blocked time.
            The Blocked time includes any pre-processing time (such as cache lookup) and the time spent waiting
            for a network connection to become available. Internet Explorer will only create a maximum of two
            concurrent network connections per host name and will queue up requests until a network connection
            is available. Often the Blocked time is the most significant factor in the download time of images
            embedded in a web page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.DNSLookup">
            <summary>
            Represents the DNS Lookup time.
            DNS Lookup is the time required to resolve a host name into an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Connect">
            <summary>
            Represents the Connect time.
            Connect is the time required to create a TCP connection to the web server (or proxy). If a secure 
            HTTPS connection is being used this time includes the SSL handshake process.
            "Keep-Alive connections are often used to avoid the overhead of repeatedly connecting to the web
            server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Send">
            <summary>
            Represents the Send time.
            Send is the time required to send the HTTP request message to the server and will depend on the 
            amount of data that is sent to the server. For example, long Send times will result from uploading
            files using an HTTP POST.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Wait">
            <summary>
            Represents the Wait time.
            Wait is the idle time spent waiting for a response message from the server. This value includes delays
            introduced due to network latency and the time required to process the request on the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Receive">
            <summary>
            Represents the Receive time.
            Receive is the time taken to read the response message from the server. This value will depend on the
            size of the content returned, network bandwidth and whether HTTP compression was used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.CacheRead">
            <summary>
            Represents the Cache Read time.
            Cache Read is the time taken to read the content from the browser cache during
            (Cache) or 304 responses.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Network">
            <summary>
            Represents the Network time.
            Network is the total duration of all network related operations for an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.TTFB">
            <summary>
            Represents the TTFB time.
            TTFB (or Time To First Byte) is the duration from the initial network request being initiated
            by the browser to the first byte being received from the server. It includes TCP connection 
            time, the time to send the request and the time taken to get the first byte of the response 
            message.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWatchWrapper\HTTPWatchWrapper\bin\Release\PLTScheduler\Test.Common.Library.HTTPWatchWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWatchWrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.CacheInfo">
            <summary>
            Represents information about the state of a URL in the browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.ETag">
            <summary>
            Represents a value that is used by the web server to identify this version
            of the cached resource.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.Expires">
            <summary>
            Indicates when this cache entry is no longer valid and will need to be updated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.HitCount">
            <summary>
            Represents how many times this cached resource has been used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsExpiresSet">
            <summary>
            Indicates whether an expiration date/time was set by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.IsLastModifiedSet">
            <summary>
            Indicates whether a modification date/time was supplied by the web server for this cache entry.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastUpdate">
            <summary>
            Represents when this cache entry was last updated with content from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastAccess">
            <summary>
            Represents when the cache entry was last accessed by the browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.LastModified">
            <summary>
            Represents a value supplied by the server indicating when the
            content was last modified.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.CacheInfo.URLInCache">
            <summary>
            Indicates whether the URL's content is stored in the browser cache.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Content">
            <summary>
            Represents information about an HTTP resource that was requested.
            E.g. an image or an HTML page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressedSize">
            <summary>
            Represents the compressed size of the content in bytes.
            If the content was not compressed (i.e. IsCompressed returns false) the value
            will be the same as the Size property.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.CompressionType">
            <summary>
            Represents the type of compression used by the server.
            E.g. "gzip" or "deflate". If no compression was used this property returns an empty string.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Data">
            <summary>
            Represents the actual content. For web pages this is the HTML of the page
            and for images this is the binary data in the image file.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsFromCache">
            <summary>
            Indicates whether the content was read from the local browser cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.IsCompressed">
            <summary>
            Indicates whether the content was compressed in the HTTP response message from the server.
            This value will always be false if IsFromCache returns true.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.MimeType">
            <summary>
            Represents the type of the content.
            E.g. "text/html" or "image/gif".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Content.Size">
            <summary>
            Represents the size of the content in bytes. If the content was compressed by the server
            this is the uncompressed size of the content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookie">
            <summary>
            Represents a single cookie that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Domain">
            <summary>
            Represents the internet domain name to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Expires">
            <summary>
            Indicates when this cookie expires.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.IsSessionCookie">
            <summary>
            Indicates whether this cookie will be destroyed at the end of the browser session.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Name">
            <summary>
            Represents the name of the cookie.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Path">
            <summary>
            Represents the URL path to which this cookie applies.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookie.Value">
            <summary>
            Represents the value of the cookie.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Cookies">
            <summary>
            Represents a collection of Cookie objects that 
            contains cookies that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor">
            <summary>
            Create an empty collection of Cookie objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.#ctor(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Create a collection of Cookie objects with the specified Cookie
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Cookies.Add(Test.Common.Library.HTTPWatchWrapper.Cookie)">
            <summary>
            Adds the specified Cookie object to the collection.
            </summary>
            <param name="Parameter">The Cookie object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Cookies.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Cookie object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entries">
            <summary>
            Represents a collection of Entry objects that 
            contains request entries for a page or the whole log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor">
            <summary>
            Create an empty collection of Entry objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.#ctor(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Create a collection of Entry objects with the specified Entry
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Entries.Add(Test.Common.Library.HTTPWatchWrapper.Entry)">
            <summary>
            Adds the specified Entry object to the collection.
            </summary>
            <param name="Parameter">The Entry object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Entry object corresponding to the specified index.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entries.Summary">
            <summary>
            Represents summarized information about the HTTP requests that were used to download the page.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Entry">
            <summary>
            Represents a single HTTP transaction.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesReceived">
            <summary>
            Represents the size of the HTTP response message in bytes.
            This is the amount of data that was received over the network from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.BytesSent">
            <summary>
            Represents the size of the HTTP request message in bytes.
            This is the amount of data that was sent over the network from the browser to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheAfter">
            <summary>
            Represents the state of this URL in the browser cache after the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.CacheBefore">
            <summary>
            Represents the state of this URL in the browser cache before the request was processed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientIP">
            <summary>
            Represents the local IP address that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ClientPort">
            <summary>
            Represents the local TCP port number that was used to send this HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Content">
            <summary>
            Represents the information about the HTTP resource that was requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Error">
            <summary>
            Represents details of any error that occurred while processing the HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsComplete">
            <summary>
            Indicates whether the request has finished processing.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.IsRedirect">
            <summary>
            Indicates whether a redirection request was received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Method">
            <summary>
            Represents the HTTP method (e.g. "GET" or "POST").
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Page">
            <summary>
            Represents the Page in which this request was recorded.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.RedirectURL">
            <summary>
            Represents the URL to which a redirect has been requested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Result">
            <summary>
            Represents the result of the request in the same format displayed in HttpWatch
            E.g. "200", "(Cached)", etc.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerIP">
            <summary>
            Represents the IP address of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.ServerPort">
            <summary>
            Represents the TCP port number of the web server (or proxy) to which this HTTP request was sent.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Started">
            <summary>
            Represents the time when this request was started as an offset from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedDateTime">
            <summary>
            Represents the date and time when this request was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StartedSecs">
            <summary>
            Represents the time when this request was started as an offset in seconds from the
            start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.StatusCode">
            <summary>
            Represent the HTTP status code from the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Time">
            <summary>
            Represents the time in seconds required to complete this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.Timings">
            <summary>
            Represents the timing information for this request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Entry.URL">
            <summary>
            Represents the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Header">
            <summary>
            Represents a single HTTP header that was sent to or received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Name">
            <summary>
            Represents the name of the HTTP header.
            E.g. "User-Agent" or "Content-Length".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Header.Value">
            <summary>
            Represents the value of the HTTP header.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Headers">
            <summary>
            Represents a collection of Header objects that 
            contains HTTP headers that were sent to or received from the web server.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor">
            <summary>
            Create an empty collection of Header objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.#ctor(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Create a collection of Header objects with the specified Header
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Headers.Add(Test.Common.Library.HTTPWatchWrapper.Header)">
            <summary>
            Adds the specified Header object to the collection.
            </summary>
            <param name="Parameter">The Header object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Headers.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Header object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher">
            <summary>
            Represents the wrapper for HTTP Watcher.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.#ctor">
            <summary>
            Initializes a new instance of the HTTPWatcher class. <br/>
            NOTE: You must have <b>HTTPWatch 5.3</b> installed on your machine to use this library.
            See HTTPWatcherPreReq.txt in the dll folder for more details.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.NavigateTo(System.String,System.Int32)">
            <summary>
            Navigates to the specified URI in a Internet Explorer window.
            </summary>
            <param name="URI">The URI to navigate to.</param>
            <param name="WaitTimeOut">The maximum time in seconds to wait for page to finish loading. If the page does not load within
            this time, the function returns false. If it loads within the specified time, it will return true as soon as the page
            completes loading. Specify a value of -1 for infinite wait.</param>
            <remarks>True if the page was loaded within the specified wait time out, otherwise False.</remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.TimerExpire(System.Object)">
            <summary>
            Callback for IE Load Timer.
            </summary>
            <param name="StateInfo">A state object. Not used.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.OpenBrowser">
            <summary>
            Opens a new Internet Explorer browser window. If a window handle already exists then it will do nothing.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose">
            <summary>
            Does a proper dispose of the object including releasing
            all COM components.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="Disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloseBrowser">
            <summary>
            Closes the Internet Explorer browser window. If no browser window is open, then it does nothing.
            </summary>
            <remarks>
            The browser must have been opened via the <i>OpenBrowser</i> or <i>NavigateTo</i> method. Any browsers
            already open via other means, will not be effected.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveHTTPWatchLog">
            <summary>
            Saves the HTTP Watch Log file to Local Application Data folder.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneCOMLog">
            <summary>
            Clones the HTTPWatch COM Log object to a .NET object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogEntries(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType)">
            <summary>
            Clones the specified type of entries object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="EntriesType">The type of entries to clone.</param>
            <returns>An object of Entries class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.CloneHTTPWatchLogPages(Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType)">
            <summary>
            Clones the specified type of pages object of the HTTPWatch COM Log
            to a .NET object.
            </summary>
            <param name="PagesType">The type of pages to clone.</param>
            <returns>An object of Pages class which represents the cloned .NET object.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ReleaseCOMPluginObjects">
            <summary>
            Releases all the COM objects held by the Plugin class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.GetHTTPWatchLog">
            <summary>
            Gets the .NET HTTP Watch Log object for the last session.
            </summary>
            <returns>An object of HTTPWatchLog class representing the log for the last session.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCache">
            <summary>
            Clears the temporary internet cache. <br/>
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.ClearCookies">
            <summary>
            Clears all stored and session cookies.
            NOTE: For this method to work, you must call <i>OpenBrowser</i> before
            you call this method.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.SaveLog(System.String)">
            <summary>
            Saves the HTTP Watch log file to disk. <br/>
            NOTE: This method can be called only once during the object lifetime, and after <i>CloseBrowser</i>
            has been called.
            </summary>
            <param name="HWLFileName">The path and name of the HTTP Watch log file.</param>
            <remarks>
            Calling this multiple times, will have no effect. The HWL log will be save with the filename
            you specified in the first call.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType">
            <summary>
            Represents the type of entries object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.RAWEntries">
            <summary>
            Represents the RAW, unfiltered entries.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogEntriesType.FilteredEntries">
            <summary>
            Represents the filtered entries.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType">
            <summary>
            Represents the type of pages object to clone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.RAWPages">
            <summary>
            Represents the RAW, unfiltered pages.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatcher.HTTPWatchLogPagesType.FilteredPages">
            <summary>
            Represents the filtered pages.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog">
            <summary>
            Represents the HTTP Watch Log.
            NOTE: This object is copied from the actual COM object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Entries">
            <summary>
            Represents a list of all the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredEntries">
            <summary>
            Represents a filtered list of the requests in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.FilteredPages">
            <summary>
            Represents a filtered list of pages in the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasNetworkTimings">
            <summary>
            Indicates whether the log contains detailed, request level timings.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.HasPageGrouping">
            <summary>
            Indicates whether the log contains page grouping information.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.IsFilterEnabled">
            <summary>
            Indicates whether the current filter is enabled.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLog.Pages">
            <summary>
            Represents a list of all the pages in the log.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger">
            <summary>
            Represents the logger for the HTTPWatch module.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWatchWrapper.HTTPWatchLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Page">
            <summary>
            Represents information about a web page and the HTTP
            requests that were used to download it.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Dynamic">
            <summary>
            Indicates whether this page was a dynamic update to an existing web page.
            E.g. modified by AJAX / Javascript.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Started">
            <summary>
            Represents the time when this request was started as an offset
            from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedDateTime">
            <summary>
            Represents the date and time when this page was started.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.StartedSecs">
            <summary>
            Represents the time when this page was started as an offset
            in seconds from the start of the log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Title">
            <summary>
            Represents the title of this page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Page.Unknown">
            <summary>
            Indicates whether this page contains a single request that was not directly
            associated with a window or tab in Internet Explorer.
            E.g. the download of a icon for a bookmark or location bar.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Pages">
            <summary>
            Represents a collection of Page objects. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor">
            <summary>
            Create an empty collection of Page objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.#ctor(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Create a collection of Page objects with the specified Page
            as the first item in the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.Pages.Add(Test.Common.Library.HTTPWatchWrapper.Page)">
            <summary>
            Adds the specified Page object to the collection.
            </summary>
            <param name="Parameter">The Page object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Pages.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A Page object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameter">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Name">
            <summary>
            Represents the name of the parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameter.Value">
            <summary>
            Represents the value of the parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.POSTParameters">
            <summary>
            Represents a collection of POSTParameter objects that 
            contains a list of parameters that were sent in a POST request message.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor">
            <summary>
            Create an empty collection of POSTParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.#ctor(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Create a collection of POSTParameter objects with the specified POSTParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Add(Test.Common.Library.HTTPWatchWrapper.POSTParameter)">
            <summary>
            Adds the specified POSTParameter object to the collection.
            </summary>
            <param name="Parameter">The POSTParameter object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.POSTParameters.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A POSTParameter object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValue">
            <summary>
            Represents a single parameter that was encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Name">
            <summary>
            Represents the name of the query string parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValue.Value">
            <summary>
            Represents the value of the query string parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.QueryStringValues">
            <summary>
            Represents a collection of QueryStringValue objects that 
            contains a list of parameters that were encoded in the URL of an HTTP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor">
            <summary>
            Create an empty collection of QueryStringValue objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.#ctor(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Create a collection of QueryStringValue objects with the specified QueryStringValue
            as the first item in the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Add(Test.Common.Library.HTTPWatchWrapper.QueryStringValue)">
            <summary>
            Adds the specified QueryStringValue object to the collection.
            </summary>
            <param name="Parameter">The QueryStringValue object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.QueryStringValues.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A QueryStringValue object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Request">
            <summary>
            Represents the information about the HTTP request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Cookies">
            <summary>
            Represents the list of cookies that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Headers">
            <summary>
            Represents the list of HTTP headers that were sent to the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTMimeType">
            <summary>
            Represents the encoding scheme used in a POST request message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.POSTParameters">
            <summary>
            Represents the list of parameters sent in a POST message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.QueryStringValues">
            <summary>
            Represents the list of parameters encoded in the query string section of the URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.RequestLine">
            <summary>
            Represents the HTTP request line that was sent to the server.
            E.g. "GET / HTTP/1.1".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Request.Stream">
            <summary>
            Represents the raw HTTP request data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Response">
            <summary>
            Represents the information about the HTTP response message.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Chunks">
            <summary>
            Represents the number of chunks in the HTTP response.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Cookies">
            <summary>
            Represents the list of cookies that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Headers">
            <summary>
            Represents the list of HTTP headers that were received from the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.StatusLine">
            <summary>
            Represents the HTTP response line that from the server.
            E.g. "HTTP/1.1 200 OK".
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Response.Stream">
            <summary>
            Represents the raw HTTP response data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummaries">
            <summary>
            Represents a collection of ResultSummary objects that 
            hold information about errors and status codes.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor">
            <summary>
            Create an empty collection of ResultSummary objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.#ctor(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Create a collection of ResultSummary objects with the specified ResultSummary
            as the first item in the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Add(Test.Common.Library.HTTPWatchWrapper.ResultSummary)">
            <summary>
            Adds the specified ResultSummary object to the collection.
            </summary>
            <param name="Parameter">The ResultSummary object to add to the collection.</param>
            <returns>An integer indicating the index where the object was added.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummaries.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the collection.
            </summary>
            <param name="index">The index of the element in the collection.</param>
            <returns>A ResultSummary object corresponding to the specified index.</returns>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.ResultSummary">
            <summary>
            Represents information about the number of requests that returned a specific
            status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Result">
            <summary>
            Represents the error or status returned by the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Description">
            <summary>
            Represents the full description of the status code or error.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.ResultSummary.Occurrences">
            <summary>
            Represents the number of requests in the current Summary that result
            this status or error code.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Summary">
            <summary>
            Represents summarized information requests in a single page or the whole log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.AverageHTTPSOverhead">
            <summary>
            Represents the average overhead in bytes of each HTTPS request.
            If this value is high (more than a few hundred bytes), it may indicate that
            the server is incorrectly configured and is causing an excessive 
            number of HTTPS renegotiations.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesReceived">
            <summary>
            Represents the total number of bytes of data that have been received from web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.BytesSent">
            <summary>
            Represents the total number of bytes of data that have been sent to web server(s).
            In the case of HTTPS connections this includes the overhead of the SSL encryption process.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.CompressionSavedBytes">
            <summary>
            Represents the total number of bytes by which downloaded content was reduced in size by
            HTTP compression.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.DNSLookUps">
            <summary>
            Represents the total number of times that a network name was converted to an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Errors">
            <summary>
            Represents a list of the error codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.RoundTrips">
            <summary>
            Represents the number of requests that caused an HTTP request and response message being exchanged 
            with a web server. Some entries do not cause a network round trip because either an error occurred
            or because no network request was required.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.StatusCodes">
            <summary>
            Represents a list of the status codes that were returned by requests in this summary.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TCPConnects">
            <summary>
            Represents the number of times that a new TCP level connection had to be made with web server(s) in
            the summary data. An excessively high number of TCP connects may indicate that HTTP persistent
            connections, also known as keep-alive connections, have not been correctly configured on the server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.Time">
            <summary>
            Represents the time in seconds from the start of the first request in the summary to the end
            of the last item. This can be used to find the total time to download a page or set of pages.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Summary.TotalHTTPSOverhead">
            <summary>
            Represents how many extra bytes of data were required to encrypt the request and response messages,
            if there are any HTTPS requests in the summary data.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timing">
            <summary>
            Represents information about a single timing such as Blocked or Connect.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Duration">
            <summary>
            Represents the duration of the timing in seconds.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Started">
            <summary>
            Represents the start time as an offset in seconds from the start of the current request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timing.Valid">
            <summary>
            Indicates whether this timing is populated with data and applies to the current request.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWatchWrapper.Timings">
            <summary>
            Represents the request level timings for a request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Blocked">
            <summary>
            Represents the Blocked time.
            The Blocked time includes any pre-processing time (such as cache lookup) and the time spent waiting
            for a network connection to become available. Internet Explorer will only create a maximum of two
            concurrent network connections per host name and will queue up requests until a network connection
            is available. Often the Blocked time is the most significant factor in the download time of images
            embedded in a web page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.DNSLookup">
            <summary>
            Represents the DNS Lookup time.
            DNS Lookup is the time required to resolve a host name into an IP address.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Connect">
            <summary>
            Represents the Connect time.
            Connect is the time required to create a TCP connection to the web server (or proxy). If a secure 
            HTTPS connection is being used this time includes the SSL handshake process.
            "Keep-Alive connections are often used to avoid the overhead of repeatedly connecting to the web
            server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Send">
            <summary>
            Represents the Send time.
            Send is the time required to send the HTTP request message to the server and will depend on the 
            amount of data that is sent to the server. For example, long Send times will result from uploading
            files using an HTTP POST.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Wait">
            <summary>
            Represents the Wait time.
            Wait is the idle time spent waiting for a response message from the server. This value includes delays
            introduced due to network latency and the time required to process the request on the web server.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Receive">
            <summary>
            Represents the Receive time.
            Receive is the time taken to read the response message from the server. This value will depend on the
            size of the content returned, network bandwidth and whether HTTP compression was used.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.CacheRead">
            <summary>
            Represents the Cache Read time.
            Cache Read is the time taken to read the content from the browser cache during
            (Cache) or 304 responses.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.Network">
            <summary>
            Represents the Network time.
            Network is the total duration of all network related operations for an HTTP request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWatchWrapper.Timings.TTFB">
            <summary>
            Represents the TTFB time.
            TTFB (or Time To First Byte) is the duration from the initial network request being initiated
            by the browser to the first byte being received from the server. It includes TCP connection 
            time, the time to send the request and the time taken to get the first byte of the response 
            message.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWebAccessFramework\HTTPWebAccessFramework\bin\Debug\HTTPWebAccessFramework\Test.Common.Library.HTTPWebAccessFramework.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWebAccessFramework</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy">
            <summary>
            Represents the Policy parameters for the WebService Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.#ctor">
            <summary>
            Initializes a new instance of FrameWorkPolicy class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.GetCachePolicy">
            <summary>
            Gets an object of the Requested Cache Policy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestCacheLevelPolicy">
            <summary>
            Get or Set the policy for Request Cache Level.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestTimeOut">
            <summary>
            Get or Set the policy for the Request Timeout.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel">
            <summary>
            The requested Cache Level.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.BypassCache">
            <summary>
            Indicates that the request will be satisfied by using the server. No entries are taken from cache, added to cache,
            or removed from cache between the client and server.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheIfAvailable">
            <summary>
            Indicates that the request will be satisfied from the cache, if available; otherwise it will be fetched from the server.
            If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheOnly">
            <summary>
            Indicates that the request will be satisfied using the locally cached resource; does not send a request for an item
            that is not in the cache. Exception is thrown if the item is not in the client cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Default">
            <summary>
            Indicates that the request will be satisfied either by using the cached copy of the resource or by sending a request for
            the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.NoCacheNoStore">
            <summary>
            Indicates that the request will never be satisfied by using the cache. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Reload">
            <summary>
            Indicates that the request will be satisfied by using the server. The response might be saved in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Revalidate">
            <summary>
            Indicates that the request will be satisfied by using the cached copy of the resource if the timestamp is the same as the timestamp
            of the resource on the server; otherwise, the resource is fetched from the server, and stored in the cache. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity">
            <summary>
            Represents the Security for the WebService Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.#ctor">
            <summary>
            Initializes a new instance of FrameWorkSecurity class. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.GetNetworkCredential">
            <summary>
            Gets an instance of System.Net.NetworkCredential composed of the supplied credentials.
            See Username, Password and Domain. If not set, the Default Network Credential is returned.
            </summary>
            <returns>An object of System.Net.NetworkCredential.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.IsDefaultNetworkCredentials">
            <summary>
            Checks if the credential in use is the Default Network Credential.
            </summary>
            <returns>An object of System.Boolean. True if default credential is being used. False if not.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Username">
            <summary>
            The Username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Password">
            <summary>
            The Password to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Domain">
            <summary>
            The Domain for the username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequirePreAuthentication">
            <summary>
            Gets or Sets whether Pre-Authentication is required for the WebService Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestAuthenticationLevel">
            <summary>
            Gets or Sets the Authentication Level for the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestImpersonationLevel">
            <summary>
            Gets or Sets the Impersonation Level for the WebService Request object.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel">
            <summary>
            Supported Authentication Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequested">
            <summary>
            Indicates that the client and server should be authenticated. The request does not fail if the server is not authenticated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequired">
            <summary>
            Indicates that the client and server should be authenticated. If the server is not authenticated, an Exception will be raised.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.None">
            <summary>
            Indicates that no authentication is required for the client and server.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel">
            <summary>
            Supported Impersonation Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Anonymous">
            <summary>
            Indicates that the server process cannot obtain identification information about the client, and it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Delegation">
            <summary>
            Indicates that the server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Identification">
            <summary>
            Indicates that the server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Impersonation">
            <summary>
            Indicates that the server process can impersonate the client's security context on its local system. The server cannot 
            impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.None">
            <summary>
            Indicates that an impersonation level is not assigned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess">
            <summary>
            Represents access of WebSite via HTTP GET protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPGetAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.IsGETRequestInitialized">
            <summary>
            Indicates if the GET Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGETRequest">
            <summary>
            Create the GET Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.GetResponse">
            <summary>
            Get the Response for the GET request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Get Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGetRequestURI">
            <summary>
            Create the Get Request URI String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname or domain where the WebPage is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.WebPageURI">
            <summary>
            Gets or Sets the WebPage Relative URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.ParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetRequestString">
            <summary>
            Gets the actual HTTP GET Request string to access the WebSite.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess">
            <summary>
            Represents access of WebSite via HTTP POST protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPPostAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.IsPOSTRequestInitialized">
            <summary>
            Indicates if the POST Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePOSTRequest">
            <summary>
            Create the POST Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.GetResponse">
            <summary>
            Get the Response for the POST request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Post Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestURI">
            <summary>
            Create the POST Request URI String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestContent">
            <summary>
            Create the POST request content containing the parameter-value collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.WebPageURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestString">
            <summary>
            Gets the actual HTTP POST Request string to access the WebSite.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestContent">
            <summary>
            Gets the HTTP POST Request content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameter">
            <summary>
            Represents a parameter name-value pair to be sent with the Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor">
            <summary>
            Initializes a new instance of RequestParameter.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RequestParameter with the specified
            Parameter name and value.
            </summary>
            <param name="ParameterName">The name of the Request parameter.</param>
            <param name="ParameterValue">the value of the Request parameter.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterName">
            <summary>
            Gets or Sets the name of the Request parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterValue">
            <summary>
            Gets or Sets the value of the Request parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection">
            <summary>
            Represents a collection of RequestParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor">
            <summary>
            Create an empty collection of RequestParameter object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Create a collection of RequestParameter objects with the specified RequestParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The RequestParameter to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Add(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Adds the specified Request Parameter to the collection.
            </summary>
            <param name="Parameter">The Request Parameter name-value pair.</param>
            <returns>An object of System.Int32 indicating the index where the attribute was added.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.IndexOf(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Gets the index of the specified Request Parameter within the collection.
            </summary>
            <param name="Parameter">The Request Parameter whose index needs to be found.</param>
            <returns>An object of System.Int32 specifying the zero-based index. -1 if not found.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the Request Parameter Collection.
            </summary>
            <param name="index">The index of the element.</param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWebAccessFramework\HTTPWebAccessFramework\bin\Release\RenoWebAppNonUI\Test.Common.Library.HTTPWebAccessFramework.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWebAccessFramework</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy">
            <summary>
            Represents the Policy parameters for the WebService Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.#ctor">
            <summary>
            Initializes a new instance of FrameWorkPolicy class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.GetCachePolicy">
            <summary>
            Gets an object of the Requested Cache Policy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestCacheLevelPolicy">
            <summary>
            Get or Set the policy for Request Cache Level.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestTimeOut">
            <summary>
            Get or Set the policy for the Request Timeout.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel">
            <summary>
            The requested Cache Level.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.BypassCache">
            <summary>
            Indicates that the request will be satisfied by using the server. No entries are taken from cache, added to cache,
            or removed from cache between the client and server.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheIfAvailable">
            <summary>
            Indicates that the request will be satisfied from the cache, if available; otherwise it will be fetched from the server.
            If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheOnly">
            <summary>
            Indicates that the request will be satisfied using the locally cached resource; does not send a request for an item
            that is not in the cache. Exception is thrown if the item is not in the client cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Default">
            <summary>
            Indicates that the request will be satisfied either by using the cached copy of the resource or by sending a request for
            the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.NoCacheNoStore">
            <summary>
            Indicates that the request will never be satisfied by using the cache. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Reload">
            <summary>
            Indicates that the request will be satisfied by using the server. The response might be saved in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Revalidate">
            <summary>
            Indicates that the request will be satisfied by using the cached copy of the resource if the timestamp is the same as the timestamp
            of the resource on the server; otherwise, the resource is fetched from the server, and stored in the cache. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity">
            <summary>
            Represents the Security for the WebService Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.#ctor">
            <summary>
            Initializes a new instance of FrameWorkSecurity class. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.GetNetworkCredential">
            <summary>
            Gets an instance of System.Net.NetworkCredential composed of the supplied credentials.
            See Username, Password and Domain. If not set, the Default Network Credential is returned.
            </summary>
            <returns>An object of System.Net.NetworkCredential.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.IsDefaultNetworkCredentials">
            <summary>
            Checks if the credential in use is the Default Network Credential.
            </summary>
            <returns>An object of System.Boolean. True if default credential is being used. False if not.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Username">
            <summary>
            The Username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Password">
            <summary>
            The Password to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Domain">
            <summary>
            The Domain for the username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequirePreAuthentication">
            <summary>
            Gets or Sets whether Pre-Authentication is required for the WebService Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestAuthenticationLevel">
            <summary>
            Gets or Sets the Authentication Level for the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestImpersonationLevel">
            <summary>
            Gets or Sets the Impersonation Level for the WebService Request object.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel">
            <summary>
            Supported Authentication Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequested">
            <summary>
            Indicates that the client and server should be authenticated. The request does not fail if the server is not authenticated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequired">
            <summary>
            Indicates that the client and server should be authenticated. If the server is not authenticated, an Exception will be raised.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.None">
            <summary>
            Indicates that no authentication is required for the client and server.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel">
            <summary>
            Supported Impersonation Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Anonymous">
            <summary>
            Indicates that the server process cannot obtain identification information about the client, and it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Delegation">
            <summary>
            Indicates that the server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Identification">
            <summary>
            Indicates that the server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Impersonation">
            <summary>
            Indicates that the server process can impersonate the client's security context on its local system. The server cannot 
            impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.None">
            <summary>
            Indicates that an impersonation level is not assigned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess">
            <summary>
            Represents access of WebSite via HTTP GET protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPGetAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.IsGETRequestInitialized">
            <summary>
            Indicates if the GET Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGETRequest">
            <summary>
            Create the GET Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.GetResponse">
            <summary>
            Get the Response for the GET request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Get Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGetRequestURI">
            <summary>
            Create the Get Request URI String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname or domain where the WebPage is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.WebPageURI">
            <summary>
            Gets or Sets the WebPage Relative URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.ParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetRequestString">
            <summary>
            Gets the actual HTTP GET Request string to access the WebSite.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess">
            <summary>
            Represents access of WebSite via HTTP POST protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPPostAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.IsPOSTRequestInitialized">
            <summary>
            Indicates if the POST Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePOSTRequest">
            <summary>
            Create the POST Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.GetResponse">
            <summary>
            Get the Response for the POST request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Post Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestURI">
            <summary>
            Create the POST Request URI String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestContent">
            <summary>
            Create the POST request content containing the parameter-value collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.WebPageURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestString">
            <summary>
            Gets the actual HTTP POST Request string to access the WebSite.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestContent">
            <summary>
            Gets the HTTP POST Request content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameter">
            <summary>
            Represents a parameter name-value pair to be sent with the Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor">
            <summary>
            Initializes a new instance of RequestParameter.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RequestParameter with the specified
            Parameter name and value.
            </summary>
            <param name="ParameterName">The name of the Request parameter.</param>
            <param name="ParameterValue">the value of the Request parameter.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterName">
            <summary>
            Gets or Sets the name of the Request parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterValue">
            <summary>
            Gets or Sets the value of the Request parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection">
            <summary>
            Represents a collection of RequestParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor">
            <summary>
            Create an empty collection of RequestParameter object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Create a collection of RequestParameter objects with the specified RequestParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The RequestParameter to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Add(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Adds the specified Request Parameter to the collection.
            </summary>
            <param name="Parameter">The Request Parameter name-value pair.</param>
            <returns>An object of System.Int32 indicating the index where the attribute was added.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.IndexOf(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Gets the index of the specified Request Parameter within the collection.
            </summary>
            <param name="Parameter">The Request Parameter whose index needs to be found.</param>
            <returns>An object of System.Int32 specifying the zero-based index. -1 if not found.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the Request Parameter Collection.
            </summary>
            <param name="index">The index of the element.</param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWebAccessFramework\HTTPWebAccessFramework\bin\Debug\RenoWebAppNonUI\Test.Common.Library.HTTPWebAccessFramework.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWebAccessFramework</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy">
            <summary>
            Represents the Policy parameters for the WebService Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.#ctor">
            <summary>
            Initializes a new instance of FrameWorkPolicy class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.GetCachePolicy">
            <summary>
            Gets an object of the Requested Cache Policy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestCacheLevelPolicy">
            <summary>
            Get or Set the policy for Request Cache Level.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestTimeOut">
            <summary>
            Get or Set the policy for the Request Timeout.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel">
            <summary>
            The requested Cache Level.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.BypassCache">
            <summary>
            Indicates that the request will be satisfied by using the server. No entries are taken from cache, added to cache,
            or removed from cache between the client and server.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheIfAvailable">
            <summary>
            Indicates that the request will be satisfied from the cache, if available; otherwise it will be fetched from the server.
            If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheOnly">
            <summary>
            Indicates that the request will be satisfied using the locally cached resource; does not send a request for an item
            that is not in the cache. Exception is thrown if the item is not in the client cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Default">
            <summary>
            Indicates that the request will be satisfied either by using the cached copy of the resource or by sending a request for
            the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.NoCacheNoStore">
            <summary>
            Indicates that the request will never be satisfied by using the cache. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Reload">
            <summary>
            Indicates that the request will be satisfied by using the server. The response might be saved in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Revalidate">
            <summary>
            Indicates that the request will be satisfied by using the cached copy of the resource if the timestamp is the same as the timestamp
            of the resource on the server; otherwise, the resource is fetched from the server, and stored in the cache. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity">
            <summary>
            Represents the Security for the WebService Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.#ctor">
            <summary>
            Initializes a new instance of FrameWorkSecurity class. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.GetNetworkCredential">
            <summary>
            Gets an instance of System.Net.NetworkCredential composed of the supplied credentials.
            See Username, Password and Domain. If not set, the Default Network Credential is returned.
            </summary>
            <returns>An object of System.Net.NetworkCredential.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.IsDefaultNetworkCredentials">
            <summary>
            Checks if the credential in use is the Default Network Credential.
            </summary>
            <returns>An object of System.Boolean. True if default credential is being used. False if not.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Username">
            <summary>
            The Username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Password">
            <summary>
            The Password to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Domain">
            <summary>
            The Domain for the username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequirePreAuthentication">
            <summary>
            Gets or Sets whether Pre-Authentication is required for the WebService Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestAuthenticationLevel">
            <summary>
            Gets or Sets the Authentication Level for the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestImpersonationLevel">
            <summary>
            Gets or Sets the Impersonation Level for the WebService Request object.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel">
            <summary>
            Supported Authentication Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequested">
            <summary>
            Indicates that the client and server should be authenticated. The request does not fail if the server is not authenticated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequired">
            <summary>
            Indicates that the client and server should be authenticated. If the server is not authenticated, an Exception will be raised.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.None">
            <summary>
            Indicates that no authentication is required for the client and server.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel">
            <summary>
            Supported Impersonation Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Anonymous">
            <summary>
            Indicates that the server process cannot obtain identification information about the client, and it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Delegation">
            <summary>
            Indicates that the server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Identification">
            <summary>
            Indicates that the server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Impersonation">
            <summary>
            Indicates that the server process can impersonate the client's security context on its local system. The server cannot 
            impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.None">
            <summary>
            Indicates that an impersonation level is not assigned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess">
            <summary>
            Represents access of WebSite via HTTP GET protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPGetAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.IsGETRequestInitialized">
            <summary>
            Indicates if the GET Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGETRequest">
            <summary>
            Create the GET Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.GetResponse">
            <summary>
            Get the Response for the GET request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Get Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGetRequestURI">
            <summary>
            Create the Get Request URI String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname or domain where the WebPage is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.WebPageURI">
            <summary>
            Gets or Sets the WebPage Relative URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.ParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetRequestString">
            <summary>
            Gets the actual HTTP GET Request string to access the WebSite.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess">
            <summary>
            Represents access of WebSite via HTTP POST protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPPostAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.IsPOSTRequestInitialized">
            <summary>
            Indicates if the POST Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePOSTRequest">
            <summary>
            Create the POST Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.GetResponse">
            <summary>
            Get the Response for the POST request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Post Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestURI">
            <summary>
            Create the POST Request URI String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestContent">
            <summary>
            Create the POST request content containing the parameter-value collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.WebPageURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestString">
            <summary>
            Gets the actual HTTP POST Request string to access the WebSite.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestContent">
            <summary>
            Gets the HTTP POST Request content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameter">
            <summary>
            Represents a parameter name-value pair to be sent with the Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor">
            <summary>
            Initializes a new instance of RequestParameter.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RequestParameter with the specified
            Parameter name and value.
            </summary>
            <param name="ParameterName">The name of the Request parameter.</param>
            <param name="ParameterValue">the value of the Request parameter.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterName">
            <summary>
            Gets or Sets the name of the Request parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterValue">
            <summary>
            Gets or Sets the value of the Request parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection">
            <summary>
            Represents a collection of RequestParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor">
            <summary>
            Create an empty collection of RequestParameter object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Create a collection of RequestParameter objects with the specified RequestParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The RequestParameter to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Add(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Adds the specified Request Parameter to the collection.
            </summary>
            <param name="Parameter">The Request Parameter name-value pair.</param>
            <returns>An object of System.Int32 indicating the index where the attribute was added.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.IndexOf(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Gets the index of the specified Request Parameter within the collection.
            </summary>
            <param name="Parameter">The Request Parameter whose index needs to be found.</param>
            <returns>An object of System.Int32 specifying the zero-based index. -1 if not found.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the Request Parameter Collection.
            </summary>
            <param name="index">The index of the element.</param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\HTTPWebAccessFramework\HTTPWebAccessFramework\bin\Release\HTTPWebAccessFramework\Test.Common.Library.HTTPWebAccessFramework.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.HTTPWebAccessFramework</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy">
            <summary>
            Represents the Policy parameters for the WebService Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.#ctor">
            <summary>
            Initializes a new instance of FrameWorkPolicy class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.GetCachePolicy">
            <summary>
            Gets an object of the Requested Cache Policy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestCacheLevelPolicy">
            <summary>
            Get or Set the policy for Request Cache Level.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.RequestTimeOut">
            <summary>
            Get or Set the policy for the Request Timeout.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel">
            <summary>
            The requested Cache Level.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.BypassCache">
            <summary>
            Indicates that the request will be satisfied by using the server. No entries are taken from cache, added to cache,
            or removed from cache between the client and server.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheIfAvailable">
            <summary>
            Indicates that the request will be satisfied from the cache, if available; otherwise it will be fetched from the server.
            If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.CacheOnly">
            <summary>
            Indicates that the request will be satisfied using the locally cached resource; does not send a request for an item
            that is not in the cache. Exception is thrown if the item is not in the client cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Default">
            <summary>
            Indicates that the request will be satisfied either by using the cached copy of the resource or by sending a request for
            the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.NoCacheNoStore">
            <summary>
            Indicates that the request will never be satisfied by using the cache. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Reload">
            <summary>
            Indicates that the request will be satisfied by using the server. The response might be saved in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy.CacheLevel.Revalidate">
            <summary>
            Indicates that the request will be satisfied by using the cached copy of the resource if the timestamp is the same as the timestamp
            of the resource on the server; otherwise, the resource is fetched from the server, and stored in the cache. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity">
            <summary>
            Represents the Security for the WebService Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.#ctor">
            <summary>
            Initializes a new instance of FrameWorkSecurity class. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.GetNetworkCredential">
            <summary>
            Gets an instance of System.Net.NetworkCredential composed of the supplied credentials.
            See Username, Password and Domain. If not set, the Default Network Credential is returned.
            </summary>
            <returns>An object of System.Net.NetworkCredential.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.IsDefaultNetworkCredentials">
            <summary>
            Checks if the credential in use is the Default Network Credential.
            </summary>
            <returns>An object of System.Boolean. True if default credential is being used. False if not.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Username">
            <summary>
            The Username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Password">
            <summary>
            The Password to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.Domain">
            <summary>
            The Domain for the username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequirePreAuthentication">
            <summary>
            Gets or Sets whether Pre-Authentication is required for the WebService Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestAuthenticationLevel">
            <summary>
            Gets or Sets the Authentication Level for the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.RequestImpersonationLevel">
            <summary>
            Gets or Sets the Impersonation Level for the WebService Request object.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel">
            <summary>
            Supported Authentication Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequested">
            <summary>
            Indicates that the client and server should be authenticated. The request does not fail if the server is not authenticated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequired">
            <summary>
            Indicates that the client and server should be authenticated. If the server is not authenticated, an Exception will be raised.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.AuthenticationLevel.None">
            <summary>
            Indicates that no authentication is required for the client and server.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel">
            <summary>
            Supported Impersonation Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Anonymous">
            <summary>
            Indicates that the server process cannot obtain identification information about the client, and it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Delegation">
            <summary>
            Indicates that the server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Identification">
            <summary>
            Indicates that the server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.Impersonation">
            <summary>
            Indicates that the server process can impersonate the client's security context on its local system. The server cannot 
            impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity.ImpersonationLevel.None">
            <summary>
            Indicates that an impersonation level is not assigned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess">
            <summary>
            Represents access of WebSite via HTTP GET protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPGetAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.IsGETRequestInitialized">
            <summary>
            Indicates if the GET Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGETRequest">
            <summary>
            Create the GET Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.GetResponse">
            <summary>
            Get the Response for the GET request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Get Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.CreateGetRequestURI">
            <summary>
            Create the Get Request URI String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname or domain where the WebPage is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.WebPageURI">
            <summary>
            Gets or Sets the WebPage Relative URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.ParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPGetAccess.HttpGetRequestString">
            <summary>
            Gets the actual HTTP GET Request string to access the WebSite.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess">
            <summary>
            Represents access of WebSite via HTTP POST protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPPostAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername or domainname hosting the WebSite.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.#ctor(System.String,System.String,Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection,Test.Common.Library.HTTPWebAccessFramework.FrameWorkSecurity,Test.Common.Library.HTTPWebAccessFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Page URI, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="PageRelativePath">The relative URI path to the Web Page (if required).</param>
            <param name="ParameterCollection">A collection of parameter-value to pass to the Target WebSite.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Target WebSite.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Target WebSite.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.IsPOSTRequestInitialized">
            <summary>
            Indicates if the POST Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePOSTRequest">
            <summary>
            Create the POST Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.GetResponse">
            <summary>
            Get the Response for the POST request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Post Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestURI">
            <summary>
            Create the POST Request URI String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.CreatePostRequestContent">
            <summary>
            Create the POST request content containing the parameter-value collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.WebPageURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseData">
            <summary>
            Gets the Response Data for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseHeader">
            <summary>
            Gets the header of the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostResponseCookies">
            <summary>
            Gets the cookies associated with the Response for the WebPage HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestString">
            <summary>
            Gets the actual HTTP POST Request string to access the WebSite.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.HTTPPostAccess.HttpPostRequestContent">
            <summary>
            Gets the HTTP POST Request content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameter">
            <summary>
            Represents a parameter name-value pair to be sent with the Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor">
            <summary>
            Initializes a new instance of RequestParameter.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RequestParameter with the specified
            Parameter name and value.
            </summary>
            <param name="ParameterName">The name of the Request parameter.</param>
            <param name="ParameterValue">the value of the Request parameter.</param>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterName">
            <summary>
            Gets or Sets the name of the Request parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameter.ParameterValue">
            <summary>
            Gets or Sets the value of the Request parameter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection">
            <summary>
            Represents a collection of RequestParameter objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor">
            <summary>
            Create an empty collection of RequestParameter object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.#ctor(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Create a collection of RequestParameter objects with the specified RequestParameter
            as the first item in the collection.
            </summary>
            <param name="Parameter">The RequestParameter to add to the collection.</param>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Add(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Adds the specified Request Parameter to the collection.
            </summary>
            <param name="Parameter">The Request Parameter name-value pair.</param>
            <returns>An object of System.Int32 indicating the index where the attribute was added.</returns>
        </member>
        <member name="M:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.IndexOf(Test.Common.Library.HTTPWebAccessFramework.RequestParameter)">
            <summary>
            Gets the index of the specified Request Parameter within the collection.
            </summary>
            <param name="Parameter">The Request Parameter whose index needs to be found.</param>
            <returns>An object of System.Int32 specifying the zero-based index. -1 if not found.</returns>
        </member>
        <member name="P:Test.Common.Library.HTTPWebAccessFramework.RequestParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the value of a pre existing element in the Request Parameter Collection.
            </summary>
            <param name="index">The index of the element.</param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkEmulator\NetworkEmulator\bin\Debug\NetworkEmulator\Test.Common.Library.NetworkEmulator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkEmulator</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkEmulator.NetworkEmulation">
            <summary>
            Represents the network emulator.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NetworkEmulation class
            with the specified profile XML.
            NOTE: You need to have NEWT installed on your machine to use this API.
            See EmulatorPreReq.txt in the dll folder for more details.
            </summary>
            <param name="ProfileXML">The path and the name of the NEWT profile XML to load.</param>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StartEmulation">
            <summary>
            Starts the network emulation.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StopEmulation">
            <summary>
            Stops the network emulation.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkEmulator\NetworkEmulator\bin\Debug\PLTScheduler\Test.Common.Library.NetworkEmulator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkEmulator</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkEmulator.NetworkEmulation">
            <summary>
            Represents the network emulator.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NetworkEmulation class
            with the specified profile XML.
            NOTE: You need to have NEWT installed on your machine to use this API.
            See EmulatorPreReq.txt in the dll folder for more details.
            </summary>
            <param name="ProfileXML">The path and the name of the NEWT profile XML to load.</param>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StartEmulation">
            <summary>
            Starts the network emulation.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StopEmulation">
            <summary>
            Stops the network emulation.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkEmulator\NetworkEmulator\bin\Release\PLTScheduler\Test.Common.Library.NetworkEmulator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkEmulator</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkEmulator.NetworkEmulation">
            <summary>
            Represents the network emulator.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NetworkEmulation class
            with the specified profile XML.
            NOTE: You need to have NEWT installed on your machine to use this API.
            See EmulatorPreReq.txt in the dll folder for more details.
            </summary>
            <param name="ProfileXML">The path and the name of the NEWT profile XML to load.</param>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StartEmulation">
            <summary>
            Starts the network emulation.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StopEmulation">
            <summary>
            Stops the network emulation.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkEmulator\NetworkEmulator\EmulatorPreReq.txt ===
﻿To use this library, you must have Network Emulation Windows Toolkit (NEWT)
installed on your machine. The APIs rely on the drivers from the toolkit to
emulate the network condition.

NEWT can be downloaded from http://toolbox/NEWT
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkEmulator\NetworkEmulator\bin\Release\NetworkEmulator\Test.Common.Library.NetworkEmulator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkEmulator</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkEmulator.NetworkEmulation">
            <summary>
            Represents the network emulator.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.#ctor(System.String)">
            <summary>
            Initializes a new instance of the NetworkEmulation class
            with the specified profile XML.
            NOTE: You need to have NEWT installed on your machine to use this API.
            See EmulatorPreReq.txt in the dll folder for more details.
            </summary>
            <param name="ProfileXML">The path and the name of the NEWT profile XML to load.</param>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StartEmulation">
            <summary>
            Starts the network emulation.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkEmulator.NetworkEmulation.StopEmulation">
            <summary>
            Stops the network emulation.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\NetworkMonitor3PreReq.txt ===
﻿To use this library, you must have Network Monitor 3 or above installed on your machine. 
The APIs rely on the Network Monitor 3.

Network Monitor 3 can be installed from \\nmtest\NetmonReleasePublic\latest.release
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\bin\Debug\PLTScheduler\Test.Common.Library.NetworkMonitor3Wrapper.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkMonitor3Wrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant">
            <summary>
            Represents the Netmon API Constants.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAC_ADDRESS_SIZE">
            <summary>
            The size of the MAC Address.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAX_PATH">
            <summary>
            The maximum paths.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.NMAPI_GUID_SIZE">
            <summary>
            Size of the NetMon API GUID.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode">
            <summary>
            Represents the Netmon API return status code.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_TOO_BIG_FOR_FILE">
            <summary>
            The file doesn't have enough space to hold this frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_SMALL">
            <summary>
            Capture file size too small. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_LARGE">
            <summary>
            Capture file size too large. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary>
            The frame is corrupt. It overlaps with the next frame. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary>
            The frame is corrupt. The dimensions of the frame are not in the range of the capture file. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_ENDIAN">
            <summary>
            The data is in BigEndian and we support only Little Endian 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_PCAP_FILE">
            <summary>
            This file is not a valid PCAP file
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_PCAP_VERSION">
            <summary>
            This file is not a supported PCAP version 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_FILE_TYPE">
            <summary>
            This file type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_NETMON_CAP_FILE">
            <summary>
            This file type is not a valid Netmon capture file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_PCAP_DLT">
            <summary>
            This Pcap data link type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_API_VERSION_MISMATCHED">
            <summary>
            The current NmApi DLL is different from the required version by the application. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode">
            <summary>
            Represents the Netmon capture mode.
            </summary>
            <remarks>
            When capturing in promiscuous mode, you may not see traffic if using a switch or if the traffic occurs
            on a different segment of the network. The traffic must reach the Network Interface Controller (NIC) on which
            you are capturing. Often, network equipment, such as a switch, does not send traffic to a NIC if it is not
            directed to that NIC address.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.LocalOnly">
            <summary>
            Specifies only local traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.Promiscuous">
            <summary>
            Specifies all traffic that reaches the network adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag">
            <summary>
            Represents the Netmon capture file expansion mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.WrapAround">
            <summary>
            Creates a file that wraps around in first-in-first-out (FIFO) order.
            When the buffer is full, the oldest data is written over first.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.Chain">
            <summary>
            When the maximum file size is reached, a new file is created. If you
            have named the file Test.cap, the subsequent files are named test(1).cap,
            test(2).cap, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.LastFlag">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode">
            <summary>
            Represents the Capture callback function exit mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.DiscardRemainFrames">
            <summary>
            Remaining frames are discarded.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.ReturnRemainFrames">
            <summary>
            Remaining frames are returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState">
            <summary>
            Represents the Netmon driver adapter operational states.
            </summary> 
            <remarks>
            These states are returned by the Network Driver Interface Specification (NDIS).
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.None">
            <summary>
            Adapter is currently not bound, or some other low-level error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Bound">
            <summary>
            Adapter is bound to the Network Monitor 3 driver.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Stopped">
            <summary>
            Adapter is bound, but currently not capturing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Capturing">
            <summary>
            Adapter is currently capturing network traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Paused">
            <summary>
            Adapter is currently paused.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType">
            <summary>
            Represents the Status levels of the call back message.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.None">
            <summary>
            Placeholder. This value is never returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Error">
            <summary>
            The parser engine has returned an error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Warning">
            <summary>
            The parser engine has returned a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Information">
            <summary>
            The parser engine has returned an information message. At least
            one of these is returned when calling the NmLoadNplParser function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Last">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption">
            <summary>
            Represents the NPL loading option.
            </summary> 
            <remarks>
            By default the NmLoadNplOptionNone is used.  Only the user specified NPL path(s) are loaded.
            If both NmAppendRegisteredNplSets and a NPL path are specified, the resulting NPL parser will include
            Both and the specified NPL path(s) are prefixed.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmLoadNplOptionNone">
            <summary>
            Specifies that only the user-specified NPL path(s) are loaded. This is the default value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmAppendRegisteredNplSets">
            <summary>
            If both this parameter and an NPL path are specified, the resulting NPL parser will
            include both, and the specified NPL path(s) are prefixed.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption">
            <summary>
            Represents the Frame parser optimization options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeNone">
            <summary>
            Specifies creating a frame parser without optimization, according to the added filter. This is the default setting.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeFull">
            <summary>
            Specifies creating an optimized frame parser, based on added filters, fields, and properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeLast">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption">
            <summary>
            Represents the Frame parser parsing options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.None">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldFullNameRequired">
            <summary>
            Return the full field name with the NmGetParsedFieldInfo
            function, such as TCP.Flags.Reset. Turning this on degrades performance.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ContainingProtocolNameRequired">
            <summary>
            Return the containing protocol with NmGetParsedField.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.DataTypeNameRequired">
            <summary>
            Return the data type name, for example, MACAddress when querying for Ethernet.SourceAddress.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.UseFrameNumberParameter">
            <summary>
            Use the caller-specified frame number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldDisplayStringRequired">
            <summary>
            Provide the display string of the field.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FrameConversationInfoRequired">
            <summary>
            Provide frame conversation information.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ParsingOptionLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType">
            <summary>
            Represents the Fragmentation types returned in parsed frames.
            </summary>
            <remarks>
            When reassembly is performed, the engine signals frames as being first, middle, or last.
            You can use this information to determine whether a frame is fragmented. When this occurs,
            you can wait for the last frame marked as NmFragmentTypeEnd, and then use the handle to
            the inserted frame that is returned by the NmParseFrame function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.None">
            <summary>
            This is not part of a fragmented frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Start">
            <summary>
            This is the first frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Middle">
            <summary>
            This is a frame in the middle of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.End">
            <summary>
            This is the last frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames">
            <summary>
            Represents the name string properties in parsed field.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.NamePath">
            <summary>
            Field name path is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.DataTypeName">
            <summary>
            Data type name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.ContainingProtocolName">
            <summary>
            Containing protocol name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.FieldDisplayString">
            <summary>
            Formatted display string is returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType">
            <summary>
            Represents the Key types of the multi storage property.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNone">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNumber">
            <summary>
            Specifies that the key is a number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeString">
            <summary>
            Specifies that the key is a string.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeByteArray">
            <summary>
            Specifies that the key is a byte array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeArrayIndex">
            <summary>
            Specifies that the key is the index of a multivalue storage array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope">
            <summary>
            Represents the Scopes of properties. It is reported in the property info.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeNone">
            <summary>
            Specifies no scope.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeConversation">
            <summary>
            Specifies that the property applies to the network conversation.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeGlobal">
            <summary>
            Specifies that the property is global.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeFrame">
            <summary>
            Specifies that the property applies to the frame. This is the default.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType">
            <summary>
            Represents the property aggregation form, i.e., MVS with key, Array with index, etc.
            </summary> 
            <remarks>
            NmPropertyContainerTypeArray is the regular form if there is only one element.
            The NmGetPropertyInfo function may return container type NmPropertyContainerTypeValue if
            the key is not specified in the NmAddProperty function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerNone">
            <summary>
            Specifies that there is no property type.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerValue">
            <summary>
            Specifies that the regular form is a single value of
            NmPropertyValueType that can be referenced by just the property name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerMvs">
            <summary>
            Specifies that the multi-value storage set of properties share the
            same name, but have different keys.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerArray">
            <summary>
            Specifies a set of properties that are stored in an array and retrieved by name and index.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType">
            <summary>
            Represents the type of the property value.
            </summary> 
            <remarks>
            The value types of properties in the same multi-value storage can be different
            if they are referenced by different keys. The value types of properties in the 
            same property group can also be different if they are referenced by different indexes.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueNone">
            <summary>
            Specifies no data type for the property value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueSignedNumber">
            <summary>
            Specifies that the property value is a signed integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueUnsignedNumber">
            <summary>
            Specifies that the property value is an unsigned integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueString">
            <summary>
            Specifies that the property value is a string in wide character format.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueByteBlob">
            <summary>
            Specifies that the property value is a binary large object (BLOB) presented as a byte array.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey">
            <summary>
            Represents information on the key for retrieving multi-value storage properties.
            The array in this structure is used as a parameter of to the NmGetPropertyValueById
            and the NmGetPropertyValueByName functions.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Type">
            <summary>
            Type of key to return. Possible values are declared in the NmMvsKeyType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Length">
            <summary>
            User-supplied length of the key.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.ValuePointer">
            <summary>
            Marshaled pointer to the key value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetStringKey(System.String)">
            <summary>
            Sets the key to a string value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetNumberKey(System.Int64)">
            <summary>
            Sets the key to a number value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetIndexKey(System.Int64)">
            <summary>
            Sets the key to an array index.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetByteArrayKey(System.Byte[],System.Int32)">
            <summary>
            Sets the key to a buffer value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO">
            <summary>
            Contains runtime information for instantiated properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Size">
            <summary>
            Specifies the size of the property for version control.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Scope">
            <summary>
            Specifies the property scope, one of the elements of the NmPropertyScope enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ContainerType">
            <summary>
            Specifies the property container type, one of the elements of the NmPropertyContainerType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.NameSize">
            <summary>
            Specifies the element count of the name, excluding the terminator. When the name buffer is provided,
            this member is used for both input and output parameters. This member acts as an input parameter
            specifying the buffer length. The actual length of the name is also returned by the NmGetPropertyInfo
            function. When no name buffer is provided (the Name parameter is NULL), this member is used only as output.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Name">
            <summary>
            Property name string added by the NmAddProperty function. If a buffer is assigned when calling NmGetPropertyInfo,
            the NameSize member must specify the buffer length, in number of elements. NmGetPropertyInfo returns the
            property name in the buffer if the buffer has enough space. Otherwise, a buffer overflow error is returned.
            Set this member to NULL if you do not need a name returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueType">
            <summary>
            Specifies the data type of the property value, one of the elements of the NmPropertyValueType enumeration.
            If the value type is string, the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueSize">
            <summary>
            Specifies the size, in byte count, of the value for which the caller must provide a buffer. If ValueType
            is set to String, this member is in WCHAR, and the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ItemCount">
            <summary>
            Specifies the number of items in the array. Regular and multi-value storage properties have only one item.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo">
            <summary>
            Represents the fragmentation information returned in parsed frames.
            </summary> 
            <remarks>
            A frame is either non-fragmented or fragmented. A fragmented frame can be a start fragment,
            a middle fragment, or an end fragment. The carrier protocol of the fragment and the
            fragmented protocol information is included, if available.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.Size">
            <summary>
            Size of the structure to be initialized by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentedProtocolName">
            <summary>
            Name of the protocol that has fragmented the payload, such as IPv4, which breaks payloads
            into smaller segments for networks with smaller frame size.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.PayloadProtocolName">
            <summary>
            Name of the protocol to which the fragments belong. For example, HTTP may be the payload of TCP.
            Multiple TCP packets make up one HTTP page. Although TCP is a byte-stream transport, Network
            Monitor currently manipulates TCP at the frame level for simplicity.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentType">
            <summary>
            Type of fragment as defined by the NmFrameFragmentationType enumeration.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate">
            <summary>
            Callback function for frame receiving/retrieving.
            </summary>
            <param name="hCaptureEngine">Handle to the capture engine object responsible for this callback returned by
            the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter on which this frame was captured. Within the range from
            zero to the value returned by the NmGetAdapterCount function.</param>
            <param name="pCallerContext">Pointer to the object that was passed in to NmConfigAdapter. For example,
            a capture file handle can be passed in so that the raw frame received can be saved.</param>
            <param name="hFrame">Handle to the raw captured frame. You do not need to free this handle.</param>
            <remarks>
            This callback is called after the capture engine has stored the frame within the buffer on the computer 
            hard drive. Any heavy processing within the callback may cause a loss of network frames if the buffer
            grows beyond the capacity of the drive or the set capture file limit or quota.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption">
            <summary>
            Represents the Frame parser conversation configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.None">
            <summary>
            There are currently no conversation options. Always set this to NmConversationOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption">
            <summary>
            Represents the frame parser reassembly configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.None">
            <summary>
            Currently, there are no reassembly options. Always set this to NmReassemblyOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate">
            <summary>
            Callback function for parser compile/build process.
            </summary>
            <param name="pCallerContext">User-defined context to send to parser message callback.</param>
            <param name="ulStatusCode">Status code of the message.</param>
            <param name="lpDescription">Text description of the message.</param>
            <param name="ulType">Type of error message as described by the NmCallbackMsgType enumeration.</param>
            <remarks>
            The same callback can be used for loading the NmLoadNplParser and NmCreateFrameParserConfiguration functions.
            When loading the Network Monitor Parsing Language (NPL), you receive errors, warnings, and status messages.
            Since a status message is sent even for a successful load or build, you will be called at least one. When
            creating the frame parser, you will be called with error callbacks in the parser and when errors are flagged.
            For example, when a frame is not parsed and there is extra data, an error is often flagged by the parser.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO">
            <summary>
            Contains adapter or interface information as returned by the NmGetAdapter function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Size">
            <summary>
            Size of structure that is set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PermanentAddr">
            <summary>
            Hardware address of the Network Interface Controller (NIC).
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CurrentAddr">
            <summary>
            Driver-defined hardware address. Not all drivers support this.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.MediaType">
            <summary>
            Network Driver Interface Specification (NDIS) NdisMediumXXX type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PhysicalMediaType">
            <summary>
            Physical medium type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.ConnectionName">
            <summary>
            Internal name of the connection. This is often blank.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.FriendlyName">
            <summary>
            Friendly name of the interface for this adapter. This is the description that appears in ipconfig.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Guid">
            <summary>
            Interface GUID of the adapter.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.OpState">
            <summary>
            Operation state. For more information, see the NmAdapterOpState enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Enabled">
            <summary>
            Whether the adapter is enabled.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PModeEnabled">
            <summary>
            Whether the adapter allows for promiscuous mode sniffing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CallBackFunction">
            <summary>
            Callback function provided when you configured the adapter with the NmConfigAdapter function.
            The callback function is called by the capture engine to deliver raw frames captured on the adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION">
            <summary>
            Contains parser configuration information. It is used to retrieve current configuration
            or set user-specified configuration.
            </summary>
            <remarks>
            Use the NmApiInitialize and the NmGetApiConfiguration functions to set and retrieve this structure.
            NmAPIInitialize changes the default configuration parameters defined in the this structure.
            The values specified in the structure as parameters passed in to NmAPIInitialize overwrite the default
            values. Therefore, it is recommended that you first get the configuration, and then change the values
            as desired before calling NmAPIInitialize with an alternate configuration.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.Size">
            <summary>
            Size of the structure to be set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.RawFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for raw frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ParsedFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for parsed frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureEngineCountLimit">
            <summary>
            Maximum number of handles available for capture engines. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.NplParserCountLimit">
            <summary>
            Maximum number of handles available for Network Monitor Parsing Language (NPL)
            parser sets. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserConfigCountLimit">
            <summary>
            Maximum number of handles available for frame parser configurations.
            Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserCountLimit">
            <summary>
            Maximum number of handles available for frame parsers. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileCountLimit">
            <summary>
            Maximum number of handles available for capture files. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ThreadingMode">
            <summary>
            Threading mode. Possible values are COINIT_MULTITHREADED (0) and
            COINIT_APARTMENTTHREADED (2). Default value is COINIT_APARTMENTTHREADED.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ConversationOption">
            <summary>
            Not currently used. See NmConversationConfigOption for information on conversation flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ReassemblyOption">
            <summary>
            Not currently used. See NmReassemblyConfigOption for information on reassembly flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileMode">
            <summary>
            Override default capture file options. Default value is CaptureFileWrapAround. See
            NmCaptureFileMode for information on capture flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParsingOption">
            <summary>
            Override default parsing options. No longer used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureCallbackExitMode">
            <summary>
            Stop capture exit mode. Possible values are elements in the NmCaptureCallbackExitMode
            enumeration. The default value is NmDiscardRemainFrames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxCaptureFileSize">
            <summary>
            Maximum size for a capture file. This is used when the NmCreateCaptureFile function is called.
            The value is 500 MB. This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MinCaptureFileSize">
            <summary>
            Minimum size for a capture file. This is used when NmCreateCaptureFile is called. The value is 2072 bytes.
            This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxApiHandleLimit">
            <summary>
            Maximum number of handles per handle type. Default value is 65,536. It is read-only.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG">
            <summary>
            Defines how a protocol defines ordering of packets.
            </summary>
            <remarks>
            A caller using this structure must initialize the size before calling NmAddSequenceOrderConfig.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.Size">
            <summary>
            This member must match the size of the version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.GroupKeyString">
            <summary>
            Names of the properties containing the values to form the key to identify the group
            of the frames to put in order. If multiple properties are used, they are separated by
            semicolons. The string must be NULL-terminated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.SequencePropertyString">
            <summary>
            Name of the property containing the frame's sequence number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.NextSequencePropertyString">
            <summary>
            Name of the property containing the frame's next sequence number.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER">
            <summary>
            Structure for calling NmOpCaptureFileInOrder to provide the parser built with sequence
            control information to correct potential out-of-order frames in the capture file to be opened.
            It also contains an option flag for future extension.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Size">
            <summary>
            This member must match the size of the current version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.hFrameParser">
            <summary>
            Frame parser used for handling out-of-order frames. It must be built from a frame parser
            configuration that has sequence information specified by the NM_PROTOCOL_SEQUENCE_CONFIG structure.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Option">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM">
            <summary>
            Represents the Network Medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Fddi">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Wan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_LocalTalk">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Dix">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_ArcnetRaw">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Arcnet878_2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Atm">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Bpc">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_CoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_InfiniBand">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Tunnel">
            <summary>
            #if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Loopback">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.NdisMediumMax">
            <summary>
            #endif // (NTDDI_VERSION >= NTDDI_VISTA)
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM">
            <summary>
            Represents the Network Physical medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessLan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_CableModem">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PhoneLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PowerLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_DSL">
            <summary>
            includes ADSL and UADSL (G.Lite)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_FibreChannel">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Bluetooth">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Infiniband">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiMax">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_UWB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredWAN">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredCoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Other">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType">
            <summary>
            Numerical Definitions of Variant Types. <br/>
            http://www.marin.clara.net/COM/variant_type_definitions.htm
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_EMPTY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_NULL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DATE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DISPATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ERROR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VARIANT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UNKNOWN">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_INT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UINT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VOID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_HRESULT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_PTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_SAFEARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_USERDEFINED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPWSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_FILETIME">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAM">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORAGE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAMED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CLSID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VECTOR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BYREF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_RESERVED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGALMASKED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_TYPEMASK">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo">
            <summary>
            Contains information about the data field, such as field offset, field length, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.Size">
            <summary>
            Caller-provided size of the structure being sent. Should be initialized by the user.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldIndent">
            <summary>
            Indent of data field. For example, top-level fields have an indent of zero,
            but Tcp.flags.reset has an indent of 2.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NamePathLength">
            <summary>
            Length in elements of the name path. Since this is returned as a WCHAR, you must
            multiply it by sizeof(WCHAR). This does not include a NULL, which is added by the
            NmGetFieldName function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NplDataTypeNameLength">
            <summary>
            Length in elements of the data type. Since this is returned as a WCHAR, you must
            multiply by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolNameLength">
            <summary>
            Length in elements of the protocol name. Since this is returned as a WCHAR, you must multiply
            by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.DisplayStringLength">
            <summary>
            Length of the Display String.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolBitOffset">
            <summary>
            Offset from the beginning of the protocol, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FrameBitOffset">
            <summary>
            Frame offset of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldBitLength">
            <summary>
            Size of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueType">
            <summary>
            Variant type of the value, as defined by VARENUM.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueBufferLength">
            <summary>
            Size of the buffer required to hold the field value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI">
            <summary>
            PInvoke wrapper of Netmon API.
                - managed/unmanaged data type mapping: http://msdn2.microsoft.com/en-us/library/ac7ay120.aspx
                - the declaration in this class are strongly tied to nmapi.h
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiVersion(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Retrieves the current major and minor version numbers of the API.
            </summary> 
            <remarks>
            The API version matches netmon engine version.
            </remarks>
            <example>
            <code>
                UInt16 majorNumber = 0;
                UInt16 minorNumber = 0;
                UInt16 BuildNumber = 0;
                UInt16 RevisionNumber = 0;
                NmGetApiVersion(out majorNumber, out minorNumber, out BuildNumber, out RevisionNumber);
            </code>
            </example>
            <param name="Major">Major version number.</param>
            <param name="Minor">Minor version number.</param>
            <param name="Build">Build number.</param>
            <param name="Revision">Revision number.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiConfiguration(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Gets the current API configuration parameters.
            </summary> 
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Struct object for API to fill.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiInitialize(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Overrides the default API configuration.
            </summary> 
            <remarks>
            Caller needs to provide storage for NmApiConfiguration struct.
            </remarks>
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
               apiConfig.ThreadingMode = 0;
               status = NetmonAPI.NmApiInitialize(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Caller specified API configuration parameter struct.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different. <br/>
                ERROR_INVALID_STATE: Can not change API configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiClose">
            <summary>
            Closes down the API after finishing all work. It releases all the objects referenced by handles.
            On Windows XP and Windows Server 2003, it also detaches from the driver DLL.
            </summary>
            <remarks>
            Should be called when done with the API.
            </remarks>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCloseHandle(System.IntPtr)">
            <summary>
            Release the reference to the object by handle.</summary> 
            <remarks>
            Callers need to close all the object handles returned from API after finish using them.
            </remarks>
            <param name="hObjectHandle">Handle to the object to release </param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureEngine(System.IntPtr@)">
            <summary>
            Initializes the engine for live data capture.
            </summary> 
            <param name="phCaptureEngine">Handle to the capture engine object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_INVALID_STATE:     The operation is not available. <br/>
                ERROR_ENOUGH_MEMORY: Fail to allocate memory for the object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of network interfaces currently accessible to the API.
            </summary> 
            <remarks>
            The count returned may be zero if no adapters are registered on the computer or the current user
            is not a member of the Netmon Users security group. It is required to be a member of this group
            in order to capture on Windows Vista and above. New users to the group may be required to log on
            again to gain capture privileges unless they run as an administrator.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulCount">Pointer to the returned adapter count value. If zero, no adapters are available.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO@)">
            <summary>
            Gets available information about a specific network adapter.
            </summary> 
            <remarks>
            Caller can use name, GUID etc. to select adapter to use.  The adapter index should be within the 
            Range returned by NmGetAdapterCount method.  Caller needs to provide the storage of the
            NmNicAdapterInfo struct.
            The fix sized name buffers in the NM_NIC_ADAPTER_INFO structure are marshal to System.char[]. 
            Use String nameStr = new String("e.g., whateverDefinedStructName.ConnectionName") to translate the
            char array to a string object.
            </remarks>
            <example>
            <code>
               IntPtr hCaptureEngine = HandleReturnedByNmOpenCaptureEngine;
               UInt32 ulIndex = 0;
               NM_NIC_ADAPTER_INFO adapterInfo = new NM_NIC_ADAPTER_INFO();
               adapterInfo.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(adapterInfo);
               uint status = NetmonAPI.NmGetAdapter(hCaptureEngine, ulIndex, ref adapterInfo);
               String nameStr = new String(adapterInfo.ConnectionName);
            </code>
            </example>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="pNMAdapterInfo">Pointer to a NM_NIC_ADAPTER_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_NIC_ADAPTER_INFO struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate,System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode)">
            <summary>
            Configure the adapter with the frame indication callback and the caller context.
            </summary> 
            <remarks>
            The current callback function and context will overwrite the previous ones.  The adapter index number
            Must be in the range returned from NmGetAdapterCount method.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter. The range is from zero to value returned by the NmGetAdapterCount function.</param>
            <param name="CallbackFunction">Pointer to the callback function to receive live network data frames.
            See the NM_FRAME_CALLBACK function for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer that passes extra information to the network frame callback function.</param>
            <param name="ExitMode">Specifies whether to discard or process remaining frames after the capture engine stops.
            See NmCaptureCallbackExitMode for possible values. The default value is NmDiscardRemainFrames.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStartCapture(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode)">
            <summary>
            Starts capturing live data on an existing capture engine and network adapter.
            </summary> 
            <remarks>
            Capture mode can be PMODE and LocalOnly.
            Frame callbacks are made to the NM_FRAME_CALLBACK function registered to the adapter interface
            using the adapter index and the NmConfigAdapter function.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="CaptureMode">Capture mode. See the NmAdapterCaptureMode enumeration.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmPauseCapture(System.IntPtr,System.UInt32)">
            <summary>
            Pauses the capture engine.
            </summary> 
            <remarks>
            This function and the NmResumeCapture function have less overhead than the NmStartCapture and the NmStopCapture functions,
            since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames which enter the buffer. Therefore, there may be frames returned 
            to your callback while the buffer is being cleared. By default, after pausing or stopping a capture, 
            the NM_FRAME_CALLBACK function registered with the NmConfigAdapter function should not be called again. <br/>
            No new frames coming in on the wire are added to the buffer or receive callbacks. To continue receiving callbacks while
            frames remain in the driver buffer, set the CaptureCallbackExitMode parameter of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not pause at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmResumeCapture(System.IntPtr,System.UInt32)">
            <summary>
            resumes a capture that was previously paused by the NmPauseCapture function.
            </summary> 
            <remarks>
            Cannot resume after NmStopCapture is called.  The frame indication callback is no longer invoked 
            until NmResumeCapture method is called. <br/>
            Using the NmPauseCapture function and this function has less overhead than the NmStartCapture and the NmStopCapture
            functions, since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames that enter the buffer. Therefore, there may be frames returned
            to your callback while the buffer is being cleared. <br/>
            By default, after pausing or stopping a capture, NM_FRAME_CALLBACK registered with the NmConfigAdapter function
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode parameter
            of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">[in] The handle to the target capture engine</param>
            <param name="ulAdapterIndex">[in] The index number of the target adapter</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/> 
                ERROR_INVALID_STATE: Can not resume at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStopCapture(System.IntPtr,System.UInt32)">
            <summary>
            Stops capturing data to the driver buffer on the specified capture engine and adapter.
            </summary> 
            <remarks>
            Frames may be received after the capture engine is stopped, but no new frames enter the buffer. <br/>
            By default, any frames that remain in the driver buffer are discarded, and no new callbacks are received by 
            the calling application. <br/>
            If the NmReturnRemainFrames flag is set in the NmConfigAdapter function, the call to this function blocks 
            until the last frame is processed. This ensures that the callback function is never invoked after the call
            to this function returns. If the callback enters an infinite loop, this call never returns. <br/>
            When you pause a capture for a brief time period, use the NmPauseCapture and the NmResumeCapture functions
            instead. These have less overhead than the NmStartCapture function and this function, since they do not free
            all the internal objects used to attach to the interface and tracing. <br/>
            By default, after pausing or stopping a capture, the NM_FRAME_CALLBACK function registered with NmConfigAdapter
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode
            parameter of NmConfigAdapter to NmReturnRemainFrames.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not stop at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmLoadNplParser(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Loads the Network Monitor Parsing Language (NPL) parser set for a parser configuration.
            </summary> 
            <remarks>
            A callback function is invoked to compile error and warning information. Even on a successful load,
            there is at least one information message stating that Sparser.npb has been successfully loaded. <br/>
            When you set the pFileName parameter to NULL and the NmAppendRegisteredNplSets option is set, the function
            automatically loads the path used by the UI.
            </remarks>
            <param name="pFileName">Full path of the parser file, normally Sparser.npl. If set to NULL, the path specified
            on the Parsers tab is used (on the Tools menu, click Options, then click Parsers). If no path is specified, 
            Network Monitor searches for a local instance of Sparser.npl.</param>
            <param name="ulFlags">Option flags. Currently, the following flag is supported: NmNplParserLoadingOption. Possible
            values are NmLoadNplOptionNone and NmAppendRegisteredNplSets. The default value is NmLoadNplOptionNone.</param>
            <param name="CallbackFunction">Pointer to a function to receive warnings, errors, or messages from the parser
            engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer to pass extra information to the NPL engine message callback.
            For example, this could be a handle to a dialog box to receive the messages.</param>
            <param name="phNplParser">Handle to the NPL parser object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create NPL parser object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParserConfiguration(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a frame parser configuration to configure filters and fields.
            </summary> 
            <remarks>
            All the frame parser features, including conversation and reassembly, must be added in the configuration before
            creating the frame parser. The callback for this function provides errors that occur when loading a trace, such 
            as parsing errors and errors flagged in the NPL. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hNplParser">Handle to the Network Monitor Parsing Language (NPL) parser object returned by
            the NmLoadNplParser function.</param>
            <param name="CallbackFunction">Pointer to the function to receive warnings, errors, or messages from the
            parser engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer used to pass extra information to the NPL engine message
            callback function.</param>
            <param name="phFrameParserConfiguration">Handle to the frame parser configuration object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create frame parser configuration object. <br/>
                ERROR_NOT_FOUND: not found specified NPL parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFilter(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a filter to the parser configuration that can be evaluated on a frame basis.
            </summary> 
            <remarks>
            The filter ID is used to evaluate the state of the filter on a parsed frame when you call the NmEvaluateFilter
            function with a parsed frame. The filter string can be any valid filter that the UI accepts. This includes 
            properties and conversation variables. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the frame parser configuration engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFilterString">Filter string using all the elements available to the UI.</param>
            <param name="ulFilterId">Returned filter index in the frame parser for this filter.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddField(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a field to the frame parser configuration and optimizes its access.
            </summary> 
            <remarks>
            All the fields are enumerated in the parsed frame if no field is added. The field ID is used to retrieve the field in 
            the parsed frame when calling the NmGetXXX functions, such as NmGetFieldValueByteArray. The caller must provide a 
            unique fully qualified field name, for example, TCP.Option.Ack. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFieldString">Fully qualified path to the field.</param>
            <param name="ulFieldId">Returned field index in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddProperty(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a property to a configuration.
            </summary> 
            <remarks>
            The property ID is used to retrieve the property value specified by the fully qualified property name starting 
            with the scope name: Global, Conversation, or Frame. <br/>
            To retrieve the property value, use the NmGetPropertyValueById function. <br/>
            If a property is not added to a frame parser configuration when the frame parser is created with optimization
            enabled, the property may not be available because it may not qualify with optimization.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to a frame parser configuration.</param>
            <param name="pPropertyString">Pointer to the fully qualified name of a property. The name must have a scope
            prefix to indicate whether it is global or applies to a conversation or frame, for example Global.PropertyName,
            Conversation.PropertyName, or Frame.PropertyName. The default scope is frame. For options, see the 
            NmPropertyScope enumeration.</param>
            <param name="ulPropertyId">Pointer to the property ID.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INVALID_PARAMETER: The specified property name is invalid.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddSequenceOrderConfig(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG@,System.UInt32@)">
            <summary>
            Adds protocol sequence order configurations. 
            </summary> 
            <remarks>
            This function is used in conjunction with NmOpenCaptureFileInOrder. Once you define how to order frames using this 
            call, a capture file opened rearranges the frames so that they are loaded in order. <br/>
            This function adds a filter to the parser configuration, in addition to other changes. Therefore, the return value
            of the NmGetFilterCount function is incremented by 1. <br/>
            When using this function, the engine is optimized so you cannot read other data fields. If you need to process the
            data in order, write the results to another capture file or use a different parser to get the data fields that you
            need to read. 
            </remarks>
            <param name="hFrameParserConfiguration">Frame parser configuration returned from the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="SeqConfig">Pointer to a sequence structure defined by the NM_PROTOCOL_SEQUENCE_CONFIG structure.</param>
            <param name="ulConfigId">The configuration in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_ENOUGH_MEMORY: Fail to allocate memory to store the configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigReassembly(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption,System.Boolean)">
            <summary>
            Enables reassembly for a specified protocol.
            </summary> 
            <remarks>
            Each protocol can provide a way to reassemble its payload. This is dependent on the Network Monitor Parsing Language (NPL)
            for the protocol. <br/>
            Currently, there are no reassembly options. You can leave this value as zero. <br/>
            When you enable reassembly, conversations are also enabled by default because reassembly is dependent on conversations.
            When you disable reassembly, conversations are not affected. <br/>
            Reassembly is disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Reassembly options. Currently there are none. Set this value to NmReassemblyOptionNone.</param>
            <param name="bEnable">Action to take: enable or disable reassembly for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigConversation(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption,System.Boolean)">
            <summary>
            Configures conversation options.</summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            When you enable conversations, only conversations are enabled. However, when you disable conversations, reassembly is
            also disabled. <br/>
            This function must be called on the frame parser configuration to get the global and conversation properties. <br/>
            You must enable conversations in a parser configuration before you add conversation variables or filters. Otherwise,
            the engine is not initialized properly and the added filters or properties that rely on conversations do not work. <br/>
            Conversations are disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the target frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Conversation options. Currently there are none. Set this value to NmConversationOptionNone.</param>
            <param name="bEnable">Flag to enable conversations for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParser(System.IntPtr,System.IntPtr@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption)">
            <summary>
            Creates a frame parser with a specified parser configuration.
            </summary> 
            <remarks>
            With a handle to the frame parser, you can parse a raw frame with the NmParseFrame function. <br/>
            A frame parser object should be used to parse only data considered to be part of the same capture stream. A frame
            parser keeps state information, so mixing trace data from multiple unrelated capture files causes undesired results.
            However, using multiple frame parsers for the same data is supported. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            OptimizeOption explicitly specifies whether the frame parser created should be optimized. The optimization occurs 
            when filters, fields, or properties are added and provides better parsing performance. Once the frame parser is
            optimized, trying to access additional fields or properties other than those specifically added to the parser with
            NmAddField, NmAddFilter, or NmAddProperty produces no results. If it is not known what is needed in advance, it is best
            to leave the parser unoptimized. <br/>
            The NmGetFieldOffsetAndSize function also depends on optimization being set to NULL. Otherwise, zero is returned for
            both size and offset.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the capture engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="phParser">Handle to the frame parser object.</param>
            <param name="OptimizeOption">Specifies the optimization setting for the frame parser to be generated. The default setting
            is NmParserOptimizeNone.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigStartDataType(System.IntPtr,System.String)">
            <summary>
            Sets the starting data type for use with the NmParseBuffer function.</summary> 
            <remarks>
            This function is used in conjunction with the NmParseBuffer function. It is useful for parsing a partial payload.
            For example, if you have a TCP payload, you can set the parse type to HTTP to try to parse this data as an HTTP header.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="StartDataTypeName">Pointer to the string that represents the starting data type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetStartDataType(System.IntPtr,System.UInt32,System.Char*)">
            <summary>
            Determines the current start data type for the NmParseBuffer function.
            </summary> 
            <remarks>
            Unless changed, this function returns the default data type Frame. You can change the default data type for partial
            frame parsing with the NmConfigStartDataType function.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="ulBufferLength">Length of the user-provided buffer for the data type name.</param>
            <param name="pBuffer">The name of the data type that the created frame parser starts with</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INSUFFICIENT_BUFFER: The given start type name is longer than 260 characters.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseFrame(System.IntPtr,System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@,System.IntPtr@)">
            <summary>
            parses a raw frame and returns it as an object that can be used to retrieve information about that parsed frame. 
            </summary> 
            <remarks>
            The parsed frame contains the frame information, filter state, and data field information. When reassembly is enabled,
            the last fragment of the payload completing the reassembled frames is processed, and the inserted frame appears 
            as a reassembled raw frame. If there is no reassembled frame, INVALID_HANDLE_VALUE is returned. <br/>
            You must parse the frames in one capture file sequentially to make the state correct. You may have to parse frames
            0 through n-1 to be able to parse frame n correctly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser object created by the NmCreateFrameParser function to parse the 
            specified raw frame object.</param>
            <param name="hRawFrame">Raw frame returned by the NM_FRAME_CALLBACK or the NmGetFrame function.</param>
            <param name="ulFrameNumber">Frame number to assign to the new frame.</param>
            <param name="Options">One of the options defined in the NmFrameParsingOption enumeration.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame.</param>
            <param name="phInsertedRawFrame">Handle containing a reference to the inserted raw frame, if there is one.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseBuffer(System.IntPtr,System.Byte[],System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@)">
            <summary>
            Parses partial frame information or a user-supplied buffer.
            </summary> 
            <remarks>
            The data buffer contains the byte array that can be a raw frame, part of a raw frame, or any specified data. The parsed frame contains
            the parsed frame information. The filter state and enumeration of fields are supported. Intra-frame reassembly is not supported since it
            requires multiple frames and conversations that are not available in this buffered mode. <br/>
            Use the NmConfigStartDataType function to specify where to start parsing. For example, if your buffer contains only HTTP data, configure
            the start data type as HTTP, and the parser will start at that level. Be aware, however, that parsers sometimes have dependencies on 
            lower-layer protocols and conversations.
            </remarks>
            <param name="hParser">Handle to the frame parser object returned by the NmCreateFrameParser function.</param>
            <param name="DataBuffer">Pointer to the desired buffer for the parsed data.</param>
            <param name="ulBufferLength">Length of the provided buffer.</param>
            <param name="ulFrameNumber">The frame number should be used in parsing process if enabled by option flag.</param>
            <param name="Options">Options for parsing as defined by the NmFrameParsingOption function.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmBuildRawFrameFromBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt64,System.IntPtr@)">
            <summary>
            Builds a raw frame from a user-provided buffer.
            </summary> 
            <remarks>
            The data buffer is transformed into a raw frame object so that you can enter a contrived frame into a capture file. The media type and
            time stamp are optional and can be set to zero. <br/>
            The media type is defined per frame with Network Monitor 3 capture files. See Frame Layout. These values are used to determine the type
            of network on which a capture occurs. Frame.npl then uses this value to determine how to initially parse a frame. You can look at 
            Frame.npl to determine the valid types. You can also create your own types, but you must modify Frame.npl or auto-register your custom
            parser so that your new media type is handled.
            </remarks>
            <param name="DataBuffer">User-provided data buffer to be converted into a raw frame.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="ulMedia">Optional media type of the new raw frame. See Frame.npl for available media types. The default value is zero.
            For more information, see Frame Layout.</param>
            <param name="ullTimeStamp">Optional time stamp of the new raw frame. The default value is zero.</param>
            <param name="phRawFrame">Handle to the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: No space to build the new frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameFragmentInfo(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo@)">
            <summary>
            Gets the fragment information for the specified parsed frame.
            </summary> 
            <remarks>
            When receiving frames, you may want to determine whether fragmentation is occurring so that you can discard all 
            previous frames and focus on the reassembled frame that appears with the last fragment. <br/>
            You cannot determine the fragment type of a raw frame. Only after you parse a frame can you determine whether
            it is reassembled.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="FragmentationInfo">Pointer to an NM_FRAGMENTATION_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame. <br/>
                ERROR_INSUFFICIENT_BUFFER: If the protocol name length is longer than the buffer in PNmReassemblyInfo struct.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFilterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of filters that have been added to a frame parser configuration.
            </summary> 
            <remarks>
            If you add two filters, this function returns 2. <br/>
            The NmAddSequenceOrderConfig function adds a filter to the parser configuration, in addition to other changes.
            Therefore, the return value of this function is incremented by 1. Therefore, the count is 1 greater if you use
            the NmOpenCaptureFileInOrder function.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser returned by the NmCreateFrameParser function.</param>
            <param name="ulFilterCount">Number of filters available in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmEvaluateFilter(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Evaluates a filter that you added with the NmAddFilter function with the current parsed frame. 
            </summary> 
            <remarks>
            The PassFilter value is set to TRUE if the parsed frame passes the specified filter. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to 
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFilterId">Field ID returned by the NmAddFilter function.</param>
            <param name="bPassFilter">Pointer to BOOLEAN variable to contain the results of the test.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of fields enumerated in the specified parsed frame.
            </summary> 
            <remarks>
            The number of fields returned is dependent on whether or not you call the NmAddField function. If you added five 
            fields, for example, this function returns 5. However, if you do not add any fields, this function returns the
            total number of fields in the currently parsed frame. You can iterate through fields if you do not have a specific
            one that you are looking for. However, there is a performance price incurred, and it takes longer to parse every
            field. Therefore, if you know which fields you want, you get better performance by adding the fields explicitly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting 
            frames for parsing to work properly. <br/>
            This function returns the total number of fields, regardless of whether any have been added. However, the 
            NmGetRequestedPropertyCount function returns zero if no properties have been added.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldCount">Number of fields returned in the parsed frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParsedFieldInfo(System.IntPtr,System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo@)">
            <summary>
            Gets a NM_PARSED_FIELD_INFO structure that contains information such as the offset and bit length of
            the requested data field.
            </summary> 
            <remarks>
            The pointer to field is valid until the parsed frame containing the field is closed.
            </remarks>
            <example>
            <code>
                NmParsedFieldInfo parsedDataField = new NmParsedFieldInfo();
                parsedDataField.Size = (ushort)Marshal.SizeOf(typeof(NmParsedFieldInfo));
                NetmonAPI.NmGetParsedFieldInfo(hParsedFrame, 0, 0, ref parsedDataField);
            </code>
            </example>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">ID of the field returned by the NmAddField function.</param>
            <param name="ulOption">There are currently no options. Leave this value as zero.</param>
            <param name="pParsedFieldInfo">Pointer to the NM_PARSED_FIELD_INFO structure. The Size value must be
            initialized to the size of the structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldName(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames,System.UInt32,System.Char*)">
            <summary>
            Gets the name, data type, containing protocol, or formatted display string of the field specified by the field ID.
            </summary> 
            <remarks>
            BufferLength is a count of the number of elements. This is probably most useful when you are iterating through 
            fields to discover their names, but it can be used to get other field names, such as those containing the protocol
            name or the data type name. <br/>
            This function retrieves the name of the field, field data type name, field display string, and so on. API users must 
            specify parsing options in order for the API to store them in the parsed frame. For example, users must set the frame
            parsing option to include NmFieldDisplayStringRequired to store the display string in the parsed frame. For possible
            values, see the NmFrameParsingOption enumeration. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            Formatted display stringss can return with leading spaces so that they line up properly in the UI when using bit 
            fields. These spaces are part of the returned display string and can be removed by the user.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="RequestedName">Type of the name requested as described by the NmParsedFieldNames enumeration.</param>
            <param name="ulBufferLength">Length, in elements, of the caller-provided buffer.</param>
            <param name="pBuffer">Pointer to the caller-provided buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: If ulBufferLength is shorted than the name length.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldOffsetAndSize(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and size of the field specified by the field ID as returned by the NmAddField function.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need 
            to parse all supporting frames for parsing to work properly. <br/>
            In order for the size and offset to be returned, optimization must be disabled when you call the 
            NmCreateFrameParser function.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">The ID returned by NmAddField.</param>
            <param name="ulFieldOffset">Pointer to receive the field offset, in bits.</param>
            <param name="ulFieldSize">Pointer to receive the field size, in bits.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber8Bit(System.IntPtr,System.UInt32,System.Byte@)">
            <summary>
            Gets a 8-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must
            maintain state information, such as HTTP, SMB, and RPC, use conversations to store that 
            information. You may also need to parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ubNumber">Pointer to an 8-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber16Bit(System.IntPtr,System.UInt32,System.UInt16@)">
            <summary>
            Gets a 16-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="uiNumber">Pointer to a 16-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber32Bit(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Gets a 32-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulNumber">Pointer to a 32-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber64Bit(System.IntPtr,System.UInt32,System.UInt64@)">
            <summary>
            Gets a 64-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ullNumber">Pointer to a 64-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueByteArray(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field of byte array type. Any binary field of size 3, 5, 6, 7, or greater than 8 is treated as a byte
            array. The sizes 2, 4, and 8 are numbers that have corresponding value retrieval functions such as
            NmGetFieldValueNumber32Bit.
            </summary> 
            <remarks>
            This function differs from the NmGetFieldInBuffer function in that it is explicitly for data types that are 
            described as arrays, whereas NmGetFieldInBuffer can be used to get the raw representation of any data field. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse 
            all supporting frames for parsing to work properly. <br/>
            If you are retrieving a field whose size is 1, 2, 4, or 8, you will get an error 160 (ERROR_BAD_ARGUMENTS) returned.
            This is because the base data type Number with sizes of 1, 2, 4, or 8 are special cases and are converted
            to integers of those sizes, for example, UINT8, UINT16, UINT32, and UINT64. Therefore, these sizes are considered 
            numbers, and not byte arrays. <br/>
            You can use the NmGetPartialRawFrame function with the offsets returned from the NmGetFieldOffsetAndSize function
            to read the information directly from the raw frame for any sizes.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulByteLength">Length of the supplied buffer.</param>
            <param name="pBuffer">Pointer to a buffer that receives the field value.</param>
            <param name="ulReturnLength">Pointer that receives the size of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueString(System.IntPtr,System.UInt32,System.UInt32,System.Char*)">
            <summary>
            Gets a string from a parsed frame.
            </summary> 
            <remarks>
            This function retrieves fields of string data type, either ASCII or wide-character. The returned string is always 
            in wide-character format, regardless of the string type on the wire. API users can determine the wire data type by
            calling the NmGetFieldName function with the RequestedName parameter set to NmFieldDataTypeName. The 
            NmDataTypeNameRequired must be specified as the parsing option to get the data type name after parsing.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulBufferLength">Length of the supplied buffer.</param>
            <param name="pValueBuffer">Pointer to a buffer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldInBuffer(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field value from a parsed frame. The values returned are in the same byte order as they 
            appear in the raw frame data.
            </summary> 
            <remarks>
            Only the content up to the buffer length is copied. Callers can use the NmGetFieldOffsetAndSize function to
            obtain the size before calling this function. <br/>
            This function returns fields in the order that they come over the wire. If the buffer is a byte array with a
            field offset of 10 and a length of 3, the first byte in the buffer referenced by index zero contains the 
            tenth byte in the raw frame. <br/>
            This function does not work with a container object, such as a structure or protocol. For those, use
            NmGetPartialRawFrame instead.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by NmParseFrame.</param>
            <param name="ulBufferLength">Length of the caller-provided buffer.</param>
            <param name="pFieldBuffer">Pointer to a buffer to receive raw field data.</param>
            <param name="ulReturnLength">Receives the length of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRequestedPropertyCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of properties added to the parser with the NmAddProperty function.
            </summary> 
            <remarks>
            This function returns zero unless properties have been added. <br/>
            The return value is the number of properties added to the frame parser so that the frame parser
            can be optimized not to include NPL objects independent of the added properties. A non-optimized 
            frame parser contains thousands of properties, and currently the API does not provide support for
            retrieving the total number of properties.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulCount">Count of properties added to the frame configuration.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle, wrong scope or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyInfo(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO@)">
            <summary>
            Gets the NM_PROPERTY_INFO structure for a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            If the property container type is multi-value storage or an array and the property added using NmAddProperty
            does not contain the key information, the value type and size may be unknown. Therefore, the caller may need
            to call the retrieval function, NmGetPropertyValueById or NmGetPropertyValueByName, twice. The first time,
            the buffer size needed is returned with the ERROR_INSUFFICIENT_BUFFER error. The correct buffer size can then
            be used in the second call. <br/>
            If the Name buffer provided is NULL, this function returns successfully, but the name is not returned. <br/>
            Set the Name member of the NM_PROPERTY_INFO to NULL if it is not set to a valid memory location.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser configuration.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="pInfo">NM_PROPERTY_INFO structure for this ID.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: NM_PARSED_PROPERTY_INFO version mismatch.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyById(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value of a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            The last two parameters, ulKeyCount and pKeyArray, are used to access properties that can be indexed.
            This includes multi-value storage arrays and property groups. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if
            the entire name was specified when the property was added to the frame configuration. For example, if 
            you add Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the 
            property. <br/>
            In most cases, ulKeyCount is 1, but you can add multiple keys to access properties that are defined 
            as in the following NPL example.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="ulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups.
            The C++ version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. 
            The C# version of this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyByName(System.IntPtr,System.String,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value for a property specified by name.
            </summary> 
            <remarks>
            In some cases, you can access a property by name without having added it using the NmAddProperty function.
            If an optimized frame parser is used, the property name may not be added to the frame parser and therefore
            may not be available. If you are using an optimized frame parser, add the property using NmAddProperty so 
            that you can access it by name or ID. For more information about optimizing, see NmCreateFrameParser. <br/>
            The fully qualified name must be used. <br/>
            The key type must match the type used by the parser. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if the 
            entire name was specified when the property was added to the frame configuration. For example, if you add 
            Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the property. <br/>
            Information for the size and types of keys can be obtained with the NmGetPropertyInfo function.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="pPropertyName">Fully qualified name of the property.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="pulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups. The C++
            version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. The C# version of
            this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrameLength(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the length of the raw frame.
            </summary> 
            <remarks>
            You cannot use a parsed frame handle. You must use the raw frame handle.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by the NmGetFrame function or 
            by the NM_FRAME_CALLBACK function.</param>
            <param name="pulLength">Pointer to receive the length of the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrame(System.IntPtr,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to the raw frame data returned from a capture file by the NmGetFrame function or 
            over a network from the capture engine through the NM_FRAME_CALLBACK function.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or 
            the NM_FRAME_CALLBACK terminates.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by NmGetFrame or by NM_FRAME_CALLBACK.</param>
            <param name="ulLength">Length of the provided buffer.</param>
            <param name="pFrameBuffer">Returned pointer to the raw frame data.</param>
            <param name="pulReturnLength">Size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPartialRawFrame(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to a specific piece of the raw frame data.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or
            NM_FRAME_CALLBACK terminates. The user must provide the buffer to be copied into.
            </remarks>
            <param name="hRawFrame">Handle to the raw frame object returned by the NmGetFrame function 
            or by the NM_FRAME_CALLBACK function.</param>
            <param name="ulFrameOffset">Offset in the raw frame from which to start.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="pFrameBuffer">Pointer to the user-provided buffer to receive the partial raw frame data.</param>
            <param name="pulReturnLength">Pointer to receive the size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameMacType(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the per-frame media access type.
            </summary> 
            <remarks>
            This function can be used on either a raw or a parsed frame. <br/>
            You can capture on multiple adapters. Therefore, the MAC type for each frame is recorded.
            For more information, see Capture File Format.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pulMacType">Pointer to receive the Machine Address Code (MAC) type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameTimeStamp(System.IntPtr,System.UInt64@)">
            <summary>
            Gets the absolute time stamp of a frame.
            </summary> 
            <remarks>
            This function returns the absolute time stamp, which is calculated by adding the frame offset
            to the capture file time stamp in the capture header. <br/>
            This function can be used with a raw frame or a parsed frame.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pTimeStamp">Pointer to receive the 64-bit time stamp.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCommentInfo(System.IntPtr,System.UInt32@,System.Byte*,System.UInt32@,System.Byte*)">
            <summary>
            Gets the frame comment title and description.
            </summary>
            <remarks>
            If the buffers passed in are NULL, the buffer length parameters indicate the required 
            length of the buffer needed to store the title and comment strings.
            </remarks>
            <param name="hFrame">Handle to a raw frame object.</param>
            <param name="ulCommentTitleBufferLength">Pointer to the actual byte length that corresponds to the title buffer.</param>
            <param name="pCommentTitleBuffer">Pointer to a caller-supplied buffer to hold the comment title.</param>
            <param name="ulCommentDescriptionBufferLength">Pointer to the actual byte length that corresponds to the description buffer.</param>
            <param name="pCommentDescriptionBuffer">Caller-supplied buffer to hold the comment description.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: Specified parsed frame not found. <br/>
                ERROR_INSUFFICIENT_BUFFER: If either of the supplied buffers is NULL. <br/>
                ERROR_EMPTY: Frame comment information was not found.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateCaptureFile(System.String,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag,System.IntPtr@,System.UInt32@)">
            <summary>
            Creates a new Network Monitor capture file for adding frames.
            </summary> 
            <remarks>
            If you specify a size of zero, 20 MB is used. <br/>
            If you specify a size larger than the maximum size determined by MaxCaptureFileSize, 
            the maximum size is used instead. <br/>
            If you specify a size that is less than the minimum size determined by the MinCaptureFileSize
            member of NM_API_CONFIGURATION, the minimum size is used instead. <br/>
            You can close and save the capture file by calling the NmCloseHandle function.
            </remarks>
            <param name="pFileName">String containing the path of the capture file to create.</param>
            <param name="ulSize">Maximum size of the file, in bytes. The upper limit is 500 MB. The default 
            upper limit is determined by the current configuration as determined by the NmGetApiConfiguration function.</param>
            <param name="ulFlags">Option flags for setting capture style: wraparound or chained.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <param name="ulReturnSize">Size of the capture file, in bytes.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFile(System.String,System.IntPtr@)">
            <summary>
            Opens a Network Monitor capture file for reading.
            </summary> 
            <remarks>
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFileInOrder(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER@,System.IntPtr@)">
            <summary>
            Opens a capture file and reorders packets based on the configuration defined by the 
            NmAddSequenceOrderConfig function.
            </summary> 
            <remarks>
            The frame in file are in the order of the sequence specified in the frame parser parameter
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="pOrderParser">Pointer to a NM_ORDER_PARSER_PARAMETER structure.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file. <br/>
                ERROR_INVALID_PARAMETER: frame parser does not have sequence configuration. <br/>
                ERROR_NOT_ENOUGH_MEMORY: not enough memory to build required objects. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: PNM_ORDER_PARSER_PARAMETER version does not match.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Adds a frame to the specified capture file.
            </summary> 
            <remarks>
            The capture file must be opened with NmCreateCaptureFile function. <br/>
            A raw frame can be returned by the frame indication callback or the NmBuildRawFrameFromBuffer function. <br/>
            If you add frames into a capture file and the time stamp is older than the time stamp of the last frame
            added, the newly added frame is not given the correct time stamp.
            </remarks>
            <param name="hCaptureFile">Handle to the capture file returned by the NmCreateCaptureFile function.</param>
            <param name="hFrame">Handle to raw frame to be added.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the frame count in the specified capture file.
            </summary> 
            <param name="hCaptureFile">Handle to the capture file.</param>
            <param name="hFrameCount">Pointer to receive the frame count.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrame(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Gets a raw frame from the capture file.
            </summary> 
            <remarks>
            The frame number is the index number in the capture file. The first frame starts 
            with an index of zero. <br/>
            You must free the handle returned from this call.
            </remarks>
            <param name="hCaptureFile">Handle to a capture file returned by the NmCreateCaptureFile
            or the NmOpenCaptureFile function.</param>
            <param name="ulFrameNumber">Zero-based frame number.</param>
            <param name="phFrame">Handle containing a reference to the raw frame object. You must 
            call the NmCloseHandle function to free this handle.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetTopConversation(System.IntPtr,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the top-level conversation of the parsed frame, described by the conversation protocol name 
            and conversation ID.
            </summary> 
            <remarks>
            The parsed frame must have conversation set to TRUE. <br/>
            The protocol name length is returned to caller. Therefore, if the provided buffer is not large 
            enough, the caller can call again with the correct size of buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a parsed frame object.</param>
            <param name="ulBufferESize">Size of the buffer for the protocol name, in wide characters.</param>
            <param name="pProtocolName">Pointer to the buffer for the protocol name.</param>
            <param name="pulProtocolNameLength">Length of the protocol name, in wide characters, not including the terminating pattern.</param>
            <param name="pulConversationID">ID of the top-level conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParentConversation(System.IntPtr,System.UInt32,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the parent conversation information for the specified conversation, including 
            conversation protocol name and conversation ID.
            </summary> 
            <remarks>
            The parent protocol name length is returned to caller.  So if the provided buffer is not enough, caller
            Can call again with the proper sized buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a frame parser.</param>
            <param name="ulConversationId">ID of the child conversation.</param>
            <param name="ulBufferESize">Size of the buffer for the parent conversation protocol name, in bytes.</param>
            <param name="pParentProtocolNameBuffer">Pointer to the buffer for the parent conversation protocol name.</param>
            <param name="ulParentProtocolNameLength">Returned length of the parent conversation protocol name.</param>
            <param name="ulParentConversationID">ID of the parent conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor">
            <summary>
            Represents the NETMON Wrapper. <br/>
            NOTE: You must have NetMon 3+ installed on your system in order
            to use this library.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <param name="FrameFilter">
            The string representing the Frame filter. Pass NULL for unfiltered capture. <br/>
            NOTE: NetMon 3 has a bug wherein it leaks memory when we use the Frame Filter. <i>Use
            the Frame Filter feature with extreme caution.</i>
            </param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StartCapture">
            <summary>
            Starts the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StopCapture">
            <summary>
            Stops the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CaptureCleanUp">
            <summary>
            Cleans up after the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.InitCapture">
            <summary>
            Initializes the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CreateCaptureFile">
            <summary>
            Creates the capture file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.OpenCaptureEngine">
            <summary>
            Initializes the capture engine.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ConfigureNWAdapter">
            <summary>
            Configures the network adapter for capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.FrameIndicationCallback(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback for each captured frame.
            </summary>
            <param name="hCapEng"></param>
            <param name="ulAdatIdx"></param>
            <param name="pContext"></param>
            <param name="hRawFrame"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ParserCallback(System.IntPtr,System.UInt32,System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType)">
            <summary>
            Callback for the parser engine.
            </summary>
            <param name="pCallerContext"></param>
            <param name="ulStatusCode"></param>
            <param name="lpDescription"></param>
            <param name="ulType"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.LoadFilter">
            <summary>
            Loads the specified capture filter. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing unmanaged objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the object, releasing managed and unmanaged handles.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\bin\Debug\NetworkMonitor3Wrapper\Test.Common.Library.NetworkMonitor3Wrapper.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkMonitor3Wrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant">
            <summary>
            Represents the Netmon API Constants.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAC_ADDRESS_SIZE">
            <summary>
            The size of the MAC Address.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAX_PATH">
            <summary>
            The maximum paths.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.NMAPI_GUID_SIZE">
            <summary>
            Size of the NetMon API GUID.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode">
            <summary>
            Represents the Netmon API return status code.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_TOO_BIG_FOR_FILE">
            <summary>
            The file doesn't have enough space to hold this frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_SMALL">
            <summary>
            Capture file size too small. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_LARGE">
            <summary>
            Capture file size too large. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary>
            The frame is corrupt. It overlaps with the next frame. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary>
            The frame is corrupt. The dimensions of the frame are not in the range of the capture file. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_ENDIAN">
            <summary>
            The data is in BigEndian and we support only Little Endian 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_PCAP_FILE">
            <summary>
            This file is not a valid PCAP file
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_PCAP_VERSION">
            <summary>
            This file is not a supported PCAP version 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_FILE_TYPE">
            <summary>
            This file type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_NETMON_CAP_FILE">
            <summary>
            This file type is not a valid Netmon capture file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_PCAP_DLT">
            <summary>
            This Pcap data link type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_API_VERSION_MISMATCHED">
            <summary>
            The current NmApi DLL is different from the required version by the application. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode">
            <summary>
            Represents the Netmon capture mode.
            </summary>
            <remarks>
            When capturing in promiscuous mode, you may not see traffic if using a switch or if the traffic occurs
            on a different segment of the network. The traffic must reach the Network Interface Controller (NIC) on which
            you are capturing. Often, network equipment, such as a switch, does not send traffic to a NIC if it is not
            directed to that NIC address.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.LocalOnly">
            <summary>
            Specifies only local traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.Promiscuous">
            <summary>
            Specifies all traffic that reaches the network adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag">
            <summary>
            Represents the Netmon capture file expansion mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.WrapAround">
            <summary>
            Creates a file that wraps around in first-in-first-out (FIFO) order.
            When the buffer is full, the oldest data is written over first.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.Chain">
            <summary>
            When the maximum file size is reached, a new file is created. If you
            have named the file Test.cap, the subsequent files are named test(1).cap,
            test(2).cap, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.LastFlag">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode">
            <summary>
            Represents the Capture callback function exit mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.DiscardRemainFrames">
            <summary>
            Remaining frames are discarded.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.ReturnRemainFrames">
            <summary>
            Remaining frames are returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState">
            <summary>
            Represents the Netmon driver adapter operational states.
            </summary> 
            <remarks>
            These states are returned by the Network Driver Interface Specification (NDIS).
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.None">
            <summary>
            Adapter is currently not bound, or some other low-level error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Bound">
            <summary>
            Adapter is bound to the Network Monitor 3 driver.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Stopped">
            <summary>
            Adapter is bound, but currently not capturing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Capturing">
            <summary>
            Adapter is currently capturing network traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Paused">
            <summary>
            Adapter is currently paused.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType">
            <summary>
            Represents the Status levels of the call back message.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.None">
            <summary>
            Placeholder. This value is never returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Error">
            <summary>
            The parser engine has returned an error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Warning">
            <summary>
            The parser engine has returned a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Information">
            <summary>
            The parser engine has returned an information message. At least
            one of these is returned when calling the NmLoadNplParser function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Last">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption">
            <summary>
            Represents the NPL loading option.
            </summary> 
            <remarks>
            By default the NmLoadNplOptionNone is used.  Only the user specified NPL path(s) are loaded.
            If both NmAppendRegisteredNplSets and a NPL path are specified, the resulting NPL parser will include
            Both and the specified NPL path(s) are prefixed.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmLoadNplOptionNone">
            <summary>
            Specifies that only the user-specified NPL path(s) are loaded. This is the default value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmAppendRegisteredNplSets">
            <summary>
            If both this parameter and an NPL path are specified, the resulting NPL parser will
            include both, and the specified NPL path(s) are prefixed.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption">
            <summary>
            Represents the Frame parser optimization options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeNone">
            <summary>
            Specifies creating a frame parser without optimization, according to the added filter. This is the default setting.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeFull">
            <summary>
            Specifies creating an optimized frame parser, based on added filters, fields, and properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeLast">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption">
            <summary>
            Represents the Frame parser parsing options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.None">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldFullNameRequired">
            <summary>
            Return the full field name with the NmGetParsedFieldInfo
            function, such as TCP.Flags.Reset. Turning this on degrades performance.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ContainingProtocolNameRequired">
            <summary>
            Return the containing protocol with NmGetParsedField.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.DataTypeNameRequired">
            <summary>
            Return the data type name, for example, MACAddress when querying for Ethernet.SourceAddress.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.UseFrameNumberParameter">
            <summary>
            Use the caller-specified frame number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldDisplayStringRequired">
            <summary>
            Provide the display string of the field.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FrameConversationInfoRequired">
            <summary>
            Provide frame conversation information.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ParsingOptionLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType">
            <summary>
            Represents the Fragmentation types returned in parsed frames.
            </summary>
            <remarks>
            When reassembly is performed, the engine signals frames as being first, middle, or last.
            You can use this information to determine whether a frame is fragmented. When this occurs,
            you can wait for the last frame marked as NmFragmentTypeEnd, and then use the handle to
            the inserted frame that is returned by the NmParseFrame function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.None">
            <summary>
            This is not part of a fragmented frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Start">
            <summary>
            This is the first frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Middle">
            <summary>
            This is a frame in the middle of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.End">
            <summary>
            This is the last frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames">
            <summary>
            Represents the name string properties in parsed field.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.NamePath">
            <summary>
            Field name path is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.DataTypeName">
            <summary>
            Data type name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.ContainingProtocolName">
            <summary>
            Containing protocol name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.FieldDisplayString">
            <summary>
            Formatted display string is returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType">
            <summary>
            Represents the Key types of the multi storage property.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNone">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNumber">
            <summary>
            Specifies that the key is a number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeString">
            <summary>
            Specifies that the key is a string.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeByteArray">
            <summary>
            Specifies that the key is a byte array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeArrayIndex">
            <summary>
            Specifies that the key is the index of a multivalue storage array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope">
            <summary>
            Represents the Scopes of properties. It is reported in the property info.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeNone">
            <summary>
            Specifies no scope.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeConversation">
            <summary>
            Specifies that the property applies to the network conversation.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeGlobal">
            <summary>
            Specifies that the property is global.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeFrame">
            <summary>
            Specifies that the property applies to the frame. This is the default.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType">
            <summary>
            Represents the property aggregation form, i.e., MVS with key, Array with index, etc.
            </summary> 
            <remarks>
            NmPropertyContainerTypeArray is the regular form if there is only one element.
            The NmGetPropertyInfo function may return container type NmPropertyContainerTypeValue if
            the key is not specified in the NmAddProperty function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerNone">
            <summary>
            Specifies that there is no property type.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerValue">
            <summary>
            Specifies that the regular form is a single value of
            NmPropertyValueType that can be referenced by just the property name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerMvs">
            <summary>
            Specifies that the multi-value storage set of properties share the
            same name, but have different keys.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerArray">
            <summary>
            Specifies a set of properties that are stored in an array and retrieved by name and index.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType">
            <summary>
            Represents the type of the property value.
            </summary> 
            <remarks>
            The value types of properties in the same multi-value storage can be different
            if they are referenced by different keys. The value types of properties in the 
            same property group can also be different if they are referenced by different indexes.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueNone">
            <summary>
            Specifies no data type for the property value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueSignedNumber">
            <summary>
            Specifies that the property value is a signed integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueUnsignedNumber">
            <summary>
            Specifies that the property value is an unsigned integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueString">
            <summary>
            Specifies that the property value is a string in wide character format.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueByteBlob">
            <summary>
            Specifies that the property value is a binary large object (BLOB) presented as a byte array.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey">
            <summary>
            Represents information on the key for retrieving multi-value storage properties.
            The array in this structure is used as a parameter of to the NmGetPropertyValueById
            and the NmGetPropertyValueByName functions.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Type">
            <summary>
            Type of key to return. Possible values are declared in the NmMvsKeyType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Length">
            <summary>
            User-supplied length of the key.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.ValuePointer">
            <summary>
            Marshaled pointer to the key value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetStringKey(System.String)">
            <summary>
            Sets the key to a string value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetNumberKey(System.Int64)">
            <summary>
            Sets the key to a number value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetIndexKey(System.Int64)">
            <summary>
            Sets the key to an array index.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetByteArrayKey(System.Byte[],System.Int32)">
            <summary>
            Sets the key to a buffer value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO">
            <summary>
            Contains runtime information for instantiated properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Size">
            <summary>
            Specifies the size of the property for version control.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Scope">
            <summary>
            Specifies the property scope, one of the elements of the NmPropertyScope enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ContainerType">
            <summary>
            Specifies the property container type, one of the elements of the NmPropertyContainerType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.NameSize">
            <summary>
            Specifies the element count of the name, excluding the terminator. When the name buffer is provided,
            this member is used for both input and output parameters. This member acts as an input parameter
            specifying the buffer length. The actual length of the name is also returned by the NmGetPropertyInfo
            function. When no name buffer is provided (the Name parameter is NULL), this member is used only as output.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Name">
            <summary>
            Property name string added by the NmAddProperty function. If a buffer is assigned when calling NmGetPropertyInfo,
            the NameSize member must specify the buffer length, in number of elements. NmGetPropertyInfo returns the
            property name in the buffer if the buffer has enough space. Otherwise, a buffer overflow error is returned.
            Set this member to NULL if you do not need a name returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueType">
            <summary>
            Specifies the data type of the property value, one of the elements of the NmPropertyValueType enumeration.
            If the value type is string, the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueSize">
            <summary>
            Specifies the size, in byte count, of the value for which the caller must provide a buffer. If ValueType
            is set to String, this member is in WCHAR, and the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ItemCount">
            <summary>
            Specifies the number of items in the array. Regular and multi-value storage properties have only one item.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo">
            <summary>
            Represents the fragmentation information returned in parsed frames.
            </summary> 
            <remarks>
            A frame is either non-fragmented or fragmented. A fragmented frame can be a start fragment,
            a middle fragment, or an end fragment. The carrier protocol of the fragment and the
            fragmented protocol information is included, if available.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.Size">
            <summary>
            Size of the structure to be initialized by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentedProtocolName">
            <summary>
            Name of the protocol that has fragmented the payload, such as IPv4, which breaks payloads
            into smaller segments for networks with smaller frame size.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.PayloadProtocolName">
            <summary>
            Name of the protocol to which the fragments belong. For example, HTTP may be the payload of TCP.
            Multiple TCP packets make up one HTTP page. Although TCP is a byte-stream transport, Network
            Monitor currently manipulates TCP at the frame level for simplicity.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentType">
            <summary>
            Type of fragment as defined by the NmFrameFragmentationType enumeration.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate">
            <summary>
            Callback function for frame receiving/retrieving.
            </summary>
            <param name="hCaptureEngine">Handle to the capture engine object responsible for this callback returned by
            the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter on which this frame was captured. Within the range from
            zero to the value returned by the NmGetAdapterCount function.</param>
            <param name="pCallerContext">Pointer to the object that was passed in to NmConfigAdapter. For example,
            a capture file handle can be passed in so that the raw frame received can be saved.</param>
            <param name="hFrame">Handle to the raw captured frame. You do not need to free this handle.</param>
            <remarks>
            This callback is called after the capture engine has stored the frame within the buffer on the computer 
            hard drive. Any heavy processing within the callback may cause a loss of network frames if the buffer
            grows beyond the capacity of the drive or the set capture file limit or quota.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption">
            <summary>
            Represents the Frame parser conversation configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.None">
            <summary>
            There are currently no conversation options. Always set this to NmConversationOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption">
            <summary>
            Represents the frame parser reassembly configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.None">
            <summary>
            Currently, there are no reassembly options. Always set this to NmReassemblyOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate">
            <summary>
            Callback function for parser compile/build process.
            </summary>
            <param name="pCallerContext">User-defined context to send to parser message callback.</param>
            <param name="ulStatusCode">Status code of the message.</param>
            <param name="lpDescription">Text description of the message.</param>
            <param name="ulType">Type of error message as described by the NmCallbackMsgType enumeration.</param>
            <remarks>
            The same callback can be used for loading the NmLoadNplParser and NmCreateFrameParserConfiguration functions.
            When loading the Network Monitor Parsing Language (NPL), you receive errors, warnings, and status messages.
            Since a status message is sent even for a successful load or build, you will be called at least one. When
            creating the frame parser, you will be called with error callbacks in the parser and when errors are flagged.
            For example, when a frame is not parsed and there is extra data, an error is often flagged by the parser.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO">
            <summary>
            Contains adapter or interface information as returned by the NmGetAdapter function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Size">
            <summary>
            Size of structure that is set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PermanentAddr">
            <summary>
            Hardware address of the Network Interface Controller (NIC).
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CurrentAddr">
            <summary>
            Driver-defined hardware address. Not all drivers support this.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.MediaType">
            <summary>
            Network Driver Interface Specification (NDIS) NdisMediumXXX type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PhysicalMediaType">
            <summary>
            Physical medium type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.ConnectionName">
            <summary>
            Internal name of the connection. This is often blank.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.FriendlyName">
            <summary>
            Friendly name of the interface for this adapter. This is the description that appears in ipconfig.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Guid">
            <summary>
            Interface GUID of the adapter.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.OpState">
            <summary>
            Operation state. For more information, see the NmAdapterOpState enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Enabled">
            <summary>
            Whether the adapter is enabled.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PModeEnabled">
            <summary>
            Whether the adapter allows for promiscuous mode sniffing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CallBackFunction">
            <summary>
            Callback function provided when you configured the adapter with the NmConfigAdapter function.
            The callback function is called by the capture engine to deliver raw frames captured on the adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION">
            <summary>
            Contains parser configuration information. It is used to retrieve current configuration
            or set user-specified configuration.
            </summary>
            <remarks>
            Use the NmApiInitialize and the NmGetApiConfiguration functions to set and retrieve this structure.
            NmAPIInitialize changes the default configuration parameters defined in the this structure.
            The values specified in the structure as parameters passed in to NmAPIInitialize overwrite the default
            values. Therefore, it is recommended that you first get the configuration, and then change the values
            as desired before calling NmAPIInitialize with an alternate configuration.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.Size">
            <summary>
            Size of the structure to be set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.RawFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for raw frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ParsedFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for parsed frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureEngineCountLimit">
            <summary>
            Maximum number of handles available for capture engines. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.NplParserCountLimit">
            <summary>
            Maximum number of handles available for Network Monitor Parsing Language (NPL)
            parser sets. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserConfigCountLimit">
            <summary>
            Maximum number of handles available for frame parser configurations.
            Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserCountLimit">
            <summary>
            Maximum number of handles available for frame parsers. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileCountLimit">
            <summary>
            Maximum number of handles available for capture files. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ThreadingMode">
            <summary>
            Threading mode. Possible values are COINIT_MULTITHREADED (0) and
            COINIT_APARTMENTTHREADED (2). Default value is COINIT_APARTMENTTHREADED.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ConversationOption">
            <summary>
            Not currently used. See NmConversationConfigOption for information on conversation flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ReassemblyOption">
            <summary>
            Not currently used. See NmReassemblyConfigOption for information on reassembly flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileMode">
            <summary>
            Override default capture file options. Default value is CaptureFileWrapAround. See
            NmCaptureFileMode for information on capture flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParsingOption">
            <summary>
            Override default parsing options. No longer used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureCallbackExitMode">
            <summary>
            Stop capture exit mode. Possible values are elements in the NmCaptureCallbackExitMode
            enumeration. The default value is NmDiscardRemainFrames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxCaptureFileSize">
            <summary>
            Maximum size for a capture file. This is used when the NmCreateCaptureFile function is called.
            The value is 500 MB. This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MinCaptureFileSize">
            <summary>
            Minimum size for a capture file. This is used when NmCreateCaptureFile is called. The value is 2072 bytes.
            This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxApiHandleLimit">
            <summary>
            Maximum number of handles per handle type. Default value is 65,536. It is read-only.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG">
            <summary>
            Defines how a protocol defines ordering of packets.
            </summary>
            <remarks>
            A caller using this structure must initialize the size before calling NmAddSequenceOrderConfig.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.Size">
            <summary>
            This member must match the size of the version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.GroupKeyString">
            <summary>
            Names of the properties containing the values to form the key to identify the group
            of the frames to put in order. If multiple properties are used, they are separated by
            semicolons. The string must be NULL-terminated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.SequencePropertyString">
            <summary>
            Name of the property containing the frame's sequence number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.NextSequencePropertyString">
            <summary>
            Name of the property containing the frame's next sequence number.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER">
            <summary>
            Structure for calling NmOpCaptureFileInOrder to provide the parser built with sequence
            control information to correct potential out-of-order frames in the capture file to be opened.
            It also contains an option flag for future extension.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Size">
            <summary>
            This member must match the size of the current version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.hFrameParser">
            <summary>
            Frame parser used for handling out-of-order frames. It must be built from a frame parser
            configuration that has sequence information specified by the NM_PROTOCOL_SEQUENCE_CONFIG structure.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Option">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM">
            <summary>
            Represents the Network Medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Fddi">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Wan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_LocalTalk">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Dix">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_ArcnetRaw">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Arcnet878_2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Atm">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Bpc">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_CoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_InfiniBand">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Tunnel">
            <summary>
            #if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Loopback">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.NdisMediumMax">
            <summary>
            #endif // (NTDDI_VERSION >= NTDDI_VISTA)
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM">
            <summary>
            Represents the Network Physical medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessLan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_CableModem">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PhoneLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PowerLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_DSL">
            <summary>
            includes ADSL and UADSL (G.Lite)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_FibreChannel">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Bluetooth">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Infiniband">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiMax">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_UWB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredWAN">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredCoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Other">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType">
            <summary>
            Numerical Definitions of Variant Types. <br/>
            http://www.marin.clara.net/COM/variant_type_definitions.htm
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_EMPTY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_NULL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DATE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DISPATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ERROR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VARIANT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UNKNOWN">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_INT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UINT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VOID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_HRESULT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_PTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_SAFEARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_USERDEFINED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPWSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_FILETIME">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAM">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORAGE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAMED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CLSID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VECTOR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BYREF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_RESERVED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGALMASKED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_TYPEMASK">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo">
            <summary>
            Contains information about the data field, such as field offset, field length, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.Size">
            <summary>
            Caller-provided size of the structure being sent. Should be initialized by the user.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldIndent">
            <summary>
            Indent of data field. For example, top-level fields have an indent of zero,
            but Tcp.flags.reset has an indent of 2.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NamePathLength">
            <summary>
            Length in elements of the name path. Since this is returned as a WCHAR, you must
            multiply it by sizeof(WCHAR). This does not include a NULL, which is added by the
            NmGetFieldName function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NplDataTypeNameLength">
            <summary>
            Length in elements of the data type. Since this is returned as a WCHAR, you must
            multiply by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolNameLength">
            <summary>
            Length in elements of the protocol name. Since this is returned as a WCHAR, you must multiply
            by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.DisplayStringLength">
            <summary>
            Length of the Display String.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolBitOffset">
            <summary>
            Offset from the beginning of the protocol, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FrameBitOffset">
            <summary>
            Frame offset of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldBitLength">
            <summary>
            Size of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueType">
            <summary>
            Variant type of the value, as defined by VARENUM.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueBufferLength">
            <summary>
            Size of the buffer required to hold the field value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI">
            <summary>
            PInvoke wrapper of Netmon API.
                - managed/unmanaged data type mapping: http://msdn2.microsoft.com/en-us/library/ac7ay120.aspx
                - the declaration in this class are strongly tied to nmapi.h
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiVersion(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Retrieves the current major and minor version numbers of the API.
            </summary> 
            <remarks>
            The API version matches netmon engine version.
            </remarks>
            <example>
            <code>
                UInt16 majorNumber = 0;
                UInt16 minorNumber = 0;
                UInt16 BuildNumber = 0;
                UInt16 RevisionNumber = 0;
                NmGetApiVersion(out majorNumber, out minorNumber, out BuildNumber, out RevisionNumber);
            </code>
            </example>
            <param name="Major">Major version number.</param>
            <param name="Minor">Minor version number.</param>
            <param name="Build">Build number.</param>
            <param name="Revision">Revision number.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiConfiguration(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Gets the current API configuration parameters.
            </summary> 
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Struct object for API to fill.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiInitialize(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Overrides the default API configuration.
            </summary> 
            <remarks>
            Caller needs to provide storage for NmApiConfiguration struct.
            </remarks>
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
               apiConfig.ThreadingMode = 0;
               status = NetmonAPI.NmApiInitialize(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Caller specified API configuration parameter struct.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different. <br/>
                ERROR_INVALID_STATE: Can not change API configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiClose">
            <summary>
            Closes down the API after finishing all work. It releases all the objects referenced by handles.
            On Windows XP and Windows Server 2003, it also detaches from the driver DLL.
            </summary>
            <remarks>
            Should be called when done with the API.
            </remarks>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCloseHandle(System.IntPtr)">
            <summary>
            Release the reference to the object by handle.</summary> 
            <remarks>
            Callers need to close all the object handles returned from API after finish using them.
            </remarks>
            <param name="hObjectHandle">Handle to the object to release </param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureEngine(System.IntPtr@)">
            <summary>
            Initializes the engine for live data capture.
            </summary> 
            <param name="phCaptureEngine">Handle to the capture engine object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_INVALID_STATE:     The operation is not available. <br/>
                ERROR_ENOUGH_MEMORY: Fail to allocate memory for the object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of network interfaces currently accessible to the API.
            </summary> 
            <remarks>
            The count returned may be zero if no adapters are registered on the computer or the current user
            is not a member of the Netmon Users security group. It is required to be a member of this group
            in order to capture on Windows Vista and above. New users to the group may be required to log on
            again to gain capture privileges unless they run as an administrator.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulCount">Pointer to the returned adapter count value. If zero, no adapters are available.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO@)">
            <summary>
            Gets available information about a specific network adapter.
            </summary> 
            <remarks>
            Caller can use name, GUID etc. to select adapter to use.  The adapter index should be within the 
            Range returned by NmGetAdapterCount method.  Caller needs to provide the storage of the
            NmNicAdapterInfo struct.
            The fix sized name buffers in the NM_NIC_ADAPTER_INFO structure are marshal to System.char[]. 
            Use String nameStr = new String("e.g., whateverDefinedStructName.ConnectionName") to translate the
            char array to a string object.
            </remarks>
            <example>
            <code>
               IntPtr hCaptureEngine = HandleReturnedByNmOpenCaptureEngine;
               UInt32 ulIndex = 0;
               NM_NIC_ADAPTER_INFO adapterInfo = new NM_NIC_ADAPTER_INFO();
               adapterInfo.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(adapterInfo);
               uint status = NetmonAPI.NmGetAdapter(hCaptureEngine, ulIndex, ref adapterInfo);
               String nameStr = new String(adapterInfo.ConnectionName);
            </code>
            </example>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="pNMAdapterInfo">Pointer to a NM_NIC_ADAPTER_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_NIC_ADAPTER_INFO struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate,System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode)">
            <summary>
            Configure the adapter with the frame indication callback and the caller context.
            </summary> 
            <remarks>
            The current callback function and context will overwrite the previous ones.  The adapter index number
            Must be in the range returned from NmGetAdapterCount method.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter. The range is from zero to value returned by the NmGetAdapterCount function.</param>
            <param name="CallbackFunction">Pointer to the callback function to receive live network data frames.
            See the NM_FRAME_CALLBACK function for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer that passes extra information to the network frame callback function.</param>
            <param name="ExitMode">Specifies whether to discard or process remaining frames after the capture engine stops.
            See NmCaptureCallbackExitMode for possible values. The default value is NmDiscardRemainFrames.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStartCapture(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode)">
            <summary>
            Starts capturing live data on an existing capture engine and network adapter.
            </summary> 
            <remarks>
            Capture mode can be PMODE and LocalOnly.
            Frame callbacks are made to the NM_FRAME_CALLBACK function registered to the adapter interface
            using the adapter index and the NmConfigAdapter function.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="CaptureMode">Capture mode. See the NmAdapterCaptureMode enumeration.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmPauseCapture(System.IntPtr,System.UInt32)">
            <summary>
            Pauses the capture engine.
            </summary> 
            <remarks>
            This function and the NmResumeCapture function have less overhead than the NmStartCapture and the NmStopCapture functions,
            since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames which enter the buffer. Therefore, there may be frames returned 
            to your callback while the buffer is being cleared. By default, after pausing or stopping a capture, 
            the NM_FRAME_CALLBACK function registered with the NmConfigAdapter function should not be called again. <br/>
            No new frames coming in on the wire are added to the buffer or receive callbacks. To continue receiving callbacks while
            frames remain in the driver buffer, set the CaptureCallbackExitMode parameter of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not pause at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmResumeCapture(System.IntPtr,System.UInt32)">
            <summary>
            resumes a capture that was previously paused by the NmPauseCapture function.
            </summary> 
            <remarks>
            Cannot resume after NmStopCapture is called.  The frame indication callback is no longer invoked 
            until NmResumeCapture method is called. <br/>
            Using the NmPauseCapture function and this function has less overhead than the NmStartCapture and the NmStopCapture
            functions, since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames that enter the buffer. Therefore, there may be frames returned
            to your callback while the buffer is being cleared. <br/>
            By default, after pausing or stopping a capture, NM_FRAME_CALLBACK registered with the NmConfigAdapter function
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode parameter
            of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">[in] The handle to the target capture engine</param>
            <param name="ulAdapterIndex">[in] The index number of the target adapter</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/> 
                ERROR_INVALID_STATE: Can not resume at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStopCapture(System.IntPtr,System.UInt32)">
            <summary>
            Stops capturing data to the driver buffer on the specified capture engine and adapter.
            </summary> 
            <remarks>
            Frames may be received after the capture engine is stopped, but no new frames enter the buffer. <br/>
            By default, any frames that remain in the driver buffer are discarded, and no new callbacks are received by 
            the calling application. <br/>
            If the NmReturnRemainFrames flag is set in the NmConfigAdapter function, the call to this function blocks 
            until the last frame is processed. This ensures that the callback function is never invoked after the call
            to this function returns. If the callback enters an infinite loop, this call never returns. <br/>
            When you pause a capture for a brief time period, use the NmPauseCapture and the NmResumeCapture functions
            instead. These have less overhead than the NmStartCapture function and this function, since they do not free
            all the internal objects used to attach to the interface and tracing. <br/>
            By default, after pausing or stopping a capture, the NM_FRAME_CALLBACK function registered with NmConfigAdapter
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode
            parameter of NmConfigAdapter to NmReturnRemainFrames.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not stop at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmLoadNplParser(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Loads the Network Monitor Parsing Language (NPL) parser set for a parser configuration.
            </summary> 
            <remarks>
            A callback function is invoked to compile error and warning information. Even on a successful load,
            there is at least one information message stating that Sparser.npb has been successfully loaded. <br/>
            When you set the pFileName parameter to NULL and the NmAppendRegisteredNplSets option is set, the function
            automatically loads the path used by the UI.
            </remarks>
            <param name="pFileName">Full path of the parser file, normally Sparser.npl. If set to NULL, the path specified
            on the Parsers tab is used (on the Tools menu, click Options, then click Parsers). If no path is specified, 
            Network Monitor searches for a local instance of Sparser.npl.</param>
            <param name="ulFlags">Option flags. Currently, the following flag is supported: NmNplParserLoadingOption. Possible
            values are NmLoadNplOptionNone and NmAppendRegisteredNplSets. The default value is NmLoadNplOptionNone.</param>
            <param name="CallbackFunction">Pointer to a function to receive warnings, errors, or messages from the parser
            engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer to pass extra information to the NPL engine message callback.
            For example, this could be a handle to a dialog box to receive the messages.</param>
            <param name="phNplParser">Handle to the NPL parser object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create NPL parser object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParserConfiguration(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a frame parser configuration to configure filters and fields.
            </summary> 
            <remarks>
            All the frame parser features, including conversation and reassembly, must be added in the configuration before
            creating the frame parser. The callback for this function provides errors that occur when loading a trace, such 
            as parsing errors and errors flagged in the NPL. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hNplParser">Handle to the Network Monitor Parsing Language (NPL) parser object returned by
            the NmLoadNplParser function.</param>
            <param name="CallbackFunction">Pointer to the function to receive warnings, errors, or messages from the
            parser engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer used to pass extra information to the NPL engine message
            callback function.</param>
            <param name="phFrameParserConfiguration">Handle to the frame parser configuration object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create frame parser configuration object. <br/>
                ERROR_NOT_FOUND: not found specified NPL parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFilter(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a filter to the parser configuration that can be evaluated on a frame basis.
            </summary> 
            <remarks>
            The filter ID is used to evaluate the state of the filter on a parsed frame when you call the NmEvaluateFilter
            function with a parsed frame. The filter string can be any valid filter that the UI accepts. This includes 
            properties and conversation variables. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the frame parser configuration engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFilterString">Filter string using all the elements available to the UI.</param>
            <param name="ulFilterId">Returned filter index in the frame parser for this filter.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddField(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a field to the frame parser configuration and optimizes its access.
            </summary> 
            <remarks>
            All the fields are enumerated in the parsed frame if no field is added. The field ID is used to retrieve the field in 
            the parsed frame when calling the NmGetXXX functions, such as NmGetFieldValueByteArray. The caller must provide a 
            unique fully qualified field name, for example, TCP.Option.Ack. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFieldString">Fully qualified path to the field.</param>
            <param name="ulFieldId">Returned field index in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddProperty(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a property to a configuration.
            </summary> 
            <remarks>
            The property ID is used to retrieve the property value specified by the fully qualified property name starting 
            with the scope name: Global, Conversation, or Frame. <br/>
            To retrieve the property value, use the NmGetPropertyValueById function. <br/>
            If a property is not added to a frame parser configuration when the frame parser is created with optimization
            enabled, the property may not be available because it may not qualify with optimization.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to a frame parser configuration.</param>
            <param name="pPropertyString">Pointer to the fully qualified name of a property. The name must have a scope
            prefix to indicate whether it is global or applies to a conversation or frame, for example Global.PropertyName,
            Conversation.PropertyName, or Frame.PropertyName. The default scope is frame. For options, see the 
            NmPropertyScope enumeration.</param>
            <param name="ulPropertyId">Pointer to the property ID.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INVALID_PARAMETER: The specified property name is invalid.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddSequenceOrderConfig(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG@,System.UInt32@)">
            <summary>
            Adds protocol sequence order configurations. 
            </summary> 
            <remarks>
            This function is used in conjunction with NmOpenCaptureFileInOrder. Once you define how to order frames using this 
            call, a capture file opened rearranges the frames so that they are loaded in order. <br/>
            This function adds a filter to the parser configuration, in addition to other changes. Therefore, the return value
            of the NmGetFilterCount function is incremented by 1. <br/>
            When using this function, the engine is optimized so you cannot read other data fields. If you need to process the
            data in order, write the results to another capture file or use a different parser to get the data fields that you
            need to read. 
            </remarks>
            <param name="hFrameParserConfiguration">Frame parser configuration returned from the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="SeqConfig">Pointer to a sequence structure defined by the NM_PROTOCOL_SEQUENCE_CONFIG structure.</param>
            <param name="ulConfigId">The configuration in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_ENOUGH_MEMORY: Fail to allocate memory to store the configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigReassembly(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption,System.Boolean)">
            <summary>
            Enables reassembly for a specified protocol.
            </summary> 
            <remarks>
            Each protocol can provide a way to reassemble its payload. This is dependent on the Network Monitor Parsing Language (NPL)
            for the protocol. <br/>
            Currently, there are no reassembly options. You can leave this value as zero. <br/>
            When you enable reassembly, conversations are also enabled by default because reassembly is dependent on conversations.
            When you disable reassembly, conversations are not affected. <br/>
            Reassembly is disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Reassembly options. Currently there are none. Set this value to NmReassemblyOptionNone.</param>
            <param name="bEnable">Action to take: enable or disable reassembly for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigConversation(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption,System.Boolean)">
            <summary>
            Configures conversation options.</summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            When you enable conversations, only conversations are enabled. However, when you disable conversations, reassembly is
            also disabled. <br/>
            This function must be called on the frame parser configuration to get the global and conversation properties. <br/>
            You must enable conversations in a parser configuration before you add conversation variables or filters. Otherwise,
            the engine is not initialized properly and the added filters or properties that rely on conversations do not work. <br/>
            Conversations are disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the target frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Conversation options. Currently there are none. Set this value to NmConversationOptionNone.</param>
            <param name="bEnable">Flag to enable conversations for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParser(System.IntPtr,System.IntPtr@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption)">
            <summary>
            Creates a frame parser with a specified parser configuration.
            </summary> 
            <remarks>
            With a handle to the frame parser, you can parse a raw frame with the NmParseFrame function. <br/>
            A frame parser object should be used to parse only data considered to be part of the same capture stream. A frame
            parser keeps state information, so mixing trace data from multiple unrelated capture files causes undesired results.
            However, using multiple frame parsers for the same data is supported. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            OptimizeOption explicitly specifies whether the frame parser created should be optimized. The optimization occurs 
            when filters, fields, or properties are added and provides better parsing performance. Once the frame parser is
            optimized, trying to access additional fields or properties other than those specifically added to the parser with
            NmAddField, NmAddFilter, or NmAddProperty produces no results. If it is not known what is needed in advance, it is best
            to leave the parser unoptimized. <br/>
            The NmGetFieldOffsetAndSize function also depends on optimization being set to NULL. Otherwise, zero is returned for
            both size and offset.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the capture engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="phParser">Handle to the frame parser object.</param>
            <param name="OptimizeOption">Specifies the optimization setting for the frame parser to be generated. The default setting
            is NmParserOptimizeNone.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigStartDataType(System.IntPtr,System.String)">
            <summary>
            Sets the starting data type for use with the NmParseBuffer function.</summary> 
            <remarks>
            This function is used in conjunction with the NmParseBuffer function. It is useful for parsing a partial payload.
            For example, if you have a TCP payload, you can set the parse type to HTTP to try to parse this data as an HTTP header.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="StartDataTypeName">Pointer to the string that represents the starting data type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetStartDataType(System.IntPtr,System.UInt32,System.Char*)">
            <summary>
            Determines the current start data type for the NmParseBuffer function.
            </summary> 
            <remarks>
            Unless changed, this function returns the default data type Frame. You can change the default data type for partial
            frame parsing with the NmConfigStartDataType function.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="ulBufferLength">Length of the user-provided buffer for the data type name.</param>
            <param name="pBuffer">The name of the data type that the created frame parser starts with</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INSUFFICIENT_BUFFER: The given start type name is longer than 260 characters.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseFrame(System.IntPtr,System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@,System.IntPtr@)">
            <summary>
            parses a raw frame and returns it as an object that can be used to retrieve information about that parsed frame. 
            </summary> 
            <remarks>
            The parsed frame contains the frame information, filter state, and data field information. When reassembly is enabled,
            the last fragment of the payload completing the reassembled frames is processed, and the inserted frame appears 
            as a reassembled raw frame. If there is no reassembled frame, INVALID_HANDLE_VALUE is returned. <br/>
            You must parse the frames in one capture file sequentially to make the state correct. You may have to parse frames
            0 through n-1 to be able to parse frame n correctly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser object created by the NmCreateFrameParser function to parse the 
            specified raw frame object.</param>
            <param name="hRawFrame">Raw frame returned by the NM_FRAME_CALLBACK or the NmGetFrame function.</param>
            <param name="ulFrameNumber">Frame number to assign to the new frame.</param>
            <param name="Options">One of the options defined in the NmFrameParsingOption enumeration.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame.</param>
            <param name="phInsertedRawFrame">Handle containing a reference to the inserted raw frame, if there is one.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseBuffer(System.IntPtr,System.Byte[],System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@)">
            <summary>
            Parses partial frame information or a user-supplied buffer.
            </summary> 
            <remarks>
            The data buffer contains the byte array that can be a raw frame, part of a raw frame, or any specified data. The parsed frame contains
            the parsed frame information. The filter state and enumeration of fields are supported. Intra-frame reassembly is not supported since it
            requires multiple frames and conversations that are not available in this buffered mode. <br/>
            Use the NmConfigStartDataType function to specify where to start parsing. For example, if your buffer contains only HTTP data, configure
            the start data type as HTTP, and the parser will start at that level. Be aware, however, that parsers sometimes have dependencies on 
            lower-layer protocols and conversations.
            </remarks>
            <param name="hParser">Handle to the frame parser object returned by the NmCreateFrameParser function.</param>
            <param name="DataBuffer">Pointer to the desired buffer for the parsed data.</param>
            <param name="ulBufferLength">Length of the provided buffer.</param>
            <param name="ulFrameNumber">The frame number should be used in parsing process if enabled by option flag.</param>
            <param name="Options">Options for parsing as defined by the NmFrameParsingOption function.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmBuildRawFrameFromBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt64,System.IntPtr@)">
            <summary>
            Builds a raw frame from a user-provided buffer.
            </summary> 
            <remarks>
            The data buffer is transformed into a raw frame object so that you can enter a contrived frame into a capture file. The media type and
            time stamp are optional and can be set to zero. <br/>
            The media type is defined per frame with Network Monitor 3 capture files. See Frame Layout. These values are used to determine the type
            of network on which a capture occurs. Frame.npl then uses this value to determine how to initially parse a frame. You can look at 
            Frame.npl to determine the valid types. You can also create your own types, but you must modify Frame.npl or auto-register your custom
            parser so that your new media type is handled.
            </remarks>
            <param name="DataBuffer">User-provided data buffer to be converted into a raw frame.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="ulMedia">Optional media type of the new raw frame. See Frame.npl for available media types. The default value is zero.
            For more information, see Frame Layout.</param>
            <param name="ullTimeStamp">Optional time stamp of the new raw frame. The default value is zero.</param>
            <param name="phRawFrame">Handle to the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: No space to build the new frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameFragmentInfo(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo@)">
            <summary>
            Gets the fragment information for the specified parsed frame.
            </summary> 
            <remarks>
            When receiving frames, you may want to determine whether fragmentation is occurring so that you can discard all 
            previous frames and focus on the reassembled frame that appears with the last fragment. <br/>
            You cannot determine the fragment type of a raw frame. Only after you parse a frame can you determine whether
            it is reassembled.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="FragmentationInfo">Pointer to an NM_FRAGMENTATION_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame. <br/>
                ERROR_INSUFFICIENT_BUFFER: If the protocol name length is longer than the buffer in PNmReassemblyInfo struct.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFilterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of filters that have been added to a frame parser configuration.
            </summary> 
            <remarks>
            If you add two filters, this function returns 2. <br/>
            The NmAddSequenceOrderConfig function adds a filter to the parser configuration, in addition to other changes.
            Therefore, the return value of this function is incremented by 1. Therefore, the count is 1 greater if you use
            the NmOpenCaptureFileInOrder function.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser returned by the NmCreateFrameParser function.</param>
            <param name="ulFilterCount">Number of filters available in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmEvaluateFilter(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Evaluates a filter that you added with the NmAddFilter function with the current parsed frame. 
            </summary> 
            <remarks>
            The PassFilter value is set to TRUE if the parsed frame passes the specified filter. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to 
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFilterId">Field ID returned by the NmAddFilter function.</param>
            <param name="bPassFilter">Pointer to BOOLEAN variable to contain the results of the test.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of fields enumerated in the specified parsed frame.
            </summary> 
            <remarks>
            The number of fields returned is dependent on whether or not you call the NmAddField function. If you added five 
            fields, for example, this function returns 5. However, if you do not add any fields, this function returns the
            total number of fields in the currently parsed frame. You can iterate through fields if you do not have a specific
            one that you are looking for. However, there is a performance price incurred, and it takes longer to parse every
            field. Therefore, if you know which fields you want, you get better performance by adding the fields explicitly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting 
            frames for parsing to work properly. <br/>
            This function returns the total number of fields, regardless of whether any have been added. However, the 
            NmGetRequestedPropertyCount function returns zero if no properties have been added.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldCount">Number of fields returned in the parsed frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParsedFieldInfo(System.IntPtr,System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo@)">
            <summary>
            Gets a NM_PARSED_FIELD_INFO structure that contains information such as the offset and bit length of
            the requested data field.
            </summary> 
            <remarks>
            The pointer to field is valid until the parsed frame containing the field is closed.
            </remarks>
            <example>
            <code>
                NmParsedFieldInfo parsedDataField = new NmParsedFieldInfo();
                parsedDataField.Size = (ushort)Marshal.SizeOf(typeof(NmParsedFieldInfo));
                NetmonAPI.NmGetParsedFieldInfo(hParsedFrame, 0, 0, ref parsedDataField);
            </code>
            </example>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">ID of the field returned by the NmAddField function.</param>
            <param name="ulOption">There are currently no options. Leave this value as zero.</param>
            <param name="pParsedFieldInfo">Pointer to the NM_PARSED_FIELD_INFO structure. The Size value must be
            initialized to the size of the structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldName(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames,System.UInt32,System.Char*)">
            <summary>
            Gets the name, data type, containing protocol, or formatted display string of the field specified by the field ID.
            </summary> 
            <remarks>
            BufferLength is a count of the number of elements. This is probably most useful when you are iterating through 
            fields to discover their names, but it can be used to get other field names, such as those containing the protocol
            name or the data type name. <br/>
            This function retrieves the name of the field, field data type name, field display string, and so on. API users must 
            specify parsing options in order for the API to store them in the parsed frame. For example, users must set the frame
            parsing option to include NmFieldDisplayStringRequired to store the display string in the parsed frame. For possible
            values, see the NmFrameParsingOption enumeration. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            Formatted display stringss can return with leading spaces so that they line up properly in the UI when using bit 
            fields. These spaces are part of the returned display string and can be removed by the user.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="RequestedName">Type of the name requested as described by the NmParsedFieldNames enumeration.</param>
            <param name="ulBufferLength">Length, in elements, of the caller-provided buffer.</param>
            <param name="pBuffer">Pointer to the caller-provided buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: If ulBufferLength is shorted than the name length.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldOffsetAndSize(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and size of the field specified by the field ID as returned by the NmAddField function.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need 
            to parse all supporting frames for parsing to work properly. <br/>
            In order for the size and offset to be returned, optimization must be disabled when you call the 
            NmCreateFrameParser function.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">The ID returned by NmAddField.</param>
            <param name="ulFieldOffset">Pointer to receive the field offset, in bits.</param>
            <param name="ulFieldSize">Pointer to receive the field size, in bits.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber8Bit(System.IntPtr,System.UInt32,System.Byte@)">
            <summary>
            Gets a 8-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must
            maintain state information, such as HTTP, SMB, and RPC, use conversations to store that 
            information. You may also need to parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ubNumber">Pointer to an 8-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber16Bit(System.IntPtr,System.UInt32,System.UInt16@)">
            <summary>
            Gets a 16-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="uiNumber">Pointer to a 16-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber32Bit(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Gets a 32-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulNumber">Pointer to a 32-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber64Bit(System.IntPtr,System.UInt32,System.UInt64@)">
            <summary>
            Gets a 64-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ullNumber">Pointer to a 64-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueByteArray(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field of byte array type. Any binary field of size 3, 5, 6, 7, or greater than 8 is treated as a byte
            array. The sizes 2, 4, and 8 are numbers that have corresponding value retrieval functions such as
            NmGetFieldValueNumber32Bit.
            </summary> 
            <remarks>
            This function differs from the NmGetFieldInBuffer function in that it is explicitly for data types that are 
            described as arrays, whereas NmGetFieldInBuffer can be used to get the raw representation of any data field. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse 
            all supporting frames for parsing to work properly. <br/>
            If you are retrieving a field whose size is 1, 2, 4, or 8, you will get an error 160 (ERROR_BAD_ARGUMENTS) returned.
            This is because the base data type Number with sizes of 1, 2, 4, or 8 are special cases and are converted
            to integers of those sizes, for example, UINT8, UINT16, UINT32, and UINT64. Therefore, these sizes are considered 
            numbers, and not byte arrays. <br/>
            You can use the NmGetPartialRawFrame function with the offsets returned from the NmGetFieldOffsetAndSize function
            to read the information directly from the raw frame for any sizes.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulByteLength">Length of the supplied buffer.</param>
            <param name="pBuffer">Pointer to a buffer that receives the field value.</param>
            <param name="ulReturnLength">Pointer that receives the size of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueString(System.IntPtr,System.UInt32,System.UInt32,System.Char*)">
            <summary>
            Gets a string from a parsed frame.
            </summary> 
            <remarks>
            This function retrieves fields of string data type, either ASCII or wide-character. The returned string is always 
            in wide-character format, regardless of the string type on the wire. API users can determine the wire data type by
            calling the NmGetFieldName function with the RequestedName parameter set to NmFieldDataTypeName. The 
            NmDataTypeNameRequired must be specified as the parsing option to get the data type name after parsing.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulBufferLength">Length of the supplied buffer.</param>
            <param name="pValueBuffer">Pointer to a buffer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldInBuffer(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field value from a parsed frame. The values returned are in the same byte order as they 
            appear in the raw frame data.
            </summary> 
            <remarks>
            Only the content up to the buffer length is copied. Callers can use the NmGetFieldOffsetAndSize function to
            obtain the size before calling this function. <br/>
            This function returns fields in the order that they come over the wire. If the buffer is a byte array with a
            field offset of 10 and a length of 3, the first byte in the buffer referenced by index zero contains the 
            tenth byte in the raw frame. <br/>
            This function does not work with a container object, such as a structure or protocol. For those, use
            NmGetPartialRawFrame instead.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by NmParseFrame.</param>
            <param name="ulBufferLength">Length of the caller-provided buffer.</param>
            <param name="pFieldBuffer">Pointer to a buffer to receive raw field data.</param>
            <param name="ulReturnLength">Receives the length of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRequestedPropertyCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of properties added to the parser with the NmAddProperty function.
            </summary> 
            <remarks>
            This function returns zero unless properties have been added. <br/>
            The return value is the number of properties added to the frame parser so that the frame parser
            can be optimized not to include NPL objects independent of the added properties. A non-optimized 
            frame parser contains thousands of properties, and currently the API does not provide support for
            retrieving the total number of properties.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulCount">Count of properties added to the frame configuration.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle, wrong scope or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyInfo(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO@)">
            <summary>
            Gets the NM_PROPERTY_INFO structure for a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            If the property container type is multi-value storage or an array and the property added using NmAddProperty
            does not contain the key information, the value type and size may be unknown. Therefore, the caller may need
            to call the retrieval function, NmGetPropertyValueById or NmGetPropertyValueByName, twice. The first time,
            the buffer size needed is returned with the ERROR_INSUFFICIENT_BUFFER error. The correct buffer size can then
            be used in the second call. <br/>
            If the Name buffer provided is NULL, this function returns successfully, but the name is not returned. <br/>
            Set the Name member of the NM_PROPERTY_INFO to NULL if it is not set to a valid memory location.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser configuration.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="pInfo">NM_PROPERTY_INFO structure for this ID.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: NM_PARSED_PROPERTY_INFO version mismatch.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyById(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value of a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            The last two parameters, ulKeyCount and pKeyArray, are used to access properties that can be indexed.
            This includes multi-value storage arrays and property groups. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if
            the entire name was specified when the property was added to the frame configuration. For example, if 
            you add Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the 
            property. <br/>
            In most cases, ulKeyCount is 1, but you can add multiple keys to access properties that are defined 
            as in the following NPL example.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="ulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups.
            The C++ version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. 
            The C# version of this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyByName(System.IntPtr,System.String,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value for a property specified by name.
            </summary> 
            <remarks>
            In some cases, you can access a property by name without having added it using the NmAddProperty function.
            If an optimized frame parser is used, the property name may not be added to the frame parser and therefore
            may not be available. If you are using an optimized frame parser, add the property using NmAddProperty so 
            that you can access it by name or ID. For more information about optimizing, see NmCreateFrameParser. <br/>
            The fully qualified name must be used. <br/>
            The key type must match the type used by the parser. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if the 
            entire name was specified when the property was added to the frame configuration. For example, if you add 
            Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the property. <br/>
            Information for the size and types of keys can be obtained with the NmGetPropertyInfo function.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="pPropertyName">Fully qualified name of the property.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="pulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups. The C++
            version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. The C# version of
            this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrameLength(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the length of the raw frame.
            </summary> 
            <remarks>
            You cannot use a parsed frame handle. You must use the raw frame handle.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by the NmGetFrame function or 
            by the NM_FRAME_CALLBACK function.</param>
            <param name="pulLength">Pointer to receive the length of the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrame(System.IntPtr,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to the raw frame data returned from a capture file by the NmGetFrame function or 
            over a network from the capture engine through the NM_FRAME_CALLBACK function.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or 
            the NM_FRAME_CALLBACK terminates.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by NmGetFrame or by NM_FRAME_CALLBACK.</param>
            <param name="ulLength">Length of the provided buffer.</param>
            <param name="pFrameBuffer">Returned pointer to the raw frame data.</param>
            <param name="pulReturnLength">Size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPartialRawFrame(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to a specific piece of the raw frame data.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or
            NM_FRAME_CALLBACK terminates. The user must provide the buffer to be copied into.
            </remarks>
            <param name="hRawFrame">Handle to the raw frame object returned by the NmGetFrame function 
            or by the NM_FRAME_CALLBACK function.</param>
            <param name="ulFrameOffset">Offset in the raw frame from which to start.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="pFrameBuffer">Pointer to the user-provided buffer to receive the partial raw frame data.</param>
            <param name="pulReturnLength">Pointer to receive the size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameMacType(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the per-frame media access type.
            </summary> 
            <remarks>
            This function can be used on either a raw or a parsed frame. <br/>
            You can capture on multiple adapters. Therefore, the MAC type for each frame is recorded.
            For more information, see Capture File Format.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pulMacType">Pointer to receive the Machine Address Code (MAC) type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameTimeStamp(System.IntPtr,System.UInt64@)">
            <summary>
            Gets the absolute time stamp of a frame.
            </summary> 
            <remarks>
            This function returns the absolute time stamp, which is calculated by adding the frame offset
            to the capture file time stamp in the capture header. <br/>
            This function can be used with a raw frame or a parsed frame.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pTimeStamp">Pointer to receive the 64-bit time stamp.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCommentInfo(System.IntPtr,System.UInt32@,System.Byte*,System.UInt32@,System.Byte*)">
            <summary>
            Gets the frame comment title and description.
            </summary>
            <remarks>
            If the buffers passed in are NULL, the buffer length parameters indicate the required 
            length of the buffer needed to store the title and comment strings.
            </remarks>
            <param name="hFrame">Handle to a raw frame object.</param>
            <param name="ulCommentTitleBufferLength">Pointer to the actual byte length that corresponds to the title buffer.</param>
            <param name="pCommentTitleBuffer">Pointer to a caller-supplied buffer to hold the comment title.</param>
            <param name="ulCommentDescriptionBufferLength">Pointer to the actual byte length that corresponds to the description buffer.</param>
            <param name="pCommentDescriptionBuffer">Caller-supplied buffer to hold the comment description.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: Specified parsed frame not found. <br/>
                ERROR_INSUFFICIENT_BUFFER: If either of the supplied buffers is NULL. <br/>
                ERROR_EMPTY: Frame comment information was not found.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateCaptureFile(System.String,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag,System.IntPtr@,System.UInt32@)">
            <summary>
            Creates a new Network Monitor capture file for adding frames.
            </summary> 
            <remarks>
            If you specify a size of zero, 20 MB is used. <br/>
            If you specify a size larger than the maximum size determined by MaxCaptureFileSize, 
            the maximum size is used instead. <br/>
            If you specify a size that is less than the minimum size determined by the MinCaptureFileSize
            member of NM_API_CONFIGURATION, the minimum size is used instead. <br/>
            You can close and save the capture file by calling the NmCloseHandle function.
            </remarks>
            <param name="pFileName">String containing the path of the capture file to create.</param>
            <param name="ulSize">Maximum size of the file, in bytes. The upper limit is 500 MB. The default 
            upper limit is determined by the current configuration as determined by the NmGetApiConfiguration function.</param>
            <param name="ulFlags">Option flags for setting capture style: wraparound or chained.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <param name="ulReturnSize">Size of the capture file, in bytes.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFile(System.String,System.IntPtr@)">
            <summary>
            Opens a Network Monitor capture file for reading.
            </summary> 
            <remarks>
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFileInOrder(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER@,System.IntPtr@)">
            <summary>
            Opens a capture file and reorders packets based on the configuration defined by the 
            NmAddSequenceOrderConfig function.
            </summary> 
            <remarks>
            The frame in file are in the order of the sequence specified in the frame parser parameter
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="pOrderParser">Pointer to a NM_ORDER_PARSER_PARAMETER structure.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file. <br/>
                ERROR_INVALID_PARAMETER: frame parser does not have sequence configuration. <br/>
                ERROR_NOT_ENOUGH_MEMORY: not enough memory to build required objects. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: PNM_ORDER_PARSER_PARAMETER version does not match.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Adds a frame to the specified capture file.
            </summary> 
            <remarks>
            The capture file must be opened with NmCreateCaptureFile function. <br/>
            A raw frame can be returned by the frame indication callback or the NmBuildRawFrameFromBuffer function. <br/>
            If you add frames into a capture file and the time stamp is older than the time stamp of the last frame
            added, the newly added frame is not given the correct time stamp.
            </remarks>
            <param name="hCaptureFile">Handle to the capture file returned by the NmCreateCaptureFile function.</param>
            <param name="hFrame">Handle to raw frame to be added.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the frame count in the specified capture file.
            </summary> 
            <param name="hCaptureFile">Handle to the capture file.</param>
            <param name="hFrameCount">Pointer to receive the frame count.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrame(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Gets a raw frame from the capture file.
            </summary> 
            <remarks>
            The frame number is the index number in the capture file. The first frame starts 
            with an index of zero. <br/>
            You must free the handle returned from this call.
            </remarks>
            <param name="hCaptureFile">Handle to a capture file returned by the NmCreateCaptureFile
            or the NmOpenCaptureFile function.</param>
            <param name="ulFrameNumber">Zero-based frame number.</param>
            <param name="phFrame">Handle containing a reference to the raw frame object. You must 
            call the NmCloseHandle function to free this handle.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetTopConversation(System.IntPtr,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the top-level conversation of the parsed frame, described by the conversation protocol name 
            and conversation ID.
            </summary> 
            <remarks>
            The parsed frame must have conversation set to TRUE. <br/>
            The protocol name length is returned to caller. Therefore, if the provided buffer is not large 
            enough, the caller can call again with the correct size of buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a parsed frame object.</param>
            <param name="ulBufferESize">Size of the buffer for the protocol name, in wide characters.</param>
            <param name="pProtocolName">Pointer to the buffer for the protocol name.</param>
            <param name="pulProtocolNameLength">Length of the protocol name, in wide characters, not including the terminating pattern.</param>
            <param name="pulConversationID">ID of the top-level conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParentConversation(System.IntPtr,System.UInt32,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the parent conversation information for the specified conversation, including 
            conversation protocol name and conversation ID.
            </summary> 
            <remarks>
            The parent protocol name length is returned to caller.  So if the provided buffer is not enough, caller
            Can call again with the proper sized buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a frame parser.</param>
            <param name="ulConversationId">ID of the child conversation.</param>
            <param name="ulBufferESize">Size of the buffer for the parent conversation protocol name, in bytes.</param>
            <param name="pParentProtocolNameBuffer">Pointer to the buffer for the parent conversation protocol name.</param>
            <param name="ulParentProtocolNameLength">Returned length of the parent conversation protocol name.</param>
            <param name="ulParentConversationID">ID of the parent conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor">
            <summary>
            Represents the NETMON Wrapper. <br/>
            NOTE: You must have NetMon 3+ installed on your system in order
            to use this library.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <param name="FrameFilter">
            The string representing the Frame filter. Pass NULL for unfiltered capture. <br/>
            NOTE: NetMon 3 has a bug wherein it leaks memory when we use the Frame Filter. <i>Use
            the Frame Filter feature with extreme caution.</i>
            </param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StartCapture">
            <summary>
            Starts the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StopCapture">
            <summary>
            Stops the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CaptureCleanUp">
            <summary>
            Cleans up after the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.InitCapture">
            <summary>
            Initializes the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CreateCaptureFile">
            <summary>
            Creates the capture file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.OpenCaptureEngine">
            <summary>
            Initializes the capture engine.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ConfigureNWAdapter">
            <summary>
            Configures the network adapter for capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.FrameIndicationCallback(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback for each captured frame.
            </summary>
            <param name="hCapEng"></param>
            <param name="ulAdatIdx"></param>
            <param name="pContext"></param>
            <param name="hRawFrame"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ParserCallback(System.IntPtr,System.UInt32,System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType)">
            <summary>
            Callback for the parser engine.
            </summary>
            <param name="pCallerContext"></param>
            <param name="ulStatusCode"></param>
            <param name="lpDescription"></param>
            <param name="ulType"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.LoadFilter">
            <summary>
            Loads the specified capture filter. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing unmanaged objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the object, releasing managed and unmanaged handles.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\bin\Debug\PageLoadTimeDaemon\Test.Common.Library.NetworkMonitor3Wrapper.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkMonitor3Wrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant">
            <summary>
            Represents the Netmon API Constants.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAC_ADDRESS_SIZE">
            <summary>
            The size of the MAC Address.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAX_PATH">
            <summary>
            The maximum paths.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.NMAPI_GUID_SIZE">
            <summary>
            Size of the NetMon API GUID.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode">
            <summary>
            Represents the Netmon API return status code.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_TOO_BIG_FOR_FILE">
            <summary>
            The file doesn't have enough space to hold this frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_SMALL">
            <summary>
            Capture file size too small. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_LARGE">
            <summary>
            Capture file size too large. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary>
            The frame is corrupt. It overlaps with the next frame. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary>
            The frame is corrupt. The dimensions of the frame are not in the range of the capture file. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_ENDIAN">
            <summary>
            The data is in BigEndian and we support only Little Endian 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_PCAP_FILE">
            <summary>
            This file is not a valid PCAP file
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_PCAP_VERSION">
            <summary>
            This file is not a supported PCAP version 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_FILE_TYPE">
            <summary>
            This file type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_NETMON_CAP_FILE">
            <summary>
            This file type is not a valid Netmon capture file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_PCAP_DLT">
            <summary>
            This Pcap data link type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_API_VERSION_MISMATCHED">
            <summary>
            The current NmApi DLL is different from the required version by the application. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode">
            <summary>
            Represents the Netmon capture mode.
            </summary>
            <remarks>
            When capturing in promiscuous mode, you may not see traffic if using a switch or if the traffic occurs
            on a different segment of the network. The traffic must reach the Network Interface Controller (NIC) on which
            you are capturing. Often, network equipment, such as a switch, does not send traffic to a NIC if it is not
            directed to that NIC address.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.LocalOnly">
            <summary>
            Specifies only local traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.Promiscuous">
            <summary>
            Specifies all traffic that reaches the network adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag">
            <summary>
            Represents the Netmon capture file expansion mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.WrapAround">
            <summary>
            Creates a file that wraps around in first-in-first-out (FIFO) order.
            When the buffer is full, the oldest data is written over first.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.Chain">
            <summary>
            When the maximum file size is reached, a new file is created. If you
            have named the file Test.cap, the subsequent files are named test(1).cap,
            test(2).cap, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.LastFlag">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode">
            <summary>
            Represents the Capture callback function exit mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.DiscardRemainFrames">
            <summary>
            Remaining frames are discarded.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.ReturnRemainFrames">
            <summary>
            Remaining frames are returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState">
            <summary>
            Represents the Netmon driver adapter operational states.
            </summary> 
            <remarks>
            These states are returned by the Network Driver Interface Specification (NDIS).
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.None">
            <summary>
            Adapter is currently not bound, or some other low-level error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Bound">
            <summary>
            Adapter is bound to the Network Monitor 3 driver.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Stopped">
            <summary>
            Adapter is bound, but currently not capturing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Capturing">
            <summary>
            Adapter is currently capturing network traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Paused">
            <summary>
            Adapter is currently paused.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType">
            <summary>
            Represents the Status levels of the call back message.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.None">
            <summary>
            Placeholder. This value is never returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Error">
            <summary>
            The parser engine has returned an error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Warning">
            <summary>
            The parser engine has returned a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Information">
            <summary>
            The parser engine has returned an information message. At least
            one of these is returned when calling the NmLoadNplParser function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Last">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption">
            <summary>
            Represents the NPL loading option.
            </summary> 
            <remarks>
            By default the NmLoadNplOptionNone is used.  Only the user specified NPL path(s) are loaded.
            If both NmAppendRegisteredNplSets and a NPL path are specified, the resulting NPL parser will include
            Both and the specified NPL path(s) are prefixed.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmLoadNplOptionNone">
            <summary>
            Specifies that only the user-specified NPL path(s) are loaded. This is the default value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmAppendRegisteredNplSets">
            <summary>
            If both this parameter and an NPL path are specified, the resulting NPL parser will
            include both, and the specified NPL path(s) are prefixed.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption">
            <summary>
            Represents the Frame parser optimization options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeNone">
            <summary>
            Specifies creating a frame parser without optimization, according to the added filter. This is the default setting.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeFull">
            <summary>
            Specifies creating an optimized frame parser, based on added filters, fields, and properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeLast">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption">
            <summary>
            Represents the Frame parser parsing options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.None">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldFullNameRequired">
            <summary>
            Return the full field name with the NmGetParsedFieldInfo
            function, such as TCP.Flags.Reset. Turning this on degrades performance.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ContainingProtocolNameRequired">
            <summary>
            Return the containing protocol with NmGetParsedField.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.DataTypeNameRequired">
            <summary>
            Return the data type name, for example, MACAddress when querying for Ethernet.SourceAddress.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.UseFrameNumberParameter">
            <summary>
            Use the caller-specified frame number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldDisplayStringRequired">
            <summary>
            Provide the display string of the field.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FrameConversationInfoRequired">
            <summary>
            Provide frame conversation information.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ParsingOptionLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType">
            <summary>
            Represents the Fragmentation types returned in parsed frames.
            </summary>
            <remarks>
            When reassembly is performed, the engine signals frames as being first, middle, or last.
            You can use this information to determine whether a frame is fragmented. When this occurs,
            you can wait for the last frame marked as NmFragmentTypeEnd, and then use the handle to
            the inserted frame that is returned by the NmParseFrame function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.None">
            <summary>
            This is not part of a fragmented frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Start">
            <summary>
            This is the first frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Middle">
            <summary>
            This is a frame in the middle of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.End">
            <summary>
            This is the last frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames">
            <summary>
            Represents the name string properties in parsed field.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.NamePath">
            <summary>
            Field name path is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.DataTypeName">
            <summary>
            Data type name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.ContainingProtocolName">
            <summary>
            Containing protocol name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.FieldDisplayString">
            <summary>
            Formatted display string is returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType">
            <summary>
            Represents the Key types of the multi storage property.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNone">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNumber">
            <summary>
            Specifies that the key is a number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeString">
            <summary>
            Specifies that the key is a string.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeByteArray">
            <summary>
            Specifies that the key is a byte array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeArrayIndex">
            <summary>
            Specifies that the key is the index of a multivalue storage array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope">
            <summary>
            Represents the Scopes of properties. It is reported in the property info.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeNone">
            <summary>
            Specifies no scope.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeConversation">
            <summary>
            Specifies that the property applies to the network conversation.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeGlobal">
            <summary>
            Specifies that the property is global.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeFrame">
            <summary>
            Specifies that the property applies to the frame. This is the default.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType">
            <summary>
            Represents the property aggregation form, i.e., MVS with key, Array with index, etc.
            </summary> 
            <remarks>
            NmPropertyContainerTypeArray is the regular form if there is only one element.
            The NmGetPropertyInfo function may return container type NmPropertyContainerTypeValue if
            the key is not specified in the NmAddProperty function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerNone">
            <summary>
            Specifies that there is no property type.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerValue">
            <summary>
            Specifies that the regular form is a single value of
            NmPropertyValueType that can be referenced by just the property name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerMvs">
            <summary>
            Specifies that the multi-value storage set of properties share the
            same name, but have different keys.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerArray">
            <summary>
            Specifies a set of properties that are stored in an array and retrieved by name and index.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType">
            <summary>
            Represents the type of the property value.
            </summary> 
            <remarks>
            The value types of properties in the same multi-value storage can be different
            if they are referenced by different keys. The value types of properties in the 
            same property group can also be different if they are referenced by different indexes.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueNone">
            <summary>
            Specifies no data type for the property value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueSignedNumber">
            <summary>
            Specifies that the property value is a signed integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueUnsignedNumber">
            <summary>
            Specifies that the property value is an unsigned integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueString">
            <summary>
            Specifies that the property value is a string in wide character format.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueByteBlob">
            <summary>
            Specifies that the property value is a binary large object (BLOB) presented as a byte array.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey">
            <summary>
            Represents information on the key for retrieving multi-value storage properties.
            The array in this structure is used as a parameter of to the NmGetPropertyValueById
            and the NmGetPropertyValueByName functions.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Type">
            <summary>
            Type of key to return. Possible values are declared in the NmMvsKeyType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Length">
            <summary>
            User-supplied length of the key.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.ValuePointer">
            <summary>
            Marshaled pointer to the key value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetStringKey(System.String)">
            <summary>
            Sets the key to a string value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetNumberKey(System.Int64)">
            <summary>
            Sets the key to a number value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetIndexKey(System.Int64)">
            <summary>
            Sets the key to an array index.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetByteArrayKey(System.Byte[],System.Int32)">
            <summary>
            Sets the key to a buffer value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO">
            <summary>
            Contains runtime information for instantiated properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Size">
            <summary>
            Specifies the size of the property for version control.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Scope">
            <summary>
            Specifies the property scope, one of the elements of the NmPropertyScope enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ContainerType">
            <summary>
            Specifies the property container type, one of the elements of the NmPropertyContainerType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.NameSize">
            <summary>
            Specifies the element count of the name, excluding the terminator. When the name buffer is provided,
            this member is used for both input and output parameters. This member acts as an input parameter
            specifying the buffer length. The actual length of the name is also returned by the NmGetPropertyInfo
            function. When no name buffer is provided (the Name parameter is NULL), this member is used only as output.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Name">
            <summary>
            Property name string added by the NmAddProperty function. If a buffer is assigned when calling NmGetPropertyInfo,
            the NameSize member must specify the buffer length, in number of elements. NmGetPropertyInfo returns the
            property name in the buffer if the buffer has enough space. Otherwise, a buffer overflow error is returned.
            Set this member to NULL if you do not need a name returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueType">
            <summary>
            Specifies the data type of the property value, one of the elements of the NmPropertyValueType enumeration.
            If the value type is string, the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueSize">
            <summary>
            Specifies the size, in byte count, of the value for which the caller must provide a buffer. If ValueType
            is set to String, this member is in WCHAR, and the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ItemCount">
            <summary>
            Specifies the number of items in the array. Regular and multi-value storage properties have only one item.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo">
            <summary>
            Represents the fragmentation information returned in parsed frames.
            </summary> 
            <remarks>
            A frame is either non-fragmented or fragmented. A fragmented frame can be a start fragment,
            a middle fragment, or an end fragment. The carrier protocol of the fragment and the
            fragmented protocol information is included, if available.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.Size">
            <summary>
            Size of the structure to be initialized by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentedProtocolName">
            <summary>
            Name of the protocol that has fragmented the payload, such as IPv4, which breaks payloads
            into smaller segments for networks with smaller frame size.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.PayloadProtocolName">
            <summary>
            Name of the protocol to which the fragments belong. For example, HTTP may be the payload of TCP.
            Multiple TCP packets make up one HTTP page. Although TCP is a byte-stream transport, Network
            Monitor currently manipulates TCP at the frame level for simplicity.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentType">
            <summary>
            Type of fragment as defined by the NmFrameFragmentationType enumeration.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate">
            <summary>
            Callback function for frame receiving/retrieving.
            </summary>
            <param name="hCaptureEngine">Handle to the capture engine object responsible for this callback returned by
            the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter on which this frame was captured. Within the range from
            zero to the value returned by the NmGetAdapterCount function.</param>
            <param name="pCallerContext">Pointer to the object that was passed in to NmConfigAdapter. For example,
            a capture file handle can be passed in so that the raw frame received can be saved.</param>
            <param name="hFrame">Handle to the raw captured frame. You do not need to free this handle.</param>
            <remarks>
            This callback is called after the capture engine has stored the frame within the buffer on the computer 
            hard drive. Any heavy processing within the callback may cause a loss of network frames if the buffer
            grows beyond the capacity of the drive or the set capture file limit or quota.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption">
            <summary>
            Represents the Frame parser conversation configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.None">
            <summary>
            There are currently no conversation options. Always set this to NmConversationOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption">
            <summary>
            Represents the frame parser reassembly configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.None">
            <summary>
            Currently, there are no reassembly options. Always set this to NmReassemblyOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate">
            <summary>
            Callback function for parser compile/build process.
            </summary>
            <param name="pCallerContext">User-defined context to send to parser message callback.</param>
            <param name="ulStatusCode">Status code of the message.</param>
            <param name="lpDescription">Text description of the message.</param>
            <param name="ulType">Type of error message as described by the NmCallbackMsgType enumeration.</param>
            <remarks>
            The same callback can be used for loading the NmLoadNplParser and NmCreateFrameParserConfiguration functions.
            When loading the Network Monitor Parsing Language (NPL), you receive errors, warnings, and status messages.
            Since a status message is sent even for a successful load or build, you will be called at least one. When
            creating the frame parser, you will be called with error callbacks in the parser and when errors are flagged.
            For example, when a frame is not parsed and there is extra data, an error is often flagged by the parser.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO">
            <summary>
            Contains adapter or interface information as returned by the NmGetAdapter function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Size">
            <summary>
            Size of structure that is set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PermanentAddr">
            <summary>
            Hardware address of the Network Interface Controller (NIC).
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CurrentAddr">
            <summary>
            Driver-defined hardware address. Not all drivers support this.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.MediaType">
            <summary>
            Network Driver Interface Specification (NDIS) NdisMediumXXX type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PhysicalMediaType">
            <summary>
            Physical medium type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.ConnectionName">
            <summary>
            Internal name of the connection. This is often blank.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.FriendlyName">
            <summary>
            Friendly name of the interface for this adapter. This is the description that appears in ipconfig.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Guid">
            <summary>
            Interface GUID of the adapter.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.OpState">
            <summary>
            Operation state. For more information, see the NmAdapterOpState enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Enabled">
            <summary>
            Whether the adapter is enabled.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PModeEnabled">
            <summary>
            Whether the adapter allows for promiscuous mode sniffing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CallBackFunction">
            <summary>
            Callback function provided when you configured the adapter with the NmConfigAdapter function.
            The callback function is called by the capture engine to deliver raw frames captured on the adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION">
            <summary>
            Contains parser configuration information. It is used to retrieve current configuration
            or set user-specified configuration.
            </summary>
            <remarks>
            Use the NmApiInitialize and the NmGetApiConfiguration functions to set and retrieve this structure.
            NmAPIInitialize changes the default configuration parameters defined in the this structure.
            The values specified in the structure as parameters passed in to NmAPIInitialize overwrite the default
            values. Therefore, it is recommended that you first get the configuration, and then change the values
            as desired before calling NmAPIInitialize with an alternate configuration.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.Size">
            <summary>
            Size of the structure to be set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.RawFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for raw frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ParsedFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for parsed frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureEngineCountLimit">
            <summary>
            Maximum number of handles available for capture engines. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.NplParserCountLimit">
            <summary>
            Maximum number of handles available for Network Monitor Parsing Language (NPL)
            parser sets. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserConfigCountLimit">
            <summary>
            Maximum number of handles available for frame parser configurations.
            Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserCountLimit">
            <summary>
            Maximum number of handles available for frame parsers. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileCountLimit">
            <summary>
            Maximum number of handles available for capture files. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ThreadingMode">
            <summary>
            Threading mode. Possible values are COINIT_MULTITHREADED (0) and
            COINIT_APARTMENTTHREADED (2). Default value is COINIT_APARTMENTTHREADED.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ConversationOption">
            <summary>
            Not currently used. See NmConversationConfigOption for information on conversation flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ReassemblyOption">
            <summary>
            Not currently used. See NmReassemblyConfigOption for information on reassembly flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileMode">
            <summary>
            Override default capture file options. Default value is CaptureFileWrapAround. See
            NmCaptureFileMode for information on capture flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParsingOption">
            <summary>
            Override default parsing options. No longer used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureCallbackExitMode">
            <summary>
            Stop capture exit mode. Possible values are elements in the NmCaptureCallbackExitMode
            enumeration. The default value is NmDiscardRemainFrames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxCaptureFileSize">
            <summary>
            Maximum size for a capture file. This is used when the NmCreateCaptureFile function is called.
            The value is 500 MB. This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MinCaptureFileSize">
            <summary>
            Minimum size for a capture file. This is used when NmCreateCaptureFile is called. The value is 2072 bytes.
            This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxApiHandleLimit">
            <summary>
            Maximum number of handles per handle type. Default value is 65,536. It is read-only.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG">
            <summary>
            Defines how a protocol defines ordering of packets.
            </summary>
            <remarks>
            A caller using this structure must initialize the size before calling NmAddSequenceOrderConfig.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.Size">
            <summary>
            This member must match the size of the version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.GroupKeyString">
            <summary>
            Names of the properties containing the values to form the key to identify the group
            of the frames to put in order. If multiple properties are used, they are separated by
            semicolons. The string must be NULL-terminated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.SequencePropertyString">
            <summary>
            Name of the property containing the frame's sequence number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.NextSequencePropertyString">
            <summary>
            Name of the property containing the frame's next sequence number.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER">
            <summary>
            Structure for calling NmOpCaptureFileInOrder to provide the parser built with sequence
            control information to correct potential out-of-order frames in the capture file to be opened.
            It also contains an option flag for future extension.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Size">
            <summary>
            This member must match the size of the current version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.hFrameParser">
            <summary>
            Frame parser used for handling out-of-order frames. It must be built from a frame parser
            configuration that has sequence information specified by the NM_PROTOCOL_SEQUENCE_CONFIG structure.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Option">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM">
            <summary>
            Represents the Network Medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Fddi">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Wan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_LocalTalk">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Dix">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_ArcnetRaw">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Arcnet878_2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Atm">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Bpc">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_CoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_InfiniBand">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Tunnel">
            <summary>
            #if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Loopback">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.NdisMediumMax">
            <summary>
            #endif // (NTDDI_VERSION >= NTDDI_VISTA)
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM">
            <summary>
            Represents the Network Physical medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessLan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_CableModem">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PhoneLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PowerLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_DSL">
            <summary>
            includes ADSL and UADSL (G.Lite)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_FibreChannel">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Bluetooth">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Infiniband">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiMax">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_UWB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredWAN">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredCoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Other">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType">
            <summary>
            Numerical Definitions of Variant Types. <br/>
            http://www.marin.clara.net/COM/variant_type_definitions.htm
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_EMPTY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_NULL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DATE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DISPATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ERROR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VARIANT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UNKNOWN">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_INT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UINT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VOID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_HRESULT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_PTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_SAFEARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_USERDEFINED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPWSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_FILETIME">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAM">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORAGE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAMED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CLSID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VECTOR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BYREF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_RESERVED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGALMASKED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_TYPEMASK">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo">
            <summary>
            Contains information about the data field, such as field offset, field length, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.Size">
            <summary>
            Caller-provided size of the structure being sent. Should be initialized by the user.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldIndent">
            <summary>
            Indent of data field. For example, top-level fields have an indent of zero,
            but Tcp.flags.reset has an indent of 2.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NamePathLength">
            <summary>
            Length in elements of the name path. Since this is returned as a WCHAR, you must
            multiply it by sizeof(WCHAR). This does not include a NULL, which is added by the
            NmGetFieldName function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NplDataTypeNameLength">
            <summary>
            Length in elements of the data type. Since this is returned as a WCHAR, you must
            multiply by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolNameLength">
            <summary>
            Length in elements of the protocol name. Since this is returned as a WCHAR, you must multiply
            by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.DisplayStringLength">
            <summary>
            Length of the Display String.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolBitOffset">
            <summary>
            Offset from the beginning of the protocol, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FrameBitOffset">
            <summary>
            Frame offset of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldBitLength">
            <summary>
            Size of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueType">
            <summary>
            Variant type of the value, as defined by VARENUM.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueBufferLength">
            <summary>
            Size of the buffer required to hold the field value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI">
            <summary>
            PInvoke wrapper of Netmon API.
                - managed/unmanaged data type mapping: http://msdn2.microsoft.com/en-us/library/ac7ay120.aspx
                - the declaration in this class are strongly tied to nmapi.h
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiVersion(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Retrieves the current major and minor version numbers of the API.
            </summary> 
            <remarks>
            The API version matches netmon engine version.
            </remarks>
            <example>
            <code>
                UInt16 majorNumber = 0;
                UInt16 minorNumber = 0;
                UInt16 BuildNumber = 0;
                UInt16 RevisionNumber = 0;
                NmGetApiVersion(out majorNumber, out minorNumber, out BuildNumber, out RevisionNumber);
            </code>
            </example>
            <param name="Major">Major version number.</param>
            <param name="Minor">Minor version number.</param>
            <param name="Build">Build number.</param>
            <param name="Revision">Revision number.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiConfiguration(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Gets the current API configuration parameters.
            </summary> 
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Struct object for API to fill.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiInitialize(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Overrides the default API configuration.
            </summary> 
            <remarks>
            Caller needs to provide storage for NmApiConfiguration struct.
            </remarks>
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
               apiConfig.ThreadingMode = 0;
               status = NetmonAPI.NmApiInitialize(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Caller specified API configuration parameter struct.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different. <br/>
                ERROR_INVALID_STATE: Can not change API configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiClose">
            <summary>
            Closes down the API after finishing all work. It releases all the objects referenced by handles.
            On Windows XP and Windows Server 2003, it also detaches from the driver DLL.
            </summary>
            <remarks>
            Should be called when done with the API.
            </remarks>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCloseHandle(System.IntPtr)">
            <summary>
            Release the reference to the object by handle.</summary> 
            <remarks>
            Callers need to close all the object handles returned from API after finish using them.
            </remarks>
            <param name="hObjectHandle">Handle to the object to release </param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureEngine(System.IntPtr@)">
            <summary>
            Initializes the engine for live data capture.
            </summary> 
            <param name="phCaptureEngine">Handle to the capture engine object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_INVALID_STATE:     The operation is not available. <br/>
                ERROR_ENOUGH_MEMORY: Fail to allocate memory for the object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of network interfaces currently accessible to the API.
            </summary> 
            <remarks>
            The count returned may be zero if no adapters are registered on the computer or the current user
            is not a member of the Netmon Users security group. It is required to be a member of this group
            in order to capture on Windows Vista and above. New users to the group may be required to log on
            again to gain capture privileges unless they run as an administrator.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulCount">Pointer to the returned adapter count value. If zero, no adapters are available.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO@)">
            <summary>
            Gets available information about a specific network adapter.
            </summary> 
            <remarks>
            Caller can use name, GUID etc. to select adapter to use.  The adapter index should be within the 
            Range returned by NmGetAdapterCount method.  Caller needs to provide the storage of the
            NmNicAdapterInfo struct.
            The fix sized name buffers in the NM_NIC_ADAPTER_INFO structure are marshal to System.char[]. 
            Use String nameStr = new String("e.g., whateverDefinedStructName.ConnectionName") to translate the
            char array to a string object.
            </remarks>
            <example>
            <code>
               IntPtr hCaptureEngine = HandleReturnedByNmOpenCaptureEngine;
               UInt32 ulIndex = 0;
               NM_NIC_ADAPTER_INFO adapterInfo = new NM_NIC_ADAPTER_INFO();
               adapterInfo.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(adapterInfo);
               uint status = NetmonAPI.NmGetAdapter(hCaptureEngine, ulIndex, ref adapterInfo);
               String nameStr = new String(adapterInfo.ConnectionName);
            </code>
            </example>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="pNMAdapterInfo">Pointer to a NM_NIC_ADAPTER_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_NIC_ADAPTER_INFO struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate,System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode)">
            <summary>
            Configure the adapter with the frame indication callback and the caller context.
            </summary> 
            <remarks>
            The current callback function and context will overwrite the previous ones.  The adapter index number
            Must be in the range returned from NmGetAdapterCount method.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter. The range is from zero to value returned by the NmGetAdapterCount function.</param>
            <param name="CallbackFunction">Pointer to the callback function to receive live network data frames.
            See the NM_FRAME_CALLBACK function for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer that passes extra information to the network frame callback function.</param>
            <param name="ExitMode">Specifies whether to discard or process remaining frames after the capture engine stops.
            See NmCaptureCallbackExitMode for possible values. The default value is NmDiscardRemainFrames.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStartCapture(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode)">
            <summary>
            Starts capturing live data on an existing capture engine and network adapter.
            </summary> 
            <remarks>
            Capture mode can be PMODE and LocalOnly.
            Frame callbacks are made to the NM_FRAME_CALLBACK function registered to the adapter interface
            using the adapter index and the NmConfigAdapter function.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="CaptureMode">Capture mode. See the NmAdapterCaptureMode enumeration.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmPauseCapture(System.IntPtr,System.UInt32)">
            <summary>
            Pauses the capture engine.
            </summary> 
            <remarks>
            This function and the NmResumeCapture function have less overhead than the NmStartCapture and the NmStopCapture functions,
            since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames which enter the buffer. Therefore, there may be frames returned 
            to your callback while the buffer is being cleared. By default, after pausing or stopping a capture, 
            the NM_FRAME_CALLBACK function registered with the NmConfigAdapter function should not be called again. <br/>
            No new frames coming in on the wire are added to the buffer or receive callbacks. To continue receiving callbacks while
            frames remain in the driver buffer, set the CaptureCallbackExitMode parameter of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not pause at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmResumeCapture(System.IntPtr,System.UInt32)">
            <summary>
            resumes a capture that was previously paused by the NmPauseCapture function.
            </summary> 
            <remarks>
            Cannot resume after NmStopCapture is called.  The frame indication callback is no longer invoked 
            until NmResumeCapture method is called. <br/>
            Using the NmPauseCapture function and this function has less overhead than the NmStartCapture and the NmStopCapture
            functions, since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames that enter the buffer. Therefore, there may be frames returned
            to your callback while the buffer is being cleared. <br/>
            By default, after pausing or stopping a capture, NM_FRAME_CALLBACK registered with the NmConfigAdapter function
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode parameter
            of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">[in] The handle to the target capture engine</param>
            <param name="ulAdapterIndex">[in] The index number of the target adapter</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/> 
                ERROR_INVALID_STATE: Can not resume at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStopCapture(System.IntPtr,System.UInt32)">
            <summary>
            Stops capturing data to the driver buffer on the specified capture engine and adapter.
            </summary> 
            <remarks>
            Frames may be received after the capture engine is stopped, but no new frames enter the buffer. <br/>
            By default, any frames that remain in the driver buffer are discarded, and no new callbacks are received by 
            the calling application. <br/>
            If the NmReturnRemainFrames flag is set in the NmConfigAdapter function, the call to this function blocks 
            until the last frame is processed. This ensures that the callback function is never invoked after the call
            to this function returns. If the callback enters an infinite loop, this call never returns. <br/>
            When you pause a capture for a brief time period, use the NmPauseCapture and the NmResumeCapture functions
            instead. These have less overhead than the NmStartCapture function and this function, since they do not free
            all the internal objects used to attach to the interface and tracing. <br/>
            By default, after pausing or stopping a capture, the NM_FRAME_CALLBACK function registered with NmConfigAdapter
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode
            parameter of NmConfigAdapter to NmReturnRemainFrames.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not stop at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmLoadNplParser(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Loads the Network Monitor Parsing Language (NPL) parser set for a parser configuration.
            </summary> 
            <remarks>
            A callback function is invoked to compile error and warning information. Even on a successful load,
            there is at least one information message stating that Sparser.npb has been successfully loaded. <br/>
            When you set the pFileName parameter to NULL and the NmAppendRegisteredNplSets option is set, the function
            automatically loads the path used by the UI.
            </remarks>
            <param name="pFileName">Full path of the parser file, normally Sparser.npl. If set to NULL, the path specified
            on the Parsers tab is used (on the Tools menu, click Options, then click Parsers). If no path is specified, 
            Network Monitor searches for a local instance of Sparser.npl.</param>
            <param name="ulFlags">Option flags. Currently, the following flag is supported: NmNplParserLoadingOption. Possible
            values are NmLoadNplOptionNone and NmAppendRegisteredNplSets. The default value is NmLoadNplOptionNone.</param>
            <param name="CallbackFunction">Pointer to a function to receive warnings, errors, or messages from the parser
            engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer to pass extra information to the NPL engine message callback.
            For example, this could be a handle to a dialog box to receive the messages.</param>
            <param name="phNplParser">Handle to the NPL parser object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create NPL parser object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParserConfiguration(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a frame parser configuration to configure filters and fields.
            </summary> 
            <remarks>
            All the frame parser features, including conversation and reassembly, must be added in the configuration before
            creating the frame parser. The callback for this function provides errors that occur when loading a trace, such 
            as parsing errors and errors flagged in the NPL. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hNplParser">Handle to the Network Monitor Parsing Language (NPL) parser object returned by
            the NmLoadNplParser function.</param>
            <param name="CallbackFunction">Pointer to the function to receive warnings, errors, or messages from the
            parser engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer used to pass extra information to the NPL engine message
            callback function.</param>
            <param name="phFrameParserConfiguration">Handle to the frame parser configuration object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create frame parser configuration object. <br/>
                ERROR_NOT_FOUND: not found specified NPL parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFilter(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a filter to the parser configuration that can be evaluated on a frame basis.
            </summary> 
            <remarks>
            The filter ID is used to evaluate the state of the filter on a parsed frame when you call the NmEvaluateFilter
            function with a parsed frame. The filter string can be any valid filter that the UI accepts. This includes 
            properties and conversation variables. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the frame parser configuration engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFilterString">Filter string using all the elements available to the UI.</param>
            <param name="ulFilterId">Returned filter index in the frame parser for this filter.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddField(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a field to the frame parser configuration and optimizes its access.
            </summary> 
            <remarks>
            All the fields are enumerated in the parsed frame if no field is added. The field ID is used to retrieve the field in 
            the parsed frame when calling the NmGetXXX functions, such as NmGetFieldValueByteArray. The caller must provide a 
            unique fully qualified field name, for example, TCP.Option.Ack. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFieldString">Fully qualified path to the field.</param>
            <param name="ulFieldId">Returned field index in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddProperty(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a property to a configuration.
            </summary> 
            <remarks>
            The property ID is used to retrieve the property value specified by the fully qualified property name starting 
            with the scope name: Global, Conversation, or Frame. <br/>
            To retrieve the property value, use the NmGetPropertyValueById function. <br/>
            If a property is not added to a frame parser configuration when the frame parser is created with optimization
            enabled, the property may not be available because it may not qualify with optimization.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to a frame parser configuration.</param>
            <param name="pPropertyString">Pointer to the fully qualified name of a property. The name must have a scope
            prefix to indicate whether it is global or applies to a conversation or frame, for example Global.PropertyName,
            Conversation.PropertyName, or Frame.PropertyName. The default scope is frame. For options, see the 
            NmPropertyScope enumeration.</param>
            <param name="ulPropertyId">Pointer to the property ID.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INVALID_PARAMETER: The specified property name is invalid.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddSequenceOrderConfig(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG@,System.UInt32@)">
            <summary>
            Adds protocol sequence order configurations. 
            </summary> 
            <remarks>
            This function is used in conjunction with NmOpenCaptureFileInOrder. Once you define how to order frames using this 
            call, a capture file opened rearranges the frames so that they are loaded in order. <br/>
            This function adds a filter to the parser configuration, in addition to other changes. Therefore, the return value
            of the NmGetFilterCount function is incremented by 1. <br/>
            When using this function, the engine is optimized so you cannot read other data fields. If you need to process the
            data in order, write the results to another capture file or use a different parser to get the data fields that you
            need to read. 
            </remarks>
            <param name="hFrameParserConfiguration">Frame parser configuration returned from the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="SeqConfig">Pointer to a sequence structure defined by the NM_PROTOCOL_SEQUENCE_CONFIG structure.</param>
            <param name="ulConfigId">The configuration in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_ENOUGH_MEMORY: Fail to allocate memory to store the configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigReassembly(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption,System.Boolean)">
            <summary>
            Enables reassembly for a specified protocol.
            </summary> 
            <remarks>
            Each protocol can provide a way to reassemble its payload. This is dependent on the Network Monitor Parsing Language (NPL)
            for the protocol. <br/>
            Currently, there are no reassembly options. You can leave this value as zero. <br/>
            When you enable reassembly, conversations are also enabled by default because reassembly is dependent on conversations.
            When you disable reassembly, conversations are not affected. <br/>
            Reassembly is disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Reassembly options. Currently there are none. Set this value to NmReassemblyOptionNone.</param>
            <param name="bEnable">Action to take: enable or disable reassembly for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigConversation(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption,System.Boolean)">
            <summary>
            Configures conversation options.</summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            When you enable conversations, only conversations are enabled. However, when you disable conversations, reassembly is
            also disabled. <br/>
            This function must be called on the frame parser configuration to get the global and conversation properties. <br/>
            You must enable conversations in a parser configuration before you add conversation variables or filters. Otherwise,
            the engine is not initialized properly and the added filters or properties that rely on conversations do not work. <br/>
            Conversations are disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the target frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Conversation options. Currently there are none. Set this value to NmConversationOptionNone.</param>
            <param name="bEnable">Flag to enable conversations for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParser(System.IntPtr,System.IntPtr@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption)">
            <summary>
            Creates a frame parser with a specified parser configuration.
            </summary> 
            <remarks>
            With a handle to the frame parser, you can parse a raw frame with the NmParseFrame function. <br/>
            A frame parser object should be used to parse only data considered to be part of the same capture stream. A frame
            parser keeps state information, so mixing trace data from multiple unrelated capture files causes undesired results.
            However, using multiple frame parsers for the same data is supported. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            OptimizeOption explicitly specifies whether the frame parser created should be optimized. The optimization occurs 
            when filters, fields, or properties are added and provides better parsing performance. Once the frame parser is
            optimized, trying to access additional fields or properties other than those specifically added to the parser with
            NmAddField, NmAddFilter, or NmAddProperty produces no results. If it is not known what is needed in advance, it is best
            to leave the parser unoptimized. <br/>
            The NmGetFieldOffsetAndSize function also depends on optimization being set to NULL. Otherwise, zero is returned for
            both size and offset.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the capture engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="phParser">Handle to the frame parser object.</param>
            <param name="OptimizeOption">Specifies the optimization setting for the frame parser to be generated. The default setting
            is NmParserOptimizeNone.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigStartDataType(System.IntPtr,System.String)">
            <summary>
            Sets the starting data type for use with the NmParseBuffer function.</summary> 
            <remarks>
            This function is used in conjunction with the NmParseBuffer function. It is useful for parsing a partial payload.
            For example, if you have a TCP payload, you can set the parse type to HTTP to try to parse this data as an HTTP header.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="StartDataTypeName">Pointer to the string that represents the starting data type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetStartDataType(System.IntPtr,System.UInt32,System.Char*)">
            <summary>
            Determines the current start data type for the NmParseBuffer function.
            </summary> 
            <remarks>
            Unless changed, this function returns the default data type Frame. You can change the default data type for partial
            frame parsing with the NmConfigStartDataType function.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="ulBufferLength">Length of the user-provided buffer for the data type name.</param>
            <param name="pBuffer">The name of the data type that the created frame parser starts with</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INSUFFICIENT_BUFFER: The given start type name is longer than 260 characters.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseFrame(System.IntPtr,System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@,System.IntPtr@)">
            <summary>
            parses a raw frame and returns it as an object that can be used to retrieve information about that parsed frame. 
            </summary> 
            <remarks>
            The parsed frame contains the frame information, filter state, and data field information. When reassembly is enabled,
            the last fragment of the payload completing the reassembled frames is processed, and the inserted frame appears 
            as a reassembled raw frame. If there is no reassembled frame, INVALID_HANDLE_VALUE is returned. <br/>
            You must parse the frames in one capture file sequentially to make the state correct. You may have to parse frames
            0 through n-1 to be able to parse frame n correctly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser object created by the NmCreateFrameParser function to parse the 
            specified raw frame object.</param>
            <param name="hRawFrame">Raw frame returned by the NM_FRAME_CALLBACK or the NmGetFrame function.</param>
            <param name="ulFrameNumber">Frame number to assign to the new frame.</param>
            <param name="Options">One of the options defined in the NmFrameParsingOption enumeration.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame.</param>
            <param name="phInsertedRawFrame">Handle containing a reference to the inserted raw frame, if there is one.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseBuffer(System.IntPtr,System.Byte[],System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@)">
            <summary>
            Parses partial frame information or a user-supplied buffer.
            </summary> 
            <remarks>
            The data buffer contains the byte array that can be a raw frame, part of a raw frame, or any specified data. The parsed frame contains
            the parsed frame information. The filter state and enumeration of fields are supported. Intra-frame reassembly is not supported since it
            requires multiple frames and conversations that are not available in this buffered mode. <br/>
            Use the NmConfigStartDataType function to specify where to start parsing. For example, if your buffer contains only HTTP data, configure
            the start data type as HTTP, and the parser will start at that level. Be aware, however, that parsers sometimes have dependencies on 
            lower-layer protocols and conversations.
            </remarks>
            <param name="hParser">Handle to the frame parser object returned by the NmCreateFrameParser function.</param>
            <param name="DataBuffer">Pointer to the desired buffer for the parsed data.</param>
            <param name="ulBufferLength">Length of the provided buffer.</param>
            <param name="ulFrameNumber">The frame number should be used in parsing process if enabled by option flag.</param>
            <param name="Options">Options for parsing as defined by the NmFrameParsingOption function.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmBuildRawFrameFromBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt64,System.IntPtr@)">
            <summary>
            Builds a raw frame from a user-provided buffer.
            </summary> 
            <remarks>
            The data buffer is transformed into a raw frame object so that you can enter a contrived frame into a capture file. The media type and
            time stamp are optional and can be set to zero. <br/>
            The media type is defined per frame with Network Monitor 3 capture files. See Frame Layout. These values are used to determine the type
            of network on which a capture occurs. Frame.npl then uses this value to determine how to initially parse a frame. You can look at 
            Frame.npl to determine the valid types. You can also create your own types, but you must modify Frame.npl or auto-register your custom
            parser so that your new media type is handled.
            </remarks>
            <param name="DataBuffer">User-provided data buffer to be converted into a raw frame.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="ulMedia">Optional media type of the new raw frame. See Frame.npl for available media types. The default value is zero.
            For more information, see Frame Layout.</param>
            <param name="ullTimeStamp">Optional time stamp of the new raw frame. The default value is zero.</param>
            <param name="phRawFrame">Handle to the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: No space to build the new frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameFragmentInfo(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo@)">
            <summary>
            Gets the fragment information for the specified parsed frame.
            </summary> 
            <remarks>
            When receiving frames, you may want to determine whether fragmentation is occurring so that you can discard all 
            previous frames and focus on the reassembled frame that appears with the last fragment. <br/>
            You cannot determine the fragment type of a raw frame. Only after you parse a frame can you determine whether
            it is reassembled.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="FragmentationInfo">Pointer to an NM_FRAGMENTATION_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame. <br/>
                ERROR_INSUFFICIENT_BUFFER: If the protocol name length is longer than the buffer in PNmReassemblyInfo struct.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFilterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of filters that have been added to a frame parser configuration.
            </summary> 
            <remarks>
            If you add two filters, this function returns 2. <br/>
            The NmAddSequenceOrderConfig function adds a filter to the parser configuration, in addition to other changes.
            Therefore, the return value of this function is incremented by 1. Therefore, the count is 1 greater if you use
            the NmOpenCaptureFileInOrder function.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser returned by the NmCreateFrameParser function.</param>
            <param name="ulFilterCount">Number of filters available in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmEvaluateFilter(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Evaluates a filter that you added with the NmAddFilter function with the current parsed frame. 
            </summary> 
            <remarks>
            The PassFilter value is set to TRUE if the parsed frame passes the specified filter. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to 
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFilterId">Field ID returned by the NmAddFilter function.</param>
            <param name="bPassFilter">Pointer to BOOLEAN variable to contain the results of the test.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of fields enumerated in the specified parsed frame.
            </summary> 
            <remarks>
            The number of fields returned is dependent on whether or not you call the NmAddField function. If you added five 
            fields, for example, this function returns 5. However, if you do not add any fields, this function returns the
            total number of fields in the currently parsed frame. You can iterate through fields if you do not have a specific
            one that you are looking for. However, there is a performance price incurred, and it takes longer to parse every
            field. Therefore, if you know which fields you want, you get better performance by adding the fields explicitly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting 
            frames for parsing to work properly. <br/>
            This function returns the total number of fields, regardless of whether any have been added. However, the 
            NmGetRequestedPropertyCount function returns zero if no properties have been added.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldCount">Number of fields returned in the parsed frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParsedFieldInfo(System.IntPtr,System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo@)">
            <summary>
            Gets a NM_PARSED_FIELD_INFO structure that contains information such as the offset and bit length of
            the requested data field.
            </summary> 
            <remarks>
            The pointer to field is valid until the parsed frame containing the field is closed.
            </remarks>
            <example>
            <code>
                NmParsedFieldInfo parsedDataField = new NmParsedFieldInfo();
                parsedDataField.Size = (ushort)Marshal.SizeOf(typeof(NmParsedFieldInfo));
                NetmonAPI.NmGetParsedFieldInfo(hParsedFrame, 0, 0, ref parsedDataField);
            </code>
            </example>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">ID of the field returned by the NmAddField function.</param>
            <param name="ulOption">There are currently no options. Leave this value as zero.</param>
            <param name="pParsedFieldInfo">Pointer to the NM_PARSED_FIELD_INFO structure. The Size value must be
            initialized to the size of the structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldName(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames,System.UInt32,System.Char*)">
            <summary>
            Gets the name, data type, containing protocol, or formatted display string of the field specified by the field ID.
            </summary> 
            <remarks>
            BufferLength is a count of the number of elements. This is probably most useful when you are iterating through 
            fields to discover their names, but it can be used to get other field names, such as those containing the protocol
            name or the data type name. <br/>
            This function retrieves the name of the field, field data type name, field display string, and so on. API users must 
            specify parsing options in order for the API to store them in the parsed frame. For example, users must set the frame
            parsing option to include NmFieldDisplayStringRequired to store the display string in the parsed frame. For possible
            values, see the NmFrameParsingOption enumeration. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            Formatted display stringss can return with leading spaces so that they line up properly in the UI when using bit 
            fields. These spaces are part of the returned display string and can be removed by the user.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="RequestedName">Type of the name requested as described by the NmParsedFieldNames enumeration.</param>
            <param name="ulBufferLength">Length, in elements, of the caller-provided buffer.</param>
            <param name="pBuffer">Pointer to the caller-provided buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: If ulBufferLength is shorted than the name length.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldOffsetAndSize(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and size of the field specified by the field ID as returned by the NmAddField function.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need 
            to parse all supporting frames for parsing to work properly. <br/>
            In order for the size and offset to be returned, optimization must be disabled when you call the 
            NmCreateFrameParser function.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">The ID returned by NmAddField.</param>
            <param name="ulFieldOffset">Pointer to receive the field offset, in bits.</param>
            <param name="ulFieldSize">Pointer to receive the field size, in bits.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber8Bit(System.IntPtr,System.UInt32,System.Byte@)">
            <summary>
            Gets a 8-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must
            maintain state information, such as HTTP, SMB, and RPC, use conversations to store that 
            information. You may also need to parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ubNumber">Pointer to an 8-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber16Bit(System.IntPtr,System.UInt32,System.UInt16@)">
            <summary>
            Gets a 16-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="uiNumber">Pointer to a 16-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber32Bit(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Gets a 32-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulNumber">Pointer to a 32-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber64Bit(System.IntPtr,System.UInt32,System.UInt64@)">
            <summary>
            Gets a 64-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ullNumber">Pointer to a 64-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueByteArray(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field of byte array type. Any binary field of size 3, 5, 6, 7, or greater than 8 is treated as a byte
            array. The sizes 2, 4, and 8 are numbers that have corresponding value retrieval functions such as
            NmGetFieldValueNumber32Bit.
            </summary> 
            <remarks>
            This function differs from the NmGetFieldInBuffer function in that it is explicitly for data types that are 
            described as arrays, whereas NmGetFieldInBuffer can be used to get the raw representation of any data field. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse 
            all supporting frames for parsing to work properly. <br/>
            If you are retrieving a field whose size is 1, 2, 4, or 8, you will get an error 160 (ERROR_BAD_ARGUMENTS) returned.
            This is because the base data type Number with sizes of 1, 2, 4, or 8 are special cases and are converted
            to integers of those sizes, for example, UINT8, UINT16, UINT32, and UINT64. Therefore, these sizes are considered 
            numbers, and not byte arrays. <br/>
            You can use the NmGetPartialRawFrame function with the offsets returned from the NmGetFieldOffsetAndSize function
            to read the information directly from the raw frame for any sizes.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulByteLength">Length of the supplied buffer.</param>
            <param name="pBuffer">Pointer to a buffer that receives the field value.</param>
            <param name="ulReturnLength">Pointer that receives the size of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueString(System.IntPtr,System.UInt32,System.UInt32,System.Char*)">
            <summary>
            Gets a string from a parsed frame.
            </summary> 
            <remarks>
            This function retrieves fields of string data type, either ASCII or wide-character. The returned string is always 
            in wide-character format, regardless of the string type on the wire. API users can determine the wire data type by
            calling the NmGetFieldName function with the RequestedName parameter set to NmFieldDataTypeName. The 
            NmDataTypeNameRequired must be specified as the parsing option to get the data type name after parsing.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulBufferLength">Length of the supplied buffer.</param>
            <param name="pValueBuffer">Pointer to a buffer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldInBuffer(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field value from a parsed frame. The values returned are in the same byte order as they 
            appear in the raw frame data.
            </summary> 
            <remarks>
            Only the content up to the buffer length is copied. Callers can use the NmGetFieldOffsetAndSize function to
            obtain the size before calling this function. <br/>
            This function returns fields in the order that they come over the wire. If the buffer is a byte array with a
            field offset of 10 and a length of 3, the first byte in the buffer referenced by index zero contains the 
            tenth byte in the raw frame. <br/>
            This function does not work with a container object, such as a structure or protocol. For those, use
            NmGetPartialRawFrame instead.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by NmParseFrame.</param>
            <param name="ulBufferLength">Length of the caller-provided buffer.</param>
            <param name="pFieldBuffer">Pointer to a buffer to receive raw field data.</param>
            <param name="ulReturnLength">Receives the length of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRequestedPropertyCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of properties added to the parser with the NmAddProperty function.
            </summary> 
            <remarks>
            This function returns zero unless properties have been added. <br/>
            The return value is the number of properties added to the frame parser so that the frame parser
            can be optimized not to include NPL objects independent of the added properties. A non-optimized 
            frame parser contains thousands of properties, and currently the API does not provide support for
            retrieving the total number of properties.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulCount">Count of properties added to the frame configuration.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle, wrong scope or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyInfo(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO@)">
            <summary>
            Gets the NM_PROPERTY_INFO structure for a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            If the property container type is multi-value storage or an array and the property added using NmAddProperty
            does not contain the key information, the value type and size may be unknown. Therefore, the caller may need
            to call the retrieval function, NmGetPropertyValueById or NmGetPropertyValueByName, twice. The first time,
            the buffer size needed is returned with the ERROR_INSUFFICIENT_BUFFER error. The correct buffer size can then
            be used in the second call. <br/>
            If the Name buffer provided is NULL, this function returns successfully, but the name is not returned. <br/>
            Set the Name member of the NM_PROPERTY_INFO to NULL if it is not set to a valid memory location.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser configuration.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="pInfo">NM_PROPERTY_INFO structure for this ID.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: NM_PARSED_PROPERTY_INFO version mismatch.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyById(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value of a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            The last two parameters, ulKeyCount and pKeyArray, are used to access properties that can be indexed.
            This includes multi-value storage arrays and property groups. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if
            the entire name was specified when the property was added to the frame configuration. For example, if 
            you add Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the 
            property. <br/>
            In most cases, ulKeyCount is 1, but you can add multiple keys to access properties that are defined 
            as in the following NPL example.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="ulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups.
            The C++ version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. 
            The C# version of this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyByName(System.IntPtr,System.String,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value for a property specified by name.
            </summary> 
            <remarks>
            In some cases, you can access a property by name without having added it using the NmAddProperty function.
            If an optimized frame parser is used, the property name may not be added to the frame parser and therefore
            may not be available. If you are using an optimized frame parser, add the property using NmAddProperty so 
            that you can access it by name or ID. For more information about optimizing, see NmCreateFrameParser. <br/>
            The fully qualified name must be used. <br/>
            The key type must match the type used by the parser. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if the 
            entire name was specified when the property was added to the frame configuration. For example, if you add 
            Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the property. <br/>
            Information for the size and types of keys can be obtained with the NmGetPropertyInfo function.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="pPropertyName">Fully qualified name of the property.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="pulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups. The C++
            version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. The C# version of
            this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrameLength(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the length of the raw frame.
            </summary> 
            <remarks>
            You cannot use a parsed frame handle. You must use the raw frame handle.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by the NmGetFrame function or 
            by the NM_FRAME_CALLBACK function.</param>
            <param name="pulLength">Pointer to receive the length of the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrame(System.IntPtr,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to the raw frame data returned from a capture file by the NmGetFrame function or 
            over a network from the capture engine through the NM_FRAME_CALLBACK function.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or 
            the NM_FRAME_CALLBACK terminates.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by NmGetFrame or by NM_FRAME_CALLBACK.</param>
            <param name="ulLength">Length of the provided buffer.</param>
            <param name="pFrameBuffer">Returned pointer to the raw frame data.</param>
            <param name="pulReturnLength">Size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPartialRawFrame(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to a specific piece of the raw frame data.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or
            NM_FRAME_CALLBACK terminates. The user must provide the buffer to be copied into.
            </remarks>
            <param name="hRawFrame">Handle to the raw frame object returned by the NmGetFrame function 
            or by the NM_FRAME_CALLBACK function.</param>
            <param name="ulFrameOffset">Offset in the raw frame from which to start.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="pFrameBuffer">Pointer to the user-provided buffer to receive the partial raw frame data.</param>
            <param name="pulReturnLength">Pointer to receive the size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameMacType(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the per-frame media access type.
            </summary> 
            <remarks>
            This function can be used on either a raw or a parsed frame. <br/>
            You can capture on multiple adapters. Therefore, the MAC type for each frame is recorded.
            For more information, see Capture File Format.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pulMacType">Pointer to receive the Machine Address Code (MAC) type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameTimeStamp(System.IntPtr,System.UInt64@)">
            <summary>
            Gets the absolute time stamp of a frame.
            </summary> 
            <remarks>
            This function returns the absolute time stamp, which is calculated by adding the frame offset
            to the capture file time stamp in the capture header. <br/>
            This function can be used with a raw frame or a parsed frame.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pTimeStamp">Pointer to receive the 64-bit time stamp.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCommentInfo(System.IntPtr,System.UInt32@,System.Byte*,System.UInt32@,System.Byte*)">
            <summary>
            Gets the frame comment title and description.
            </summary>
            <remarks>
            If the buffers passed in are NULL, the buffer length parameters indicate the required 
            length of the buffer needed to store the title and comment strings.
            </remarks>
            <param name="hFrame">Handle to a raw frame object.</param>
            <param name="ulCommentTitleBufferLength">Pointer to the actual byte length that corresponds to the title buffer.</param>
            <param name="pCommentTitleBuffer">Pointer to a caller-supplied buffer to hold the comment title.</param>
            <param name="ulCommentDescriptionBufferLength">Pointer to the actual byte length that corresponds to the description buffer.</param>
            <param name="pCommentDescriptionBuffer">Caller-supplied buffer to hold the comment description.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: Specified parsed frame not found. <br/>
                ERROR_INSUFFICIENT_BUFFER: If either of the supplied buffers is NULL. <br/>
                ERROR_EMPTY: Frame comment information was not found.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateCaptureFile(System.String,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag,System.IntPtr@,System.UInt32@)">
            <summary>
            Creates a new Network Monitor capture file for adding frames.
            </summary> 
            <remarks>
            If you specify a size of zero, 20 MB is used. <br/>
            If you specify a size larger than the maximum size determined by MaxCaptureFileSize, 
            the maximum size is used instead. <br/>
            If you specify a size that is less than the minimum size determined by the MinCaptureFileSize
            member of NM_API_CONFIGURATION, the minimum size is used instead. <br/>
            You can close and save the capture file by calling the NmCloseHandle function.
            </remarks>
            <param name="pFileName">String containing the path of the capture file to create.</param>
            <param name="ulSize">Maximum size of the file, in bytes. The upper limit is 500 MB. The default 
            upper limit is determined by the current configuration as determined by the NmGetApiConfiguration function.</param>
            <param name="ulFlags">Option flags for setting capture style: wraparound or chained.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <param name="ulReturnSize">Size of the capture file, in bytes.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFile(System.String,System.IntPtr@)">
            <summary>
            Opens a Network Monitor capture file for reading.
            </summary> 
            <remarks>
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFileInOrder(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER@,System.IntPtr@)">
            <summary>
            Opens a capture file and reorders packets based on the configuration defined by the 
            NmAddSequenceOrderConfig function.
            </summary> 
            <remarks>
            The frame in file are in the order of the sequence specified in the frame parser parameter
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="pOrderParser">Pointer to a NM_ORDER_PARSER_PARAMETER structure.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file. <br/>
                ERROR_INVALID_PARAMETER: frame parser does not have sequence configuration. <br/>
                ERROR_NOT_ENOUGH_MEMORY: not enough memory to build required objects. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: PNM_ORDER_PARSER_PARAMETER version does not match.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Adds a frame to the specified capture file.
            </summary> 
            <remarks>
            The capture file must be opened with NmCreateCaptureFile function. <br/>
            A raw frame can be returned by the frame indication callback or the NmBuildRawFrameFromBuffer function. <br/>
            If you add frames into a capture file and the time stamp is older than the time stamp of the last frame
            added, the newly added frame is not given the correct time stamp.
            </remarks>
            <param name="hCaptureFile">Handle to the capture file returned by the NmCreateCaptureFile function.</param>
            <param name="hFrame">Handle to raw frame to be added.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the frame count in the specified capture file.
            </summary> 
            <param name="hCaptureFile">Handle to the capture file.</param>
            <param name="hFrameCount">Pointer to receive the frame count.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrame(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Gets a raw frame from the capture file.
            </summary> 
            <remarks>
            The frame number is the index number in the capture file. The first frame starts 
            with an index of zero. <br/>
            You must free the handle returned from this call.
            </remarks>
            <param name="hCaptureFile">Handle to a capture file returned by the NmCreateCaptureFile
            or the NmOpenCaptureFile function.</param>
            <param name="ulFrameNumber">Zero-based frame number.</param>
            <param name="phFrame">Handle containing a reference to the raw frame object. You must 
            call the NmCloseHandle function to free this handle.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetTopConversation(System.IntPtr,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the top-level conversation of the parsed frame, described by the conversation protocol name 
            and conversation ID.
            </summary> 
            <remarks>
            The parsed frame must have conversation set to TRUE. <br/>
            The protocol name length is returned to caller. Therefore, if the provided buffer is not large 
            enough, the caller can call again with the correct size of buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a parsed frame object.</param>
            <param name="ulBufferESize">Size of the buffer for the protocol name, in wide characters.</param>
            <param name="pProtocolName">Pointer to the buffer for the protocol name.</param>
            <param name="pulProtocolNameLength">Length of the protocol name, in wide characters, not including the terminating pattern.</param>
            <param name="pulConversationID">ID of the top-level conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParentConversation(System.IntPtr,System.UInt32,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the parent conversation information for the specified conversation, including 
            conversation protocol name and conversation ID.
            </summary> 
            <remarks>
            The parent protocol name length is returned to caller.  So if the provided buffer is not enough, caller
            Can call again with the proper sized buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a frame parser.</param>
            <param name="ulConversationId">ID of the child conversation.</param>
            <param name="ulBufferESize">Size of the buffer for the parent conversation protocol name, in bytes.</param>
            <param name="pParentProtocolNameBuffer">Pointer to the buffer for the parent conversation protocol name.</param>
            <param name="ulParentProtocolNameLength">Returned length of the parent conversation protocol name.</param>
            <param name="ulParentConversationID">ID of the parent conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor">
            <summary>
            Represents the NETMON Wrapper. <br/>
            NOTE: You must have NetMon 3+ installed on your system in order
            to use this library.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <param name="FrameFilter">
            The string representing the Frame filter. Pass NULL for unfiltered capture. <br/>
            NOTE: NetMon 3 has a bug wherein it leaks memory when we use the Frame Filter. <i>Use
            the Frame Filter feature with extreme caution.</i>
            </param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StartCapture">
            <summary>
            Starts the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StopCapture">
            <summary>
            Stops the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CaptureCleanUp">
            <summary>
            Cleans up after the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.InitCapture">
            <summary>
            Initializes the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CreateCaptureFile">
            <summary>
            Creates the capture file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.OpenCaptureEngine">
            <summary>
            Initializes the capture engine.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ConfigureNWAdapter">
            <summary>
            Configures the network adapter for capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.FrameIndicationCallback(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback for each captured frame.
            </summary>
            <param name="hCapEng"></param>
            <param name="ulAdatIdx"></param>
            <param name="pContext"></param>
            <param name="hRawFrame"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ParserCallback(System.IntPtr,System.UInt32,System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType)">
            <summary>
            Callback for the parser engine.
            </summary>
            <param name="pCallerContext"></param>
            <param name="ulStatusCode"></param>
            <param name="lpDescription"></param>
            <param name="ulType"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.LoadFilter">
            <summary>
            Loads the specified capture filter. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing unmanaged objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the object, releasing managed and unmanaged handles.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\bin\Release\NetworkMonitor3Wrapper\Test.Common.Library.NetworkMonitor3Wrapper.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkMonitor3Wrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant">
            <summary>
            Represents the Netmon API Constants.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAC_ADDRESS_SIZE">
            <summary>
            The size of the MAC Address.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAX_PATH">
            <summary>
            The maximum paths.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.NMAPI_GUID_SIZE">
            <summary>
            Size of the NetMon API GUID.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode">
            <summary>
            Represents the Netmon API return status code.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_TOO_BIG_FOR_FILE">
            <summary>
            The file doesn't have enough space to hold this frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_SMALL">
            <summary>
            Capture file size too small. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_LARGE">
            <summary>
            Capture file size too large. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary>
            The frame is corrupt. It overlaps with the next frame. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary>
            The frame is corrupt. The dimensions of the frame are not in the range of the capture file. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_ENDIAN">
            <summary>
            The data is in BigEndian and we support only Little Endian 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_PCAP_FILE">
            <summary>
            This file is not a valid PCAP file
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_PCAP_VERSION">
            <summary>
            This file is not a supported PCAP version 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_FILE_TYPE">
            <summary>
            This file type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_NETMON_CAP_FILE">
            <summary>
            This file type is not a valid Netmon capture file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_PCAP_DLT">
            <summary>
            This Pcap data link type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_API_VERSION_MISMATCHED">
            <summary>
            The current NmApi DLL is different from the required version by the application. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode">
            <summary>
            Represents the Netmon capture mode.
            </summary>
            <remarks>
            When capturing in promiscuous mode, you may not see traffic if using a switch or if the traffic occurs
            on a different segment of the network. The traffic must reach the Network Interface Controller (NIC) on which
            you are capturing. Often, network equipment, such as a switch, does not send traffic to a NIC if it is not
            directed to that NIC address.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.LocalOnly">
            <summary>
            Specifies only local traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.Promiscuous">
            <summary>
            Specifies all traffic that reaches the network adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag">
            <summary>
            Represents the Netmon capture file expansion mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.WrapAround">
            <summary>
            Creates a file that wraps around in first-in-first-out (FIFO) order.
            When the buffer is full, the oldest data is written over first.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.Chain">
            <summary>
            When the maximum file size is reached, a new file is created. If you
            have named the file Test.cap, the subsequent files are named test(1).cap,
            test(2).cap, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.LastFlag">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode">
            <summary>
            Represents the Capture callback function exit mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.DiscardRemainFrames">
            <summary>
            Remaining frames are discarded.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.ReturnRemainFrames">
            <summary>
            Remaining frames are returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState">
            <summary>
            Represents the Netmon driver adapter operational states.
            </summary> 
            <remarks>
            These states are returned by the Network Driver Interface Specification (NDIS).
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.None">
            <summary>
            Adapter is currently not bound, or some other low-level error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Bound">
            <summary>
            Adapter is bound to the Network Monitor 3 driver.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Stopped">
            <summary>
            Adapter is bound, but currently not capturing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Capturing">
            <summary>
            Adapter is currently capturing network traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Paused">
            <summary>
            Adapter is currently paused.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType">
            <summary>
            Represents the Status levels of the call back message.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.None">
            <summary>
            Placeholder. This value is never returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Error">
            <summary>
            The parser engine has returned an error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Warning">
            <summary>
            The parser engine has returned a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Information">
            <summary>
            The parser engine has returned an information message. At least
            one of these is returned when calling the NmLoadNplParser function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Last">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption">
            <summary>
            Represents the NPL loading option.
            </summary> 
            <remarks>
            By default the NmLoadNplOptionNone is used.  Only the user specified NPL path(s) are loaded.
            If both NmAppendRegisteredNplSets and a NPL path are specified, the resulting NPL parser will include
            Both and the specified NPL path(s) are prefixed.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmLoadNplOptionNone">
            <summary>
            Specifies that only the user-specified NPL path(s) are loaded. This is the default value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmAppendRegisteredNplSets">
            <summary>
            If both this parameter and an NPL path are specified, the resulting NPL parser will
            include both, and the specified NPL path(s) are prefixed.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption">
            <summary>
            Represents the Frame parser optimization options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeNone">
            <summary>
            Specifies creating a frame parser without optimization, according to the added filter. This is the default setting.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeFull">
            <summary>
            Specifies creating an optimized frame parser, based on added filters, fields, and properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeLast">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption">
            <summary>
            Represents the Frame parser parsing options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.None">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldFullNameRequired">
            <summary>
            Return the full field name with the NmGetParsedFieldInfo
            function, such as TCP.Flags.Reset. Turning this on degrades performance.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ContainingProtocolNameRequired">
            <summary>
            Return the containing protocol with NmGetParsedField.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.DataTypeNameRequired">
            <summary>
            Return the data type name, for example, MACAddress when querying for Ethernet.SourceAddress.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.UseFrameNumberParameter">
            <summary>
            Use the caller-specified frame number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldDisplayStringRequired">
            <summary>
            Provide the display string of the field.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FrameConversationInfoRequired">
            <summary>
            Provide frame conversation information.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ParsingOptionLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType">
            <summary>
            Represents the Fragmentation types returned in parsed frames.
            </summary>
            <remarks>
            When reassembly is performed, the engine signals frames as being first, middle, or last.
            You can use this information to determine whether a frame is fragmented. When this occurs,
            you can wait for the last frame marked as NmFragmentTypeEnd, and then use the handle to
            the inserted frame that is returned by the NmParseFrame function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.None">
            <summary>
            This is not part of a fragmented frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Start">
            <summary>
            This is the first frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Middle">
            <summary>
            This is a frame in the middle of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.End">
            <summary>
            This is the last frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames">
            <summary>
            Represents the name string properties in parsed field.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.NamePath">
            <summary>
            Field name path is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.DataTypeName">
            <summary>
            Data type name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.ContainingProtocolName">
            <summary>
            Containing protocol name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.FieldDisplayString">
            <summary>
            Formatted display string is returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType">
            <summary>
            Represents the Key types of the multi storage property.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNone">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNumber">
            <summary>
            Specifies that the key is a number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeString">
            <summary>
            Specifies that the key is a string.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeByteArray">
            <summary>
            Specifies that the key is a byte array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeArrayIndex">
            <summary>
            Specifies that the key is the index of a multivalue storage array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope">
            <summary>
            Represents the Scopes of properties. It is reported in the property info.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeNone">
            <summary>
            Specifies no scope.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeConversation">
            <summary>
            Specifies that the property applies to the network conversation.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeGlobal">
            <summary>
            Specifies that the property is global.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeFrame">
            <summary>
            Specifies that the property applies to the frame. This is the default.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType">
            <summary>
            Represents the property aggregation form, i.e., MVS with key, Array with index, etc.
            </summary> 
            <remarks>
            NmPropertyContainerTypeArray is the regular form if there is only one element.
            The NmGetPropertyInfo function may return container type NmPropertyContainerTypeValue if
            the key is not specified in the NmAddProperty function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerNone">
            <summary>
            Specifies that there is no property type.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerValue">
            <summary>
            Specifies that the regular form is a single value of
            NmPropertyValueType that can be referenced by just the property name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerMvs">
            <summary>
            Specifies that the multi-value storage set of properties share the
            same name, but have different keys.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerArray">
            <summary>
            Specifies a set of properties that are stored in an array and retrieved by name and index.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType">
            <summary>
            Represents the type of the property value.
            </summary> 
            <remarks>
            The value types of properties in the same multi-value storage can be different
            if they are referenced by different keys. The value types of properties in the 
            same property group can also be different if they are referenced by different indexes.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueNone">
            <summary>
            Specifies no data type for the property value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueSignedNumber">
            <summary>
            Specifies that the property value is a signed integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueUnsignedNumber">
            <summary>
            Specifies that the property value is an unsigned integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueString">
            <summary>
            Specifies that the property value is a string in wide character format.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueByteBlob">
            <summary>
            Specifies that the property value is a binary large object (BLOB) presented as a byte array.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey">
            <summary>
            Represents information on the key for retrieving multi-value storage properties.
            The array in this structure is used as a parameter of to the NmGetPropertyValueById
            and the NmGetPropertyValueByName functions.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Type">
            <summary>
            Type of key to return. Possible values are declared in the NmMvsKeyType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Length">
            <summary>
            User-supplied length of the key.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.ValuePointer">
            <summary>
            Marshaled pointer to the key value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetStringKey(System.String)">
            <summary>
            Sets the key to a string value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetNumberKey(System.Int64)">
            <summary>
            Sets the key to a number value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetIndexKey(System.Int64)">
            <summary>
            Sets the key to an array index.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetByteArrayKey(System.Byte[],System.Int32)">
            <summary>
            Sets the key to a buffer value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO">
            <summary>
            Contains runtime information for instantiated properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Size">
            <summary>
            Specifies the size of the property for version control.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Scope">
            <summary>
            Specifies the property scope, one of the elements of the NmPropertyScope enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ContainerType">
            <summary>
            Specifies the property container type, one of the elements of the NmPropertyContainerType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.NameSize">
            <summary>
            Specifies the element count of the name, excluding the terminator. When the name buffer is provided,
            this member is used for both input and output parameters. This member acts as an input parameter
            specifying the buffer length. The actual length of the name is also returned by the NmGetPropertyInfo
            function. When no name buffer is provided (the Name parameter is NULL), this member is used only as output.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Name">
            <summary>
            Property name string added by the NmAddProperty function. If a buffer is assigned when calling NmGetPropertyInfo,
            the NameSize member must specify the buffer length, in number of elements. NmGetPropertyInfo returns the
            property name in the buffer if the buffer has enough space. Otherwise, a buffer overflow error is returned.
            Set this member to NULL if you do not need a name returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueType">
            <summary>
            Specifies the data type of the property value, one of the elements of the NmPropertyValueType enumeration.
            If the value type is string, the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueSize">
            <summary>
            Specifies the size, in byte count, of the value for which the caller must provide a buffer. If ValueType
            is set to String, this member is in WCHAR, and the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ItemCount">
            <summary>
            Specifies the number of items in the array. Regular and multi-value storage properties have only one item.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo">
            <summary>
            Represents the fragmentation information returned in parsed frames.
            </summary> 
            <remarks>
            A frame is either non-fragmented or fragmented. A fragmented frame can be a start fragment,
            a middle fragment, or an end fragment. The carrier protocol of the fragment and the
            fragmented protocol information is included, if available.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.Size">
            <summary>
            Size of the structure to be initialized by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentedProtocolName">
            <summary>
            Name of the protocol that has fragmented the payload, such as IPv4, which breaks payloads
            into smaller segments for networks with smaller frame size.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.PayloadProtocolName">
            <summary>
            Name of the protocol to which the fragments belong. For example, HTTP may be the payload of TCP.
            Multiple TCP packets make up one HTTP page. Although TCP is a byte-stream transport, Network
            Monitor currently manipulates TCP at the frame level for simplicity.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentType">
            <summary>
            Type of fragment as defined by the NmFrameFragmentationType enumeration.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate">
            <summary>
            Callback function for frame receiving/retrieving.
            </summary>
            <param name="hCaptureEngine">Handle to the capture engine object responsible for this callback returned by
            the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter on which this frame was captured. Within the range from
            zero to the value returned by the NmGetAdapterCount function.</param>
            <param name="pCallerContext">Pointer to the object that was passed in to NmConfigAdapter. For example,
            a capture file handle can be passed in so that the raw frame received can be saved.</param>
            <param name="hFrame">Handle to the raw captured frame. You do not need to free this handle.</param>
            <remarks>
            This callback is called after the capture engine has stored the frame within the buffer on the computer 
            hard drive. Any heavy processing within the callback may cause a loss of network frames if the buffer
            grows beyond the capacity of the drive or the set capture file limit or quota.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption">
            <summary>
            Represents the Frame parser conversation configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.None">
            <summary>
            There are currently no conversation options. Always set this to NmConversationOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption">
            <summary>
            Represents the frame parser reassembly configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.None">
            <summary>
            Currently, there are no reassembly options. Always set this to NmReassemblyOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate">
            <summary>
            Callback function for parser compile/build process.
            </summary>
            <param name="pCallerContext">User-defined context to send to parser message callback.</param>
            <param name="ulStatusCode">Status code of the message.</param>
            <param name="lpDescription">Text description of the message.</param>
            <param name="ulType">Type of error message as described by the NmCallbackMsgType enumeration.</param>
            <remarks>
            The same callback can be used for loading the NmLoadNplParser and NmCreateFrameParserConfiguration functions.
            When loading the Network Monitor Parsing Language (NPL), you receive errors, warnings, and status messages.
            Since a status message is sent even for a successful load or build, you will be called at least one. When
            creating the frame parser, you will be called with error callbacks in the parser and when errors are flagged.
            For example, when a frame is not parsed and there is extra data, an error is often flagged by the parser.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO">
            <summary>
            Contains adapter or interface information as returned by the NmGetAdapter function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Size">
            <summary>
            Size of structure that is set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PermanentAddr">
            <summary>
            Hardware address of the Network Interface Controller (NIC).
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CurrentAddr">
            <summary>
            Driver-defined hardware address. Not all drivers support this.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.MediaType">
            <summary>
            Network Driver Interface Specification (NDIS) NdisMediumXXX type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PhysicalMediaType">
            <summary>
            Physical medium type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.ConnectionName">
            <summary>
            Internal name of the connection. This is often blank.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.FriendlyName">
            <summary>
            Friendly name of the interface for this adapter. This is the description that appears in ipconfig.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Guid">
            <summary>
            Interface GUID of the adapter.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.OpState">
            <summary>
            Operation state. For more information, see the NmAdapterOpState enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Enabled">
            <summary>
            Whether the adapter is enabled.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PModeEnabled">
            <summary>
            Whether the adapter allows for promiscuous mode sniffing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CallBackFunction">
            <summary>
            Callback function provided when you configured the adapter with the NmConfigAdapter function.
            The callback function is called by the capture engine to deliver raw frames captured on the adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION">
            <summary>
            Contains parser configuration information. It is used to retrieve current configuration
            or set user-specified configuration.
            </summary>
            <remarks>
            Use the NmApiInitialize and the NmGetApiConfiguration functions to set and retrieve this structure.
            NmAPIInitialize changes the default configuration parameters defined in the this structure.
            The values specified in the structure as parameters passed in to NmAPIInitialize overwrite the default
            values. Therefore, it is recommended that you first get the configuration, and then change the values
            as desired before calling NmAPIInitialize with an alternate configuration.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.Size">
            <summary>
            Size of the structure to be set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.RawFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for raw frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ParsedFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for parsed frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureEngineCountLimit">
            <summary>
            Maximum number of handles available for capture engines. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.NplParserCountLimit">
            <summary>
            Maximum number of handles available for Network Monitor Parsing Language (NPL)
            parser sets. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserConfigCountLimit">
            <summary>
            Maximum number of handles available for frame parser configurations.
            Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserCountLimit">
            <summary>
            Maximum number of handles available for frame parsers. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileCountLimit">
            <summary>
            Maximum number of handles available for capture files. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ThreadingMode">
            <summary>
            Threading mode. Possible values are COINIT_MULTITHREADED (0) and
            COINIT_APARTMENTTHREADED (2). Default value is COINIT_APARTMENTTHREADED.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ConversationOption">
            <summary>
            Not currently used. See NmConversationConfigOption for information on conversation flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ReassemblyOption">
            <summary>
            Not currently used. See NmReassemblyConfigOption for information on reassembly flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileMode">
            <summary>
            Override default capture file options. Default value is CaptureFileWrapAround. See
            NmCaptureFileMode for information on capture flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParsingOption">
            <summary>
            Override default parsing options. No longer used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureCallbackExitMode">
            <summary>
            Stop capture exit mode. Possible values are elements in the NmCaptureCallbackExitMode
            enumeration. The default value is NmDiscardRemainFrames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxCaptureFileSize">
            <summary>
            Maximum size for a capture file. This is used when the NmCreateCaptureFile function is called.
            The value is 500 MB. This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MinCaptureFileSize">
            <summary>
            Minimum size for a capture file. This is used when NmCreateCaptureFile is called. The value is 2072 bytes.
            This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxApiHandleLimit">
            <summary>
            Maximum number of handles per handle type. Default value is 65,536. It is read-only.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG">
            <summary>
            Defines how a protocol defines ordering of packets.
            </summary>
            <remarks>
            A caller using this structure must initialize the size before calling NmAddSequenceOrderConfig.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.Size">
            <summary>
            This member must match the size of the version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.GroupKeyString">
            <summary>
            Names of the properties containing the values to form the key to identify the group
            of the frames to put in order. If multiple properties are used, they are separated by
            semicolons. The string must be NULL-terminated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.SequencePropertyString">
            <summary>
            Name of the property containing the frame's sequence number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.NextSequencePropertyString">
            <summary>
            Name of the property containing the frame's next sequence number.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER">
            <summary>
            Structure for calling NmOpCaptureFileInOrder to provide the parser built with sequence
            control information to correct potential out-of-order frames in the capture file to be opened.
            It also contains an option flag for future extension.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Size">
            <summary>
            This member must match the size of the current version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.hFrameParser">
            <summary>
            Frame parser used for handling out-of-order frames. It must be built from a frame parser
            configuration that has sequence information specified by the NM_PROTOCOL_SEQUENCE_CONFIG structure.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Option">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM">
            <summary>
            Represents the Network Medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Fddi">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Wan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_LocalTalk">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Dix">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_ArcnetRaw">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Arcnet878_2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Atm">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Bpc">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_CoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_InfiniBand">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Tunnel">
            <summary>
            #if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Loopback">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.NdisMediumMax">
            <summary>
            #endif // (NTDDI_VERSION >= NTDDI_VISTA)
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM">
            <summary>
            Represents the Network Physical medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessLan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_CableModem">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PhoneLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PowerLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_DSL">
            <summary>
            includes ADSL and UADSL (G.Lite)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_FibreChannel">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Bluetooth">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Infiniband">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiMax">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_UWB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredWAN">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredCoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Other">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType">
            <summary>
            Numerical Definitions of Variant Types. <br/>
            http://www.marin.clara.net/COM/variant_type_definitions.htm
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_EMPTY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_NULL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DATE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DISPATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ERROR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VARIANT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UNKNOWN">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_INT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UINT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VOID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_HRESULT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_PTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_SAFEARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_USERDEFINED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPWSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_FILETIME">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAM">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORAGE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAMED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CLSID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VECTOR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BYREF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_RESERVED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGALMASKED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_TYPEMASK">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo">
            <summary>
            Contains information about the data field, such as field offset, field length, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.Size">
            <summary>
            Caller-provided size of the structure being sent. Should be initialized by the user.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldIndent">
            <summary>
            Indent of data field. For example, top-level fields have an indent of zero,
            but Tcp.flags.reset has an indent of 2.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NamePathLength">
            <summary>
            Length in elements of the name path. Since this is returned as a WCHAR, you must
            multiply it by sizeof(WCHAR). This does not include a NULL, which is added by the
            NmGetFieldName function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NplDataTypeNameLength">
            <summary>
            Length in elements of the data type. Since this is returned as a WCHAR, you must
            multiply by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolNameLength">
            <summary>
            Length in elements of the protocol name. Since this is returned as a WCHAR, you must multiply
            by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.DisplayStringLength">
            <summary>
            Length of the Display String.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolBitOffset">
            <summary>
            Offset from the beginning of the protocol, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FrameBitOffset">
            <summary>
            Frame offset of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldBitLength">
            <summary>
            Size of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueType">
            <summary>
            Variant type of the value, as defined by VARENUM.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueBufferLength">
            <summary>
            Size of the buffer required to hold the field value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI">
            <summary>
            PInvoke wrapper of Netmon API.
                - managed/unmanaged data type mapping: http://msdn2.microsoft.com/en-us/library/ac7ay120.aspx
                - the declaration in this class are strongly tied to nmapi.h
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiVersion(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Retrieves the current major and minor version numbers of the API.
            </summary> 
            <remarks>
            The API version matches netmon engine version.
            </remarks>
            <example>
            <code>
                UInt16 majorNumber = 0;
                UInt16 minorNumber = 0;
                UInt16 BuildNumber = 0;
                UInt16 RevisionNumber = 0;
                NmGetApiVersion(out majorNumber, out minorNumber, out BuildNumber, out RevisionNumber);
            </code>
            </example>
            <param name="Major">Major version number.</param>
            <param name="Minor">Minor version number.</param>
            <param name="Build">Build number.</param>
            <param name="Revision">Revision number.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiConfiguration(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Gets the current API configuration parameters.
            </summary> 
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Struct object for API to fill.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiInitialize(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Overrides the default API configuration.
            </summary> 
            <remarks>
            Caller needs to provide storage for NmApiConfiguration struct.
            </remarks>
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
               apiConfig.ThreadingMode = 0;
               status = NetmonAPI.NmApiInitialize(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Caller specified API configuration parameter struct.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different. <br/>
                ERROR_INVALID_STATE: Can not change API configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiClose">
            <summary>
            Closes down the API after finishing all work. It releases all the objects referenced by handles.
            On Windows XP and Windows Server 2003, it also detaches from the driver DLL.
            </summary>
            <remarks>
            Should be called when done with the API.
            </remarks>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCloseHandle(System.IntPtr)">
            <summary>
            Release the reference to the object by handle.</summary> 
            <remarks>
            Callers need to close all the object handles returned from API after finish using them.
            </remarks>
            <param name="hObjectHandle">Handle to the object to release </param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureEngine(System.IntPtr@)">
            <summary>
            Initializes the engine for live data capture.
            </summary> 
            <param name="phCaptureEngine">Handle to the capture engine object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_INVALID_STATE:     The operation is not available. <br/>
                ERROR_ENOUGH_MEMORY: Fail to allocate memory for the object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of network interfaces currently accessible to the API.
            </summary> 
            <remarks>
            The count returned may be zero if no adapters are registered on the computer or the current user
            is not a member of the Netmon Users security group. It is required to be a member of this group
            in order to capture on Windows Vista and above. New users to the group may be required to log on
            again to gain capture privileges unless they run as an administrator.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulCount">Pointer to the returned adapter count value. If zero, no adapters are available.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO@)">
            <summary>
            Gets available information about a specific network adapter.
            </summary> 
            <remarks>
            Caller can use name, GUID etc. to select adapter to use.  The adapter index should be within the 
            Range returned by NmGetAdapterCount method.  Caller needs to provide the storage of the
            NmNicAdapterInfo struct.
            The fix sized name buffers in the NM_NIC_ADAPTER_INFO structure are marshal to System.char[]. 
            Use String nameStr = new String("e.g., whateverDefinedStructName.ConnectionName") to translate the
            char array to a string object.
            </remarks>
            <example>
            <code>
               IntPtr hCaptureEngine = HandleReturnedByNmOpenCaptureEngine;
               UInt32 ulIndex = 0;
               NM_NIC_ADAPTER_INFO adapterInfo = new NM_NIC_ADAPTER_INFO();
               adapterInfo.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(adapterInfo);
               uint status = NetmonAPI.NmGetAdapter(hCaptureEngine, ulIndex, ref adapterInfo);
               String nameStr = new String(adapterInfo.ConnectionName);
            </code>
            </example>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="pNMAdapterInfo">Pointer to a NM_NIC_ADAPTER_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_NIC_ADAPTER_INFO struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate,System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode)">
            <summary>
            Configure the adapter with the frame indication callback and the caller context.
            </summary> 
            <remarks>
            The current callback function and context will overwrite the previous ones.  The adapter index number
            Must be in the range returned from NmGetAdapterCount method.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter. The range is from zero to value returned by the NmGetAdapterCount function.</param>
            <param name="CallbackFunction">Pointer to the callback function to receive live network data frames.
            See the NM_FRAME_CALLBACK function for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer that passes extra information to the network frame callback function.</param>
            <param name="ExitMode">Specifies whether to discard or process remaining frames after the capture engine stops.
            See NmCaptureCallbackExitMode for possible values. The default value is NmDiscardRemainFrames.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStartCapture(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode)">
            <summary>
            Starts capturing live data on an existing capture engine and network adapter.
            </summary> 
            <remarks>
            Capture mode can be PMODE and LocalOnly.
            Frame callbacks are made to the NM_FRAME_CALLBACK function registered to the adapter interface
            using the adapter index and the NmConfigAdapter function.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="CaptureMode">Capture mode. See the NmAdapterCaptureMode enumeration.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmPauseCapture(System.IntPtr,System.UInt32)">
            <summary>
            Pauses the capture engine.
            </summary> 
            <remarks>
            This function and the NmResumeCapture function have less overhead than the NmStartCapture and the NmStopCapture functions,
            since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames which enter the buffer. Therefore, there may be frames returned 
            to your callback while the buffer is being cleared. By default, after pausing or stopping a capture, 
            the NM_FRAME_CALLBACK function registered with the NmConfigAdapter function should not be called again. <br/>
            No new frames coming in on the wire are added to the buffer or receive callbacks. To continue receiving callbacks while
            frames remain in the driver buffer, set the CaptureCallbackExitMode parameter of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not pause at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmResumeCapture(System.IntPtr,System.UInt32)">
            <summary>
            resumes a capture that was previously paused by the NmPauseCapture function.
            </summary> 
            <remarks>
            Cannot resume after NmStopCapture is called.  The frame indication callback is no longer invoked 
            until NmResumeCapture method is called. <br/>
            Using the NmPauseCapture function and this function has less overhead than the NmStartCapture and the NmStopCapture
            functions, since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames that enter the buffer. Therefore, there may be frames returned
            to your callback while the buffer is being cleared. <br/>
            By default, after pausing or stopping a capture, NM_FRAME_CALLBACK registered with the NmConfigAdapter function
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode parameter
            of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">[in] The handle to the target capture engine</param>
            <param name="ulAdapterIndex">[in] The index number of the target adapter</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/> 
                ERROR_INVALID_STATE: Can not resume at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStopCapture(System.IntPtr,System.UInt32)">
            <summary>
            Stops capturing data to the driver buffer on the specified capture engine and adapter.
            </summary> 
            <remarks>
            Frames may be received after the capture engine is stopped, but no new frames enter the buffer. <br/>
            By default, any frames that remain in the driver buffer are discarded, and no new callbacks are received by 
            the calling application. <br/>
            If the NmReturnRemainFrames flag is set in the NmConfigAdapter function, the call to this function blocks 
            until the last frame is processed. This ensures that the callback function is never invoked after the call
            to this function returns. If the callback enters an infinite loop, this call never returns. <br/>
            When you pause a capture for a brief time period, use the NmPauseCapture and the NmResumeCapture functions
            instead. These have less overhead than the NmStartCapture function and this function, since they do not free
            all the internal objects used to attach to the interface and tracing. <br/>
            By default, after pausing or stopping a capture, the NM_FRAME_CALLBACK function registered with NmConfigAdapter
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode
            parameter of NmConfigAdapter to NmReturnRemainFrames.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not stop at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmLoadNplParser(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Loads the Network Monitor Parsing Language (NPL) parser set for a parser configuration.
            </summary> 
            <remarks>
            A callback function is invoked to compile error and warning information. Even on a successful load,
            there is at least one information message stating that Sparser.npb has been successfully loaded. <br/>
            When you set the pFileName parameter to NULL and the NmAppendRegisteredNplSets option is set, the function
            automatically loads the path used by the UI.
            </remarks>
            <param name="pFileName">Full path of the parser file, normally Sparser.npl. If set to NULL, the path specified
            on the Parsers tab is used (on the Tools menu, click Options, then click Parsers). If no path is specified, 
            Network Monitor searches for a local instance of Sparser.npl.</param>
            <param name="ulFlags">Option flags. Currently, the following flag is supported: NmNplParserLoadingOption. Possible
            values are NmLoadNplOptionNone and NmAppendRegisteredNplSets. The default value is NmLoadNplOptionNone.</param>
            <param name="CallbackFunction">Pointer to a function to receive warnings, errors, or messages from the parser
            engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer to pass extra information to the NPL engine message callback.
            For example, this could be a handle to a dialog box to receive the messages.</param>
            <param name="phNplParser">Handle to the NPL parser object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create NPL parser object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParserConfiguration(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a frame parser configuration to configure filters and fields.
            </summary> 
            <remarks>
            All the frame parser features, including conversation and reassembly, must be added in the configuration before
            creating the frame parser. The callback for this function provides errors that occur when loading a trace, such 
            as parsing errors and errors flagged in the NPL. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hNplParser">Handle to the Network Monitor Parsing Language (NPL) parser object returned by
            the NmLoadNplParser function.</param>
            <param name="CallbackFunction">Pointer to the function to receive warnings, errors, or messages from the
            parser engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer used to pass extra information to the NPL engine message
            callback function.</param>
            <param name="phFrameParserConfiguration">Handle to the frame parser configuration object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create frame parser configuration object. <br/>
                ERROR_NOT_FOUND: not found specified NPL parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFilter(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a filter to the parser configuration that can be evaluated on a frame basis.
            </summary> 
            <remarks>
            The filter ID is used to evaluate the state of the filter on a parsed frame when you call the NmEvaluateFilter
            function with a parsed frame. The filter string can be any valid filter that the UI accepts. This includes 
            properties and conversation variables. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the frame parser configuration engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFilterString">Filter string using all the elements available to the UI.</param>
            <param name="ulFilterId">Returned filter index in the frame parser for this filter.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddField(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a field to the frame parser configuration and optimizes its access.
            </summary> 
            <remarks>
            All the fields are enumerated in the parsed frame if no field is added. The field ID is used to retrieve the field in 
            the parsed frame when calling the NmGetXXX functions, such as NmGetFieldValueByteArray. The caller must provide a 
            unique fully qualified field name, for example, TCP.Option.Ack. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFieldString">Fully qualified path to the field.</param>
            <param name="ulFieldId">Returned field index in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddProperty(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a property to a configuration.
            </summary> 
            <remarks>
            The property ID is used to retrieve the property value specified by the fully qualified property name starting 
            with the scope name: Global, Conversation, or Frame. <br/>
            To retrieve the property value, use the NmGetPropertyValueById function. <br/>
            If a property is not added to a frame parser configuration when the frame parser is created with optimization
            enabled, the property may not be available because it may not qualify with optimization.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to a frame parser configuration.</param>
            <param name="pPropertyString">Pointer to the fully qualified name of a property. The name must have a scope
            prefix to indicate whether it is global or applies to a conversation or frame, for example Global.PropertyName,
            Conversation.PropertyName, or Frame.PropertyName. The default scope is frame. For options, see the 
            NmPropertyScope enumeration.</param>
            <param name="ulPropertyId">Pointer to the property ID.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INVALID_PARAMETER: The specified property name is invalid.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddSequenceOrderConfig(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG@,System.UInt32@)">
            <summary>
            Adds protocol sequence order configurations. 
            </summary> 
            <remarks>
            This function is used in conjunction with NmOpenCaptureFileInOrder. Once you define how to order frames using this 
            call, a capture file opened rearranges the frames so that they are loaded in order. <br/>
            This function adds a filter to the parser configuration, in addition to other changes. Therefore, the return value
            of the NmGetFilterCount function is incremented by 1. <br/>
            When using this function, the engine is optimized so you cannot read other data fields. If you need to process the
            data in order, write the results to another capture file or use a different parser to get the data fields that you
            need to read. 
            </remarks>
            <param name="hFrameParserConfiguration">Frame parser configuration returned from the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="SeqConfig">Pointer to a sequence structure defined by the NM_PROTOCOL_SEQUENCE_CONFIG structure.</param>
            <param name="ulConfigId">The configuration in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_ENOUGH_MEMORY: Fail to allocate memory to store the configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigReassembly(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption,System.Boolean)">
            <summary>
            Enables reassembly for a specified protocol.
            </summary> 
            <remarks>
            Each protocol can provide a way to reassemble its payload. This is dependent on the Network Monitor Parsing Language (NPL)
            for the protocol. <br/>
            Currently, there are no reassembly options. You can leave this value as zero. <br/>
            When you enable reassembly, conversations are also enabled by default because reassembly is dependent on conversations.
            When you disable reassembly, conversations are not affected. <br/>
            Reassembly is disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Reassembly options. Currently there are none. Set this value to NmReassemblyOptionNone.</param>
            <param name="bEnable">Action to take: enable or disable reassembly for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigConversation(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption,System.Boolean)">
            <summary>
            Configures conversation options.</summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            When you enable conversations, only conversations are enabled. However, when you disable conversations, reassembly is
            also disabled. <br/>
            This function must be called on the frame parser configuration to get the global and conversation properties. <br/>
            You must enable conversations in a parser configuration before you add conversation variables or filters. Otherwise,
            the engine is not initialized properly and the added filters or properties that rely on conversations do not work. <br/>
            Conversations are disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the target frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Conversation options. Currently there are none. Set this value to NmConversationOptionNone.</param>
            <param name="bEnable">Flag to enable conversations for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParser(System.IntPtr,System.IntPtr@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption)">
            <summary>
            Creates a frame parser with a specified parser configuration.
            </summary> 
            <remarks>
            With a handle to the frame parser, you can parse a raw frame with the NmParseFrame function. <br/>
            A frame parser object should be used to parse only data considered to be part of the same capture stream. A frame
            parser keeps state information, so mixing trace data from multiple unrelated capture files causes undesired results.
            However, using multiple frame parsers for the same data is supported. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            OptimizeOption explicitly specifies whether the frame parser created should be optimized. The optimization occurs 
            when filters, fields, or properties are added and provides better parsing performance. Once the frame parser is
            optimized, trying to access additional fields or properties other than those specifically added to the parser with
            NmAddField, NmAddFilter, or NmAddProperty produces no results. If it is not known what is needed in advance, it is best
            to leave the parser unoptimized. <br/>
            The NmGetFieldOffsetAndSize function also depends on optimization being set to NULL. Otherwise, zero is returned for
            both size and offset.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the capture engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="phParser">Handle to the frame parser object.</param>
            <param name="OptimizeOption">Specifies the optimization setting for the frame parser to be generated. The default setting
            is NmParserOptimizeNone.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigStartDataType(System.IntPtr,System.String)">
            <summary>
            Sets the starting data type for use with the NmParseBuffer function.</summary> 
            <remarks>
            This function is used in conjunction with the NmParseBuffer function. It is useful for parsing a partial payload.
            For example, if you have a TCP payload, you can set the parse type to HTTP to try to parse this data as an HTTP header.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="StartDataTypeName">Pointer to the string that represents the starting data type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetStartDataType(System.IntPtr,System.UInt32,System.Char*)">
            <summary>
            Determines the current start data type for the NmParseBuffer function.
            </summary> 
            <remarks>
            Unless changed, this function returns the default data type Frame. You can change the default data type for partial
            frame parsing with the NmConfigStartDataType function.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="ulBufferLength">Length of the user-provided buffer for the data type name.</param>
            <param name="pBuffer">The name of the data type that the created frame parser starts with</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INSUFFICIENT_BUFFER: The given start type name is longer than 260 characters.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseFrame(System.IntPtr,System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@,System.IntPtr@)">
            <summary>
            parses a raw frame and returns it as an object that can be used to retrieve information about that parsed frame. 
            </summary> 
            <remarks>
            The parsed frame contains the frame information, filter state, and data field information. When reassembly is enabled,
            the last fragment of the payload completing the reassembled frames is processed, and the inserted frame appears 
            as a reassembled raw frame. If there is no reassembled frame, INVALID_HANDLE_VALUE is returned. <br/>
            You must parse the frames in one capture file sequentially to make the state correct. You may have to parse frames
            0 through n-1 to be able to parse frame n correctly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser object created by the NmCreateFrameParser function to parse the 
            specified raw frame object.</param>
            <param name="hRawFrame">Raw frame returned by the NM_FRAME_CALLBACK or the NmGetFrame function.</param>
            <param name="ulFrameNumber">Frame number to assign to the new frame.</param>
            <param name="Options">One of the options defined in the NmFrameParsingOption enumeration.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame.</param>
            <param name="phInsertedRawFrame">Handle containing a reference to the inserted raw frame, if there is one.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseBuffer(System.IntPtr,System.Byte[],System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@)">
            <summary>
            Parses partial frame information or a user-supplied buffer.
            </summary> 
            <remarks>
            The data buffer contains the byte array that can be a raw frame, part of a raw frame, or any specified data. The parsed frame contains
            the parsed frame information. The filter state and enumeration of fields are supported. Intra-frame reassembly is not supported since it
            requires multiple frames and conversations that are not available in this buffered mode. <br/>
            Use the NmConfigStartDataType function to specify where to start parsing. For example, if your buffer contains only HTTP data, configure
            the start data type as HTTP, and the parser will start at that level. Be aware, however, that parsers sometimes have dependencies on 
            lower-layer protocols and conversations.
            </remarks>
            <param name="hParser">Handle to the frame parser object returned by the NmCreateFrameParser function.</param>
            <param name="DataBuffer">Pointer to the desired buffer for the parsed data.</param>
            <param name="ulBufferLength">Length of the provided buffer.</param>
            <param name="ulFrameNumber">The frame number should be used in parsing process if enabled by option flag.</param>
            <param name="Options">Options for parsing as defined by the NmFrameParsingOption function.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmBuildRawFrameFromBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt64,System.IntPtr@)">
            <summary>
            Builds a raw frame from a user-provided buffer.
            </summary> 
            <remarks>
            The data buffer is transformed into a raw frame object so that you can enter a contrived frame into a capture file. The media type and
            time stamp are optional and can be set to zero. <br/>
            The media type is defined per frame with Network Monitor 3 capture files. See Frame Layout. These values are used to determine the type
            of network on which a capture occurs. Frame.npl then uses this value to determine how to initially parse a frame. You can look at 
            Frame.npl to determine the valid types. You can also create your own types, but you must modify Frame.npl or auto-register your custom
            parser so that your new media type is handled.
            </remarks>
            <param name="DataBuffer">User-provided data buffer to be converted into a raw frame.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="ulMedia">Optional media type of the new raw frame. See Frame.npl for available media types. The default value is zero.
            For more information, see Frame Layout.</param>
            <param name="ullTimeStamp">Optional time stamp of the new raw frame. The default value is zero.</param>
            <param name="phRawFrame">Handle to the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: No space to build the new frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameFragmentInfo(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo@)">
            <summary>
            Gets the fragment information for the specified parsed frame.
            </summary> 
            <remarks>
            When receiving frames, you may want to determine whether fragmentation is occurring so that you can discard all 
            previous frames and focus on the reassembled frame that appears with the last fragment. <br/>
            You cannot determine the fragment type of a raw frame. Only after you parse a frame can you determine whether
            it is reassembled.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="FragmentationInfo">Pointer to an NM_FRAGMENTATION_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame. <br/>
                ERROR_INSUFFICIENT_BUFFER: If the protocol name length is longer than the buffer in PNmReassemblyInfo struct.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFilterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of filters that have been added to a frame parser configuration.
            </summary> 
            <remarks>
            If you add two filters, this function returns 2. <br/>
            The NmAddSequenceOrderConfig function adds a filter to the parser configuration, in addition to other changes.
            Therefore, the return value of this function is incremented by 1. Therefore, the count is 1 greater if you use
            the NmOpenCaptureFileInOrder function.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser returned by the NmCreateFrameParser function.</param>
            <param name="ulFilterCount">Number of filters available in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmEvaluateFilter(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Evaluates a filter that you added with the NmAddFilter function with the current parsed frame. 
            </summary> 
            <remarks>
            The PassFilter value is set to TRUE if the parsed frame passes the specified filter. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to 
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFilterId">Field ID returned by the NmAddFilter function.</param>
            <param name="bPassFilter">Pointer to BOOLEAN variable to contain the results of the test.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of fields enumerated in the specified parsed frame.
            </summary> 
            <remarks>
            The number of fields returned is dependent on whether or not you call the NmAddField function. If you added five 
            fields, for example, this function returns 5. However, if you do not add any fields, this function returns the
            total number of fields in the currently parsed frame. You can iterate through fields if you do not have a specific
            one that you are looking for. However, there is a performance price incurred, and it takes longer to parse every
            field. Therefore, if you know which fields you want, you get better performance by adding the fields explicitly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting 
            frames for parsing to work properly. <br/>
            This function returns the total number of fields, regardless of whether any have been added. However, the 
            NmGetRequestedPropertyCount function returns zero if no properties have been added.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldCount">Number of fields returned in the parsed frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParsedFieldInfo(System.IntPtr,System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo@)">
            <summary>
            Gets a NM_PARSED_FIELD_INFO structure that contains information such as the offset and bit length of
            the requested data field.
            </summary> 
            <remarks>
            The pointer to field is valid until the parsed frame containing the field is closed.
            </remarks>
            <example>
            <code>
                NmParsedFieldInfo parsedDataField = new NmParsedFieldInfo();
                parsedDataField.Size = (ushort)Marshal.SizeOf(typeof(NmParsedFieldInfo));
                NetmonAPI.NmGetParsedFieldInfo(hParsedFrame, 0, 0, ref parsedDataField);
            </code>
            </example>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">ID of the field returned by the NmAddField function.</param>
            <param name="ulOption">There are currently no options. Leave this value as zero.</param>
            <param name="pParsedFieldInfo">Pointer to the NM_PARSED_FIELD_INFO structure. The Size value must be
            initialized to the size of the structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldName(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames,System.UInt32,System.Char*)">
            <summary>
            Gets the name, data type, containing protocol, or formatted display string of the field specified by the field ID.
            </summary> 
            <remarks>
            BufferLength is a count of the number of elements. This is probably most useful when you are iterating through 
            fields to discover their names, but it can be used to get other field names, such as those containing the protocol
            name or the data type name. <br/>
            This function retrieves the name of the field, field data type name, field display string, and so on. API users must 
            specify parsing options in order for the API to store them in the parsed frame. For example, users must set the frame
            parsing option to include NmFieldDisplayStringRequired to store the display string in the parsed frame. For possible
            values, see the NmFrameParsingOption enumeration. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            Formatted display stringss can return with leading spaces so that they line up properly in the UI when using bit 
            fields. These spaces are part of the returned display string and can be removed by the user.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="RequestedName">Type of the name requested as described by the NmParsedFieldNames enumeration.</param>
            <param name="ulBufferLength">Length, in elements, of the caller-provided buffer.</param>
            <param name="pBuffer">Pointer to the caller-provided buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: If ulBufferLength is shorted than the name length.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldOffsetAndSize(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and size of the field specified by the field ID as returned by the NmAddField function.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need 
            to parse all supporting frames for parsing to work properly. <br/>
            In order for the size and offset to be returned, optimization must be disabled when you call the 
            NmCreateFrameParser function.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">The ID returned by NmAddField.</param>
            <param name="ulFieldOffset">Pointer to receive the field offset, in bits.</param>
            <param name="ulFieldSize">Pointer to receive the field size, in bits.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber8Bit(System.IntPtr,System.UInt32,System.Byte@)">
            <summary>
            Gets a 8-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must
            maintain state information, such as HTTP, SMB, and RPC, use conversations to store that 
            information. You may also need to parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ubNumber">Pointer to an 8-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber16Bit(System.IntPtr,System.UInt32,System.UInt16@)">
            <summary>
            Gets a 16-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="uiNumber">Pointer to a 16-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber32Bit(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Gets a 32-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulNumber">Pointer to a 32-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber64Bit(System.IntPtr,System.UInt32,System.UInt64@)">
            <summary>
            Gets a 64-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ullNumber">Pointer to a 64-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueByteArray(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field of byte array type. Any binary field of size 3, 5, 6, 7, or greater than 8 is treated as a byte
            array. The sizes 2, 4, and 8 are numbers that have corresponding value retrieval functions such as
            NmGetFieldValueNumber32Bit.
            </summary> 
            <remarks>
            This function differs from the NmGetFieldInBuffer function in that it is explicitly for data types that are 
            described as arrays, whereas NmGetFieldInBuffer can be used to get the raw representation of any data field. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse 
            all supporting frames for parsing to work properly. <br/>
            If you are retrieving a field whose size is 1, 2, 4, or 8, you will get an error 160 (ERROR_BAD_ARGUMENTS) returned.
            This is because the base data type Number with sizes of 1, 2, 4, or 8 are special cases and are converted
            to integers of those sizes, for example, UINT8, UINT16, UINT32, and UINT64. Therefore, these sizes are considered 
            numbers, and not byte arrays. <br/>
            You can use the NmGetPartialRawFrame function with the offsets returned from the NmGetFieldOffsetAndSize function
            to read the information directly from the raw frame for any sizes.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulByteLength">Length of the supplied buffer.</param>
            <param name="pBuffer">Pointer to a buffer that receives the field value.</param>
            <param name="ulReturnLength">Pointer that receives the size of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueString(System.IntPtr,System.UInt32,System.UInt32,System.Char*)">
            <summary>
            Gets a string from a parsed frame.
            </summary> 
            <remarks>
            This function retrieves fields of string data type, either ASCII or wide-character. The returned string is always 
            in wide-character format, regardless of the string type on the wire. API users can determine the wire data type by
            calling the NmGetFieldName function with the RequestedName parameter set to NmFieldDataTypeName. The 
            NmDataTypeNameRequired must be specified as the parsing option to get the data type name after parsing.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulBufferLength">Length of the supplied buffer.</param>
            <param name="pValueBuffer">Pointer to a buffer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldInBuffer(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field value from a parsed frame. The values returned are in the same byte order as they 
            appear in the raw frame data.
            </summary> 
            <remarks>
            Only the content up to the buffer length is copied. Callers can use the NmGetFieldOffsetAndSize function to
            obtain the size before calling this function. <br/>
            This function returns fields in the order that they come over the wire. If the buffer is a byte array with a
            field offset of 10 and a length of 3, the first byte in the buffer referenced by index zero contains the 
            tenth byte in the raw frame. <br/>
            This function does not work with a container object, such as a structure or protocol. For those, use
            NmGetPartialRawFrame instead.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by NmParseFrame.</param>
            <param name="ulBufferLength">Length of the caller-provided buffer.</param>
            <param name="pFieldBuffer">Pointer to a buffer to receive raw field data.</param>
            <param name="ulReturnLength">Receives the length of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRequestedPropertyCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of properties added to the parser with the NmAddProperty function.
            </summary> 
            <remarks>
            This function returns zero unless properties have been added. <br/>
            The return value is the number of properties added to the frame parser so that the frame parser
            can be optimized not to include NPL objects independent of the added properties. A non-optimized 
            frame parser contains thousands of properties, and currently the API does not provide support for
            retrieving the total number of properties.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulCount">Count of properties added to the frame configuration.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle, wrong scope or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyInfo(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO@)">
            <summary>
            Gets the NM_PROPERTY_INFO structure for a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            If the property container type is multi-value storage or an array and the property added using NmAddProperty
            does not contain the key information, the value type and size may be unknown. Therefore, the caller may need
            to call the retrieval function, NmGetPropertyValueById or NmGetPropertyValueByName, twice. The first time,
            the buffer size needed is returned with the ERROR_INSUFFICIENT_BUFFER error. The correct buffer size can then
            be used in the second call. <br/>
            If the Name buffer provided is NULL, this function returns successfully, but the name is not returned. <br/>
            Set the Name member of the NM_PROPERTY_INFO to NULL if it is not set to a valid memory location.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser configuration.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="pInfo">NM_PROPERTY_INFO structure for this ID.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: NM_PARSED_PROPERTY_INFO version mismatch.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyById(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value of a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            The last two parameters, ulKeyCount and pKeyArray, are used to access properties that can be indexed.
            This includes multi-value storage arrays and property groups. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if
            the entire name was specified when the property was added to the frame configuration. For example, if 
            you add Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the 
            property. <br/>
            In most cases, ulKeyCount is 1, but you can add multiple keys to access properties that are defined 
            as in the following NPL example.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="ulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups.
            The C++ version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. 
            The C# version of this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyByName(System.IntPtr,System.String,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value for a property specified by name.
            </summary> 
            <remarks>
            In some cases, you can access a property by name without having added it using the NmAddProperty function.
            If an optimized frame parser is used, the property name may not be added to the frame parser and therefore
            may not be available. If you are using an optimized frame parser, add the property using NmAddProperty so 
            that you can access it by name or ID. For more information about optimizing, see NmCreateFrameParser. <br/>
            The fully qualified name must be used. <br/>
            The key type must match the type used by the parser. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if the 
            entire name was specified when the property was added to the frame configuration. For example, if you add 
            Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the property. <br/>
            Information for the size and types of keys can be obtained with the NmGetPropertyInfo function.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="pPropertyName">Fully qualified name of the property.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="pulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups. The C++
            version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. The C# version of
            this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrameLength(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the length of the raw frame.
            </summary> 
            <remarks>
            You cannot use a parsed frame handle. You must use the raw frame handle.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by the NmGetFrame function or 
            by the NM_FRAME_CALLBACK function.</param>
            <param name="pulLength">Pointer to receive the length of the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrame(System.IntPtr,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to the raw frame data returned from a capture file by the NmGetFrame function or 
            over a network from the capture engine through the NM_FRAME_CALLBACK function.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or 
            the NM_FRAME_CALLBACK terminates.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by NmGetFrame or by NM_FRAME_CALLBACK.</param>
            <param name="ulLength">Length of the provided buffer.</param>
            <param name="pFrameBuffer">Returned pointer to the raw frame data.</param>
            <param name="pulReturnLength">Size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPartialRawFrame(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to a specific piece of the raw frame data.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or
            NM_FRAME_CALLBACK terminates. The user must provide the buffer to be copied into.
            </remarks>
            <param name="hRawFrame">Handle to the raw frame object returned by the NmGetFrame function 
            or by the NM_FRAME_CALLBACK function.</param>
            <param name="ulFrameOffset">Offset in the raw frame from which to start.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="pFrameBuffer">Pointer to the user-provided buffer to receive the partial raw frame data.</param>
            <param name="pulReturnLength">Pointer to receive the size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameMacType(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the per-frame media access type.
            </summary> 
            <remarks>
            This function can be used on either a raw or a parsed frame. <br/>
            You can capture on multiple adapters. Therefore, the MAC type for each frame is recorded.
            For more information, see Capture File Format.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pulMacType">Pointer to receive the Machine Address Code (MAC) type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameTimeStamp(System.IntPtr,System.UInt64@)">
            <summary>
            Gets the absolute time stamp of a frame.
            </summary> 
            <remarks>
            This function returns the absolute time stamp, which is calculated by adding the frame offset
            to the capture file time stamp in the capture header. <br/>
            This function can be used with a raw frame or a parsed frame.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pTimeStamp">Pointer to receive the 64-bit time stamp.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCommentInfo(System.IntPtr,System.UInt32@,System.Byte*,System.UInt32@,System.Byte*)">
            <summary>
            Gets the frame comment title and description.
            </summary>
            <remarks>
            If the buffers passed in are NULL, the buffer length parameters indicate the required 
            length of the buffer needed to store the title and comment strings.
            </remarks>
            <param name="hFrame">Handle to a raw frame object.</param>
            <param name="ulCommentTitleBufferLength">Pointer to the actual byte length that corresponds to the title buffer.</param>
            <param name="pCommentTitleBuffer">Pointer to a caller-supplied buffer to hold the comment title.</param>
            <param name="ulCommentDescriptionBufferLength">Pointer to the actual byte length that corresponds to the description buffer.</param>
            <param name="pCommentDescriptionBuffer">Caller-supplied buffer to hold the comment description.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: Specified parsed frame not found. <br/>
                ERROR_INSUFFICIENT_BUFFER: If either of the supplied buffers is NULL. <br/>
                ERROR_EMPTY: Frame comment information was not found.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateCaptureFile(System.String,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag,System.IntPtr@,System.UInt32@)">
            <summary>
            Creates a new Network Monitor capture file for adding frames.
            </summary> 
            <remarks>
            If you specify a size of zero, 20 MB is used. <br/>
            If you specify a size larger than the maximum size determined by MaxCaptureFileSize, 
            the maximum size is used instead. <br/>
            If you specify a size that is less than the minimum size determined by the MinCaptureFileSize
            member of NM_API_CONFIGURATION, the minimum size is used instead. <br/>
            You can close and save the capture file by calling the NmCloseHandle function.
            </remarks>
            <param name="pFileName">String containing the path of the capture file to create.</param>
            <param name="ulSize">Maximum size of the file, in bytes. The upper limit is 500 MB. The default 
            upper limit is determined by the current configuration as determined by the NmGetApiConfiguration function.</param>
            <param name="ulFlags">Option flags for setting capture style: wraparound or chained.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <param name="ulReturnSize">Size of the capture file, in bytes.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFile(System.String,System.IntPtr@)">
            <summary>
            Opens a Network Monitor capture file for reading.
            </summary> 
            <remarks>
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFileInOrder(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER@,System.IntPtr@)">
            <summary>
            Opens a capture file and reorders packets based on the configuration defined by the 
            NmAddSequenceOrderConfig function.
            </summary> 
            <remarks>
            The frame in file are in the order of the sequence specified in the frame parser parameter
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="pOrderParser">Pointer to a NM_ORDER_PARSER_PARAMETER structure.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file. <br/>
                ERROR_INVALID_PARAMETER: frame parser does not have sequence configuration. <br/>
                ERROR_NOT_ENOUGH_MEMORY: not enough memory to build required objects. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: PNM_ORDER_PARSER_PARAMETER version does not match.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Adds a frame to the specified capture file.
            </summary> 
            <remarks>
            The capture file must be opened with NmCreateCaptureFile function. <br/>
            A raw frame can be returned by the frame indication callback or the NmBuildRawFrameFromBuffer function. <br/>
            If you add frames into a capture file and the time stamp is older than the time stamp of the last frame
            added, the newly added frame is not given the correct time stamp.
            </remarks>
            <param name="hCaptureFile">Handle to the capture file returned by the NmCreateCaptureFile function.</param>
            <param name="hFrame">Handle to raw frame to be added.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the frame count in the specified capture file.
            </summary> 
            <param name="hCaptureFile">Handle to the capture file.</param>
            <param name="hFrameCount">Pointer to receive the frame count.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrame(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Gets a raw frame from the capture file.
            </summary> 
            <remarks>
            The frame number is the index number in the capture file. The first frame starts 
            with an index of zero. <br/>
            You must free the handle returned from this call.
            </remarks>
            <param name="hCaptureFile">Handle to a capture file returned by the NmCreateCaptureFile
            or the NmOpenCaptureFile function.</param>
            <param name="ulFrameNumber">Zero-based frame number.</param>
            <param name="phFrame">Handle containing a reference to the raw frame object. You must 
            call the NmCloseHandle function to free this handle.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetTopConversation(System.IntPtr,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the top-level conversation of the parsed frame, described by the conversation protocol name 
            and conversation ID.
            </summary> 
            <remarks>
            The parsed frame must have conversation set to TRUE. <br/>
            The protocol name length is returned to caller. Therefore, if the provided buffer is not large 
            enough, the caller can call again with the correct size of buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a parsed frame object.</param>
            <param name="ulBufferESize">Size of the buffer for the protocol name, in wide characters.</param>
            <param name="pProtocolName">Pointer to the buffer for the protocol name.</param>
            <param name="pulProtocolNameLength">Length of the protocol name, in wide characters, not including the terminating pattern.</param>
            <param name="pulConversationID">ID of the top-level conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParentConversation(System.IntPtr,System.UInt32,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the parent conversation information for the specified conversation, including 
            conversation protocol name and conversation ID.
            </summary> 
            <remarks>
            The parent protocol name length is returned to caller.  So if the provided buffer is not enough, caller
            Can call again with the proper sized buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a frame parser.</param>
            <param name="ulConversationId">ID of the child conversation.</param>
            <param name="ulBufferESize">Size of the buffer for the parent conversation protocol name, in bytes.</param>
            <param name="pParentProtocolNameBuffer">Pointer to the buffer for the parent conversation protocol name.</param>
            <param name="ulParentProtocolNameLength">Returned length of the parent conversation protocol name.</param>
            <param name="ulParentConversationID">ID of the parent conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor">
            <summary>
            Represents the NETMON Wrapper. <br/>
            NOTE: You must have NetMon 3+ installed on your system in order
            to use this library.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <param name="FrameFilter">
            The string representing the Frame filter. Pass NULL for unfiltered capture. <br/>
            NOTE: NetMon 3 has a bug wherein it leaks memory when we use the Frame Filter. <i>Use
            the Frame Filter feature with extreme caution.</i>
            </param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StartCapture">
            <summary>
            Starts the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StopCapture">
            <summary>
            Stops the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CaptureCleanUp">
            <summary>
            Cleans up after the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.InitCapture">
            <summary>
            Initializes the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CreateCaptureFile">
            <summary>
            Creates the capture file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.OpenCaptureEngine">
            <summary>
            Initializes the capture engine.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ConfigureNWAdapter">
            <summary>
            Configures the network adapter for capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.FrameIndicationCallback(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback for each captured frame.
            </summary>
            <param name="hCapEng"></param>
            <param name="ulAdatIdx"></param>
            <param name="pContext"></param>
            <param name="hRawFrame"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ParserCallback(System.IntPtr,System.UInt32,System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType)">
            <summary>
            Callback for the parser engine.
            </summary>
            <param name="pCallerContext"></param>
            <param name="ulStatusCode"></param>
            <param name="lpDescription"></param>
            <param name="ulType"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.LoadFilter">
            <summary>
            Loads the specified capture filter. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing unmanaged objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the object, releasing managed and unmanaged handles.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\bin\Release\PageLoadTimeDaemon\Test.Common.Library.NetworkMonitor3Wrapper.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkMonitor3Wrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant">
            <summary>
            Represents the Netmon API Constants.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAC_ADDRESS_SIZE">
            <summary>
            The size of the MAC Address.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAX_PATH">
            <summary>
            The maximum paths.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.NMAPI_GUID_SIZE">
            <summary>
            Size of the NetMon API GUID.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode">
            <summary>
            Represents the Netmon API return status code.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_TOO_BIG_FOR_FILE">
            <summary>
            The file doesn't have enough space to hold this frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_SMALL">
            <summary>
            Capture file size too small. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_LARGE">
            <summary>
            Capture file size too large. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary>
            The frame is corrupt. It overlaps with the next frame. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary>
            The frame is corrupt. The dimensions of the frame are not in the range of the capture file. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_ENDIAN">
            <summary>
            The data is in BigEndian and we support only Little Endian 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_PCAP_FILE">
            <summary>
            This file is not a valid PCAP file
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_PCAP_VERSION">
            <summary>
            This file is not a supported PCAP version 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_FILE_TYPE">
            <summary>
            This file type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_NETMON_CAP_FILE">
            <summary>
            This file type is not a valid Netmon capture file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_PCAP_DLT">
            <summary>
            This Pcap data link type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_API_VERSION_MISMATCHED">
            <summary>
            The current NmApi DLL is different from the required version by the application. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode">
            <summary>
            Represents the Netmon capture mode.
            </summary>
            <remarks>
            When capturing in promiscuous mode, you may not see traffic if using a switch or if the traffic occurs
            on a different segment of the network. The traffic must reach the Network Interface Controller (NIC) on which
            you are capturing. Often, network equipment, such as a switch, does not send traffic to a NIC if it is not
            directed to that NIC address.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.LocalOnly">
            <summary>
            Specifies only local traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.Promiscuous">
            <summary>
            Specifies all traffic that reaches the network adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag">
            <summary>
            Represents the Netmon capture file expansion mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.WrapAround">
            <summary>
            Creates a file that wraps around in first-in-first-out (FIFO) order.
            When the buffer is full, the oldest data is written over first.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.Chain">
            <summary>
            When the maximum file size is reached, a new file is created. If you
            have named the file Test.cap, the subsequent files are named test(1).cap,
            test(2).cap, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.LastFlag">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode">
            <summary>
            Represents the Capture callback function exit mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.DiscardRemainFrames">
            <summary>
            Remaining frames are discarded.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.ReturnRemainFrames">
            <summary>
            Remaining frames are returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState">
            <summary>
            Represents the Netmon driver adapter operational states.
            </summary> 
            <remarks>
            These states are returned by the Network Driver Interface Specification (NDIS).
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.None">
            <summary>
            Adapter is currently not bound, or some other low-level error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Bound">
            <summary>
            Adapter is bound to the Network Monitor 3 driver.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Stopped">
            <summary>
            Adapter is bound, but currently not capturing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Capturing">
            <summary>
            Adapter is currently capturing network traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Paused">
            <summary>
            Adapter is currently paused.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType">
            <summary>
            Represents the Status levels of the call back message.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.None">
            <summary>
            Placeholder. This value is never returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Error">
            <summary>
            The parser engine has returned an error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Warning">
            <summary>
            The parser engine has returned a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Information">
            <summary>
            The parser engine has returned an information message. At least
            one of these is returned when calling the NmLoadNplParser function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Last">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption">
            <summary>
            Represents the NPL loading option.
            </summary> 
            <remarks>
            By default the NmLoadNplOptionNone is used.  Only the user specified NPL path(s) are loaded.
            If both NmAppendRegisteredNplSets and a NPL path are specified, the resulting NPL parser will include
            Both and the specified NPL path(s) are prefixed.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmLoadNplOptionNone">
            <summary>
            Specifies that only the user-specified NPL path(s) are loaded. This is the default value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmAppendRegisteredNplSets">
            <summary>
            If both this parameter and an NPL path are specified, the resulting NPL parser will
            include both, and the specified NPL path(s) are prefixed.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption">
            <summary>
            Represents the Frame parser optimization options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeNone">
            <summary>
            Specifies creating a frame parser without optimization, according to the added filter. This is the default setting.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeFull">
            <summary>
            Specifies creating an optimized frame parser, based on added filters, fields, and properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeLast">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption">
            <summary>
            Represents the Frame parser parsing options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.None">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldFullNameRequired">
            <summary>
            Return the full field name with the NmGetParsedFieldInfo
            function, such as TCP.Flags.Reset. Turning this on degrades performance.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ContainingProtocolNameRequired">
            <summary>
            Return the containing protocol with NmGetParsedField.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.DataTypeNameRequired">
            <summary>
            Return the data type name, for example, MACAddress when querying for Ethernet.SourceAddress.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.UseFrameNumberParameter">
            <summary>
            Use the caller-specified frame number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldDisplayStringRequired">
            <summary>
            Provide the display string of the field.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FrameConversationInfoRequired">
            <summary>
            Provide frame conversation information.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ParsingOptionLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType">
            <summary>
            Represents the Fragmentation types returned in parsed frames.
            </summary>
            <remarks>
            When reassembly is performed, the engine signals frames as being first, middle, or last.
            You can use this information to determine whether a frame is fragmented. When this occurs,
            you can wait for the last frame marked as NmFragmentTypeEnd, and then use the handle to
            the inserted frame that is returned by the NmParseFrame function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.None">
            <summary>
            This is not part of a fragmented frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Start">
            <summary>
            This is the first frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Middle">
            <summary>
            This is a frame in the middle of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.End">
            <summary>
            This is the last frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames">
            <summary>
            Represents the name string properties in parsed field.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.NamePath">
            <summary>
            Field name path is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.DataTypeName">
            <summary>
            Data type name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.ContainingProtocolName">
            <summary>
            Containing protocol name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.FieldDisplayString">
            <summary>
            Formatted display string is returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType">
            <summary>
            Represents the Key types of the multi storage property.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNone">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNumber">
            <summary>
            Specifies that the key is a number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeString">
            <summary>
            Specifies that the key is a string.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeByteArray">
            <summary>
            Specifies that the key is a byte array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeArrayIndex">
            <summary>
            Specifies that the key is the index of a multivalue storage array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope">
            <summary>
            Represents the Scopes of properties. It is reported in the property info.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeNone">
            <summary>
            Specifies no scope.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeConversation">
            <summary>
            Specifies that the property applies to the network conversation.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeGlobal">
            <summary>
            Specifies that the property is global.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeFrame">
            <summary>
            Specifies that the property applies to the frame. This is the default.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType">
            <summary>
            Represents the property aggregation form, i.e., MVS with key, Array with index, etc.
            </summary> 
            <remarks>
            NmPropertyContainerTypeArray is the regular form if there is only one element.
            The NmGetPropertyInfo function may return container type NmPropertyContainerTypeValue if
            the key is not specified in the NmAddProperty function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerNone">
            <summary>
            Specifies that there is no property type.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerValue">
            <summary>
            Specifies that the regular form is a single value of
            NmPropertyValueType that can be referenced by just the property name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerMvs">
            <summary>
            Specifies that the multi-value storage set of properties share the
            same name, but have different keys.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerArray">
            <summary>
            Specifies a set of properties that are stored in an array and retrieved by name and index.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType">
            <summary>
            Represents the type of the property value.
            </summary> 
            <remarks>
            The value types of properties in the same multi-value storage can be different
            if they are referenced by different keys. The value types of properties in the 
            same property group can also be different if they are referenced by different indexes.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueNone">
            <summary>
            Specifies no data type for the property value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueSignedNumber">
            <summary>
            Specifies that the property value is a signed integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueUnsignedNumber">
            <summary>
            Specifies that the property value is an unsigned integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueString">
            <summary>
            Specifies that the property value is a string in wide character format.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueByteBlob">
            <summary>
            Specifies that the property value is a binary large object (BLOB) presented as a byte array.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey">
            <summary>
            Represents information on the key for retrieving multi-value storage properties.
            The array in this structure is used as a parameter of to the NmGetPropertyValueById
            and the NmGetPropertyValueByName functions.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Type">
            <summary>
            Type of key to return. Possible values are declared in the NmMvsKeyType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Length">
            <summary>
            User-supplied length of the key.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.ValuePointer">
            <summary>
            Marshaled pointer to the key value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetStringKey(System.String)">
            <summary>
            Sets the key to a string value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetNumberKey(System.Int64)">
            <summary>
            Sets the key to a number value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetIndexKey(System.Int64)">
            <summary>
            Sets the key to an array index.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetByteArrayKey(System.Byte[],System.Int32)">
            <summary>
            Sets the key to a buffer value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO">
            <summary>
            Contains runtime information for instantiated properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Size">
            <summary>
            Specifies the size of the property for version control.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Scope">
            <summary>
            Specifies the property scope, one of the elements of the NmPropertyScope enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ContainerType">
            <summary>
            Specifies the property container type, one of the elements of the NmPropertyContainerType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.NameSize">
            <summary>
            Specifies the element count of the name, excluding the terminator. When the name buffer is provided,
            this member is used for both input and output parameters. This member acts as an input parameter
            specifying the buffer length. The actual length of the name is also returned by the NmGetPropertyInfo
            function. When no name buffer is provided (the Name parameter is NULL), this member is used only as output.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Name">
            <summary>
            Property name string added by the NmAddProperty function. If a buffer is assigned when calling NmGetPropertyInfo,
            the NameSize member must specify the buffer length, in number of elements. NmGetPropertyInfo returns the
            property name in the buffer if the buffer has enough space. Otherwise, a buffer overflow error is returned.
            Set this member to NULL if you do not need a name returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueType">
            <summary>
            Specifies the data type of the property value, one of the elements of the NmPropertyValueType enumeration.
            If the value type is string, the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueSize">
            <summary>
            Specifies the size, in byte count, of the value for which the caller must provide a buffer. If ValueType
            is set to String, this member is in WCHAR, and the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ItemCount">
            <summary>
            Specifies the number of items in the array. Regular and multi-value storage properties have only one item.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo">
            <summary>
            Represents the fragmentation information returned in parsed frames.
            </summary> 
            <remarks>
            A frame is either non-fragmented or fragmented. A fragmented frame can be a start fragment,
            a middle fragment, or an end fragment. The carrier protocol of the fragment and the
            fragmented protocol information is included, if available.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.Size">
            <summary>
            Size of the structure to be initialized by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentedProtocolName">
            <summary>
            Name of the protocol that has fragmented the payload, such as IPv4, which breaks payloads
            into smaller segments for networks with smaller frame size.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.PayloadProtocolName">
            <summary>
            Name of the protocol to which the fragments belong. For example, HTTP may be the payload of TCP.
            Multiple TCP packets make up one HTTP page. Although TCP is a byte-stream transport, Network
            Monitor currently manipulates TCP at the frame level for simplicity.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentType">
            <summary>
            Type of fragment as defined by the NmFrameFragmentationType enumeration.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate">
            <summary>
            Callback function for frame receiving/retrieving.
            </summary>
            <param name="hCaptureEngine">Handle to the capture engine object responsible for this callback returned by
            the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter on which this frame was captured. Within the range from
            zero to the value returned by the NmGetAdapterCount function.</param>
            <param name="pCallerContext">Pointer to the object that was passed in to NmConfigAdapter. For example,
            a capture file handle can be passed in so that the raw frame received can be saved.</param>
            <param name="hFrame">Handle to the raw captured frame. You do not need to free this handle.</param>
            <remarks>
            This callback is called after the capture engine has stored the frame within the buffer on the computer 
            hard drive. Any heavy processing within the callback may cause a loss of network frames if the buffer
            grows beyond the capacity of the drive or the set capture file limit or quota.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption">
            <summary>
            Represents the Frame parser conversation configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.None">
            <summary>
            There are currently no conversation options. Always set this to NmConversationOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption">
            <summary>
            Represents the frame parser reassembly configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.None">
            <summary>
            Currently, there are no reassembly options. Always set this to NmReassemblyOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate">
            <summary>
            Callback function for parser compile/build process.
            </summary>
            <param name="pCallerContext">User-defined context to send to parser message callback.</param>
            <param name="ulStatusCode">Status code of the message.</param>
            <param name="lpDescription">Text description of the message.</param>
            <param name="ulType">Type of error message as described by the NmCallbackMsgType enumeration.</param>
            <remarks>
            The same callback can be used for loading the NmLoadNplParser and NmCreateFrameParserConfiguration functions.
            When loading the Network Monitor Parsing Language (NPL), you receive errors, warnings, and status messages.
            Since a status message is sent even for a successful load or build, you will be called at least one. When
            creating the frame parser, you will be called with error callbacks in the parser and when errors are flagged.
            For example, when a frame is not parsed and there is extra data, an error is often flagged by the parser.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO">
            <summary>
            Contains adapter or interface information as returned by the NmGetAdapter function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Size">
            <summary>
            Size of structure that is set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PermanentAddr">
            <summary>
            Hardware address of the Network Interface Controller (NIC).
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CurrentAddr">
            <summary>
            Driver-defined hardware address. Not all drivers support this.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.MediaType">
            <summary>
            Network Driver Interface Specification (NDIS) NdisMediumXXX type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PhysicalMediaType">
            <summary>
            Physical medium type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.ConnectionName">
            <summary>
            Internal name of the connection. This is often blank.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.FriendlyName">
            <summary>
            Friendly name of the interface for this adapter. This is the description that appears in ipconfig.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Guid">
            <summary>
            Interface GUID of the adapter.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.OpState">
            <summary>
            Operation state. For more information, see the NmAdapterOpState enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Enabled">
            <summary>
            Whether the adapter is enabled.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PModeEnabled">
            <summary>
            Whether the adapter allows for promiscuous mode sniffing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CallBackFunction">
            <summary>
            Callback function provided when you configured the adapter with the NmConfigAdapter function.
            The callback function is called by the capture engine to deliver raw frames captured on the adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION">
            <summary>
            Contains parser configuration information. It is used to retrieve current configuration
            or set user-specified configuration.
            </summary>
            <remarks>
            Use the NmApiInitialize and the NmGetApiConfiguration functions to set and retrieve this structure.
            NmAPIInitialize changes the default configuration parameters defined in the this structure.
            The values specified in the structure as parameters passed in to NmAPIInitialize overwrite the default
            values. Therefore, it is recommended that you first get the configuration, and then change the values
            as desired before calling NmAPIInitialize with an alternate configuration.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.Size">
            <summary>
            Size of the structure to be set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.RawFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for raw frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ParsedFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for parsed frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureEngineCountLimit">
            <summary>
            Maximum number of handles available for capture engines. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.NplParserCountLimit">
            <summary>
            Maximum number of handles available for Network Monitor Parsing Language (NPL)
            parser sets. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserConfigCountLimit">
            <summary>
            Maximum number of handles available for frame parser configurations.
            Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserCountLimit">
            <summary>
            Maximum number of handles available for frame parsers. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileCountLimit">
            <summary>
            Maximum number of handles available for capture files. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ThreadingMode">
            <summary>
            Threading mode. Possible values are COINIT_MULTITHREADED (0) and
            COINIT_APARTMENTTHREADED (2). Default value is COINIT_APARTMENTTHREADED.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ConversationOption">
            <summary>
            Not currently used. See NmConversationConfigOption for information on conversation flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ReassemblyOption">
            <summary>
            Not currently used. See NmReassemblyConfigOption for information on reassembly flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileMode">
            <summary>
            Override default capture file options. Default value is CaptureFileWrapAround. See
            NmCaptureFileMode for information on capture flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParsingOption">
            <summary>
            Override default parsing options. No longer used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureCallbackExitMode">
            <summary>
            Stop capture exit mode. Possible values are elements in the NmCaptureCallbackExitMode
            enumeration. The default value is NmDiscardRemainFrames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxCaptureFileSize">
            <summary>
            Maximum size for a capture file. This is used when the NmCreateCaptureFile function is called.
            The value is 500 MB. This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MinCaptureFileSize">
            <summary>
            Minimum size for a capture file. This is used when NmCreateCaptureFile is called. The value is 2072 bytes.
            This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxApiHandleLimit">
            <summary>
            Maximum number of handles per handle type. Default value is 65,536. It is read-only.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG">
            <summary>
            Defines how a protocol defines ordering of packets.
            </summary>
            <remarks>
            A caller using this structure must initialize the size before calling NmAddSequenceOrderConfig.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.Size">
            <summary>
            This member must match the size of the version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.GroupKeyString">
            <summary>
            Names of the properties containing the values to form the key to identify the group
            of the frames to put in order. If multiple properties are used, they are separated by
            semicolons. The string must be NULL-terminated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.SequencePropertyString">
            <summary>
            Name of the property containing the frame's sequence number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.NextSequencePropertyString">
            <summary>
            Name of the property containing the frame's next sequence number.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER">
            <summary>
            Structure for calling NmOpCaptureFileInOrder to provide the parser built with sequence
            control information to correct potential out-of-order frames in the capture file to be opened.
            It also contains an option flag for future extension.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Size">
            <summary>
            This member must match the size of the current version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.hFrameParser">
            <summary>
            Frame parser used for handling out-of-order frames. It must be built from a frame parser
            configuration that has sequence information specified by the NM_PROTOCOL_SEQUENCE_CONFIG structure.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Option">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM">
            <summary>
            Represents the Network Medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Fddi">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Wan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_LocalTalk">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Dix">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_ArcnetRaw">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Arcnet878_2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Atm">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Bpc">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_CoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_InfiniBand">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Tunnel">
            <summary>
            #if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Loopback">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.NdisMediumMax">
            <summary>
            #endif // (NTDDI_VERSION >= NTDDI_VISTA)
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM">
            <summary>
            Represents the Network Physical medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessLan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_CableModem">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PhoneLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PowerLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_DSL">
            <summary>
            includes ADSL and UADSL (G.Lite)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_FibreChannel">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Bluetooth">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Infiniband">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiMax">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_UWB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredWAN">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredCoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Other">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType">
            <summary>
            Numerical Definitions of Variant Types. <br/>
            http://www.marin.clara.net/COM/variant_type_definitions.htm
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_EMPTY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_NULL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DATE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DISPATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ERROR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VARIANT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UNKNOWN">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_INT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UINT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VOID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_HRESULT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_PTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_SAFEARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_USERDEFINED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPWSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_FILETIME">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAM">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORAGE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAMED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CLSID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VECTOR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BYREF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_RESERVED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGALMASKED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_TYPEMASK">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo">
            <summary>
            Contains information about the data field, such as field offset, field length, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.Size">
            <summary>
            Caller-provided size of the structure being sent. Should be initialized by the user.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldIndent">
            <summary>
            Indent of data field. For example, top-level fields have an indent of zero,
            but Tcp.flags.reset has an indent of 2.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NamePathLength">
            <summary>
            Length in elements of the name path. Since this is returned as a WCHAR, you must
            multiply it by sizeof(WCHAR). This does not include a NULL, which is added by the
            NmGetFieldName function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NplDataTypeNameLength">
            <summary>
            Length in elements of the data type. Since this is returned as a WCHAR, you must
            multiply by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolNameLength">
            <summary>
            Length in elements of the protocol name. Since this is returned as a WCHAR, you must multiply
            by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.DisplayStringLength">
            <summary>
            Length of the Display String.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolBitOffset">
            <summary>
            Offset from the beginning of the protocol, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FrameBitOffset">
            <summary>
            Frame offset of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldBitLength">
            <summary>
            Size of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueType">
            <summary>
            Variant type of the value, as defined by VARENUM.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueBufferLength">
            <summary>
            Size of the buffer required to hold the field value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI">
            <summary>
            PInvoke wrapper of Netmon API.
                - managed/unmanaged data type mapping: http://msdn2.microsoft.com/en-us/library/ac7ay120.aspx
                - the declaration in this class are strongly tied to nmapi.h
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiVersion(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Retrieves the current major and minor version numbers of the API.
            </summary> 
            <remarks>
            The API version matches netmon engine version.
            </remarks>
            <example>
            <code>
                UInt16 majorNumber = 0;
                UInt16 minorNumber = 0;
                UInt16 BuildNumber = 0;
                UInt16 RevisionNumber = 0;
                NmGetApiVersion(out majorNumber, out minorNumber, out BuildNumber, out RevisionNumber);
            </code>
            </example>
            <param name="Major">Major version number.</param>
            <param name="Minor">Minor version number.</param>
            <param name="Build">Build number.</param>
            <param name="Revision">Revision number.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiConfiguration(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Gets the current API configuration parameters.
            </summary> 
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Struct object for API to fill.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiInitialize(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Overrides the default API configuration.
            </summary> 
            <remarks>
            Caller needs to provide storage for NmApiConfiguration struct.
            </remarks>
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
               apiConfig.ThreadingMode = 0;
               status = NetmonAPI.NmApiInitialize(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Caller specified API configuration parameter struct.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different. <br/>
                ERROR_INVALID_STATE: Can not change API configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiClose">
            <summary>
            Closes down the API after finishing all work. It releases all the objects referenced by handles.
            On Windows XP and Windows Server 2003, it also detaches from the driver DLL.
            </summary>
            <remarks>
            Should be called when done with the API.
            </remarks>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCloseHandle(System.IntPtr)">
            <summary>
            Release the reference to the object by handle.</summary> 
            <remarks>
            Callers need to close all the object handles returned from API after finish using them.
            </remarks>
            <param name="hObjectHandle">Handle to the object to release </param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureEngine(System.IntPtr@)">
            <summary>
            Initializes the engine for live data capture.
            </summary> 
            <param name="phCaptureEngine">Handle to the capture engine object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_INVALID_STATE:     The operation is not available. <br/>
                ERROR_ENOUGH_MEMORY: Fail to allocate memory for the object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of network interfaces currently accessible to the API.
            </summary> 
            <remarks>
            The count returned may be zero if no adapters are registered on the computer or the current user
            is not a member of the Netmon Users security group. It is required to be a member of this group
            in order to capture on Windows Vista and above. New users to the group may be required to log on
            again to gain capture privileges unless they run as an administrator.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulCount">Pointer to the returned adapter count value. If zero, no adapters are available.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO@)">
            <summary>
            Gets available information about a specific network adapter.
            </summary> 
            <remarks>
            Caller can use name, GUID etc. to select adapter to use.  The adapter index should be within the 
            Range returned by NmGetAdapterCount method.  Caller needs to provide the storage of the
            NmNicAdapterInfo struct.
            The fix sized name buffers in the NM_NIC_ADAPTER_INFO structure are marshal to System.char[]. 
            Use String nameStr = new String("e.g., whateverDefinedStructName.ConnectionName") to translate the
            char array to a string object.
            </remarks>
            <example>
            <code>
               IntPtr hCaptureEngine = HandleReturnedByNmOpenCaptureEngine;
               UInt32 ulIndex = 0;
               NM_NIC_ADAPTER_INFO adapterInfo = new NM_NIC_ADAPTER_INFO();
               adapterInfo.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(adapterInfo);
               uint status = NetmonAPI.NmGetAdapter(hCaptureEngine, ulIndex, ref adapterInfo);
               String nameStr = new String(adapterInfo.ConnectionName);
            </code>
            </example>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="pNMAdapterInfo">Pointer to a NM_NIC_ADAPTER_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_NIC_ADAPTER_INFO struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate,System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode)">
            <summary>
            Configure the adapter with the frame indication callback and the caller context.
            </summary> 
            <remarks>
            The current callback function and context will overwrite the previous ones.  The adapter index number
            Must be in the range returned from NmGetAdapterCount method.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter. The range is from zero to value returned by the NmGetAdapterCount function.</param>
            <param name="CallbackFunction">Pointer to the callback function to receive live network data frames.
            See the NM_FRAME_CALLBACK function for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer that passes extra information to the network frame callback function.</param>
            <param name="ExitMode">Specifies whether to discard or process remaining frames after the capture engine stops.
            See NmCaptureCallbackExitMode for possible values. The default value is NmDiscardRemainFrames.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStartCapture(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode)">
            <summary>
            Starts capturing live data on an existing capture engine and network adapter.
            </summary> 
            <remarks>
            Capture mode can be PMODE and LocalOnly.
            Frame callbacks are made to the NM_FRAME_CALLBACK function registered to the adapter interface
            using the adapter index and the NmConfigAdapter function.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="CaptureMode">Capture mode. See the NmAdapterCaptureMode enumeration.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmPauseCapture(System.IntPtr,System.UInt32)">
            <summary>
            Pauses the capture engine.
            </summary> 
            <remarks>
            This function and the NmResumeCapture function have less overhead than the NmStartCapture and the NmStopCapture functions,
            since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames which enter the buffer. Therefore, there may be frames returned 
            to your callback while the buffer is being cleared. By default, after pausing or stopping a capture, 
            the NM_FRAME_CALLBACK function registered with the NmConfigAdapter function should not be called again. <br/>
            No new frames coming in on the wire are added to the buffer or receive callbacks. To continue receiving callbacks while
            frames remain in the driver buffer, set the CaptureCallbackExitMode parameter of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not pause at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmResumeCapture(System.IntPtr,System.UInt32)">
            <summary>
            resumes a capture that was previously paused by the NmPauseCapture function.
            </summary> 
            <remarks>
            Cannot resume after NmStopCapture is called.  The frame indication callback is no longer invoked 
            until NmResumeCapture method is called. <br/>
            Using the NmPauseCapture function and this function has less overhead than the NmStartCapture and the NmStopCapture
            functions, since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames that enter the buffer. Therefore, there may be frames returned
            to your callback while the buffer is being cleared. <br/>
            By default, after pausing or stopping a capture, NM_FRAME_CALLBACK registered with the NmConfigAdapter function
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode parameter
            of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">[in] The handle to the target capture engine</param>
            <param name="ulAdapterIndex">[in] The index number of the target adapter</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/> 
                ERROR_INVALID_STATE: Can not resume at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStopCapture(System.IntPtr,System.UInt32)">
            <summary>
            Stops capturing data to the driver buffer on the specified capture engine and adapter.
            </summary> 
            <remarks>
            Frames may be received after the capture engine is stopped, but no new frames enter the buffer. <br/>
            By default, any frames that remain in the driver buffer are discarded, and no new callbacks are received by 
            the calling application. <br/>
            If the NmReturnRemainFrames flag is set in the NmConfigAdapter function, the call to this function blocks 
            until the last frame is processed. This ensures that the callback function is never invoked after the call
            to this function returns. If the callback enters an infinite loop, this call never returns. <br/>
            When you pause a capture for a brief time period, use the NmPauseCapture and the NmResumeCapture functions
            instead. These have less overhead than the NmStartCapture function and this function, since they do not free
            all the internal objects used to attach to the interface and tracing. <br/>
            By default, after pausing or stopping a capture, the NM_FRAME_CALLBACK function registered with NmConfigAdapter
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode
            parameter of NmConfigAdapter to NmReturnRemainFrames.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not stop at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmLoadNplParser(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Loads the Network Monitor Parsing Language (NPL) parser set for a parser configuration.
            </summary> 
            <remarks>
            A callback function is invoked to compile error and warning information. Even on a successful load,
            there is at least one information message stating that Sparser.npb has been successfully loaded. <br/>
            When you set the pFileName parameter to NULL and the NmAppendRegisteredNplSets option is set, the function
            automatically loads the path used by the UI.
            </remarks>
            <param name="pFileName">Full path of the parser file, normally Sparser.npl. If set to NULL, the path specified
            on the Parsers tab is used (on the Tools menu, click Options, then click Parsers). If no path is specified, 
            Network Monitor searches for a local instance of Sparser.npl.</param>
            <param name="ulFlags">Option flags. Currently, the following flag is supported: NmNplParserLoadingOption. Possible
            values are NmLoadNplOptionNone and NmAppendRegisteredNplSets. The default value is NmLoadNplOptionNone.</param>
            <param name="CallbackFunction">Pointer to a function to receive warnings, errors, or messages from the parser
            engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer to pass extra information to the NPL engine message callback.
            For example, this could be a handle to a dialog box to receive the messages.</param>
            <param name="phNplParser">Handle to the NPL parser object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create NPL parser object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParserConfiguration(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a frame parser configuration to configure filters and fields.
            </summary> 
            <remarks>
            All the frame parser features, including conversation and reassembly, must be added in the configuration before
            creating the frame parser. The callback for this function provides errors that occur when loading a trace, such 
            as parsing errors and errors flagged in the NPL. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hNplParser">Handle to the Network Monitor Parsing Language (NPL) parser object returned by
            the NmLoadNplParser function.</param>
            <param name="CallbackFunction">Pointer to the function to receive warnings, errors, or messages from the
            parser engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer used to pass extra information to the NPL engine message
            callback function.</param>
            <param name="phFrameParserConfiguration">Handle to the frame parser configuration object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create frame parser configuration object. <br/>
                ERROR_NOT_FOUND: not found specified NPL parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFilter(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a filter to the parser configuration that can be evaluated on a frame basis.
            </summary> 
            <remarks>
            The filter ID is used to evaluate the state of the filter on a parsed frame when you call the NmEvaluateFilter
            function with a parsed frame. The filter string can be any valid filter that the UI accepts. This includes 
            properties and conversation variables. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the frame parser configuration engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFilterString">Filter string using all the elements available to the UI.</param>
            <param name="ulFilterId">Returned filter index in the frame parser for this filter.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddField(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a field to the frame parser configuration and optimizes its access.
            </summary> 
            <remarks>
            All the fields are enumerated in the parsed frame if no field is added. The field ID is used to retrieve the field in 
            the parsed frame when calling the NmGetXXX functions, such as NmGetFieldValueByteArray. The caller must provide a 
            unique fully qualified field name, for example, TCP.Option.Ack. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFieldString">Fully qualified path to the field.</param>
            <param name="ulFieldId">Returned field index in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddProperty(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a property to a configuration.
            </summary> 
            <remarks>
            The property ID is used to retrieve the property value specified by the fully qualified property name starting 
            with the scope name: Global, Conversation, or Frame. <br/>
            To retrieve the property value, use the NmGetPropertyValueById function. <br/>
            If a property is not added to a frame parser configuration when the frame parser is created with optimization
            enabled, the property may not be available because it may not qualify with optimization.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to a frame parser configuration.</param>
            <param name="pPropertyString">Pointer to the fully qualified name of a property. The name must have a scope
            prefix to indicate whether it is global or applies to a conversation or frame, for example Global.PropertyName,
            Conversation.PropertyName, or Frame.PropertyName. The default scope is frame. For options, see the 
            NmPropertyScope enumeration.</param>
            <param name="ulPropertyId">Pointer to the property ID.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INVALID_PARAMETER: The specified property name is invalid.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddSequenceOrderConfig(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG@,System.UInt32@)">
            <summary>
            Adds protocol sequence order configurations. 
            </summary> 
            <remarks>
            This function is used in conjunction with NmOpenCaptureFileInOrder. Once you define how to order frames using this 
            call, a capture file opened rearranges the frames so that they are loaded in order. <br/>
            This function adds a filter to the parser configuration, in addition to other changes. Therefore, the return value
            of the NmGetFilterCount function is incremented by 1. <br/>
            When using this function, the engine is optimized so you cannot read other data fields. If you need to process the
            data in order, write the results to another capture file or use a different parser to get the data fields that you
            need to read. 
            </remarks>
            <param name="hFrameParserConfiguration">Frame parser configuration returned from the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="SeqConfig">Pointer to a sequence structure defined by the NM_PROTOCOL_SEQUENCE_CONFIG structure.</param>
            <param name="ulConfigId">The configuration in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_ENOUGH_MEMORY: Fail to allocate memory to store the configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigReassembly(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption,System.Boolean)">
            <summary>
            Enables reassembly for a specified protocol.
            </summary> 
            <remarks>
            Each protocol can provide a way to reassemble its payload. This is dependent on the Network Monitor Parsing Language (NPL)
            for the protocol. <br/>
            Currently, there are no reassembly options. You can leave this value as zero. <br/>
            When you enable reassembly, conversations are also enabled by default because reassembly is dependent on conversations.
            When you disable reassembly, conversations are not affected. <br/>
            Reassembly is disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Reassembly options. Currently there are none. Set this value to NmReassemblyOptionNone.</param>
            <param name="bEnable">Action to take: enable or disable reassembly for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigConversation(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption,System.Boolean)">
            <summary>
            Configures conversation options.</summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            When you enable conversations, only conversations are enabled. However, when you disable conversations, reassembly is
            also disabled. <br/>
            This function must be called on the frame parser configuration to get the global and conversation properties. <br/>
            You must enable conversations in a parser configuration before you add conversation variables or filters. Otherwise,
            the engine is not initialized properly and the added filters or properties that rely on conversations do not work. <br/>
            Conversations are disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the target frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Conversation options. Currently there are none. Set this value to NmConversationOptionNone.</param>
            <param name="bEnable">Flag to enable conversations for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParser(System.IntPtr,System.IntPtr@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption)">
            <summary>
            Creates a frame parser with a specified parser configuration.
            </summary> 
            <remarks>
            With a handle to the frame parser, you can parse a raw frame with the NmParseFrame function. <br/>
            A frame parser object should be used to parse only data considered to be part of the same capture stream. A frame
            parser keeps state information, so mixing trace data from multiple unrelated capture files causes undesired results.
            However, using multiple frame parsers for the same data is supported. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            OptimizeOption explicitly specifies whether the frame parser created should be optimized. The optimization occurs 
            when filters, fields, or properties are added and provides better parsing performance. Once the frame parser is
            optimized, trying to access additional fields or properties other than those specifically added to the parser with
            NmAddField, NmAddFilter, or NmAddProperty produces no results. If it is not known what is needed in advance, it is best
            to leave the parser unoptimized. <br/>
            The NmGetFieldOffsetAndSize function also depends on optimization being set to NULL. Otherwise, zero is returned for
            both size and offset.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the capture engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="phParser">Handle to the frame parser object.</param>
            <param name="OptimizeOption">Specifies the optimization setting for the frame parser to be generated. The default setting
            is NmParserOptimizeNone.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigStartDataType(System.IntPtr,System.String)">
            <summary>
            Sets the starting data type for use with the NmParseBuffer function.</summary> 
            <remarks>
            This function is used in conjunction with the NmParseBuffer function. It is useful for parsing a partial payload.
            For example, if you have a TCP payload, you can set the parse type to HTTP to try to parse this data as an HTTP header.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="StartDataTypeName">Pointer to the string that represents the starting data type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetStartDataType(System.IntPtr,System.UInt32,System.Char*)">
            <summary>
            Determines the current start data type for the NmParseBuffer function.
            </summary> 
            <remarks>
            Unless changed, this function returns the default data type Frame. You can change the default data type for partial
            frame parsing with the NmConfigStartDataType function.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="ulBufferLength">Length of the user-provided buffer for the data type name.</param>
            <param name="pBuffer">The name of the data type that the created frame parser starts with</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INSUFFICIENT_BUFFER: The given start type name is longer than 260 characters.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseFrame(System.IntPtr,System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@,System.IntPtr@)">
            <summary>
            parses a raw frame and returns it as an object that can be used to retrieve information about that parsed frame. 
            </summary> 
            <remarks>
            The parsed frame contains the frame information, filter state, and data field information. When reassembly is enabled,
            the last fragment of the payload completing the reassembled frames is processed, and the inserted frame appears 
            as a reassembled raw frame. If there is no reassembled frame, INVALID_HANDLE_VALUE is returned. <br/>
            You must parse the frames in one capture file sequentially to make the state correct. You may have to parse frames
            0 through n-1 to be able to parse frame n correctly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser object created by the NmCreateFrameParser function to parse the 
            specified raw frame object.</param>
            <param name="hRawFrame">Raw frame returned by the NM_FRAME_CALLBACK or the NmGetFrame function.</param>
            <param name="ulFrameNumber">Frame number to assign to the new frame.</param>
            <param name="Options">One of the options defined in the NmFrameParsingOption enumeration.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame.</param>
            <param name="phInsertedRawFrame">Handle containing a reference to the inserted raw frame, if there is one.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseBuffer(System.IntPtr,System.Byte[],System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@)">
            <summary>
            Parses partial frame information or a user-supplied buffer.
            </summary> 
            <remarks>
            The data buffer contains the byte array that can be a raw frame, part of a raw frame, or any specified data. The parsed frame contains
            the parsed frame information. The filter state and enumeration of fields are supported. Intra-frame reassembly is not supported since it
            requires multiple frames and conversations that are not available in this buffered mode. <br/>
            Use the NmConfigStartDataType function to specify where to start parsing. For example, if your buffer contains only HTTP data, configure
            the start data type as HTTP, and the parser will start at that level. Be aware, however, that parsers sometimes have dependencies on 
            lower-layer protocols and conversations.
            </remarks>
            <param name="hParser">Handle to the frame parser object returned by the NmCreateFrameParser function.</param>
            <param name="DataBuffer">Pointer to the desired buffer for the parsed data.</param>
            <param name="ulBufferLength">Length of the provided buffer.</param>
            <param name="ulFrameNumber">The frame number should be used in parsing process if enabled by option flag.</param>
            <param name="Options">Options for parsing as defined by the NmFrameParsingOption function.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmBuildRawFrameFromBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt64,System.IntPtr@)">
            <summary>
            Builds a raw frame from a user-provided buffer.
            </summary> 
            <remarks>
            The data buffer is transformed into a raw frame object so that you can enter a contrived frame into a capture file. The media type and
            time stamp are optional and can be set to zero. <br/>
            The media type is defined per frame with Network Monitor 3 capture files. See Frame Layout. These values are used to determine the type
            of network on which a capture occurs. Frame.npl then uses this value to determine how to initially parse a frame. You can look at 
            Frame.npl to determine the valid types. You can also create your own types, but you must modify Frame.npl or auto-register your custom
            parser so that your new media type is handled.
            </remarks>
            <param name="DataBuffer">User-provided data buffer to be converted into a raw frame.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="ulMedia">Optional media type of the new raw frame. See Frame.npl for available media types. The default value is zero.
            For more information, see Frame Layout.</param>
            <param name="ullTimeStamp">Optional time stamp of the new raw frame. The default value is zero.</param>
            <param name="phRawFrame">Handle to the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: No space to build the new frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameFragmentInfo(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo@)">
            <summary>
            Gets the fragment information for the specified parsed frame.
            </summary> 
            <remarks>
            When receiving frames, you may want to determine whether fragmentation is occurring so that you can discard all 
            previous frames and focus on the reassembled frame that appears with the last fragment. <br/>
            You cannot determine the fragment type of a raw frame. Only after you parse a frame can you determine whether
            it is reassembled.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="FragmentationInfo">Pointer to an NM_FRAGMENTATION_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame. <br/>
                ERROR_INSUFFICIENT_BUFFER: If the protocol name length is longer than the buffer in PNmReassemblyInfo struct.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFilterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of filters that have been added to a frame parser configuration.
            </summary> 
            <remarks>
            If you add two filters, this function returns 2. <br/>
            The NmAddSequenceOrderConfig function adds a filter to the parser configuration, in addition to other changes.
            Therefore, the return value of this function is incremented by 1. Therefore, the count is 1 greater if you use
            the NmOpenCaptureFileInOrder function.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser returned by the NmCreateFrameParser function.</param>
            <param name="ulFilterCount">Number of filters available in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmEvaluateFilter(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Evaluates a filter that you added with the NmAddFilter function with the current parsed frame. 
            </summary> 
            <remarks>
            The PassFilter value is set to TRUE if the parsed frame passes the specified filter. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to 
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFilterId">Field ID returned by the NmAddFilter function.</param>
            <param name="bPassFilter">Pointer to BOOLEAN variable to contain the results of the test.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of fields enumerated in the specified parsed frame.
            </summary> 
            <remarks>
            The number of fields returned is dependent on whether or not you call the NmAddField function. If you added five 
            fields, for example, this function returns 5. However, if you do not add any fields, this function returns the
            total number of fields in the currently parsed frame. You can iterate through fields if you do not have a specific
            one that you are looking for. However, there is a performance price incurred, and it takes longer to parse every
            field. Therefore, if you know which fields you want, you get better performance by adding the fields explicitly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting 
            frames for parsing to work properly. <br/>
            This function returns the total number of fields, regardless of whether any have been added. However, the 
            NmGetRequestedPropertyCount function returns zero if no properties have been added.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldCount">Number of fields returned in the parsed frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParsedFieldInfo(System.IntPtr,System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo@)">
            <summary>
            Gets a NM_PARSED_FIELD_INFO structure that contains information such as the offset and bit length of
            the requested data field.
            </summary> 
            <remarks>
            The pointer to field is valid until the parsed frame containing the field is closed.
            </remarks>
            <example>
            <code>
                NmParsedFieldInfo parsedDataField = new NmParsedFieldInfo();
                parsedDataField.Size = (ushort)Marshal.SizeOf(typeof(NmParsedFieldInfo));
                NetmonAPI.NmGetParsedFieldInfo(hParsedFrame, 0, 0, ref parsedDataField);
            </code>
            </example>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">ID of the field returned by the NmAddField function.</param>
            <param name="ulOption">There are currently no options. Leave this value as zero.</param>
            <param name="pParsedFieldInfo">Pointer to the NM_PARSED_FIELD_INFO structure. The Size value must be
            initialized to the size of the structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldName(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames,System.UInt32,System.Char*)">
            <summary>
            Gets the name, data type, containing protocol, or formatted display string of the field specified by the field ID.
            </summary> 
            <remarks>
            BufferLength is a count of the number of elements. This is probably most useful when you are iterating through 
            fields to discover their names, but it can be used to get other field names, such as those containing the protocol
            name or the data type name. <br/>
            This function retrieves the name of the field, field data type name, field display string, and so on. API users must 
            specify parsing options in order for the API to store them in the parsed frame. For example, users must set the frame
            parsing option to include NmFieldDisplayStringRequired to store the display string in the parsed frame. For possible
            values, see the NmFrameParsingOption enumeration. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            Formatted display stringss can return with leading spaces so that they line up properly in the UI when using bit 
            fields. These spaces are part of the returned display string and can be removed by the user.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="RequestedName">Type of the name requested as described by the NmParsedFieldNames enumeration.</param>
            <param name="ulBufferLength">Length, in elements, of the caller-provided buffer.</param>
            <param name="pBuffer">Pointer to the caller-provided buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: If ulBufferLength is shorted than the name length.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldOffsetAndSize(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and size of the field specified by the field ID as returned by the NmAddField function.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need 
            to parse all supporting frames for parsing to work properly. <br/>
            In order for the size and offset to be returned, optimization must be disabled when you call the 
            NmCreateFrameParser function.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">The ID returned by NmAddField.</param>
            <param name="ulFieldOffset">Pointer to receive the field offset, in bits.</param>
            <param name="ulFieldSize">Pointer to receive the field size, in bits.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber8Bit(System.IntPtr,System.UInt32,System.Byte@)">
            <summary>
            Gets a 8-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must
            maintain state information, such as HTTP, SMB, and RPC, use conversations to store that 
            information. You may also need to parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ubNumber">Pointer to an 8-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber16Bit(System.IntPtr,System.UInt32,System.UInt16@)">
            <summary>
            Gets a 16-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="uiNumber">Pointer to a 16-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber32Bit(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Gets a 32-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulNumber">Pointer to a 32-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber64Bit(System.IntPtr,System.UInt32,System.UInt64@)">
            <summary>
            Gets a 64-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ullNumber">Pointer to a 64-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueByteArray(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field of byte array type. Any binary field of size 3, 5, 6, 7, or greater than 8 is treated as a byte
            array. The sizes 2, 4, and 8 are numbers that have corresponding value retrieval functions such as
            NmGetFieldValueNumber32Bit.
            </summary> 
            <remarks>
            This function differs from the NmGetFieldInBuffer function in that it is explicitly for data types that are 
            described as arrays, whereas NmGetFieldInBuffer can be used to get the raw representation of any data field. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse 
            all supporting frames for parsing to work properly. <br/>
            If you are retrieving a field whose size is 1, 2, 4, or 8, you will get an error 160 (ERROR_BAD_ARGUMENTS) returned.
            This is because the base data type Number with sizes of 1, 2, 4, or 8 are special cases and are converted
            to integers of those sizes, for example, UINT8, UINT16, UINT32, and UINT64. Therefore, these sizes are considered 
            numbers, and not byte arrays. <br/>
            You can use the NmGetPartialRawFrame function with the offsets returned from the NmGetFieldOffsetAndSize function
            to read the information directly from the raw frame for any sizes.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulByteLength">Length of the supplied buffer.</param>
            <param name="pBuffer">Pointer to a buffer that receives the field value.</param>
            <param name="ulReturnLength">Pointer that receives the size of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueString(System.IntPtr,System.UInt32,System.UInt32,System.Char*)">
            <summary>
            Gets a string from a parsed frame.
            </summary> 
            <remarks>
            This function retrieves fields of string data type, either ASCII or wide-character. The returned string is always 
            in wide-character format, regardless of the string type on the wire. API users can determine the wire data type by
            calling the NmGetFieldName function with the RequestedName parameter set to NmFieldDataTypeName. The 
            NmDataTypeNameRequired must be specified as the parsing option to get the data type name after parsing.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulBufferLength">Length of the supplied buffer.</param>
            <param name="pValueBuffer">Pointer to a buffer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldInBuffer(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field value from a parsed frame. The values returned are in the same byte order as they 
            appear in the raw frame data.
            </summary> 
            <remarks>
            Only the content up to the buffer length is copied. Callers can use the NmGetFieldOffsetAndSize function to
            obtain the size before calling this function. <br/>
            This function returns fields in the order that they come over the wire. If the buffer is a byte array with a
            field offset of 10 and a length of 3, the first byte in the buffer referenced by index zero contains the 
            tenth byte in the raw frame. <br/>
            This function does not work with a container object, such as a structure or protocol. For those, use
            NmGetPartialRawFrame instead.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by NmParseFrame.</param>
            <param name="ulBufferLength">Length of the caller-provided buffer.</param>
            <param name="pFieldBuffer">Pointer to a buffer to receive raw field data.</param>
            <param name="ulReturnLength">Receives the length of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRequestedPropertyCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of properties added to the parser with the NmAddProperty function.
            </summary> 
            <remarks>
            This function returns zero unless properties have been added. <br/>
            The return value is the number of properties added to the frame parser so that the frame parser
            can be optimized not to include NPL objects independent of the added properties. A non-optimized 
            frame parser contains thousands of properties, and currently the API does not provide support for
            retrieving the total number of properties.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulCount">Count of properties added to the frame configuration.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle, wrong scope or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyInfo(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO@)">
            <summary>
            Gets the NM_PROPERTY_INFO structure for a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            If the property container type is multi-value storage or an array and the property added using NmAddProperty
            does not contain the key information, the value type and size may be unknown. Therefore, the caller may need
            to call the retrieval function, NmGetPropertyValueById or NmGetPropertyValueByName, twice. The first time,
            the buffer size needed is returned with the ERROR_INSUFFICIENT_BUFFER error. The correct buffer size can then
            be used in the second call. <br/>
            If the Name buffer provided is NULL, this function returns successfully, but the name is not returned. <br/>
            Set the Name member of the NM_PROPERTY_INFO to NULL if it is not set to a valid memory location.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser configuration.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="pInfo">NM_PROPERTY_INFO structure for this ID.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: NM_PARSED_PROPERTY_INFO version mismatch.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyById(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value of a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            The last two parameters, ulKeyCount and pKeyArray, are used to access properties that can be indexed.
            This includes multi-value storage arrays and property groups. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if
            the entire name was specified when the property was added to the frame configuration. For example, if 
            you add Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the 
            property. <br/>
            In most cases, ulKeyCount is 1, but you can add multiple keys to access properties that are defined 
            as in the following NPL example.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="ulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups.
            The C++ version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. 
            The C# version of this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyByName(System.IntPtr,System.String,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value for a property specified by name.
            </summary> 
            <remarks>
            In some cases, you can access a property by name without having added it using the NmAddProperty function.
            If an optimized frame parser is used, the property name may not be added to the frame parser and therefore
            may not be available. If you are using an optimized frame parser, add the property using NmAddProperty so 
            that you can access it by name or ID. For more information about optimizing, see NmCreateFrameParser. <br/>
            The fully qualified name must be used. <br/>
            The key type must match the type used by the parser. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if the 
            entire name was specified when the property was added to the frame configuration. For example, if you add 
            Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the property. <br/>
            Information for the size and types of keys can be obtained with the NmGetPropertyInfo function.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="pPropertyName">Fully qualified name of the property.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="pulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups. The C++
            version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. The C# version of
            this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrameLength(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the length of the raw frame.
            </summary> 
            <remarks>
            You cannot use a parsed frame handle. You must use the raw frame handle.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by the NmGetFrame function or 
            by the NM_FRAME_CALLBACK function.</param>
            <param name="pulLength">Pointer to receive the length of the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrame(System.IntPtr,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to the raw frame data returned from a capture file by the NmGetFrame function or 
            over a network from the capture engine through the NM_FRAME_CALLBACK function.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or 
            the NM_FRAME_CALLBACK terminates.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by NmGetFrame or by NM_FRAME_CALLBACK.</param>
            <param name="ulLength">Length of the provided buffer.</param>
            <param name="pFrameBuffer">Returned pointer to the raw frame data.</param>
            <param name="pulReturnLength">Size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPartialRawFrame(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to a specific piece of the raw frame data.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or
            NM_FRAME_CALLBACK terminates. The user must provide the buffer to be copied into.
            </remarks>
            <param name="hRawFrame">Handle to the raw frame object returned by the NmGetFrame function 
            or by the NM_FRAME_CALLBACK function.</param>
            <param name="ulFrameOffset">Offset in the raw frame from which to start.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="pFrameBuffer">Pointer to the user-provided buffer to receive the partial raw frame data.</param>
            <param name="pulReturnLength">Pointer to receive the size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameMacType(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the per-frame media access type.
            </summary> 
            <remarks>
            This function can be used on either a raw or a parsed frame. <br/>
            You can capture on multiple adapters. Therefore, the MAC type for each frame is recorded.
            For more information, see Capture File Format.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pulMacType">Pointer to receive the Machine Address Code (MAC) type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameTimeStamp(System.IntPtr,System.UInt64@)">
            <summary>
            Gets the absolute time stamp of a frame.
            </summary> 
            <remarks>
            This function returns the absolute time stamp, which is calculated by adding the frame offset
            to the capture file time stamp in the capture header. <br/>
            This function can be used with a raw frame or a parsed frame.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pTimeStamp">Pointer to receive the 64-bit time stamp.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCommentInfo(System.IntPtr,System.UInt32@,System.Byte*,System.UInt32@,System.Byte*)">
            <summary>
            Gets the frame comment title and description.
            </summary>
            <remarks>
            If the buffers passed in are NULL, the buffer length parameters indicate the required 
            length of the buffer needed to store the title and comment strings.
            </remarks>
            <param name="hFrame">Handle to a raw frame object.</param>
            <param name="ulCommentTitleBufferLength">Pointer to the actual byte length that corresponds to the title buffer.</param>
            <param name="pCommentTitleBuffer">Pointer to a caller-supplied buffer to hold the comment title.</param>
            <param name="ulCommentDescriptionBufferLength">Pointer to the actual byte length that corresponds to the description buffer.</param>
            <param name="pCommentDescriptionBuffer">Caller-supplied buffer to hold the comment description.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: Specified parsed frame not found. <br/>
                ERROR_INSUFFICIENT_BUFFER: If either of the supplied buffers is NULL. <br/>
                ERROR_EMPTY: Frame comment information was not found.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateCaptureFile(System.String,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag,System.IntPtr@,System.UInt32@)">
            <summary>
            Creates a new Network Monitor capture file for adding frames.
            </summary> 
            <remarks>
            If you specify a size of zero, 20 MB is used. <br/>
            If you specify a size larger than the maximum size determined by MaxCaptureFileSize, 
            the maximum size is used instead. <br/>
            If you specify a size that is less than the minimum size determined by the MinCaptureFileSize
            member of NM_API_CONFIGURATION, the minimum size is used instead. <br/>
            You can close and save the capture file by calling the NmCloseHandle function.
            </remarks>
            <param name="pFileName">String containing the path of the capture file to create.</param>
            <param name="ulSize">Maximum size of the file, in bytes. The upper limit is 500 MB. The default 
            upper limit is determined by the current configuration as determined by the NmGetApiConfiguration function.</param>
            <param name="ulFlags">Option flags for setting capture style: wraparound or chained.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <param name="ulReturnSize">Size of the capture file, in bytes.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFile(System.String,System.IntPtr@)">
            <summary>
            Opens a Network Monitor capture file for reading.
            </summary> 
            <remarks>
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFileInOrder(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER@,System.IntPtr@)">
            <summary>
            Opens a capture file and reorders packets based on the configuration defined by the 
            NmAddSequenceOrderConfig function.
            </summary> 
            <remarks>
            The frame in file are in the order of the sequence specified in the frame parser parameter
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="pOrderParser">Pointer to a NM_ORDER_PARSER_PARAMETER structure.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file. <br/>
                ERROR_INVALID_PARAMETER: frame parser does not have sequence configuration. <br/>
                ERROR_NOT_ENOUGH_MEMORY: not enough memory to build required objects. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: PNM_ORDER_PARSER_PARAMETER version does not match.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Adds a frame to the specified capture file.
            </summary> 
            <remarks>
            The capture file must be opened with NmCreateCaptureFile function. <br/>
            A raw frame can be returned by the frame indication callback or the NmBuildRawFrameFromBuffer function. <br/>
            If you add frames into a capture file and the time stamp is older than the time stamp of the last frame
            added, the newly added frame is not given the correct time stamp.
            </remarks>
            <param name="hCaptureFile">Handle to the capture file returned by the NmCreateCaptureFile function.</param>
            <param name="hFrame">Handle to raw frame to be added.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the frame count in the specified capture file.
            </summary> 
            <param name="hCaptureFile">Handle to the capture file.</param>
            <param name="hFrameCount">Pointer to receive the frame count.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrame(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Gets a raw frame from the capture file.
            </summary> 
            <remarks>
            The frame number is the index number in the capture file. The first frame starts 
            with an index of zero. <br/>
            You must free the handle returned from this call.
            </remarks>
            <param name="hCaptureFile">Handle to a capture file returned by the NmCreateCaptureFile
            or the NmOpenCaptureFile function.</param>
            <param name="ulFrameNumber">Zero-based frame number.</param>
            <param name="phFrame">Handle containing a reference to the raw frame object. You must 
            call the NmCloseHandle function to free this handle.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetTopConversation(System.IntPtr,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the top-level conversation of the parsed frame, described by the conversation protocol name 
            and conversation ID.
            </summary> 
            <remarks>
            The parsed frame must have conversation set to TRUE. <br/>
            The protocol name length is returned to caller. Therefore, if the provided buffer is not large 
            enough, the caller can call again with the correct size of buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a parsed frame object.</param>
            <param name="ulBufferESize">Size of the buffer for the protocol name, in wide characters.</param>
            <param name="pProtocolName">Pointer to the buffer for the protocol name.</param>
            <param name="pulProtocolNameLength">Length of the protocol name, in wide characters, not including the terminating pattern.</param>
            <param name="pulConversationID">ID of the top-level conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParentConversation(System.IntPtr,System.UInt32,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the parent conversation information for the specified conversation, including 
            conversation protocol name and conversation ID.
            </summary> 
            <remarks>
            The parent protocol name length is returned to caller.  So if the provided buffer is not enough, caller
            Can call again with the proper sized buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a frame parser.</param>
            <param name="ulConversationId">ID of the child conversation.</param>
            <param name="ulBufferESize">Size of the buffer for the parent conversation protocol name, in bytes.</param>
            <param name="pParentProtocolNameBuffer">Pointer to the buffer for the parent conversation protocol name.</param>
            <param name="ulParentProtocolNameLength">Returned length of the parent conversation protocol name.</param>
            <param name="ulParentConversationID">ID of the parent conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor">
            <summary>
            Represents the NETMON Wrapper. <br/>
            NOTE: You must have NetMon 3+ installed on your system in order
            to use this library.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <param name="FrameFilter">
            The string representing the Frame filter. Pass NULL for unfiltered capture. <br/>
            NOTE: NetMon 3 has a bug wherein it leaks memory when we use the Frame Filter. <i>Use
            the Frame Filter feature with extreme caution.</i>
            </param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StartCapture">
            <summary>
            Starts the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StopCapture">
            <summary>
            Stops the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CaptureCleanUp">
            <summary>
            Cleans up after the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.InitCapture">
            <summary>
            Initializes the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CreateCaptureFile">
            <summary>
            Creates the capture file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.OpenCaptureEngine">
            <summary>
            Initializes the capture engine.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ConfigureNWAdapter">
            <summary>
            Configures the network adapter for capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.FrameIndicationCallback(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback for each captured frame.
            </summary>
            <param name="hCapEng"></param>
            <param name="ulAdatIdx"></param>
            <param name="pContext"></param>
            <param name="hRawFrame"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ParserCallback(System.IntPtr,System.UInt32,System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType)">
            <summary>
            Callback for the parser engine.
            </summary>
            <param name="pCallerContext"></param>
            <param name="ulStatusCode"></param>
            <param name="lpDescription"></param>
            <param name="ulType"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.LoadFilter">
            <summary>
            Loads the specified capture filter. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing unmanaged objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the object, releasing managed and unmanaged handles.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\NetworkMonitor3Wrapper\NetworkMonitor3Wrapper\bin\Release\PLTScheduler\Test.Common.Library.NetworkMonitor3Wrapper.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.NetworkMonitor3Wrapper</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant">
            <summary>
            Represents the Netmon API Constants.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAC_ADDRESS_SIZE">
            <summary>
            The size of the MAC Address.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.MAX_PATH">
            <summary>
            The maximum paths.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConstant.NMAPI_GUID_SIZE">
            <summary>
            Size of the NetMon API GUID.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode">
            <summary>
            Represents the Netmon API return status code.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_TOO_BIG_FOR_FILE">
            <summary>
            The file doesn't have enough space to hold this frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_SMALL">
            <summary>
            Capture file size too small. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FILE_TOO_LARGE">
            <summary>
            Capture file size too large. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_CONTINUES_INTO_NEXT_FRAME">
            <summary>
            The frame is corrupt. It overlaps with the next frame. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_FRAME_RANGE_OUT_OF_BOUNDS">
            <summary>
            The frame is corrupt. The dimensions of the frame are not in the range of the capture file. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_ENDIAN">
            <summary>
            The data is in BigEndian and we support only Little Endian 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_PCAP_FILE">
            <summary>
            This file is not a valid PCAP file
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_WRONG_PCAP_VERSION">
            <summary>
            This file is not a supported PCAP version 
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_FILE_TYPE">
            <summary>
            This file type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_INVALID_NETMON_CAP_FILE">
            <summary>
            This file type is not a valid Netmon capture file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_UNSUPPORTED_PCAP_DLT">
            <summary>
            This Pcap data link type is not supported.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmStatusCode.NM_STATUS_API_VERSION_MISMATCHED">
            <summary>
            The current NmApi DLL is different from the required version by the application. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode">
            <summary>
            Represents the Netmon capture mode.
            </summary>
            <remarks>
            When capturing in promiscuous mode, you may not see traffic if using a switch or if the traffic occurs
            on a different segment of the network. The traffic must reach the Network Interface Controller (NIC) on which
            you are capturing. Often, network equipment, such as a switch, does not send traffic to a NIC if it is not
            directed to that NIC address.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.LocalOnly">
            <summary>
            Specifies only local traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode.Promiscuous">
            <summary>
            Specifies all traffic that reaches the network adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag">
            <summary>
            Represents the Netmon capture file expansion mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.WrapAround">
            <summary>
            Creates a file that wraps around in first-in-first-out (FIFO) order.
            When the buffer is full, the oldest data is written over first.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.Chain">
            <summary>
            When the maximum file size is reached, a new file is created. If you
            have named the file Test.cap, the subsequent files are named test(1).cap,
            test(2).cap, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag.LastFlag">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode">
            <summary>
            Represents the Capture callback function exit mode.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.DiscardRemainFrames">
            <summary>
            Remaining frames are discarded.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode.ReturnRemainFrames">
            <summary>
            Remaining frames are returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState">
            <summary>
            Represents the Netmon driver adapter operational states.
            </summary> 
            <remarks>
            These states are returned by the Network Driver Interface Specification (NDIS).
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.None">
            <summary>
            Adapter is currently not bound, or some other low-level error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Bound">
            <summary>
            Adapter is bound to the Network Monitor 3 driver.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Stopped">
            <summary>
            Adapter is bound, but currently not capturing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Capturing">
            <summary>
            Adapter is currently capturing network traffic.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmAdapterOpState.Paused">
            <summary>
            Adapter is currently paused.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType">
            <summary>
            Represents the Status levels of the call back message.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.None">
            <summary>
            Placeholder. This value is never returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Error">
            <summary>
            The parser engine has returned an error.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Warning">
            <summary>
            The parser engine has returned a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Information">
            <summary>
            The parser engine has returned an information message. At least
            one of these is returned when calling the NmLoadNplParser function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType.Last">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption">
            <summary>
            Represents the NPL loading option.
            </summary> 
            <remarks>
            By default the NmLoadNplOptionNone is used.  Only the user specified NPL path(s) are loaded.
            If both NmAppendRegisteredNplSets and a NPL path are specified, the resulting NPL parser will include
            Both and the specified NPL path(s) are prefixed.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmLoadNplOptionNone">
            <summary>
            Specifies that only the user-specified NPL path(s) are loaded. This is the default value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption.NmAppendRegisteredNplSets">
            <summary>
            If both this parameter and an NPL path are specified, the resulting NPL parser will
            include both, and the specified NPL path(s) are prefixed.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption">
            <summary>
            Represents the Frame parser optimization options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeNone">
            <summary>
            Specifies creating a frame parser without optimization, according to the added filter. This is the default setting.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeFull">
            <summary>
            Specifies creating an optimized frame parser, based on added filters, fields, and properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption.ParserOptimizeLast">
            <summary>
            Placeholder. Not used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption">
            <summary>
            Represents the Frame parser parsing options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.None">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldFullNameRequired">
            <summary>
            Return the full field name with the NmGetParsedFieldInfo
            function, such as TCP.Flags.Reset. Turning this on degrades performance.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ContainingProtocolNameRequired">
            <summary>
            Return the containing protocol with NmGetParsedField.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.DataTypeNameRequired">
            <summary>
            Return the data type name, for example, MACAddress when querying for Ethernet.SourceAddress.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.UseFrameNumberParameter">
            <summary>
            Use the caller-specified frame number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FieldDisplayStringRequired">
            <summary>
            Provide the display string of the field.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.FrameConversationInfoRequired">
            <summary>
            Provide frame conversation information.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption.ParsingOptionLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType">
            <summary>
            Represents the Fragmentation types returned in parsed frames.
            </summary>
            <remarks>
            When reassembly is performed, the engine signals frames as being first, middle, or last.
            You can use this information to determine whether a frame is fragmented. When this occurs,
            you can wait for the last frame marked as NmFragmentTypeEnd, and then use the handle to
            the inserted frame that is returned by the NmParseFrame function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.None">
            <summary>
            This is not part of a fragmented frame.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Start">
            <summary>
            This is the first frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.Middle">
            <summary>
            This is a frame in the middle of a set of fragmented frames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameFragmentationType.End">
            <summary>
            This is the last frame of a set of fragmented frames.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames">
            <summary>
            Represents the name string properties in parsed field.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.NamePath">
            <summary>
            Field name path is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.DataTypeName">
            <summary>
            Data type name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.ContainingProtocolName">
            <summary>
            Containing protocol name is returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames.FieldDisplayString">
            <summary>
            Formatted display string is returned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType">
            <summary>
            Represents the Key types of the multi storage property.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNone">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeNumber">
            <summary>
            Specifies that the key is a number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeString">
            <summary>
            Specifies that the key is a string.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeByteArray">
            <summary>
            Specifies that the key is a byte array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeArrayIndex">
            <summary>
            Specifies that the key is the index of a multivalue storage array.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmMvsKeyType.MvsKeyTypeLast">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope">
            <summary>
            Represents the Scopes of properties. It is reported in the property info.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeNone">
            <summary>
            Specifies no scope.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeConversation">
            <summary>
            Specifies that the property applies to the network conversation.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeGlobal">
            <summary>
            Specifies that the property is global.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyScope.PropertyScopeFrame">
            <summary>
            Specifies that the property applies to the frame. This is the default.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType">
            <summary>
            Represents the property aggregation form, i.e., MVS with key, Array with index, etc.
            </summary> 
            <remarks>
            NmPropertyContainerTypeArray is the regular form if there is only one element.
            The NmGetPropertyInfo function may return container type NmPropertyContainerTypeValue if
            the key is not specified in the NmAddProperty function.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerNone">
            <summary>
            Specifies that there is no property type.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerValue">
            <summary>
            Specifies that the regular form is a single value of
            NmPropertyValueType that can be referenced by just the property name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerMvs">
            <summary>
            Specifies that the multi-value storage set of properties share the
            same name, but have different keys.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyContainerType.PropertyTypeContainerArray">
            <summary>
            Specifies a set of properties that are stored in an array and retrieved by name and index.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType">
            <summary>
            Represents the type of the property value.
            </summary> 
            <remarks>
            The value types of properties in the same multi-value storage can be different
            if they are referenced by different keys. The value types of properties in the 
            same property group can also be different if they are referenced by different indexes.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueNone">
            <summary>
            Specifies no data type for the property value.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueSignedNumber">
            <summary>
            Specifies that the property value is a signed integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueUnsignedNumber">
            <summary>
            Specifies that the property value is an unsigned integer.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueString">
            <summary>
            Specifies that the property value is a string in wide character format.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType.PropertyValueByteBlob">
            <summary>
            Specifies that the property value is a binary large object (BLOB) presented as a byte array.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey">
            <summary>
            Represents information on the key for retrieving multi-value storage properties.
            The array in this structure is used as a parameter of to the NmGetPropertyValueById
            and the NmGetPropertyValueByName functions.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Type">
            <summary>
            Type of key to return. Possible values are declared in the NmMvsKeyType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.Length">
            <summary>
            User-supplied length of the key.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.ValuePointer">
            <summary>
            Marshaled pointer to the key value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetStringKey(System.String)">
            <summary>
            Sets the key to a string value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetNumberKey(System.Int64)">
            <summary>
            Sets the key to a number value.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetIndexKey(System.Int64)">
            <summary>
            Sets the key to an array index.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey.SetByteArrayKey(System.Byte[],System.Int32)">
            <summary>
            Sets the key to a buffer value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO">
            <summary>
            Contains runtime information for instantiated properties.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Size">
            <summary>
            Specifies the size of the property for version control.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Scope">
            <summary>
            Specifies the property scope, one of the elements of the NmPropertyScope enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ContainerType">
            <summary>
            Specifies the property container type, one of the elements of the NmPropertyContainerType enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.NameSize">
            <summary>
            Specifies the element count of the name, excluding the terminator. When the name buffer is provided,
            this member is used for both input and output parameters. This member acts as an input parameter
            specifying the buffer length. The actual length of the name is also returned by the NmGetPropertyInfo
            function. When no name buffer is provided (the Name parameter is NULL), this member is used only as output.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.Name">
            <summary>
            Property name string added by the NmAddProperty function. If a buffer is assigned when calling NmGetPropertyInfo,
            the NameSize member must specify the buffer length, in number of elements. NmGetPropertyInfo returns the
            property name in the buffer if the buffer has enough space. Otherwise, a buffer overflow error is returned.
            Set this member to NULL if you do not need a name returned.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueType">
            <summary>
            Specifies the data type of the property value, one of the elements of the NmPropertyValueType enumeration.
            If the value type is string, the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ValueSize">
            <summary>
            Specifies the size, in byte count, of the value for which the caller must provide a buffer. If ValueType
            is set to String, this member is in WCHAR, and the termination pattern is not included.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO.ItemCount">
            <summary>
            Specifies the number of items in the array. Regular and multi-value storage properties have only one item.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo">
            <summary>
            Represents the fragmentation information returned in parsed frames.
            </summary> 
            <remarks>
            A frame is either non-fragmented or fragmented. A fragmented frame can be a start fragment,
            a middle fragment, or an end fragment. The carrier protocol of the fragment and the
            fragmented protocol information is included, if available.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.Size">
            <summary>
            Size of the structure to be initialized by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentedProtocolName">
            <summary>
            Name of the protocol that has fragmented the payload, such as IPv4, which breaks payloads
            into smaller segments for networks with smaller frame size.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.PayloadProtocolName">
            <summary>
            Name of the protocol to which the fragments belong. For example, HTTP may be the payload of TCP.
            Multiple TCP packets make up one HTTP page. Although TCP is a byte-stream transport, Network
            Monitor currently manipulates TCP at the frame level for simplicity.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo.FragmentType">
            <summary>
            Type of fragment as defined by the NmFrameFragmentationType enumeration.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate">
            <summary>
            Callback function for frame receiving/retrieving.
            </summary>
            <param name="hCaptureEngine">Handle to the capture engine object responsible for this callback returned by
            the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter on which this frame was captured. Within the range from
            zero to the value returned by the NmGetAdapterCount function.</param>
            <param name="pCallerContext">Pointer to the object that was passed in to NmConfigAdapter. For example,
            a capture file handle can be passed in so that the raw frame received can be saved.</param>
            <param name="hFrame">Handle to the raw captured frame. You do not need to free this handle.</param>
            <remarks>
            This callback is called after the capture engine has stored the frame within the buffer on the computer 
            hard drive. Any heavy processing within the callback may cause a loss of network frames if the buffer
            grows beyond the capacity of the drive or the set capture file limit or quota.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption">
            <summary>
            Represents the Frame parser conversation configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.None">
            <summary>
            There are currently no conversation options. Always set this to NmConversationOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption">
            <summary>
            Represents the frame parser reassembly configuration options.
            </summary> 
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.None">
            <summary>
            Currently, there are no reassembly options. Always set this to NmReassemblyOptionNone.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption.Last">
            <summary>
            Do not use.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate">
            <summary>
            Callback function for parser compile/build process.
            </summary>
            <param name="pCallerContext">User-defined context to send to parser message callback.</param>
            <param name="ulStatusCode">Status code of the message.</param>
            <param name="lpDescription">Text description of the message.</param>
            <param name="ulType">Type of error message as described by the NmCallbackMsgType enumeration.</param>
            <remarks>
            The same callback can be used for loading the NmLoadNplParser and NmCreateFrameParserConfiguration functions.
            When loading the Network Monitor Parsing Language (NPL), you receive errors, warnings, and status messages.
            Since a status message is sent even for a successful load or build, you will be called at least one. When
            creating the frame parser, you will be called with error callbacks in the parser and when errors are flagged.
            For example, when a frame is not parsed and there is extra data, an error is often flagged by the parser.
            </remarks>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO">
            <summary>
            Contains adapter or interface information as returned by the NmGetAdapter function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Size">
            <summary>
            Size of structure that is set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PermanentAddr">
            <summary>
            Hardware address of the Network Interface Controller (NIC).
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CurrentAddr">
            <summary>
            Driver-defined hardware address. Not all drivers support this.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.MediaType">
            <summary>
            Network Driver Interface Specification (NDIS) NdisMediumXXX type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PhysicalMediaType">
            <summary>
            Physical medium type that the adapter supports.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.ConnectionName">
            <summary>
            Internal name of the connection. This is often blank.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.FriendlyName">
            <summary>
            Friendly name of the interface for this adapter. This is the description that appears in ipconfig.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Guid">
            <summary>
            Interface GUID of the adapter.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.OpState">
            <summary>
            Operation state. For more information, see the NmAdapterOpState enumeration.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.Enabled">
            <summary>
            Whether the adapter is enabled.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.PModeEnabled">
            <summary>
            Whether the adapter allows for promiscuous mode sniffing.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO.CallBackFunction">
            <summary>
            Callback function provided when you configured the adapter with the NmConfigAdapter function.
            The callback function is called by the capture engine to deliver raw frames captured on the adapter.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION">
            <summary>
            Contains parser configuration information. It is used to retrieve current configuration
            or set user-specified configuration.
            </summary>
            <remarks>
            Use the NmApiInitialize and the NmGetApiConfiguration functions to set and retrieve this structure.
            NmAPIInitialize changes the default configuration parameters defined in the this structure.
            The values specified in the structure as parameters passed in to NmAPIInitialize overwrite the default
            values. Therefore, it is recommended that you first get the configuration, and then change the values
            as desired before calling NmAPIInitialize with an alternate configuration.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.Size">
            <summary>
            Size of the structure to be set by the caller.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.RawFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for raw frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ParsedFrameHandleCountLimit">
            <summary>
            Maximum number of handles available for parsed frames. Default value is 1000.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureEngineCountLimit">
            <summary>
            Maximum number of handles available for capture engines. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.NplParserCountLimit">
            <summary>
            Maximum number of handles available for Network Monitor Parsing Language (NPL)
            parser sets. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserConfigCountLimit">
            <summary>
            Maximum number of handles available for frame parser configurations.
            Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParserCountLimit">
            <summary>
            Maximum number of handles available for frame parsers. Default value is 50.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileCountLimit">
            <summary>
            Maximum number of handles available for capture files. Default value is 10.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ThreadingMode">
            <summary>
            Threading mode. Possible values are COINIT_MULTITHREADED (0) and
            COINIT_APARTMENTTHREADED (2). Default value is COINIT_APARTMENTTHREADED.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ConversationOption">
            <summary>
            Not currently used. See NmConversationConfigOption for information on conversation flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.ReassemblyOption">
            <summary>
            Not currently used. See NmReassemblyConfigOption for information on reassembly flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureFileMode">
            <summary>
            Override default capture file options. Default value is CaptureFileWrapAround. See
            NmCaptureFileMode for information on capture flags.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.FrameParsingOption">
            <summary>
            Override default parsing options. No longer used.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.CaptureCallbackExitMode">
            <summary>
            Stop capture exit mode. Possible values are elements in the NmCaptureCallbackExitMode
            enumeration. The default value is NmDiscardRemainFrames.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxCaptureFileSize">
            <summary>
            Maximum size for a capture file. This is used when the NmCreateCaptureFile function is called.
            The value is 500 MB. This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MinCaptureFileSize">
            <summary>
            Minimum size for a capture file. This is used when NmCreateCaptureFile is called. The value is 2072 bytes.
            This member is not user-configurable. It is read-only.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION.MaxApiHandleLimit">
            <summary>
            Maximum number of handles per handle type. Default value is 65,536. It is read-only.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG">
            <summary>
            Defines how a protocol defines ordering of packets.
            </summary>
            <remarks>
            A caller using this structure must initialize the size before calling NmAddSequenceOrderConfig.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.Size">
            <summary>
            This member must match the size of the version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.GroupKeyString">
            <summary>
            Names of the properties containing the values to form the key to identify the group
            of the frames to put in order. If multiple properties are used, they are separated by
            semicolons. The string must be NULL-terminated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.SequencePropertyString">
            <summary>
            Name of the property containing the frame's sequence number.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG.NextSequencePropertyString">
            <summary>
            Name of the property containing the frame's next sequence number.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER">
            <summary>
            Structure for calling NmOpCaptureFileInOrder to provide the parser built with sequence
            control information to correct potential out-of-order frames in the capture file to be opened.
            It also contains an option flag for future extension.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Size">
            <summary>
            This member must match the size of the current version.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.hFrameParser">
            <summary>
            Frame parser used for handling out-of-order frames. It must be built from a frame parser
            configuration that has sequence information specified by the NM_PROTOCOL_SEQUENCE_CONFIG structure.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER.Option">
            <summary>
            Not currently used.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM">
            <summary>
            Represents the Network Medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Fddi">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Wan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_LocalTalk">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Dix">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_ArcnetRaw">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Arcnet878_2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Atm">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Bpc">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_CoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_InfiniBand">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Tunnel">
            <summary>
            #if ((NTDDI_VERSION >= NTDDI_VISTA) || NDIS_SUPPORT_NDIS6)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.Ndis_Loopback">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_MEDIUM.NdisMediumMax">
            <summary>
            #endif // (NTDDI_VERSION >= NTDDI_VISTA)
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM">
            <summary>
            Represents the Network Physical medium.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Unspecified">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessLan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_CableModem">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PhoneLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_PowerLine">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_DSL">
            <summary>
            includes ADSL and UADSL (G.Lite)
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_FibreChannel">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_1394">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WirelessWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Native802_11">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Bluetooth">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Infiniband">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiMax">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_UWB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_3">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_802_5">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Irda">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredWAN">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_WiredCoWan">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.Ndis_Other">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NDIS_PHYSICAL_MEDIUM.NdisPhysicalMediumMax">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType">
            <summary>
            Numerical Definitions of Variant Types. <br/>
            http://www.marin.clara.net/COM/variant_type_definitions.htm
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_EMPTY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_NULL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_R8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DATE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DISPATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ERROR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BOOL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VARIANT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UNKNOWN">
            <summary>
            </summary>
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_DECIMAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI1">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI2">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI4">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_I8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UI8">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_INT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_UINT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VOID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_HRESULT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_PTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_SAFEARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_USERDEFINED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_LPWSTR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_FILETIME">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAM">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORAGE">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STREAMED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_STORED_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BLOB_OBJECT">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_CLSID">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_VECTOR">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ARRAY">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_BYREF">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_RESERVED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGAL">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_ILLEGALMASKED">
            <summary>
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.FieldType.VT_TYPEMASK">
            <summary>
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo">
            <summary>
            Contains information about the data field, such as field offset, field length, and so on.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.Size">
            <summary>
            Caller-provided size of the structure being sent. Should be initialized by the user.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldIndent">
            <summary>
            Indent of data field. For example, top-level fields have an indent of zero,
            but Tcp.flags.reset has an indent of 2.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NamePathLength">
            <summary>
            Length in elements of the name path. Since this is returned as a WCHAR, you must
            multiply it by sizeof(WCHAR). This does not include a NULL, which is added by the
            NmGetFieldName function.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.NplDataTypeNameLength">
            <summary>
            Length in elements of the data type. Since this is returned as a WCHAR, you must
            multiply by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolNameLength">
            <summary>
            Length in elements of the protocol name. Since this is returned as a WCHAR, you must multiply
            by sizeof(WCHAR). This does not include a NULL, which is added by NmGetFieldName.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.DisplayStringLength">
            <summary>
            Length of the Display String.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ProtocolBitOffset">
            <summary>
            Offset from the beginning of the protocol, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FrameBitOffset">
            <summary>
            Frame offset of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.FieldBitLength">
            <summary>
            Size of the data field, in bits.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueType">
            <summary>
            Variant type of the value, as defined by VARENUM.
            </summary>
        </member>
        <member name="F:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo.ValueBufferLength">
            <summary>
            Size of the buffer required to hold the field value.
            </summary>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI">
            <summary>
            PInvoke wrapper of Netmon API.
                - managed/unmanaged data type mapping: http://msdn2.microsoft.com/en-us/library/ac7ay120.aspx
                - the declaration in this class are strongly tied to nmapi.h
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiVersion(System.UInt16@,System.UInt16@,System.UInt16@,System.UInt16@)">
            <summary>
            Retrieves the current major and minor version numbers of the API.
            </summary> 
            <remarks>
            The API version matches netmon engine version.
            </remarks>
            <example>
            <code>
                UInt16 majorNumber = 0;
                UInt16 minorNumber = 0;
                UInt16 BuildNumber = 0;
                UInt16 RevisionNumber = 0;
                NmGetApiVersion(out majorNumber, out minorNumber, out BuildNumber, out RevisionNumber);
            </code>
            </example>
            <param name="Major">Major version number.</param>
            <param name="Minor">Minor version number.</param>
            <param name="Build">Build number.</param>
            <param name="Revision">Revision number.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetApiConfiguration(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Gets the current API configuration parameters.
            </summary> 
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Struct object for API to fill.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiInitialize(Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_API_CONFIGURATION@)">
            <summary>
            Overrides the default API configuration.
            </summary> 
            <remarks>
            Caller needs to provide storage for NmApiConfiguration struct.
            </remarks>
            <example>
            <code>
               NM_API_CONFIGURATION apiConfig = new NM_API_CONFIGURATION();
               apiConfig.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(typeof(NM_API_CONFIGURATION));
               uint status = NetmonAPI.NmGetApiConfiguration(ref apiConfig);
               apiConfig.ThreadingMode = 0;
               status = NetmonAPI.NmApiInitialize(ref apiConfig);
            </code>
            </example>
            <param name="ApiConfig">Caller specified API configuration parameter struct.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_API_CONFIGURATION struct is different. <br/>
                ERROR_INVALID_STATE: Can not change API configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmApiClose">
            <summary>
            Closes down the API after finishing all work. It releases all the objects referenced by handles.
            On Windows XP and Windows Server 2003, it also detaches from the driver DLL.
            </summary>
            <remarks>
            Should be called when done with the API.
            </remarks>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCloseHandle(System.IntPtr)">
            <summary>
            Release the reference to the object by handle.</summary> 
            <remarks>
            Callers need to close all the object handles returned from API after finish using them.
            </remarks>
            <param name="hObjectHandle">Handle to the object to release </param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureEngine(System.IntPtr@)">
            <summary>
            Initializes the engine for live data capture.
            </summary> 
            <param name="phCaptureEngine">Handle to the capture engine object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_INVALID_STATE:     The operation is not available. <br/>
                ERROR_ENOUGH_MEMORY: Fail to allocate memory for the object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of network interfaces currently accessible to the API.
            </summary> 
            <remarks>
            The count returned may be zero if no adapters are registered on the computer or the current user
            is not a member of the Netmon Users security group. It is required to be a member of this group
            in order to capture on Windows Vista and above. New users to the group may be required to log on
            again to gain capture privileges unless they run as an administrator.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulCount">Pointer to the returned adapter count value. If zero, no adapters are available.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NIC_ADAPTER_INFO@)">
            <summary>
            Gets available information about a specific network adapter.
            </summary> 
            <remarks>
            Caller can use name, GUID etc. to select adapter to use.  The adapter index should be within the 
            Range returned by NmGetAdapterCount method.  Caller needs to provide the storage of the
            NmNicAdapterInfo struct.
            The fix sized name buffers in the NM_NIC_ADAPTER_INFO structure are marshal to System.char[]. 
            Use String nameStr = new String("e.g., whateverDefinedStructName.ConnectionName") to translate the
            char array to a string object.
            </remarks>
            <example>
            <code>
               IntPtr hCaptureEngine = HandleReturnedByNmOpenCaptureEngine;
               UInt32 ulIndex = 0;
               NM_NIC_ADAPTER_INFO adapterInfo = new NM_NIC_ADAPTER_INFO();
               adapterInfo.Size = (ushort)System.Runtime.InteropServices.Marshal.SizeOf(adapterInfo);
               uint status = NetmonAPI.NmGetAdapter(hCaptureEngine, ulIndex, ref adapterInfo);
               String nameStr = new String(adapterInfo.ConnectionName);
            </code>
            </example>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="pNMAdapterInfo">Pointer to a NM_NIC_ADAPTER_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: The version of NM_NIC_ADAPTER_INFO struct is different.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigAdapter(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CaptureCallbackDelegate,System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureCallbackExitMode)">
            <summary>
            Configure the adapter with the frame indication callback and the caller context.
            </summary> 
            <remarks>
            The current callback function and context will overwrite the previous ones.  The adapter index number
            Must be in the range returned from NmGetAdapterCount method.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulIndex">Index of the adapter. The range is from zero to value returned by the NmGetAdapterCount function.</param>
            <param name="CallbackFunction">Pointer to the callback function to receive live network data frames.
            See the NM_FRAME_CALLBACK function for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer that passes extra information to the network frame callback function.</param>
            <param name="ExitMode">Specifies whether to discard or process remaining frames after the capture engine stops.
            See NmCaptureCallbackExitMode for possible values. The default value is NmDiscardRemainFrames.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStartCapture(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureMode)">
            <summary>
            Starts capturing live data on an existing capture engine and network adapter.
            </summary> 
            <remarks>
            Capture mode can be PMODE and LocalOnly.
            Frame callbacks are made to the NM_FRAME_CALLBACK function registered to the adapter interface
            using the adapter index and the NmConfigAdapter function.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <param name="CaptureMode">Capture mode. See the NmAdapterCaptureMode enumeration.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmPauseCapture(System.IntPtr,System.UInt32)">
            <summary>
            Pauses the capture engine.
            </summary> 
            <remarks>
            This function and the NmResumeCapture function have less overhead than the NmStartCapture and the NmStopCapture functions,
            since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames which enter the buffer. Therefore, there may be frames returned 
            to your callback while the buffer is being cleared. By default, after pausing or stopping a capture, 
            the NM_FRAME_CALLBACK function registered with the NmConfigAdapter function should not be called again. <br/>
            No new frames coming in on the wire are added to the buffer or receive callbacks. To continue receiving callbacks while
            frames remain in the driver buffer, set the CaptureCallbackExitMode parameter of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not pause at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmResumeCapture(System.IntPtr,System.UInt32)">
            <summary>
            resumes a capture that was previously paused by the NmPauseCapture function.
            </summary> 
            <remarks>
            Cannot resume after NmStopCapture is called.  The frame indication callback is no longer invoked 
            until NmResumeCapture method is called. <br/>
            Using the NmPauseCapture function and this function has less overhead than the NmStartCapture and the NmStopCapture
            functions, since they do not free all the internal objects used to attach to the interface and tracing. <br/>
            When you pause the engine, you are pausing the frames that enter the buffer. Therefore, there may be frames returned
            to your callback while the buffer is being cleared. <br/>
            By default, after pausing or stopping a capture, NM_FRAME_CALLBACK registered with the NmConfigAdapter function
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode parameter
            of NmConfigAdapter to NmReturnRemainFrames. <br/>
            Once capturing resumes after a pause, the buffer continues to be filled again, and callbacks resume.
            </remarks>
            <param name="hCaptureEngine">[in] The handle to the target capture engine</param>
            <param name="ulAdapterIndex">[in] The index number of the target adapter</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/> 
                ERROR_INVALID_STATE: Can not resume at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmStopCapture(System.IntPtr,System.UInt32)">
            <summary>
            Stops capturing data to the driver buffer on the specified capture engine and adapter.
            </summary> 
            <remarks>
            Frames may be received after the capture engine is stopped, but no new frames enter the buffer. <br/>
            By default, any frames that remain in the driver buffer are discarded, and no new callbacks are received by 
            the calling application. <br/>
            If the NmReturnRemainFrames flag is set in the NmConfigAdapter function, the call to this function blocks 
            until the last frame is processed. This ensures that the callback function is never invoked after the call
            to this function returns. If the callback enters an infinite loop, this call never returns. <br/>
            When you pause a capture for a brief time period, use the NmPauseCapture and the NmResumeCapture functions
            instead. These have less overhead than the NmStartCapture function and this function, since they do not free
            all the internal objects used to attach to the interface and tracing. <br/>
            By default, after pausing or stopping a capture, the NM_FRAME_CALLBACK function registered with NmConfigAdapter
            should not be called again. No new frames coming in on the wire are added to the buffer or receive callbacks.
            To continue receiving callbacks while frames remain in the driver buffer, set the CaptureCallbackExitMode
            parameter of NmConfigAdapter to NmReturnRemainFrames.
            </remarks>
            <param name="hCaptureEngine">Handle to the capture engine object returned by the NmOpenCaptureEngine function.</param>
            <param name="ulAdapterIndex">Index of the adapter within the range returned by the NmGetAdapterCount function.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_STATE: Can not stop at current state. <br/>
                ERROR_NOT_FOUND: not found capture engine or adapter specified.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmLoadNplParser(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmNplParserLoadingOption,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Loads the Network Monitor Parsing Language (NPL) parser set for a parser configuration.
            </summary> 
            <remarks>
            A callback function is invoked to compile error and warning information. Even on a successful load,
            there is at least one information message stating that Sparser.npb has been successfully loaded. <br/>
            When you set the pFileName parameter to NULL and the NmAppendRegisteredNplSets option is set, the function
            automatically loads the path used by the UI.
            </remarks>
            <param name="pFileName">Full path of the parser file, normally Sparser.npl. If set to NULL, the path specified
            on the Parsers tab is used (on the Tools menu, click Options, then click Parsers). If no path is specified, 
            Network Monitor searches for a local instance of Sparser.npl.</param>
            <param name="ulFlags">Option flags. Currently, the following flag is supported: NmNplParserLoadingOption. Possible
            values are NmLoadNplOptionNone and NmAppendRegisteredNplSets. The default value is NmLoadNplOptionNone.</param>
            <param name="CallbackFunction">Pointer to a function to receive warnings, errors, or messages from the parser
            engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer to pass extra information to the NPL engine message callback.
            For example, this could be a handle to a dialog box to receive the messages.</param>
            <param name="phNplParser">Handle to the NPL parser object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create NPL parser object.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParserConfiguration(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.ParserCallbackDelegate,System.IntPtr,System.IntPtr@)">
            <summary>
            Creates a frame parser configuration to configure filters and fields.
            </summary> 
            <remarks>
            All the frame parser features, including conversation and reassembly, must be added in the configuration before
            creating the frame parser. The callback for this function provides errors that occur when loading a trace, such 
            as parsing errors and errors flagged in the NPL. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hNplParser">Handle to the Network Monitor Parsing Language (NPL) parser object returned by
            the NmLoadNplParser function.</param>
            <param name="CallbackFunction">Pointer to the function to receive warnings, errors, or messages from the
            parser engine. See NM_NPL_PARSER_CALLBACK for details on the callback function.</param>
            <param name="pCallerContext">Arbitrary pointer used to pass extra information to the NPL engine message
            callback function.</param>
            <param name="phFrameParserConfiguration">Handle to the frame parser configuration object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: Fail to create frame parser configuration object. <br/>
                ERROR_NOT_FOUND: not found specified NPL parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFilter(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a filter to the parser configuration that can be evaluated on a frame basis.
            </summary> 
            <remarks>
            The filter ID is used to evaluate the state of the filter on a parsed frame when you call the NmEvaluateFilter
            function with a parsed frame. The filter string can be any valid filter that the UI accepts. This includes 
            properties and conversation variables. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the frame parser configuration engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFilterString">Filter string using all the elements available to the UI.</param>
            <param name="ulFilterId">Returned filter index in the frame parser for this filter.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddField(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a field to the frame parser configuration and optimizes its access.
            </summary> 
            <remarks>
            All the fields are enumerated in the parsed frame if no field is added. The field ID is used to retrieve the field in 
            the parsed frame when calling the NmGetXXX functions, such as NmGetFieldValueByteArray. The caller must provide a 
            unique fully qualified field name, for example, TCP.Option.Ack. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <exception>None</exception>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="pFieldString">Fully qualified path to the field.</param>
            <param name="ulFieldId">Returned field index in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddProperty(System.IntPtr,System.String,System.UInt32@)">
            <summary>
            Adds a property to a configuration.
            </summary> 
            <remarks>
            The property ID is used to retrieve the property value specified by the fully qualified property name starting 
            with the scope name: Global, Conversation, or Frame. <br/>
            To retrieve the property value, use the NmGetPropertyValueById function. <br/>
            If a property is not added to a frame parser configuration when the frame parser is created with optimization
            enabled, the property may not be available because it may not qualify with optimization.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to a frame parser configuration.</param>
            <param name="pPropertyString">Pointer to the fully qualified name of a property. The name must have a scope
            prefix to indicate whether it is global or applies to a conversation or frame, for example Global.PropertyName,
            Conversation.PropertyName, or Frame.PropertyName. The default scope is frame. For options, see the 
            NmPropertyScope enumeration.</param>
            <param name="ulPropertyId">Pointer to the property ID.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INVALID_PARAMETER: The specified property name is invalid.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddSequenceOrderConfig(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_PROTOCOL_SEQUENCE_CONFIG@,System.UInt32@)">
            <summary>
            Adds protocol sequence order configurations. 
            </summary> 
            <remarks>
            This function is used in conjunction with NmOpenCaptureFileInOrder. Once you define how to order frames using this 
            call, a capture file opened rearranges the frames so that they are loaded in order. <br/>
            This function adds a filter to the parser configuration, in addition to other changes. Therefore, the return value
            of the NmGetFilterCount function is incremented by 1. <br/>
            When using this function, the engine is optimized so you cannot read other data fields. If you need to process the
            data in order, write the results to another capture file or use a different parser to get the data fields that you
            need to read. 
            </remarks>
            <param name="hFrameParserConfiguration">Frame parser configuration returned from the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="SeqConfig">Pointer to a sequence structure defined by the NM_PROTOCOL_SEQUENCE_CONFIG structure.</param>
            <param name="ulConfigId">The configuration in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_ENOUGH_MEMORY: Fail to allocate memory to store the configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigReassembly(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmReassemblyConfigOption,System.Boolean)">
            <summary>
            Enables reassembly for a specified protocol.
            </summary> 
            <remarks>
            Each protocol can provide a way to reassemble its payload. This is dependent on the Network Monitor Parsing Language (NPL)
            for the protocol. <br/>
            Currently, there are no reassembly options. You can leave this value as zero. <br/>
            When you enable reassembly, conversations are also enabled by default because reassembly is dependent on conversations.
            When you disable reassembly, conversations are not affected. <br/>
            Reassembly is disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Reassembly options. Currently there are none. Set this value to NmReassemblyOptionNone.</param>
            <param name="bEnable">Action to take: enable or disable reassembly for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigConversation(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmConversationConfigOption,System.Boolean)">
            <summary>
            Configures conversation options.</summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            When you enable conversations, only conversations are enabled. However, when you disable conversations, reassembly is
            also disabled. <br/>
            This function must be called on the frame parser configuration to get the global and conversation properties. <br/>
            You must enable conversations in a parser configuration before you add conversation variables or filters. Otherwise,
            the engine is not initialized properly and the added filters or properties that rely on conversations do not work. <br/>
            Conversations are disabled by default.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the target frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="Option">Conversation options. Currently there are none. Set this value to NmConversationOptionNone.</param>
            <param name="bEnable">Flag to enable conversations for the desired protocol.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or option. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateFrameParser(System.IntPtr,System.IntPtr@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParserOptimizeOption)">
            <summary>
            Creates a frame parser with a specified parser configuration.
            </summary> 
            <remarks>
            With a handle to the frame parser, you can parse a raw frame with the NmParseFrame function. <br/>
            A frame parser object should be used to parse only data considered to be part of the same capture stream. A frame
            parser keeps state information, so mixing trace data from multiple unrelated capture files causes undesired results.
            However, using multiple frame parsers for the same data is supported. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            OptimizeOption explicitly specifies whether the frame parser created should be optimized. The optimization occurs 
            when filters, fields, or properties are added and provides better parsing performance. Once the frame parser is
            optimized, trying to access additional fields or properties other than those specifically added to the parser with
            NmAddField, NmAddFilter, or NmAddProperty produces no results. If it is not known what is needed in advance, it is best
            to leave the parser unoptimized. <br/>
            The NmGetFieldOffsetAndSize function also depends on optimization being set to NULL. Otherwise, zero is returned for
            both size and offset.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the capture engine object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="phParser">Handle to the frame parser object.</param>
            <param name="OptimizeOption">Specifies the optimization setting for the frame parser to be generated. The default setting
            is NmParserOptimizeNone.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmConfigStartDataType(System.IntPtr,System.String)">
            <summary>
            Sets the starting data type for use with the NmParseBuffer function.</summary> 
            <remarks>
            This function is used in conjunction with the NmParseBuffer function. It is useful for parsing a partial payload.
            For example, if you have a TCP payload, you can set the parse type to HTTP to try to parse this data as an HTTP header.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the
            NmCreateFrameParserConfiguration function.</param>
            <param name="StartDataTypeName">Pointer to the string that represents the starting data type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetStartDataType(System.IntPtr,System.UInt32,System.Char*)">
            <summary>
            Determines the current start data type for the NmParseBuffer function.
            </summary> 
            <remarks>
            Unless changed, this function returns the default data type Frame. You can change the default data type for partial
            frame parsing with the NmConfigStartDataType function.
            </remarks>
            <param name="hFrameParserConfiguration">Handle to the desired frame parser configuration object returned by the 
            NmCreateFrameParserConfiguration function.</param>
            <param name="ulBufferLength">Length of the user-provided buffer for the data type name.</param>
            <param name="pBuffer">The name of the data type that the created frame parser starts with</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser configuration. <br/>
                ERROR_INSUFFICIENT_BUFFER: The given start type name is longer than 260 characters.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseFrame(System.IntPtr,System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@,System.IntPtr@)">
            <summary>
            parses a raw frame and returns it as an object that can be used to retrieve information about that parsed frame. 
            </summary> 
            <remarks>
            The parsed frame contains the frame information, filter state, and data field information. When reassembly is enabled,
            the last fragment of the payload completing the reassembled frames is processed, and the inserted frame appears 
            as a reassembled raw frame. If there is no reassembled frame, INVALID_HANDLE_VALUE is returned. <br/>
            You must parse the frames in one capture file sequentially to make the state correct. You may have to parse frames
            0 through n-1 to be able to parse frame n correctly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser object created by the NmCreateFrameParser function to parse the 
            specified raw frame object.</param>
            <param name="hRawFrame">Raw frame returned by the NM_FRAME_CALLBACK or the NmGetFrame function.</param>
            <param name="ulFrameNumber">Frame number to assign to the new frame.</param>
            <param name="Options">One of the options defined in the NmFrameParsingOption enumeration.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame.</param>
            <param name="phInsertedRawFrame">Handle containing a reference to the inserted raw frame, if there is one.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmParseBuffer(System.IntPtr,System.Byte[],System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFrameParsingOption,System.IntPtr@)">
            <summary>
            Parses partial frame information or a user-supplied buffer.
            </summary> 
            <remarks>
            The data buffer contains the byte array that can be a raw frame, part of a raw frame, or any specified data. The parsed frame contains
            the parsed frame information. The filter state and enumeration of fields are supported. Intra-frame reassembly is not supported since it
            requires multiple frames and conversations that are not available in this buffered mode. <br/>
            Use the NmConfigStartDataType function to specify where to start parsing. For example, if your buffer contains only HTTP data, configure
            the start data type as HTTP, and the parser will start at that level. Be aware, however, that parsers sometimes have dependencies on 
            lower-layer protocols and conversations.
            </remarks>
            <param name="hParser">Handle to the frame parser object returned by the NmCreateFrameParser function.</param>
            <param name="DataBuffer">Pointer to the desired buffer for the parsed data.</param>
            <param name="ulBufferLength">Length of the provided buffer.</param>
            <param name="ulFrameNumber">The frame number should be used in parsing process if enabled by option flag.</param>
            <param name="Options">Options for parsing as defined by the NmFrameParsingOption function.</param>
            <param name="phParsedFrame">Handle containing a reference to the parsed frame object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser or raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmBuildRawFrameFromBuffer(System.IntPtr,System.UInt32,System.UInt32,System.UInt64,System.IntPtr@)">
            <summary>
            Builds a raw frame from a user-provided buffer.
            </summary> 
            <remarks>
            The data buffer is transformed into a raw frame object so that you can enter a contrived frame into a capture file. The media type and
            time stamp are optional and can be set to zero. <br/>
            The media type is defined per frame with Network Monitor 3 capture files. See Frame Layout. These values are used to determine the type
            of network on which a capture occurs. Frame.npl then uses this value to determine how to initially parse a frame. You can look at 
            Frame.npl to determine the valid types. You can also create your own types, but you must modify Frame.npl or auto-register your custom
            parser so that your new media type is handled.
            </remarks>
            <param name="DataBuffer">User-provided data buffer to be converted into a raw frame.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="ulMedia">Optional media type of the new raw frame. See Frame.npl for available media types. The default value is zero.
            For more information, see Frame Layout.</param>
            <param name="ullTimeStamp">Optional time stamp of the new raw frame. The default value is zero.</param>
            <param name="phRawFrame">Handle to the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_ENOUGH_MEMORY: No space to build the new frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameFragmentInfo(System.IntPtr,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmFragmentationInfo@)">
            <summary>
            Gets the fragment information for the specified parsed frame.
            </summary> 
            <remarks>
            When receiving frames, you may want to determine whether fragmentation is occurring so that you can discard all 
            previous frames and focus on the reassembled frame that appears with the last fragment. <br/>
            You cannot determine the fragment type of a raw frame. Only after you parse a frame can you determine whether
            it is reassembled.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="FragmentationInfo">Pointer to an NM_FRAGMENTATION_INFO structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame. <br/>
                ERROR_INSUFFICIENT_BUFFER: If the protocol name length is longer than the buffer in PNmReassemblyInfo struct.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFilterCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of filters that have been added to a frame parser configuration.
            </summary> 
            <remarks>
            If you add two filters, this function returns 2. <br/>
            The NmAddSequenceOrderConfig function adds a filter to the parser configuration, in addition to other changes.
            Therefore, the return value of this function is incremented by 1. Therefore, the count is 1 greater if you use
            the NmOpenCaptureFileInOrder function.
            </remarks>
            <param name="hFrameParser">Handle to the frame parser returned by the NmCreateFrameParser function.</param>
            <param name="ulFilterCount">Number of filters available in the frame parser.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmEvaluateFilter(System.IntPtr,System.UInt32,System.Boolean@)">
            <summary>
            Evaluates a filter that you added with the NmAddFilter function with the current parsed frame. 
            </summary> 
            <remarks>
            The PassFilter value is set to TRUE if the parsed frame passes the specified filter. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to 
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFilterId">Field ID returned by the NmAddFilter function.</param>
            <param name="bPassFilter">Pointer to BOOLEAN variable to contain the results of the test.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of fields enumerated in the specified parsed frame.
            </summary> 
            <remarks>
            The number of fields returned is dependent on whether or not you call the NmAddField function. If you added five 
            fields, for example, this function returns 5. However, if you do not add any fields, this function returns the
            total number of fields in the currently parsed frame. You can iterate through fields if you do not have a specific
            one that you are looking for. However, there is a performance price incurred, and it takes longer to parse every
            field. Therefore, if you know which fields you want, you get better performance by adding the fields explicitly. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting 
            frames for parsing to work properly. <br/>
            This function returns the total number of fields, regardless of whether any have been added. However, the 
            NmGetRequestedPropertyCount function returns zero if no properties have been added.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldCount">Number of fields returned in the parsed frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParsedFieldInfo(System.IntPtr,System.UInt32,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldInfo@)">
            <summary>
            Gets a NM_PARSED_FIELD_INFO structure that contains information such as the offset and bit length of
            the requested data field.
            </summary> 
            <remarks>
            The pointer to field is valid until the parsed frame containing the field is closed.
            </remarks>
            <example>
            <code>
                NmParsedFieldInfo parsedDataField = new NmParsedFieldInfo();
                parsedDataField.Size = (ushort)Marshal.SizeOf(typeof(NmParsedFieldInfo));
                NetmonAPI.NmGetParsedFieldInfo(hParsedFrame, 0, 0, ref parsedDataField);
            </code>
            </example>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">ID of the field returned by the NmAddField function.</param>
            <param name="ulOption">There are currently no options. Leave this value as zero.</param>
            <param name="pParsedFieldInfo">Pointer to the NM_PARSED_FIELD_INFO structure. The Size value must be
            initialized to the size of the structure.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldName(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmParsedFieldNames,System.UInt32,System.Char*)">
            <summary>
            Gets the name, data type, containing protocol, or formatted display string of the field specified by the field ID.
            </summary> 
            <remarks>
            BufferLength is a count of the number of elements. This is probably most useful when you are iterating through 
            fields to discover their names, but it can be used to get other field names, such as those containing the protocol
            name or the data type name. <br/>
            This function retrieves the name of the field, field data type name, field display string, and so on. API users must 
            specify parsing options in order for the API to store them in the parsed frame. For example, users must set the frame
            parsing option to include NmFieldDisplayStringRequired to store the display string in the parsed frame. For possible
            values, see the NmFrameParsingOption enumeration. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state information,
            such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse all supporting
            frames for parsing to work properly. <br/>
            Formatted display stringss can return with leading spaces so that they line up properly in the UI when using bit 
            fields. These spaces are part of the returned display string and can be removed by the user.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="RequestedName">Type of the name requested as described by the NmParsedFieldNames enumeration.</param>
            <param name="ulBufferLength">Length, in elements, of the caller-provided buffer.</param>
            <param name="pBuffer">Pointer to the caller-provided buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: If ulBufferLength is shorted than the name length.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldOffsetAndSize(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the offset and size of the field specified by the field ID as returned by the NmAddField function.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need 
            to parse all supporting frames for parsing to work properly. <br/>
            In order for the size and offset to be returned, optimization must be disabled when you call the 
            NmCreateFrameParser function.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">The ID returned by NmAddField.</param>
            <param name="ulFieldOffset">Pointer to receive the field offset, in bits.</param>
            <param name="ulFieldSize">Pointer to receive the field size, in bits.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber8Bit(System.IntPtr,System.UInt32,System.Byte@)">
            <summary>
            Gets a 8-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must
            maintain state information, such as HTTP, SMB, and RPC, use conversations to store that 
            information. You may also need to parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ubNumber">Pointer to an 8-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber16Bit(System.IntPtr,System.UInt32,System.UInt16@)">
            <summary>
            Gets a 16-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="uiNumber">Pointer to a 16-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber32Bit(System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>
            Gets a 32-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulNumber">Pointer to a 32-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueNumber64Bit(System.IntPtr,System.UInt32,System.UInt64@)">
            <summary>
            Gets a 64-bit value from a parsed frame.
            </summary> 
            <remarks>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to
            parse all supporting frames for parsing to work properly.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ullNumber">Pointer to a 64-bit integer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueByteArray(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field of byte array type. Any binary field of size 3, 5, 6, 7, or greater than 8 is treated as a byte
            array. The sizes 2, 4, and 8 are numbers that have corresponding value retrieval functions such as
            NmGetFieldValueNumber32Bit.
            </summary> 
            <remarks>
            This function differs from the NmGetFieldInBuffer function in that it is explicitly for data types that are 
            described as arrays, whereas NmGetFieldInBuffer can be used to get the raw representation of any data field. <br/>
            Parsing may require that conversations be enabled in the frame parser. Protocols that must maintain state 
            information, such as HTTP, SMB, and RPC, use conversations to store that information. You may also need to parse 
            all supporting frames for parsing to work properly. <br/>
            If you are retrieving a field whose size is 1, 2, 4, or 8, you will get an error 160 (ERROR_BAD_ARGUMENTS) returned.
            This is because the base data type Number with sizes of 1, 2, 4, or 8 are special cases and are converted
            to integers of those sizes, for example, UINT8, UINT16, UINT32, and UINT64. Therefore, these sizes are considered 
            numbers, and not byte arrays. <br/>
            You can use the NmGetPartialRawFrame function with the offsets returned from the NmGetFieldOffsetAndSize function
            to read the information directly from the raw frame for any sizes.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulByteLength">Length of the supplied buffer.</param>
            <param name="pBuffer">Pointer to a buffer that receives the field value.</param>
            <param name="ulReturnLength">Pointer that receives the size of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldValueString(System.IntPtr,System.UInt32,System.UInt32,System.Char*)">
            <summary>
            Gets a string from a parsed frame.
            </summary> 
            <remarks>
            This function retrieves fields of string data type, either ASCII or wide-character. The returned string is always 
            in wide-character format, regardless of the string type on the wire. API users can determine the wire data type by
            calling the NmGetFieldName function with the RequestedName parameter set to NmFieldDataTypeName. The 
            NmDataTypeNameRequired must be specified as the parsing option to get the data type name after parsing.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Field ID returned by the NmAddField function.</param>
            <param name="ulBufferLength">Length of the supplied buffer.</param>
            <param name="pValueBuffer">Pointer to a buffer that receives the field value.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFieldInBuffer(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a field value from a parsed frame. The values returned are in the same byte order as they 
            appear in the raw frame data.
            </summary> 
            <remarks>
            Only the content up to the buffer length is copied. Callers can use the NmGetFieldOffsetAndSize function to
            obtain the size before calling this function. <br/>
            This function returns fields in the order that they come over the wire. If the buffer is a byte array with a
            field offset of 10 and a length of 3, the first byte in the buffer referenced by index zero contains the 
            tenth byte in the raw frame. <br/>
            This function does not work with a container object, such as a structure or protocol. For those, use
            NmGetPartialRawFrame instead.
            </remarks>
            <param name="hParsedFrame">Handle to the parsed frame object returned by the NmParseFrame function.</param>
            <param name="ulFieldId">Handle to the parsed frame object returned by NmParseFrame.</param>
            <param name="ulBufferLength">Length of the caller-provided buffer.</param>
            <param name="pFieldBuffer">Pointer to a buffer to receive raw field data.</param>
            <param name="ulReturnLength">Receives the length of the buffer returned.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame or field. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRequestedPropertyCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the number of properties added to the parser with the NmAddProperty function.
            </summary> 
            <remarks>
            This function returns zero unless properties have been added. <br/>
            The return value is the number of properties added to the frame parser so that the frame parser
            can be optimized not to include NPL objects independent of the added properties. A non-optimized 
            frame parser contains thousands of properties, and currently the API does not provide support for
            retrieving the total number of properties.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulCount">Count of properties added to the frame configuration.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle, wrong scope or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyInfo(System.IntPtr,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_NPL_PROPERTY_INFO@)">
            <summary>
            Gets the NM_PROPERTY_INFO structure for a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            If the property container type is multi-value storage or an array and the property added using NmAddProperty
            does not contain the key information, the value type and size may be unknown. Therefore, the caller may need
            to call the retrieval function, NmGetPropertyValueById or NmGetPropertyValueByName, twice. The first time,
            the buffer size needed is returned with the ERROR_INSUFFICIENT_BUFFER error. The correct buffer size can then
            be used in the second call. <br/>
            If the Name buffer provided is NULL, this function returns successfully, but the name is not returned. <br/>
            Set the Name member of the NM_PROPERTY_INFO to NULL if it is not set to a valid memory location.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser configuration.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="pInfo">NM_PROPERTY_INFO structure for this ID.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: NM_PARSED_PROPERTY_INFO version mismatch.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyById(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value of a property specified by ID returned by the NmAddProperty function.
            </summary> 
            <remarks>
            The last two parameters, ulKeyCount and pKeyArray, are used to access properties that can be indexed.
            This includes multi-value storage arrays and property groups. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if
            the entire name was specified when the property was added to the frame configuration. For example, if 
            you add Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the 
            property. <br/>
            In most cases, ulKeyCount is 1, but you can add multiple keys to access properties that are defined 
            as in the following NPL example.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="ulPropertyId">ID of the property returned by NmAddProperty.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="ulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups.
            The C++ version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. 
            The C# version of this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPropertyByName(System.IntPtr,System.String,System.UInt32,System.Byte*,System.UInt32@,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmPropertyValueType@,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.CNmPropertyStorageKey[])">
            <summary>
            Gets the value for a property specified by name.
            </summary> 
            <remarks>
            In some cases, you can access a property by name without having added it using the NmAddProperty function.
            If an optimized frame parser is used, the property name may not be added to the frame parser and therefore
            may not be available. If you are using an optimized frame parser, add the property using NmAddProperty so 
            that you can access it by name or ID. For more information about optimizing, see NmCreateFrameParser. <br/>
            The fully qualified name must be used. <br/>
            The key type must match the type used by the parser. <br/>
            The key for multi-value storage properties or the index for array properties must not be provided if the 
            entire name was specified when the property was added to the frame configuration. For example, if you add 
            Global.NameTable$[192.168.1.1], do not also provide index information when retrieving the property. <br/>
            Information for the size and types of keys can be obtained with the NmGetPropertyInfo function.
            </remarks>
            <param name="hFrameParser">Handle to a frame parser object.</param>
            <param name="pPropertyName">Fully qualified name of the property.</param>
            <param name="ulBufferSize">Size of the buffer supplied, in bytes.</param>
            <param name="pBuffer">Pointer to a buffer for returned data.</param>
            <param name="pulReturnLength">Size of the data returned.</param>
            <param name="ulType">Value type of the returned multivalue storage property.</param>
            <param name="ulKeyCount">Number of keys provided.</param>
            <param name="pKeyArray">Key array to look up for multivalue storage properties or property groups. The C++
            version of this function takes a NM_PROPERTY_STORAGE_KEY structure for this parameter. The C# version of
            this function takes a CNmPropertyStorageKey structure for this parameter.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified property. <br/>
                ERROR_INSUFFICIENT_BUFFER: Not enough space in buffer, data is not copied.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrameLength(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the length of the raw frame.
            </summary> 
            <remarks>
            You cannot use a parsed frame handle. You must use the raw frame handle.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by the NmGetFrame function or 
            by the NM_FRAME_CALLBACK function.</param>
            <param name="pulLength">Pointer to receive the length of the raw frame.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetRawFrame(System.IntPtr,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to the raw frame data returned from a capture file by the NmGetFrame function or 
            over a network from the capture engine through the NM_FRAME_CALLBACK function.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or 
            the NM_FRAME_CALLBACK terminates.
            </remarks>
            <param name="hFrame">Handle to the raw frame object returned by NmGetFrame or by NM_FRAME_CALLBACK.</param>
            <param name="ulLength">Length of the provided buffer.</param>
            <param name="pFrameBuffer">Returned pointer to the raw frame data.</param>
            <param name="pulReturnLength">Size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetPartialRawFrame(System.IntPtr,System.UInt32,System.UInt32,System.Byte*,System.UInt32@)">
            <summary>
            Gets a pointer to a specific piece of the raw frame data.
            </summary> 
            <remarks>
            The frame buffer is valid until the raw frame is closed with the NmCloseHandle function or
            NM_FRAME_CALLBACK terminates. The user must provide the buffer to be copied into.
            </remarks>
            <param name="hRawFrame">Handle to the raw frame object returned by the NmGetFrame function 
            or by the NM_FRAME_CALLBACK function.</param>
            <param name="ulFrameOffset">Offset in the raw frame from which to start.</param>
            <param name="ulBufferLength">Length of the user-provided buffer.</param>
            <param name="pFrameBuffer">Pointer to the user-provided buffer to receive the partial raw frame data.</param>
            <param name="pulReturnLength">Pointer to receive the size of the data copied to the buffer.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified raw frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameMacType(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the per-frame media access type.
            </summary> 
            <remarks>
            This function can be used on either a raw or a parsed frame. <br/>
            You can capture on multiple adapters. Therefore, the MAC type for each frame is recorded.
            For more information, see Capture File Format.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pulMacType">Pointer to receive the Machine Address Code (MAC) type.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameTimeStamp(System.IntPtr,System.UInt64@)">
            <summary>
            Gets the absolute time stamp of a frame.
            </summary> 
            <remarks>
            This function returns the absolute time stamp, which is calculated by adding the frame offset
            to the capture file time stamp in the capture header. <br/>
            This function can be used with a raw frame or a parsed frame.
            </remarks>
            <param name="hFrame">Handle to a raw or parsed frame object.</param>
            <param name="pTimeStamp">Pointer to receive the 64-bit time stamp.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_INVALID_PARAMETER: hFrame is not a parsed or a raw frame handle. <br/>
                ERROR_NOT_FOUND: not found specified frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCommentInfo(System.IntPtr,System.UInt32@,System.Byte*,System.UInt32@,System.Byte*)">
            <summary>
            Gets the frame comment title and description.
            </summary>
            <remarks>
            If the buffers passed in are NULL, the buffer length parameters indicate the required 
            length of the buffer needed to store the title and comment strings.
            </remarks>
            <param name="hFrame">Handle to a raw frame object.</param>
            <param name="ulCommentTitleBufferLength">Pointer to the actual byte length that corresponds to the title buffer.</param>
            <param name="pCommentTitleBuffer">Pointer to a caller-supplied buffer to hold the comment title.</param>
            <param name="ulCommentDescriptionBufferLength">Pointer to the actual byte length that corresponds to the description buffer.</param>
            <param name="pCommentDescriptionBuffer">Caller-supplied buffer to hold the comment description.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_NOT_FOUND: Specified parsed frame not found. <br/>
                ERROR_INSUFFICIENT_BUFFER: If either of the supplied buffers is NULL. <br/>
                ERROR_EMPTY: Frame comment information was not found.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmCreateCaptureFile(System.String,System.UInt32,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCaptureFileFlag,System.IntPtr@,System.UInt32@)">
            <summary>
            Creates a new Network Monitor capture file for adding frames.
            </summary> 
            <remarks>
            If you specify a size of zero, 20 MB is used. <br/>
            If you specify a size larger than the maximum size determined by MaxCaptureFileSize, 
            the maximum size is used instead. <br/>
            If you specify a size that is less than the minimum size determined by the MinCaptureFileSize
            member of NM_API_CONFIGURATION, the minimum size is used instead. <br/>
            You can close and save the capture file by calling the NmCloseHandle function.
            </remarks>
            <param name="pFileName">String containing the path of the capture file to create.</param>
            <param name="ulSize">Maximum size of the file, in bytes. The upper limit is 500 MB. The default 
            upper limit is determined by the current configuration as determined by the NmGetApiConfiguration function.</param>
            <param name="ulFlags">Option flags for setting capture style: wraparound or chained.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <param name="ulReturnSize">Size of the capture file, in bytes.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFile(System.String,System.IntPtr@)">
            <summary>
            Opens a Network Monitor capture file for reading.
            </summary> 
            <remarks>
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmOpenCaptureFileInOrder(System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NM_ORDER_PARSER_PARAMETER@,System.IntPtr@)">
            <summary>
            Opens a capture file and reorders packets based on the configuration defined by the 
            NmAddSequenceOrderConfig function.
            </summary> 
            <remarks>
            The frame in file are in the order of the sequence specified in the frame parser parameter
            The file is read only. Close capture file by calling NmCloseObjHandle method.
            </remarks>
            <param name="pFileName">String containing the path of the existing capture file to open.</param>
            <param name="pOrderParser">Pointer to a NM_ORDER_PARSER_PARAMETER structure.</param>
            <param name="phCaptureFile">Handle containing a reference to the capture file object.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: NULL pointer. <br/>
                ERROR_NOT_FOUND: not found specified file. <br/>
                ERROR_INVALID_PARAMETER: frame parser does not have sequence configuration. <br/>
                ERROR_NOT_ENOUGH_MEMORY: not enough memory to build required objects. <br/>
                NM_STATUS_API_VERSION_MISMATCHED: PNM_ORDER_PARSER_PARAMETER version does not match.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmAddFrame(System.IntPtr,System.IntPtr)">
            <summary>
            Adds a frame to the specified capture file.
            </summary> 
            <remarks>
            The capture file must be opened with NmCreateCaptureFile function. <br/>
            A raw frame can be returned by the frame indication callback or the NmBuildRawFrameFromBuffer function. <br/>
            If you add frames into a capture file and the time stamp is older than the time stamp of the last frame
            added, the newly added frame is not given the correct time stamp.
            </remarks>
            <param name="hCaptureFile">Handle to the capture file returned by the NmCreateCaptureFile function.</param>
            <param name="hFrame">Handle to raw frame to be added.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrameCount(System.IntPtr,System.UInt32@)">
            <summary>
            Gets the frame count in the specified capture file.
            </summary> 
            <param name="hCaptureFile">Handle to the capture file.</param>
            <param name="hFrameCount">Pointer to receive the frame count.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetFrame(System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Gets a raw frame from the capture file.
            </summary> 
            <remarks>
            The frame number is the index number in the capture file. The first frame starts 
            with an index of zero. <br/>
            You must free the handle returned from this call.
            </remarks>
            <param name="hCaptureFile">Handle to a capture file returned by the NmCreateCaptureFile
            or the NmOpenCaptureFile function.</param>
            <param name="ulFrameNumber">Zero-based frame number.</param>
            <param name="phFrame">Handle containing a reference to the raw frame object. You must 
            call the NmCloseHandle function to free this handle.</param>
            <permission cref="T:System.Security.PermissionSet">Everyone can access this method.</permission>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle. <br/>
                ERROR_NOT_FOUND: not found specified capture file or frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetTopConversation(System.IntPtr,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the top-level conversation of the parsed frame, described by the conversation protocol name 
            and conversation ID.
            </summary> 
            <remarks>
            The parsed frame must have conversation set to TRUE. <br/>
            The protocol name length is returned to caller. Therefore, if the provided buffer is not large 
            enough, the caller can call again with the correct size of buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a parsed frame object.</param>
            <param name="ulBufferESize">Size of the buffer for the protocol name, in wide characters.</param>
            <param name="pProtocolName">Pointer to the buffer for the protocol name.</param>
            <param name="pulProtocolNameLength">Length of the protocol name, in wide characters, not including the terminating pattern.</param>
            <param name="pulConversationID">ID of the top-level conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified parsed frame.
            </returns>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NetmonAPI.NmGetParentConversation(System.IntPtr,System.UInt32,System.UInt32,System.Char*,System.UInt32@,System.UInt32@)">
            <summary>
            Gets the parent conversation information for the specified conversation, including 
            conversation protocol name and conversation ID.
            </summary> 
            <remarks>
            The parent protocol name length is returned to caller.  So if the provided buffer is not enough, caller
            Can call again with the proper sized buffer.
            </remarks>
            <param name="hParsedFrame">Handle to a frame parser.</param>
            <param name="ulConversationId">ID of the child conversation.</param>
            <param name="ulBufferESize">Size of the buffer for the parent conversation protocol name, in bytes.</param>
            <param name="pParentProtocolNameBuffer">Pointer to the buffer for the parent conversation protocol name.</param>
            <param name="ulParentProtocolNameLength">Returned length of the parent conversation protocol name.</param>
            <param name="ulParentConversationID">ID of the parent conversation.</param>
            <returns>
                ERROR_SUCCESS: Operation Successful. <br/>
                ERROR_BAD_ARGUMENTS: Invalid handle or NULL pointer. <br/>
                ERROR_INSUFFICIENT_BUFFER: Insufficient buffer space. <br/>
                ERROR_NOT_FOUND: not found specified frame parser.
            </returns>
        </member>
        <member name="T:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor">
            <summary>
            Represents the NETMON Wrapper. <br/>
            NOTE: You must have NetMon 3+ installed on your system in order
            to use this library.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Initializes a new instance of the NetworkMonitor class. <br/>
            NOTE: This library cannot be used in a multithreaded environment (MTA).
            Make sure you mark your calling program / binary as [STAThread].
            </summary>
            <param name="CaptureFilename">The name of the capture file.</param>
            <param name="CaptureAdapterIndex">The index of the network adapter to capture.</param>
            <param name="FrameFilter">
            The string representing the Frame filter. Pass NULL for unfiltered capture. <br/>
            NOTE: NetMon 3 has a bug wherein it leaks memory when we use the Frame Filter. <i>Use
            the Frame Filter feature with extreme caution.</i>
            </param>
            <remarks>
            The active network adapter index can be found out by running the following command on
            your machine: <br/>
            nmcap.exe /DisplayNetworks <br/>
            The command will display a list of all network adapters and their index on the machine.
            The active adapater is usally the one having a valid IP address.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StartCapture">
            <summary>
            Starts the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.StopCapture">
            <summary>
            Stops the network capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CaptureCleanUp">
            <summary>
            Cleans up after the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.InitCapture">
            <summary>
            Initializes the capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.CreateCaptureFile">
            <summary>
            Creates the capture file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.OpenCaptureEngine">
            <summary>
            Initializes the capture engine.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ConfigureNWAdapter">
            <summary>
            Configures the network adapter for capture.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.FrameIndicationCallback(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Callback for each captured frame.
            </summary>
            <param name="hCapEng"></param>
            <param name="ulAdatIdx"></param>
            <param name="pContext"></param>
            <param name="hRawFrame"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.ParserCallback(System.IntPtr,System.UInt32,System.String,Test.Common.Library.NetworkMonitor3Wrapper.Microsoft.NetworkMonitor.NmCallbackMsgType)">
            <summary>
            Callback for the parser engine.
            </summary>
            <param name="pCallerContext"></param>
            <param name="ulStatusCode"></param>
            <param name="lpDescription"></param>
            <param name="ulType"></param>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.LoadFilter">
            <summary>
            Loads the specified capture filter. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing unmanaged objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.NetworkMonitor3Wrapper.NetworkMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes the object, releasing managed and unmanaged handles.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PageLoadTimeDaemon\PageLoadTimeDaemon\CaptureSetting.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<CaptureConfiguration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <!-- The time in milliseconds to wait for a page to load in browser -->
  <PageLoadTimeOut>60000</PageLoadTimeOut>
  <!-- Indicates whether to perform NetMon captures -->
  <PerformNetMonCapture>true</PerformNetMonCapture>
  <NetMon3Config>
    <!-- The network card index number to perform capture on -->
    <NetworkAdapterIndex>1</NetworkAdapterIndex>
  </NetMon3Config>
  <!-- The location where the PLT reports will be stored -->
  <ReportOutputLocation>reports</ReportOutputLocation>
</CaptureConfiguration>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PageLoadTimeDaemon\PageLoadTimeDaemon\bin\Debug\PageLoadTimeDaemon\Test.Common.Library.PageLoadTimeDaemon.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.PageLoadTimeDaemon</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration">
            <summary>
            Represents the PLT data capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PageLoadTimeOut">
            <summary>
            The time in milliseconds to wait for a page to load in browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PerformNetMonCapture">
            <summary>
            Indicates whether to perform NetMon captures.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.NetMon3Config">
            <summary>
            The NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.ReportOutputLocation">
            <summary>
            The location where the PLT reports will be stored.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration">
            <summary>
            Represents the NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration.NetworkAdapterIndex">
            <summary>
            The network card index number to perform capture on.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader">
            <summary>
            Represents the configuration reader.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadCaptureConfiguration">
            <summary>
            Loads the PLT capture configuration from the configuration
            XML file.
            </summary>
            <returns>An object of CaptureConfiguration representing the configuration.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadTestINIFile(System.String)">
            <summary>
            Loads the specified Test ini file content.
            </summary>
            <param name="INIFilename">The ini filename to load.</param>
            <returns>An object of PLTIniContent representing the ini file content.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.ValidatePLTIniContent(Test.Common.Library.PageLoadTimeDaemon.PLTIniContent)">
            <summary>
            Validates the PLT INI Content data structure.
            </summary>
            <param name="INIContent">The PLT Ini Content object to validate.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler">
            <summary>
            Represents the external tool execution helper.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler.ExecuteProgram(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a program.
            </summary>
            <param name="ExecutableName">The name of the program file to execute.</param>
            <param name="Arguments">The command line arguments.</param>
            <param name="WorkingDirectory">The working directory for the executable.</param>
            <param name="UseWindowsShell">Indicates whether to use the windows shell to execute.</param>
            <returns>True if the program executed successfully, otherwise false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1">
            <summary>
            Indicates PLT 1 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1_2">
            <summary>
            Indicates PLT 1.2 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT2">
            <summary>
            Indicates PLT 2 tests.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent">
            <summary>
            Represents the PLT Ini file content.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.TestURLList">
            <summary>
            The list of URLs to test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.PLTTestType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Iterations">
            <summary>
            The number of iterations to run for each page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Interval">
            <summary>
            The interval in milliseconds between each page load.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL">
            <summary>
            Represents the PLT Test URL
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.TestURL">
            <summary>
            Indicates the Test URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.URLPageTitle">
            <summary>
            Indicates the Page Title of the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor">
            <summary>
            Represents the PLT Monitor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PLT Monitor class
            for the specified INI File.
            </summary>
            <param name="INIFilename">The INI filename.</param>
            <param name="NetworkType">The type of the network on which this test is run.</param>
            <param name="Environment">The environment in which this test is run.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.StartPLTTests">
            <summary>
            Starts running the PLT Tests defined in the loaded ini file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.SaveResultsToCSV">
            <summary>
            Saves the result of the PLT Test to a CSV file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.RunPLTTest(System.String,System.String,Test.Common.Library.PageLoadTimeDaemon.PLTType,System.Int32)">
            <summary>
            Executes the Page Load Time test on the specified URL.
            </summary>
            <param name="TestURL">The URL to test.</param>
            <param name="URLPageTitle">The expected title of the page.</param>
            <param name="TypeOfPLT">The type of PLT test to run.</param>
            <param name="IterationNumber">The iteration number of this test.</param>
            <returns>An object of PLTTestResult representing the result of the PLT Test.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetDefaultPLTTestResult(System.String)">
            <summary>
            Gets a default PLT Test Result object for the specified URL.
            </summary>
            <param name="URL">The URL that is under test.</param>
            <returns>An object of PLTTestResult representing the default Test Result.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetFolderFriendlyName(System.String)">
            <summary>
            Gets a folder friendly name from a target URL
            </summary>
            <param name="TargetURL">The target URL.</param>
            <returns>A string represnting the folder friendly name.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.CleanDNSCache">
            <summary>
            Cleans the DNS Cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCache">
            <summary>
            Clears the browser cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCookies">
            <summary>
            Clears all cookies.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose(System.Boolean)">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger">
            <summary>
            Represents the PLT Monitor logger.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult">
            <summary>
            Represents the result of a PLT Test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestTimeStamp">
            <summary>
            The timestamp of the PLT test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestURL">
            <summary>
            The URL that was tested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageLoadTime">
            <summary>
            The time required to load the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageErrorCount">
            <summary>
            The number of errors on the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.Availability">
            <summary>
            The availability of the page. If the page loaded within the set time out, even with errors,
            then the page is 100% available. Otherwise it is 0% available.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Accounts.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<Accounts>
	<Environment name="test">
		<User name="silveradult" isChild="false" locale="en-US" tier="Silver" passporttype="Real">
			<Email>testSilverAdult@xbltest.net</Email>
			<Password>password</Password>
			<Gamertag>tsAdult</Gamertag>
			<SecretQuestion><![CDATA[Can you kiss a nun?]]></SecretQuestion>
			<SecretAnswer><![CDATA[Yes, just don't get into the habit]]></SecretAnswer>
			<Avatar>Male</Avatar>
			<PaymentOption>
				<CreditCard name="default">
					<Type>Visa</Type>
					<Number>4111111111111111</Number>
					<Expiration>032014</Expiration>
					<SecurityCode>555</SecurityCode>
					<CardHolderName><![CDATA[Default User]]></CardHolderName>
					<Address1><![CDATA[1 Microsoft Way]]></Address1>
					<Address2><![CDATA[]]></Address2>
					<City><![CDATA[Redmond]]></City>
					<State><![CDATA[Washington]]></State>
					<PostalCode><![CDATA[98052]]></PostalCode>
					<CountryRegion><![CDATA[United States]]></CountryRegion>
				</CreditCard>
			</PaymentOption>
			<PrivacySettings>
				<VoiceAndText>Everyone</VoiceAndText>
				<Video>FriendsOnly</Video>
				<GamerProfile>Blocked</GamerProfile>
				<OnlineStatus>Everyone</OnlineStatus>
				<MemberContent>Everyone</MemberContent>
				<PlayedGames>Everyone</PlayedGames>
				<FriendsList>Everyone</FriendsList>
			</PrivacySettings>
			<ContactInformation>
				<FirstName><![CDATA[Default]]></FirstName>
				<LastName><![CDATA[User]]></LastName>
				<Address1><![CDATA[1 Microsoft Way]]></Address1>
				<Address2><![CDATA[]]></Address2>
				<City><![CDATA[Redmond]]></City>
				<State><![CDATA[WA]]></State>
				<PostalCode><![CDATA[98052]]></PostalCode>
				<CountryRegion><![CDATA[United States]]></CountryRegion>
				<Phone>2063548857</Phone>
				<Mobile/>
				<Language>English</Language>
				<Email><![CDATA[default@microsoft.com]]></Email>
				<TextAddress><![CDATA[default@microsoft.com]]></TextAddress>
				<Gender>Male</Gender>
			</ContactInformation>
			<ContactPreferences>
				<XboxNewsletter>true</XboxNewsletter>
				<PartnerMarketing>false</PartnerMarketing>
				<Email><![CDATA[default@microsoft.com]]></Email>
				<EmailFormat>HTML</EmailFormat>
				<TextAddress><![CDATA[default@microsoft.com]]></TextAddress>
			</ContactPreferences>
			<WebPreferences>
				<EmailFormat>Plain</EmailFormat>
				<InternetConnection>DSL</InternetConnection>
			</WebPreferences>
			<ForumsPreferences>
				<Timezone><![CDATA[GMT-8:00]]></Timezone>
				<Signature><![CDATA[Xbox Live ROCKS!]]></Signature>
				<SiteOptions>
					<SortPosts>Descending</SortPosts>
					<DateFormat><![CDATA[mm-dd-yyyy]]></DateFormat>
					<DisplayMembersInList>true</DisplayMembersInList>
					<EnablePostMouseOverPopUp>false</EnablePostMouseOverPopUp>
					<EnableCollapsingPanels>true</EnableCollapsingPanels>
					<EnableEmoticons>true</EnableEmoticons>
				</SiteOptions>
				<EmailOptions>
					<PrivateEmail><![CDATA[default@hotmail.com]]></PrivateEmail>
					<ReceiveEmail>true</ReceiveEmail>
					<ReceiveHTMLemail>false</ReceiveHTMLemail>
					<EnableEmailNotification>false</EnableEmailNotification>
				</EmailOptions>
			</ForumsPreferences>
		</User>
		<User name="goldadult" isChild="false" locale="en-US" tier="Gold" passporttype="Real">
			<Email>testGoldAdult@xbltest.net</Email>
			<Password>password</Password>
			<Gamertag>tgAdult</Gamertag>
			<SecretQuestion><![CDATA[Can you kiss a nun?]]></SecretQuestion>
			<SecretAnswer><![CDATA[Yes, just don't get into the habit]]></SecretAnswer>
			<Avatar>Male</Avatar>
			<PaymentOption>
				<CreditCard name="default">
					<Type>Visa</Type>
					<Number>4111111111111111</Number>
					<Expiration>032014</Expiration>
					<SecurityCode>555</SecurityCode>
					<CardHolderName><![CDATA[Default User]]></CardHolderName>
					<Address1><![CDATA[1 Microsoft Way]]></Address1>
					<Address2><![CDATA[]]></Address2>
					<City><![CDATA[Redmond]]></City>
					<State><![CDATA[Washington]]></State>
					<PostalCode><![CDATA[98052]]></PostalCode>
					<CountryRegion><![CDATA[United States]]></CountryRegion>
				</CreditCard>
			</PaymentOption>
			<PrivacySettings>
				<VoiceAndText>Everyone</VoiceAndText>
				<Video>FriendsOnly</Video>
				<GamerProfile>Blocked</GamerProfile>
				<OnlineStatus>Everyone</OnlineStatus>
				<MemberContent>Everyone</MemberContent>
				<PlayedGames>Everyone</PlayedGames>
				<FriendsList>Everyone</FriendsList>
			</PrivacySettings>
			<ContactInformation>
				<FirstName><![CDATA[Default]]></FirstName>
				<LastName><![CDATA[User]]></LastName>
				<Address1><![CDATA[1 Microsoft Way]]></Address1>
				<Address2><![CDATA[]]></Address2>
				<City><![CDATA[Redmond]]></City>
				<State><![CDATA[WA]]></State>
				<PostalCode><![CDATA[98052]]></PostalCode>
				<CountryRegion><![CDATA[United States]]></CountryRegion>
				<Phone>2063548857</Phone>
				<Mobile/>
				<Language>English</Language>
				<Email><![CDATA[default@microsoft.com]]></Email>
				<TextAddress><![CDATA[default@microsoft.com]]></TextAddress>
				<Gender>Male</Gender>
			</ContactInformation>
			<ContactPreferences>
				<XboxNewsletter>true</XboxNewsletter>
				<PartnerMarketing>false</PartnerMarketing>
				<Email><![CDATA[default@microsoft.com]]></Email>
				<EmailFormat>HTML</EmailFormat>
				<TextAddress><![CDATA[default@microsoft.com]]></TextAddress>
			</ContactPreferences>
			<WebPreferences>
				<EmailFormat>Plain</EmailFormat>
				<InternetConnection>DSL</InternetConnection>
			</WebPreferences>
			<ForumsPreferences>
				<Timezone><![CDATA[GMT-8:00]]></Timezone>
				<Signature><![CDATA[Xbox Live ROCKS!]]></Signature>
				<SiteOptions>
					<SortPosts>Descending</SortPosts>
					<DateFormat><![CDATA[mm-dd-yyyy]]></DateFormat>
					<DisplayMembersInList>true</DisplayMembersInList>
					<EnablePostMouseOverPopUp>false</EnablePostMouseOverPopUp>
					<EnableCollapsingPanels>true</EnableCollapsingPanels>
					<EnableEmoticons>true</EnableEmoticons>
				</SiteOptions>
				<EmailOptions>
					<PrivateEmail><![CDATA[default@hotmail.com]]></PrivateEmail>
					<ReceiveEmail>true</ReceiveEmail>
					<ReceiveHTMLemail>false</ReceiveHTMLemail>
					<EnableEmailNotification>false</EnableEmailNotification>
				</EmailOptions>
			</ForumsPreferences>
		</User>
	</Environment>
</Accounts>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PageLoadTimeDaemon\PageLoadTimeDaemon\bin\Release\PageLoadTimeDaemon\Test.Common.Library.PageLoadTimeDaemon.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.PageLoadTimeDaemon</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration">
            <summary>
            Represents the PLT data capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PageLoadTimeOut">
            <summary>
            The time in milliseconds to wait for a page to load in browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PerformNetMonCapture">
            <summary>
            Indicates whether to perform NetMon captures.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.NetMon3Config">
            <summary>
            The NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.ReportOutputLocation">
            <summary>
            The location where the PLT reports will be stored.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration">
            <summary>
            Represents the NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration.NetworkAdapterIndex">
            <summary>
            The network card index number to perform capture on.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader">
            <summary>
            Represents the configuration reader.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadCaptureConfiguration">
            <summary>
            Loads the PLT capture configuration from the configuration
            XML file.
            </summary>
            <returns>An object of CaptureConfiguration representing the configuration.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadTestINIFile(System.String)">
            <summary>
            Loads the specified Test ini file content.
            </summary>
            <param name="INIFilename">The ini filename to load.</param>
            <returns>An object of PLTIniContent representing the ini file content.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.ValidatePLTIniContent(Test.Common.Library.PageLoadTimeDaemon.PLTIniContent)">
            <summary>
            Validates the PLT INI Content data structure.
            </summary>
            <param name="INIContent">The PLT Ini Content object to validate.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler">
            <summary>
            Represents the external tool execution helper.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler.ExecuteProgram(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a program.
            </summary>
            <param name="ExecutableName">The name of the program file to execute.</param>
            <param name="Arguments">The command line arguments.</param>
            <param name="WorkingDirectory">The working directory for the executable.</param>
            <param name="UseWindowsShell">Indicates whether to use the windows shell to execute.</param>
            <returns>True if the program executed successfully, otherwise false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1">
            <summary>
            Indicates PLT 1 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1_2">
            <summary>
            Indicates PLT 1.2 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT2">
            <summary>
            Indicates PLT 2 tests.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent">
            <summary>
            Represents the PLT Ini file content.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.TestURLList">
            <summary>
            The list of URLs to test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.PLTTestType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Iterations">
            <summary>
            The number of iterations to run for each page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Interval">
            <summary>
            The interval in milliseconds between each page load.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL">
            <summary>
            Represents the PLT Test URL
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.TestURL">
            <summary>
            Indicates the Test URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.URLPageTitle">
            <summary>
            Indicates the Page Title of the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor">
            <summary>
            Represents the PLT Monitor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PLT Monitor class
            for the specified INI File.
            </summary>
            <param name="INIFilename">The INI filename.</param>
            <param name="NetworkType">The type of the network on which this test is run.</param>
            <param name="Environment">The environment in which this test is run.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.StartPLTTests">
            <summary>
            Starts running the PLT Tests defined in the loaded ini file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.SaveResultsToCSV">
            <summary>
            Saves the result of the PLT Test to a CSV file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.RunPLTTest(System.String,System.String,Test.Common.Library.PageLoadTimeDaemon.PLTType,System.Int32)">
            <summary>
            Executes the Page Load Time test on the specified URL.
            </summary>
            <param name="TestURL">The URL to test.</param>
            <param name="URLPageTitle">The expected title of the page.</param>
            <param name="TypeOfPLT">The type of PLT test to run.</param>
            <param name="IterationNumber">The iteration number of this test.</param>
            <returns>An object of PLTTestResult representing the result of the PLT Test.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetDefaultPLTTestResult(System.String)">
            <summary>
            Gets a default PLT Test Result object for the specified URL.
            </summary>
            <param name="URL">The URL that is under test.</param>
            <returns>An object of PLTTestResult representing the default Test Result.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetFolderFriendlyName(System.String)">
            <summary>
            Gets a folder friendly name from a target URL
            </summary>
            <param name="TargetURL">The target URL.</param>
            <returns>A string represnting the folder friendly name.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.CleanDNSCache">
            <summary>
            Cleans the DNS Cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCache">
            <summary>
            Clears the browser cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCookies">
            <summary>
            Clears all cookies.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose(System.Boolean)">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger">
            <summary>
            Represents the PLT Monitor logger.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult">
            <summary>
            Represents the result of a PLT Test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestTimeStamp">
            <summary>
            The timestamp of the PLT test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestURL">
            <summary>
            The URL that was tested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageLoadTime">
            <summary>
            The time required to load the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageErrorCount">
            <summary>
            The number of errors on the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.Availability">
            <summary>
            The availability of the page. If the page loaded within the set time out, even with errors,
            then the page is 100% available. Otherwise it is 0% available.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PageLoadTimeDaemon\PageLoadTimeDaemon\bin\Debug\PLTScheduler\Test.Common.Library.PageLoadTimeDaemon.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.PageLoadTimeDaemon</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration">
            <summary>
            Represents the PLT data capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PageLoadTimeOut">
            <summary>
            The time in milliseconds to wait for a page to load in browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PerformNetMonCapture">
            <summary>
            Indicates whether to perform NetMon captures.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.NetMon3Config">
            <summary>
            The NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.ReportOutputLocation">
            <summary>
            The location where the PLT reports will be stored.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration">
            <summary>
            Represents the NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration.NetworkAdapterIndex">
            <summary>
            The network card index number to perform capture on.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader">
            <summary>
            Represents the configuration reader.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadCaptureConfiguration">
            <summary>
            Loads the PLT capture configuration from the configuration
            XML file.
            </summary>
            <returns>An object of CaptureConfiguration representing the configuration.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadTestINIFile(System.String)">
            <summary>
            Loads the specified Test ini file content.
            </summary>
            <param name="INIFilename">The ini filename to load.</param>
            <returns>An object of PLTIniContent representing the ini file content.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.ValidatePLTIniContent(Test.Common.Library.PageLoadTimeDaemon.PLTIniContent)">
            <summary>
            Validates the PLT INI Content data structure.
            </summary>
            <param name="INIContent">The PLT Ini Content object to validate.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler">
            <summary>
            Represents the external tool execution helper.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler.ExecuteProgram(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a program.
            </summary>
            <param name="ExecutableName">The name of the program file to execute.</param>
            <param name="Arguments">The command line arguments.</param>
            <param name="WorkingDirectory">The working directory for the executable.</param>
            <param name="UseWindowsShell">Indicates whether to use the windows shell to execute.</param>
            <returns>True if the program executed successfully, otherwise false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1">
            <summary>
            Indicates PLT 1 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1_2">
            <summary>
            Indicates PLT 1.2 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT2">
            <summary>
            Indicates PLT 2 tests.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent">
            <summary>
            Represents the PLT Ini file content.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.TestURLList">
            <summary>
            The list of URLs to test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.PLTTestType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Iterations">
            <summary>
            The number of iterations to run for each page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Interval">
            <summary>
            The interval in milliseconds between each page load.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL">
            <summary>
            Represents the PLT Test URL
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.TestURL">
            <summary>
            Indicates the Test URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.URLPageTitle">
            <summary>
            Indicates the Page Title of the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor">
            <summary>
            Represents the PLT Monitor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PLT Monitor class
            for the specified INI File.
            </summary>
            <param name="INIFilename">The INI filename.</param>
            <param name="NetworkType">The type of the network on which this test is run.</param>
            <param name="Environment">The environment in which this test is run.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.StartPLTTests">
            <summary>
            Starts running the PLT Tests defined in the loaded ini file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.SaveResultsToCSV">
            <summary>
            Saves the result of the PLT Test to a CSV file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.RunPLTTest(System.String,System.String,Test.Common.Library.PageLoadTimeDaemon.PLTType,System.Int32)">
            <summary>
            Executes the Page Load Time test on the specified URL.
            </summary>
            <param name="TestURL">The URL to test.</param>
            <param name="URLPageTitle">The expected title of the page.</param>
            <param name="TypeOfPLT">The type of PLT test to run.</param>
            <param name="IterationNumber">The iteration number of this test.</param>
            <returns>An object of PLTTestResult representing the result of the PLT Test.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetDefaultPLTTestResult(System.String)">
            <summary>
            Gets a default PLT Test Result object for the specified URL.
            </summary>
            <param name="URL">The URL that is under test.</param>
            <returns>An object of PLTTestResult representing the default Test Result.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetFolderFriendlyName(System.String)">
            <summary>
            Gets a folder friendly name from a target URL
            </summary>
            <param name="TargetURL">The target URL.</param>
            <returns>A string represnting the folder friendly name.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.CleanDNSCache">
            <summary>
            Cleans the DNS Cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCache">
            <summary>
            Clears the browser cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCookies">
            <summary>
            Clears all cookies.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose(System.Boolean)">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger">
            <summary>
            Represents the PLT Monitor logger.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult">
            <summary>
            Represents the result of a PLT Test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestTimeStamp">
            <summary>
            The timestamp of the PLT test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestURL">
            <summary>
            The URL that was tested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageLoadTime">
            <summary>
            The time required to load the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageErrorCount">
            <summary>
            The number of errors on the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.Availability">
            <summary>
            The availability of the page. If the page loaded within the set time out, even with errors,
            then the page is 100% available. Otherwise it is 0% available.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PageLoadTimeDaemon\PageLoadTimeDaemon\bin\Release\PLTScheduler\Test.Common.Library.PageLoadTimeDaemon.XML ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.PageLoadTimeDaemon</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration">
            <summary>
            Represents the PLT data capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PageLoadTimeOut">
            <summary>
            The time in milliseconds to wait for a page to load in browser.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.PerformNetMonCapture">
            <summary>
            Indicates whether to perform NetMon captures.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.NetMon3Config">
            <summary>
            The NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.CaptureConfiguration.ReportOutputLocation">
            <summary>
            The location where the PLT reports will be stored.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration">
            <summary>
            Represents the NetMon 3 capture configuration.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.NetMon3CaptureConfiguration.NetworkAdapterIndex">
            <summary>
            The network card index number to perform capture on.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader">
            <summary>
            Represents the configuration reader.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadCaptureConfiguration">
            <summary>
            Loads the PLT capture configuration from the configuration
            XML file.
            </summary>
            <returns>An object of CaptureConfiguration representing the configuration.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.LoadTestINIFile(System.String)">
            <summary>
            Loads the specified Test ini file content.
            </summary>
            <param name="INIFilename">The ini filename to load.</param>
            <returns>An object of PLTIniContent representing the ini file content.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ConfigurationReader.ValidatePLTIniContent(Test.Common.Library.PageLoadTimeDaemon.PLTIniContent)">
            <summary>
            Validates the PLT INI Content data structure.
            </summary>
            <param name="INIContent">The PLT Ini Content object to validate.</param>
            <returns>True if the validation succeeds, else false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler">
            <summary>
            Represents the external tool execution helper.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.ExternalToolHandler.ExecuteProgram(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Executes a program.
            </summary>
            <param name="ExecutableName">The name of the program file to execute.</param>
            <param name="Arguments">The command line arguments.</param>
            <param name="WorkingDirectory">The working directory for the executable.</param>
            <param name="UseWindowsShell">Indicates whether to use the windows shell to execute.</param>
            <returns>True if the program executed successfully, otherwise false.</returns>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1">
            <summary>
            Indicates PLT 1 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT1_2">
            <summary>
            Indicates PLT 1.2 tests.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTType.PLT2">
            <summary>
            Indicates PLT 2 tests.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent">
            <summary>
            Represents the PLT Ini file content.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.TestURLList">
            <summary>
            The list of URLs to test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.PLTTestType">
            <summary>
            Indicates the type of PLT Tests to run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Iterations">
            <summary>
            The number of iterations to run for each page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTIniContent.Interval">
            <summary>
            The interval in milliseconds between each page load.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL">
            <summary>
            Represents the PLT Test URL
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.TestURL">
            <summary>
            Indicates the Test URL.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestURL.URLPageTitle">
            <summary>
            Indicates the Page Title of the URL.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor">
            <summary>
            Represents the PLT Monitor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PLT Monitor class
            for the specified INI File.
            </summary>
            <param name="INIFilename">The INI filename.</param>
            <param name="NetworkType">The type of the network on which this test is run.</param>
            <param name="Environment">The environment in which this test is run.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.StartPLTTests">
            <summary>
            Starts running the PLT Tests defined in the loaded ini file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.SaveResultsToCSV">
            <summary>
            Saves the result of the PLT Test to a CSV file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.RunPLTTest(System.String,System.String,Test.Common.Library.PageLoadTimeDaemon.PLTType,System.Int32)">
            <summary>
            Executes the Page Load Time test on the specified URL.
            </summary>
            <param name="TestURL">The URL to test.</param>
            <param name="URLPageTitle">The expected title of the page.</param>
            <param name="TypeOfPLT">The type of PLT test to run.</param>
            <param name="IterationNumber">The iteration number of this test.</param>
            <returns>An object of PLTTestResult representing the result of the PLT Test.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetDefaultPLTTestResult(System.String)">
            <summary>
            Gets a default PLT Test Result object for the specified URL.
            </summary>
            <param name="URL">The URL that is under test.</param>
            <returns>An object of PLTTestResult representing the default Test Result.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.GetFolderFriendlyName(System.String)">
            <summary>
            Gets a folder friendly name from a target URL
            </summary>
            <param name="TargetURL">The target URL.</param>
            <returns>A string represnting the folder friendly name.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.CleanDNSCache">
            <summary>
            Cleans the DNS Cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCache">
            <summary>
            Clears the browser cache.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ClearCookies">
            <summary>
            Clears all cookies.
            </summary>
            <returns>True if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.Dispose(System.Boolean)">
            <summary>
            Do a proper dispose of the object releasing created objects.
            </summary>
            <param name="Disposing">Indicates that the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitor.ShutDownIE">
            <summary>
            Kills IE process
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger">
            <summary>
            Represents the PLT Monitor logger.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Daemon Logger with the specified
            log file name.
            </summary>
            <param name="LogFileName">The name of the Log File.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.Close">
            <summary>
            Closes this log file.
            </summary>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel,System.String)">
            <summary>
            Writes a log entry to the log file with the specified
            Logentry level.
            </summary>
            <param name="Level">The level of the log entry being written.</param>
            <param name="LogEntry">The log entry to write to the log file.</param>
        </member>
        <member name="M:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.WriteLine(System.Exception)">
            <summary>
            Writes the specified Exception to the log file.
            </summary>
            <param name="Error">The exception to write to the log file.</param>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogFileName">
            <summary>
            Gets the name of the Log File.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel">
            <summary>
            The level of the log entry being written.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Message">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Warning">
            <summary>
            Warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.PageLoadTimeDaemon.PLTMonitorLogger.LogLevel.Exception">
            <summary>
            Exception message.
            </summary>
        </member>
        <member name="T:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult">
            <summary>
            Represents the result of a PLT Test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestTimeStamp">
            <summary>
            The timestamp of the PLT test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.TestURL">
            <summary>
            The URL that was tested.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageLoadTime">
            <summary>
            The time required to load the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.PageErrorCount">
            <summary>
            The number of errors on the page.
            </summary>
        </member>
        <member name="P:Test.Common.Library.PageLoadTimeDaemon.PLTTestResult.Availability">
            <summary>
            The availability of the page. If the page loaded within the set time out, even with errors,
            then the page is 100% available. Otherwise it is 0% available.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PlatformLib\StfProxy\obj\Debug\StfProxy.csproj.FileListAbsolute.txt ===
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\StfProxy.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\StfProxy.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\STFCore.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\STFLive.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\XblConfig.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\XblCore.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\STFLive.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\XblConfig.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\STFCore.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\bin\Debug\XblCore.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\obj\Debug\ResolveAssemblyReference.cache
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\obj\Debug\StfProxy.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\StfProxy\obj\Debug\StfProxy.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PlatformLib\PlatformLib\obj\Debug\PlatformLib.csproj.FileListAbsolute.txt ===
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Accounts.xml
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Countries.xml
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\LiveLib.xml
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\PlatformLib.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\PlatformLib.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\accountutilityclient.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\assetlibrary.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\avatar.services.contracts.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\avatarapinet.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\avatarproxy.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\cloudservices.test.common.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\LiveLib.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Microsoft.WindowsLive.Test.WinLiveUser.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Microsoft.WindowsLive.Test.WinLiveUser.WinLiveIdInterface.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\PassportLib.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\STFLive.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\stfproxy.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\XblConfig.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\STFCore.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\SoftwareRendererNet.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\XblCore.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\MathLibNet.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\avatar.services.contracts.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\stfproxy.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\STFLive.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Microsoft.WindowsLive.Test.WinLiveUser.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Microsoft.WindowsLive.Test.WinLiveUser.WinLiveIdInterface.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\accountutilityclient.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\PassportLib.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\avatarapinet.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\XblConfig.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\STFCore.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\cloudservices.test.common.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\SoftwareRendererNet.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\assetlibrary.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\avatarproxy.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\XblCore.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\LiveLib.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\MathLibNet.pdb
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\obj\Debug\ResolveAssemblyReference.cache
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\obj\Debug\PlatformLib.dll
D:\Depot\LEST_MAIN_DEV\product\TestSource\Common\Library\PlatformLib\PlatformLib\obj\Debug\PlatformLib.pdb
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\Countries.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<countries>
  <!--
        public class CountryInfo
        {
            public byte CountryId;
            public string CountryCode;
            public byte User;
            public byte Billing;
            public bool AllowDirectDebit;
            public bool RequireCCAgeVerification;
        }
    -->
  <country Id="0" Code="XX" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <FirstNames>
      <string>John</string>
      <string>Mary</string>
      <string>Sue</string>
      <string>Michael</string>
      <string>Laura</string>
    </FirstNames>
    <LastNames>
      <string>Doe</string>
      <string>Incognito</string>
      <string>Fle</string>
    </LastNames>
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
  </country>
  <country Id="1" Code="AE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
  </country>
  <country Id="2" Code="AL" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="3" Code="AM" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="4" Code="AR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="5" Code="AT" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>3</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Vienna" PostalCode="1030" State = "" />
    </Addresses>
  </country>
  <country Id="6" Code="AU" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Brighton" PostalCode="3186" State="VIC" />
    </Addresses>
  </country>
  <country Id="7" Code="AZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="8" Code="BE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>4</byte>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Brussels" PostalCode="1000" />
    </Addresses>
  </country>
  <country Id="9" Code="BG" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="10" Code="BH" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="11" Code="BN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="12" Code="BO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="13" Code="BR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>9</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Sao Paolo" PostalCode="07141-970" />
    </Addresses>
  </country>
  <country Id="14" Code="BY" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="15" Code="BZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="16" Code="CA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>4</byte>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Victoria" PostalCode="V8W 9W2" State="BC" />
    </Addresses>
  </country>
  <country Id="17" Code="CB" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="18" Code="CH" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>4</byte>
      <byte>3</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Weinfelden" PostalCode="8570" State="TG" />
    </Addresses>
  </country>
  <country Id="19" Code="CL" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>5</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Santiago" PostalCode="8340457" />
    </Addresses>
  </country>
  <country Id="20" Code="CN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>10</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1 = "9931 Lovely Lane NE" City = "BeiJing" PostalCode = "100001" State = "" />
    </Addresses>
  </country>
  <country Id="21" Code="CO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0">
    <LiveLanguages>
      <byte>5</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Medellin" PostalCode = "" State = "" />
    </Addresses>
  </country>
  <country Id="22" Code="CR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="23" Code="CZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Prague" PostalCode = "109 99" State = "" />
    </Addresses>
  </country>
  <country Id="24" Code="DE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="1" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>3</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="BERLIN" PostalCode="22767" State="" />
    </Addresses>
  </country>
  <country Id="25" Code="DK" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="København K" PostalCode="1202" State = "" />
    </Addresses>
  </country>
  <country Id="26" Code="DO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="27" Code="DZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="28" Code="EC" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="29" Code="EE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="30" Code="EG" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="31" Code="ES" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>5</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Barcelona" PostalCode="08007" State = "" />
    </Addresses>
  </country>
  <country Id="32" Code="FI" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Helsinki" PostalCode="00100" State = "" />
    </Addresses>
  </country>
  <country Id="33" Code="FO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="34" Code="FR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>4</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="CABOURG" PostalCode="14390" State="" />
    </Addresses>
  </country>
  <country Id="35" Code="GB" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="London" PostalCode="EC1Y8SY" State="" />
    </Addresses>
  </country>
  <country Id="36" Code="GE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="37" Code="GR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Thessaloniki" PostalCode = "575 00" State = "" />
    </Addresses>
  </country>
  <country Id="38" Code="GT" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="39" Code="HK" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
      <byte>8</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Wanchai" PostalCode = "" State = "" />
    </Addresses>
  </country>
  <country Id="40" Code="HN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="41" Code="HR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="42" Code="HU" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Budapest" PostalCode = "1111" State = "" />
    </Addresses>
  </country>
  <country Id="43" Code="ID" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="44" Code="IE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Banagher-on-the-Shannon" PostalCode="" State = "" />
    </Addresses>
  </country>
  <country Id="45" Code="IL" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="46" Code="IN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1 = "9931 Lovely Lane NE" City = "Gurgaon" PostalCode = "122 002" State = "" />
    </Addresses>
  </country>
  <country Id="47" Code="IQ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="48" Code="IR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="49" Code="IS" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="50" Code="IT" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>6</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Bologna" PostalCode="40053" State = "" />
    </Addresses>
  </country>
  <country Id="51" Code="JM" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="52" Code="JO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="53" Code="JP" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <FirstNames>
      <string>金子</string>
      <string>益子</string>
      <string>直哉</string>
      <string>尚子</string>
    </FirstNames>
    <LastNames>
      <string>佐藤</string>
      <string>鈴木</string>
      <string>高橋</string>
      <string>加藤</string>
      <string>勅使河原</string>
    </LastNames>
    <LiveLanguages>
      <byte>2</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Shibuya-ku" PostalCode="1518543" State="Tokyo" />
    </Addresses>
  </country>
  <country Id="54" Code="KE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="55" Code="KG" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="56" Code="KR" MinUserAge="14" MinBillingAge="20" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>7</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Seoul" State="" PostalCode="135080" />
    </Addresses>
  </country>
  <country Id="57" Code="KW" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="58" Code="KZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="59" Code="LB" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="60" Code="LI" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="61" Code="LT" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="62" Code="LU" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="63" Code="LV" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="64" Code="LY" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="65" Code="MA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="66" Code="MC" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="67" Code="MK" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="68" Code="MN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="69" Code="MO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="70" Code="MV" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="71" Code="MX" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>5</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "México City" PostalCode = "11580" State = "Col. Polanco" />
    </Addresses>
  </country>
  <country Id="72" Code="MY" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="73" Code="NI" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="74" Code="NL" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="AMSTERDAM" PostalCode="1012 RC" State = "" />
    </Addresses>
  </country>
  <country Id="75" Code="NO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Oslo" PostalCode="0980" State="" />
    </Addresses>
  </country>
  <country Id="76" Code="NZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0">
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Aukland" PostalCode = "" State = "" />
    </Addresses>
  </country>
  <country Id="77" Code="OM" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="78" Code="PA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="79" Code="PE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="80" Code="PH" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="81" Code="PK" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="82" Code="PL" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>11</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Warsaw" PostalCode = "00-540" State = "" />
    </Addresses>
  </country>
  <country Id="83" Code="PR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="84" Code="PT" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>9</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Lisboa" PostalCode = "1250-096" State = "" />
    </Addresses>
  </country>
  <country Id="85" Code="PY" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="86" Code="QA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="87" Code="RO" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="88" Code="RU" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>12</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Moscow" PostalCode = "113035" State = "" />
    </Addresses>
  </country>
  <country Id="89" Code="SA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="90" Code="SE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Jukkasjärvi" PostalCode="98191" State = "" />
    </Addresses>
  </country>
  <country Id="91" Code="SG" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Singapore" PostalCode = "179803" State = "" />
    </Addresses>
  </country>
  <country Id="92" Code="SI" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="93" Code="SK" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="94" Code="SP" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="95" Code="SV" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="96" Code="SY" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="97" Code="TH" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="98" Code="TN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="99" Code="TR" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="100" Code="TT" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="101" Code="TW" MinUserAge="13" MinBillingAge="20" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>8</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Taipei" PostalCode = "110" State = "" />
    </Addresses>
  </country>
  <country Id="102" Code="UA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="103" Code="US" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City="Redmond" PostalCode="98052" State="WA" />
    </Addresses>
  </country>
  <country Id="104" Code="UY" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="105" Code="UZ" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="106" Code="VE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="107" Code="VN" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="108" Code="YE" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
  <country Id="109" Code="ZA" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" >
    <LiveLanguages>
      <byte>1</byte>
    </LiveLanguages>
    <Addresses>
      <AddressInfo Street1="9931 Lovely Lane NE" City = "Cape Town" PostalCode = "7800" State = "" />
    </Addresses>
  </country>
  <country Id="110" Code="ZW" MinUserAge="13" MinBillingAge="18" AllowDirectDebit="0" RequireCCAgeVerification="0" />
</countries>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\PlatformLib\PlatformLib\bin\Debug\LiveLib.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<livelib>
	<config>
		<currentEnvironment name="testnetrr-tg2" />
		<countriesFile name="Countries.xml" />
		<passport site="kdc.test.xboxlive.com"  url="https://login.passport-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi" environment="INT"/>
		<LiveBVTBackEndServer name="xoccorpsbx011" />
	</config>
	<clients>
		<client type="Xenon">
			<!-- In a Direct Access environment, calls are made directly to servers.
                 This is used for Xblobs and when running inside TestNet. -->
			<transactions environmentType="DirectAccess" defaultTransactionType="FD">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="FakeAA" />
				<transaction svcId="178" transactionType="Http" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
			<!-- In a Test Gateway environment, calls are proxied through a Test Gateway.
                 This is used when running on CorpNet. -->
			<transactions environmentType="TestGateway" defaultTransactionType="TG">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="178" transactionType="HttpTG" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
			<transactions environmentType="TestGateway2" defaultTransactionType="TG2">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="178" transactionType="TG2" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
		</client>
		<client type="Zune">
			<transactions environmentType="DirectAccess" defaultTransactionType="FakeAA">
				<transaction svcId="175" transactionType="Http" />
			</transactions>
			<transactions environmentType="TestGateway" defaultTransactionType="AA">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="177" transactionType="AA" />
			</transactions>
			<transactions environmentType="TestGateway2" defaultTransactionType="AA">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="177" transactionType="AA" />
			</transactions>
		</client>
		<client type="WebBrowser">
			<transactions environmentType="DirectAccess" defaultTransactionType="AA">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="182" transactionType="FD" />
			</transactions>
			<transactions environmentType="TestGateway" defaultTransactionType="TG">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="177" transactionType="AA" />
				<transaction svcId="178" transactionType="HttpTG" />
			</transactions>
			<transactions environmentType="TestGateway2" defaultTransactionType="TG2">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="177" transactionType="AA" />
				<transaction svcId="178" transactionType="TG2" />
				<transaction svcId="182" transactionType="TG2HttpAuth" />
			</transactions>
		</client>
		<client type="Xbox">
			<!-- In a Direct Access environment, calls are made directly to servers.
                 This is used for Xblobs and when running inside TestNet. -->
			<transactions environmentType="DirectAccess" defaultTransactionType="FD">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="178" transactionType="Http" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
			<!-- In a Test Gateway environment, calls are proxied through a Test Gateway.
                 This is used when running on CorpNet. -->
			<transactions environmentType="TestGateway" defaultTransactionType="TG">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="178" transactionType="HttpTG" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
			<transactions environmentType="TestGateway2" defaultTransactionType="TG2">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="178" transactionType="Http" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
		</client>
		<client type="Panorama">
			<!-- In a Direct Access environment, calls are made directly to servers.
                 This is used for Xblobs and when running inside TestNet. -->
			<transactions environmentType="DirectAccess" defaultTransactionType="FD">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="178" transactionType="Http" />
				<transaction svcId="179" transactionType="UDP" />
				<transaction svcId="180" transactionType="UDP" />
			</transactions>
			<!-- In a Test Gateway environment, calls are proxied through a Test Gateway.
                 This is used when running on CorpNet. -->
			<transactions environmentType="TestGateway" defaultTransactionType="TG">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="178" transactionType="HttpTG" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
			<transactions environmentType="TestGateway2" defaultTransactionType="TG2">
				<transaction svcId="175" transactionType="Http" />
				<transaction svcId="176" transactionType="AA" />
				<transaction svcId="178" transactionType="TG2" />
				<transaction svcId="179" transactionType="UDP" />
			</transactions>
		</client>
	</clients>

	<environments>
		<!-- -->
		<!-- TestNet Environment Parameters -->
		<!-- -->
		<environment name="testnetrr-tg2" type="TestGateway2">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="*" host="10.184.226.22" portNum="81" transactionType="TG2" />
			</ipaddresses>
			<wiredataPublicKey version="1" key="BgIAAACkAABSU0ExAAgAAAEAAQAZ5xN9vY2Z5B17TN7hbISt3naz/C2IvhFxgTB2jgDgCFyQU4YxQ1oveKpC6PV4r8T9xH79ATomw6wMyzmflMV1gfQ8BXiQffm/PY2rm2fKeim6480L3M4xPpbp9mUb1B0ByRnMoXXwPVuuQAQaIHRG0xmHW46tqCTZoxiYcUTiHWsRH8ohveVPG5MhV39pD4Eg65HTrMEG+qBNV+IIJ5V+EJ0muRg2MXxtapFBUdOAZMG+WV11p65MeV2oWu/53aktO0ZzgjwOMgQEUpOImg17a0N+fgu/MmHQid8OauHCW5V0DsmUo+GLxCGVOFMUCEKrQ94rN4yYq3rT2phcAZ7D" />
		</environment>
		<environment name="testnetrr-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="TXXBLPOOLIIS101" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="4" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="TXXBLPOOLIIS101" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="TXXBLPOOLIIS101" transactionType="FD" />
				<ipaddress svcId="11" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="TXXBLPOOLIIS101" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="TXXBLPOOLIIS101" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="TXXBLPOOLIIS101" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="TXXBLPOOLINH101" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="172.19.152.160" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="TXXBLPOOLIIS101" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="177" host="TXXBLPOOLIIS101" transactionType="AA" />
				<ipaddress svcId="178" host="TXXBLPOOLIIS101" transactionType="Http" />
				<ipaddress svcId="181" host="172.19.152.160" transactionType="FD" vifc="authsg" />
				<ipaddress svcId="*" host="TXXBLPOOLIIS101" transactionType="FD" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- StressNet Environment Parameters -->
		<!-- -->
		<environment name="stressnet1rr-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="172.19.176.10" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="172.19.176.5" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="3" host="172.19.176.7" transactionType="FD" vifc="xbos_autoupdate" />
				<ipaddress svcId="4" host="172.19.176.7" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="172.19.176.15" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="172.19.176.9" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="172.19.176.13" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="172.19.176.3" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="172.19.176.7" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="172.19.176.25" transactionType="FD" vifc="lists" />
				<ipaddress svcId="11" host="172.19.176.14" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="172.19.176.12" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="172.19.176.11" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="172.19.176.4" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="172.19.176.4" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="172.19.176.6" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="172.19.176.10" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="172.19.176.10" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="172.19.176.7" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="10.184.224.1" portNum="80" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="172.19.176.7" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="177" host="172.19.176.7" transactionType="AA" vifc="web accounts" />
				<ipaddress svcId="178" host="172.19.176.2" transactionType="Http" vifc="xsuppapi" />
				<ipaddress svcId="179" host="10.184.224.35" transactionType="UDP" vifc="kdcsvc" />
				<ipaddress svcId="181" host="10.184.224.29" transactionType="FD" vifc="authsg" />
				<ipaddress svcId="182" host="172.19.176.15" transactionType="FD" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- StressNet2 Environment Parameters -->
		<!-- -->
		<environment name="stressnet2rr-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="172.19.176.74" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="172.19.176.69" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="3" host="172.19.176.71" transactionType="FD" vifc="xbos_autoupdate" />
				<ipaddress svcId="4" host="172.19.176.71" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="172.19.176.79" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="172.19.176.73" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="172.19.176.77" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="172.19.176.67" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="172.19.176.71" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="172.19.176.89" transactionType="FD" vifc="lists" />
				<ipaddress svcId="11" host="172.19.176.78" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="172.19.176.76" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="172.19.176.75" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="172.19.176.68" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="172.19.176.68" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="172.19.176.70" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="172.19.176.74" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="172.19.176.74" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="172.19.176.71" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="10.184.224.64" portNum="80" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="172.19.176.71" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="177" host="172.19.176.71" transactionType="AA" vifc="web accounts" />
				<ipaddress svcId="178" host="172.19.176.66" transactionType="Http" vifc="xsuppapi" />
				<ipaddress svcId="179" host="10.184.224.99" transactionType="UDP" vifc="kdcsvc" />
				<ipaddress svcId="181" host="10.184.224.93" transactionType="FD" vifc="authsg" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- UpgradeNet Environment Parameters -->
		<!-- -->
		<environment name="upgradenet-tg" type="TestGateway">
			<defaultSchemaVersion major="3" minor="0" />
			<ipaddresses>
				<!--ipaddress svcId="*" host="10.198.102.216" transactionType="TG" /-->
				<ipaddress svcId="*" host="10.198.102.230" transactionType="TG" />
			</ipaddresses>
		</environment>
		<environment name="upgradenet-int" type="DirectAccess">
			<defaultSchemaVersion major="3" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="10.50.1.10" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="10.50.1.5" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="3" host="10.50.1.7" transactionType="FD" vifc="xbos_autoupdate" />
				<ipaddress svcId="4" host="10.50.1.7" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="10.50.1.15" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="10.50.1.9" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="10.50.1.13" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="10.50.1.3" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="10.50.1.7" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="11" host="10.50.1.14" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="10.50.1.12" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="10.50.1.11" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="10.50.1.4" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="10.50.1.4" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="10.50.1.6" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="10.50.1.10" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="10.50.1.10" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="10.50.1.19" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- BVTNet Environment Parameters -->
		<!-- -->
		<environment name="BVTNet-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="172.19.144.70" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="172.19.144.70" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="4" host="172.19.144.70" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="172.19.144.70" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="172.19.144.70" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="172.19.144.70" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="172.19.144.70" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="172.19.144.70" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="172.19.144.70" transactionType="FD" vifc="lists" />
				<ipaddress svcId="11" host="172.19.144.70" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="172.19.144.70" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="172.19.144.70" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="172.19.144.70" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="172.19.144.70" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="172.19.144.70" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="172.19.144.70" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="172.19.144.70" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="172.19.144.70" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="10.184.227.27" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="172.19.144.70" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="181" host="172.19.144.72" transactionType="FD" vifc="authsg" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- AutoNet Environment Parameters -->
		<!-- -->
		<environment name="autonet-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="172.19.144.81" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="172.19.144.81" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="4" host="172.19.144.81" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="172.19.144.81" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="172.19.144.81" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="172.19.144.81" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="172.19.144.81" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="172.19.144.81" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="172.19.144.81" transactionType="FD" />
				<ipaddress svcId="11" host="172.19.144.81" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="172.19.144.81" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="172.19.144.81" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="172.19.144.81" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="172.19.144.81" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="172.19.144.81" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="172.19.144.81" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="172.19.144.81" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="172.19.144.81" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="10.184.227.63" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="172.19.144.81" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="177" host="172.19.144.81" transactionType="AA" />
				<ipaddress svcId="178" host="172.19.144.81" transactionType="Http" />
				<ipaddress svcId="181" host="172.19.144.83" transactionType="FD" vifc="authsg" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- CoreNet Environment Parameters -->
		<!-- -->
		<environment name="corenet32-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="10.60.1.7" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="10.60.1.7" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="4" host="10.60.1.7" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="10.60.1.7" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="10.60.1.7" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="10.60.1.7" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="10.60.1.7" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="10.60.1.7" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="10.60.1.7" transactionType="FD" />
				<ipaddress svcId="11" host="10.60.1.7" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="10.60.1.7" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="10.60.1.7" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="10.60.1.7" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="10.60.1.7" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="10.60.1.7" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="10.60.1.7" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="10.60.1.7" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="10.60.1.7" transactionType="FD" vifc="xbos_drm"/>
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="10.60.1.9" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="10.60.1.7" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="181" host="10.60.1.9" transactionType="FD" vifc="authsg"/>
			</ipaddresses>
		</environment>
		<environment name="corenet-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="10.60.1.24" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="10.60.1.24" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="4" host="10.60.1.24" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="10.60.1.24" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="10.60.1.24" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="10.60.1.24" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="10.60.1.24" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="10.60.1.24" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="10.60.1.24" transactionType="FD" />
				<ipaddress svcId="11" host="10.60.1.24" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="10.60.1.24" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="10.60.1.24" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="10.60.1.24" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="10.60.1.24" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="10.60.1.24" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="10.60.1.24" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="10.60.1.24" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="10.60.1.24" transactionType="FD" vifc="xbos_drm"/>
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="10.124.132.21" transactionType="Http" vifc="catalog" />
				<ipaddress svcId="176" host="10.60.1.24" transactionType="Http" vifc="web billing" />
				<ipaddress svcId="177" host="10.60.1.24"  transactionType="AA"/>
				<ipaddress svcId="178" host="10.60.1.24" transactionType="Http" />
				<ipaddress svcId="181" host="10.60.1.26" transactionType="FD" vifc="authsg"/>
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- Int2 Environment Parameters -->
		<!-- -->
		<environment name="int2-tg2" type="TestGateway2">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.198.102.156" portNum="80" transactionType="Http" />
				<ipaddress svcId="176" host="10.198.102.154" portNum="443" transactionType="AA" />
				<ipaddress svcId="178" host="10.198.102.212" transactionType="HttpTG" />
				<ipaddress svcId="179" host="10.198.102.117" transactionType="UDP" />
				<ipaddress svcId="181" host="10.198.102.154" portNum="80" vifc="authsg" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="*" host="10.10.101.23" portNum="81" transactionType="TG2" />
			</ipaddresses>
		</environment>
		<environment name="int2-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="1" host="10.10.220.52" transactionType="FD" vifc="xpnfd_presence" />
				<ipaddress svcId="2" host="10.10.220.52" transactionType="FD" vifc="stringsvr" />
				<ipaddress svcId="3" host="10.10.220.52" transactionType="FD" vifc="xbos_autoupdate" />
				<ipaddress svcId="4" host="10.10.220.52" transactionType="FD" vifc="xbos_base_subscription" />
				<ipaddress svcId="5" host="10.10.220.52" transactionType="FD" vifc="xuacs" />
				<ipaddress svcId="6" host="10.10.220.52" transactionType="FD" vifc="xmatchfd" />
				<ipaddress svcId="7" host="10.10.220.52" transactionType="FD" vifc="xstatsfd" />
				<ipaddress svcId="8" host="10.10.220.52" transactionType="FD" vifc="fbserver" />
				<ipaddress svcId="9" host="10.10.220.52" transactionType="FD" vifc="xbos_billing_offering" />
				<ipaddress svcId="10" host="10.10.220.52" transactionType="FD" vifc="lists"/>
				<ipaddress svcId="11" host="10.10.220.52" transactionType="FD" vifc="xtou" />
				<ipaddress svcId="12" host="10.10.220.52" transactionType="FD" vifc="xsig" />
				<ipaddress svcId="13" host="10.10.220.52" transactionType="FD" vifc="xqry" />
				<ipaddress svcId="14" host="10.10.220.52" transactionType="FD" vifc="stfd_name_resolution" />
				<ipaddress svcId="15" host="10.10.220.52" transactionType="FD" vifc="stfd_storage" />
				<ipaddress svcId="16" host="10.10.220.52" transactionType="FD" vifc="xarb" />
				<ipaddress svcId="18" host="10.10.220.52" transactionType="FD" vifc="xpnfd_messaging" />
				<ipaddress svcId="19" host="10.10.220.52" transactionType="FD" vifc="xpnfd_teams" />
				<ipaddress svcId="21" host="10.10.220.52" transactionType="FD" vifc="xbos_drm" />
				<ipaddress svcId="26" host="0.0.0.0" transactionType="FD" vifc="xconnsrv" />
				<ipaddress svcId="175" host="131.107.143.214" portNum="80" transactionType="HTTP" vifc="catalog" />
				<ipaddress svcId="176" host="10.10.220.52" transactionType="Http" vifc="webbilling" />
				<ipaddress svcId="177" host="10.10.220.52"  transactionType="AA" vifc="webaccounts" />
				<ipaddress svcId="178" host="10.10.2.2" transactionType="Http" vifc="cust" />
				<ipaddress svcId="179" host="131.107.143.203" transactionType="UDP" vifc="kdcsvc" />
				<ipaddress svcId="180" host="10.10.2.12" transactionType="Http" vifc="signature_internal" />
				<ipaddress svcId="181" host="131.107.143.208" portNum="80" vifc="authsg" />
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- Xblob Environment Parameters -->
		<!-- -->
		<environment name="le-xblob-dev01" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.133" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.133" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.133" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.133" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<environment name="le-xblob-avatar" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.223" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.223" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.223" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.223" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<environment name="le-storax-xblob" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.34" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.34" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.34" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.34" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<environment name="le-tesla-xblob" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.193" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.193" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.193" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.193" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<environment name="le-xblob-test01" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.241" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.241" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.241" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.241" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<environment name="xblob-int" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="172.19.144.52" transactionType="Http" />
				<ipaddress svcId="176" host="172.19.144.52" transactionType="Http" />
				<ipaddress svcId="177" host="172.19.144.52" transactionType="AA" />
				<ipaddress svcId="*" host="172.19.144.52" transactionType="FD" />
			</ipaddresses>
		</environment>
		<environment name="ENTER XBLOB NAME" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="ENTER XBLOB IP" transactionType="Http" />
				<ipaddress svcId="176" host="ENTER XBLOB IP" transactionType="Http" />
				<ipaddress svcId="177" host="ENTER XBLOB IP" transactionType="AA" />
				<ipaddress svcId="*" host="ENTER XBLOB IP" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<environment name="leo-xblob-dev01" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.58" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.58" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.58" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.58" transactionType="FD" />
			</ipaddresses>
		</environment>
		<environment name="le-roll-xblob" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.238" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.238" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.238" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.238" transactionType="FD" />
			</ipaddresses>
		</environment>
		<environment name="leairleetxblob" type="DirectAccess">
			<defaultSchemaVersion major="6" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="10.178.184.67" transactionType="Http" />
				<ipaddress svcId="176" host="10.178.184.67" transactionType="Http" />
				<ipaddress svcId="177" host="10.178.184.67" transactionType="AA" />
				<ipaddress svcId="*" host="10.178.184.67" transactionType="FD" />
			</ipaddresses>
		</environment>
		<environment name="ENTER XBLOB NAME" type="DirectAccess">
			<defaultSchemaVersion major="4" minor="0" />
			<ipaddresses>
				<ipaddress svcId="175" host="ENTER XBLOB IP" transactionType="Http" />
				<ipaddress svcId="176" host="ENTER XBLOB IP" transactionType="Http" />
				<ipaddress svcId="177" host="ENTER XBLOB IP" transactionType="AA" />
				<ipaddress svcId="*" host="ENTER XBLOB IP" transactionType="FD" />
			</ipaddresses>
			<passport site="xuacs.test.xboxlive.com" />
			<passportloginurl>https://login.live-int.com/ppsecure/clientpost.srf?id=64155&amp;wp=mbi</passportloginurl>
		</environment>
		<!-- -->
		<!-- Example Environment Parameters -->
		<!-- -->
		<environment name="example">
			<ipaddresses>
				<!-- Send requests for service ID 20 to host 1.1.1.20 on the default port
                    using a FDTransaction object -->
				<ipaddress svcId="20" host="1.1.1.20" transactionType="FD" />
				<!-- Send requests for service ID 21 to host SomeServer on port 11111
                    using a FDTransaction object -->
				<ipaddress svcId="21" host="SomeServer" portNum="11111" transactionType="FD" />
				<!-- Send requests for service ID 22 to host 1.1.1.22 on port 11111
                    using a WebSGTransaction object -->
				<ipaddress svcId="22" host="1.1.1.22" portNum="11111" transactionType="WebSG" />
				<!-- Otherwise default to sending requests for any other service ID not explicitly
                    listed in this block to 1.1.1.1 using a FDTransaction object -->
				<ipaddress svcId="*" host="1.1.1.1" transactionType="FD" />
				-->
			</ipaddresses>
		</environment>

		<!-- -->
		<!-- Default Ports -->
		<!-- -->
		<defaultPorts>
			<!-- xpnfd_presence -->
			<port svcId="1" portNum="10010" />
			<!-- stringsvr -->
			<port svcId="2" portNum="10020" />
			<!-- xbos_autoupdate -->
			<port svcId="3" portNum="10030" />
			<!-- xbos_base_subscription -->
			<port svcId="4" portNum="10040" />
			<!-- xuacs -->
			<port svcId="5" portNum="10050" />
			<!-- xmatchfd -->
			<port svcId="6" portNum="10060" />
			<!-- xstatsfd -->
			<port svcId="7" portNum="10070" />
			<!-- fbserver -->
			<port svcId="8" portNum="10080" />
			<!-- xbos_billing_offering -->
			<port svcId="9" portNum="10090" />
			<!-- lists -->
			<port svcId="10" portNum="10100" />
			<!-- xtou -->
			<port svcId="11" portNum="10110" />
			<!-- xsig -->
			<port svcId="12" portNum="10120" />
			<!-- xqry -->
			<port svcId="13" portNum="10130" />
			<!-- stfd_name_resolution -->
			<port svcId="14" portNum="10140" />
			<!-- stfd_storage -->
			<port svcId="15" portNum="10150" />
			<!-- xarb -->
			<port svcId="16" portNum="10160" />
			<!-- xpnfd_messaging -->
			<port svcId="18" portNum="10180" />
			<!-- xpnfd_teams -->
			<port svcId="19" portNum="10190" />
			<!-- xbos_drm -->
			<port svcId="21" portNum="10200" />
			<!-- liveinfo -->
			<port svcId="25" portNum="11250" />
			<!-- ConnectionServer -->
			<port svcId="26" portNum="10260" />
			<!-- catalog -->
			<port svcId="175" portNum="12020" />
			<!-- web billing -->
			<port svcId="176" portNum="10090" />
			<!-- web accounts -->
			<port svcId="177" portNum="10050" />
			<!-- xsuppapi -->
			<port svcId="178" portNum="13010" />
			<!-- kdcsvc -->
			<port svcId="179" portNum="88" />
			<!-- signature_internal -->
			<port svcId="180" portNum="11120" />
			<!-- AuthSg -->
			<port svcId="181" portNum="11120" />
			<!-- User Account Internal-->
			<port svcId="182" portNum="11050" />
			<!-- Lists Internal -->
			<port svcId="183" portNum="11100" />
			<!-- Xbos Internal -->
			<port svcId="184" portNum="11090" />
		</defaultPorts>
	</environments>
</livelib>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\Titanium\Titanium\Template.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<Config>
  <!--Use a test suite to group a set of related tests together and provide
  any parameters they have in common. You need at least one of these, and every 
  one you have must have a unique Title (unique within the same file, that is)-->
  <!--IMPORTANT NOTE: Except for the example nodes in the TestMatrix, all nodes shown here are
  essential, and must have the names they are given herein-->
  <TestSuite Title="SomeTitle">
    <!--This node provides any settings/info that ALL your tests will use-->
    <GlobalInfoNode>
      <!--This tells Titanium what a complete test case node is supposed to look like.
      Leave all the attribute values blank.-->
      <TemplateNode>
        <!--There is no theoretical limit to the number of test parameters you can have
        The name of each parameter MUST correspond to an attribute name in the nodes you 
        use to define your test matrix-->
        <TestCase Make="" Model="" Year="" DriverName="" PassengerName=""/>
      </TemplateNode>
      <!--How many runs do you want? This can be any integer from 0 to positive MAXINT.
      If it is greater than the number of test cases defined in the processed matrix, Titanium will 
      use modulus to wrap around as many times as needed-->
      <ScheduledRuns>42</ScheduledRuns>
    </GlobalInfoNode>
    <!--A point of clarification: in the context of XmlNodes, what System.Xml calls "Name", Titanium calls "Type"-->
    <!--Populate this with nodes whose attributes represent related test parameters. Example: 
    Nodes of type Car might contain the attributes "EngineType", "make", and "model", while nodes of type 
    Driver might contain the attributes "height", "weight", and "RoadRageIndex".-->
    <TestMatrix>
      <!--Pay attention to the order of nodes! The parser will organize them by type until each node
      of the first type encountered will have children ONLY of the second type, who will have children
      ONLY of the third type, and so on down the chain. Because the parser will first encounter
      nodes of type "Car", Cars may have descendants of type Driver and/or type passenger-->
      <Car Make="Toyota" Model="Sienna" Year="2000">
        <!--Driver "Fred" will be tested against all passengers (except Jim) but ONLY against this car-->
        <!--Another note on order: Because the parser will encounter
        a node of type "Driver" second, drivers may have children of type Passenger-->
        <Driver DriverName="Fred"/>
      </Car>
      <Car Make="Toyota" Model="Tracelle" Year="1990">
        <!--Sadly, nobody will be tested against the corvette, because Titanium 
        ignores nodes if they are the same type as any of their ancestors-->
        <Car Make="Chevy" Model="Corvette" Year="1995"/>
      </Car>
      <Car Make="Honda" Model="Accord" Year="2005"/>
      <!--Driver "Edwina" will be tested against ALL cars and all passengers except "Jim"-->
      <Driver DriverName="Edwina"/>
      <!--Driver "Phil" will be tested against ALL cars and ALL passengers, including "Jim"-->
      <Driver DriverName="Phil">
        <!--Passenger "Jim" will be tested against all cars, but only against driver "Phil"-->
        <!--A final note on order: because the parser will encounter the "Passenger" type last,
        Passengers may not have any children of any kind. See the note on Jim's "Rolls 
        CanHardly" below-->
        <Passenger PassengerName="Jim">
          <!--Fortunatley, nobody will be tested against this car, because
          it is a child of Jim, who is a child of Phil, who will, when the 
          test matrix is constructed, become a child of each of the car nodes,
          making the Rolls CanHardly a great grandchild of a Car node.-->
          <Car Make="Comedy Motors" Model="Rolls CanHardly" Year="1"/>
        </Passenger>
      </Driver>
      <!--Driver "Sasha" will be tested TWICE against all cars and all passengers (except Jim)
      , because of the special, optional "Repeat" attribute-->
      <Driver DriverName="Sasha" Repeat="2"/>
      <!--Passenger "Mary" will be tested against ALL cars and ALL drivers-->
      <Passenger PassengerName="Mary"/>
      <!--Passenger "Steve" will be tested against ALL cars and ALL drivers-->
      <Passenger PassengerName="Steve"/>
    </TestMatrix>
  </TestSuite>
</Config>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\Titanium\Titanium\TitaniumConfig.xml ===
﻿<?xml version="1.0" encoding="utf-8" ?>
<Configuration>
	<P2P UrlPattern = "#ENVURL_#LOCALECODE_/#GAMECODE_/" RemoveAnimalPrefix="false">
    <P2PXmlLocation Value="\\azacwh-xptest1\Messenger\"/>
    <P2PXmlLocation Value="C:\Program Files (x86)\Windows Live\Messenger\"/>
	</P2P>
	<Remoting>
		<TitaniumPort>9090</TitaniumPort>
		<ServerPorts Start="9091" End="9100"/>
		<WatchdogPeriod Hours="0" Minutes="0" Seconds="10" />
	</Remoting>
</Configuration>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UITest\readme.txt ===
For example usage of this library, please check out TestSource\Dante.Test\Dante.Test.sln.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Debug\RenoWebAppNonUI\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Debug\LiveWebTests\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Debug\RenoWebAppUI\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Release\LiveWebTests\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Debug\UnifiedLogger\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Release\RenoWebAppNonUI\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Release\RenoWebAppUI\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\UnifiedLogger\UnifiedLogger\bin\Release\UnifiedLogger\Test.Common.Library.UnifiedLogger.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.UnifiedLogger</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger">
            <summary>
            Represents the test Logger.
            </summary>
            <remarks>
            If you are referencing this project, make sure you have a post build task
            in your project to copy down WTTLog.dll to the Build Output folder.
            </remarks>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testCount">
            <summary>
            The number of test results added to the logger.
            This is primarily used by the TRX module, as we have a uppper limit of 3000 test results.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testSessionGuid">
            <summary>
            The TRX session GUID.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logFilePath">
            <summary>
            The path where the log files will be created.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogFileName">
            <summary>
            The name of the WTT Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._textLogFileName">
            <summary>
            The name of the Text Log file.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._testResults">
            <summary>
            A collection to keep the added test results in memory.
            This is used by the TRX module.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._generator">
            <summary>
            The TRX generator object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._loggingType">
            <summary>
            The type of logging flag.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._wttLogger">
            <summary>
            The WTT Logger object.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsDisposed">
            <summary>
            Indicates if the object has been disposed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._IsTRXSessionClosed">
            <summary>
            Indicates if the TRX session has been closed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._projectAreaGuid">
            <summary>
            Project Area Guid for TRX file. This allows the TRX file to be uploaded
            to TFS and associated with a particular project area.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._logWriteMode">
            <summary>
            Indicates whether to append to an existing log file, or to overwrite it.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger._lastTestName">
            <summary>
            Name of the last test started.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <remarks>
            This will create log files for all the 3 log types. The log files will be created with default file names
            in the same folder as the application. Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and the Text log files will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            The WTT and / or the Text log file (if specified) will be created in Append mode.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <remarks>
            This will create log of the specified type(s) with default filename(s) in the same folder as the application.
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logFilePath">The path where the logs will be created. One will be created if it does not exist.</param>
            <param name="projectAreaGUID">
            Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.
            </param>
            <remarks>
            This will create log of the specified type(s) with default filename(s).
            Default file names are as follows:
                TRX   - This file name is autogenerated and cannot be set by user. This is a TRX restriction.
                WTT   - The log file will be named 'WTTLog.wtl'.
                Text  - The log file will be named 'TextLog.log'.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.#ctor(Test.Common.Library.UnifiedLogger.Logger.LoggingType,Test.Common.Library.UnifiedLogger.Logger.WriteMode,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Logger class.
            </summary>
            <param name="type">Bit mask of logging types for the Logger to use.</param>
            <param name="logWriteMode">The write mode of the WTT and / or the Text log file(s).</param>
            <param name="logFilePath">The path where the logs will be created. This path should already exist.</param>
            <param name="wttLogFileName">The name of the WTT log file. Set this to NULL or empty if you're not creating a WTT Log
            or if you want to use the default WTT log filename.</param>
            <param name="textLogFileName">The name of the Text log file. Set this to NULL or empty if you're not creating a Text Log
            or if you want to use the default Text log filename.</param>
            <param name="projectAreaGUID">Project Area Guid for TRX file. This allows the TRX file to be uploaded to TFS 
            and associated with a particular project area.</param>
            <remarks>
            NOTE: The TRX log filename will be autogenerated, and cannot be set by the user. This is by design.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose">
            <summary>
            Disposes the current object and releases all handles.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Dispose(System.Boolean)">
            <summary>
            Disposes the current object.
            </summary>
            <param name="disposing">Indicates whether the object is being disposed.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <remarks>
            <para>
            If the TRX log file is enabled, then the following parameters of the TRX result will be set to their 
            default values:
            </para>
            BuildNumber     - Empty String<br/>
            BuildType       - Debug<br/>    
            Platform        - Any CPU<br/>    
            TestingCategory - Functional<br/>    
            OwnerAlias      - Empty String<br/>    
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.StartTest(System.String,System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.BuildType,Test.Common.Library.UnifiedLogger.Logger.Platform,Test.Common.Library.UnifiedLogger.Logger.TestingCategory)">
            <summary>
            Begins a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to start.</param>
            <param name="buildNumber">The build number on which this test is running. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="ownerAlias">The test owner alias. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="buildType">Specifies whether its a Release or Debug build. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="platform">Specifies the platform where the test was executed. <br/>NOTE: This will only be used by the TRX Log file.</param>
            <param name="category">Specifies the test category of this test. <br/>NOTE: This will only be used by the TRX Log file.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String)">
            <summary>
            Adds an Info type message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to the last Test started (TestName matches LastTestName).
            </summary>
            <param name="message">Message to add.</param>
            <param name="type">Type of Message to add.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a generic message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="message">Message to add.</param>
            <param name="type">Type of message.  A flag based on this type is prepended to each Message in the log.</param>
            <remarks>
            Using this method allows you to control the WTT and / or Text log test result from your code. Use this call only, if you
            want to log exceptions, bugs, warnings etc. to the log, and also want to control the test outcome.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.Int32,System.String)">
            <summary>
            Adds a BUG message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddBug(System.String,System.Int32,System.String)">
            <summary>
            Adds a BUG message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="bugID">A Product Studio bug id.</param>
            <param name="psDBName">A Product Studio database name.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>BLOCKED</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.Exception,System.String)">
            <summary>
            Adds an exception message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddException(System.String,System.Exception,System.String)">
            <summary>
            Adds an exception message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="error">An exception object to add to the log.</param>
            <param name="message">Message to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>FAIL</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String)">
            <summary>
            Adds a warning message to the last Test started (TestName matches LastTestName). <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddWarning(System.String,System.String)">
            <summary>
            Adds a warning message to the specified test. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete. 
            </summary>
            <param name="testName">Name of the test to add message to.</param>
            <param name="warning">The warning text to add.</param>
            <remarks>
            Using this method will override the Test Result for this test in WTT / Text log, to <b>WARN</b>. The test result supplied
            to EndTest call will have no effect. If you want to control the test result, consider using <i>AddMessage</i> instead.
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends the test that was last created. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="result">Result of the test.</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.EndTest(System.String,Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Ends a test with the specified name. <br/>
            NOTE: TRX Logging will not commit to file until the test run is complete.
            </summary>
            <param name="testName">Name of the test to end. If null, the last started TEST is ended.</param>
            <param name="result">Overall outcome of the test.</param>
            <remarks>
            <para>
            NOTE: The result will be ignored in the WTT / Text log, if you added a message of the following types
            to this test. If you did, then the result will be set to the specified Test Result:
            </para>
            MessageType : BUG - BLOCKED <br/>
            MessageType : Exception - FAIL <br/>
            MessageType : Warning - WARN <br/>
            </remarks>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.AddTRXMessage(System.String,System.String,Test.Common.Library.UnifiedLogger.Logger.MessageType)">
            <summary>
            Adds a message to a TRXTestResult.
            </summary>
            <param name="testName">Name of test to add message to</param>
            <param name="message">Message to add</param>
            <param name="type">Type of message to add</param>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CloseLog">
            <summary>
            Finalizes and closes the log files.
            Call this only if this object is to be used no more.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.Init">
            <summary>
            Initialize internal objects.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.SetupDefaults">
            <summary>
            Assigns default values to the log folder path, the WTT log file name
            and the Text log file name, if not already defined.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToTRX(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered TRX test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the TRX test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.MapTestOutcomeToWTT(Test.Common.Library.UnifiedLogger.Logger.TestOutcome)">
            <summary>
            Maps the test outcome to a registered WTT test result.
            </summary>
            <param name="outcome">The test outcome to map.</param>
            <returns>A TestResult representing the WTT test result value.</returns>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.Logger.CleanTestResults">
            <summary>
            Cleans out reported TRX results from internal datastore.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TestCount">
            <summary>
            Number of tests added so far this run.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogFilePath">
            <summary>
            File Path for the log file(s).
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.WTTLogFileName">
            <summary>
            The file name for the WTT Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.TextLogFileName">
            <summary>
            The file name for the Text Log file.
            NOTE: The TRX filename cannot be specified. It is autogenerated. This is by design.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LogWriteMode">
            <summary>
            The write mode of the log files.
            NOTE: This is only applicable for WTT and Text log files. TRX logs will always be overwritten.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.Logger.LastTestName">
            <summary>
            Name of the Last Test Started.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.LoggingType">
            <summary>
            Logging Type bitmask
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.TRX">
            <summary>
            Represents VSTS 2008 TRX logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.WTT">
            <summary>
            Represents WTT 2.6 logging.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.LoggingType.Text">
            <summary>
            Represents plain text file logging.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.MessageType">
            <summary>
            Message Type.  The message type will be prepended to each message added to the test log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Info">
            <summary>
            Indicates an informational message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Warning">
            <summary>
            Indicates a warning message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Error">
            <summary>
            Indicates an error message.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.MessageType.Bug">
            <summary>
            Indicates a message about a bug.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestOutcome">
            <summary>
            Result of the test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Incomplete">
            <summary>
            Indicates that the test has not completed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Invalid">
            <summary>
            Indicates that the test was invalid.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Pass">
            <summary>
            Indicates that the test passed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Fail">
            <summary>
            Indicates that the test failed.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Blocked">
            <summary>
            Indicates that the test is blocked, possibly due to a bug.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Warning">
            <summary>
            Indicates that the test test resulted in a warning.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Skipped">
            <summary>
            Indicates that the test was skipped.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestOutcome.Error">
            <summary>
            Indicates that the test resulted in an error.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.WriteMode">
            <summary>
            The write mode of the WTT or Text log files.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.OverWrite">
            <summary>
            Indicates that the log file will overwrite any existing log file
            with the same name.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.WriteMode.Append">
            <summary>
            Indicates that the log file will append to any existing lof file
            with the same name.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.BuildType">
            <summary>
            The type of the build.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Release">
            <summary>
            Indicates a Release build.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.BuildType.Debug">
            <summary>
            Indicates a Debug build.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.Platform">
            <summary>
            The platform where the test is executed.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.AnyCPU">
            <summary>
            Indicates any platform.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.Platform.x86">
            <summary>
            Indicates a x86 platform.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.Logger.TestingCategory">
            <summary>
            The category of the test.
            NOTE: This will only be used by the TRX log.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.E2E">
            <summary>
            Indicates an End To End Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.BVT">
            <summary>
            Indicates a Build Verification Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Functional">
            <summary>
            Indicates a Functional Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.CustomerStory">
            <summary>
            Indicates a Customer Story Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.PreCheckin">
            <summary>
            Indicates a Pre-CheckIn test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.EVT">
            <summary>
            Indicates a EVT Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Load">
            <summary>
            Indicates a Load Test.
            </summary>
        </member>
        <member name="F:Test.Common.Library.UnifiedLogger.Logger.TestingCategory.Stress">
            <summary>
            Indicates a Stress Test.
            </summary>
        </member>
        <member name="T:Test.Common.Library.UnifiedLogger.TRXTestResult">
            <summary>
            Represents a test result in the TRX log.
            </summary>
        </member>
        <member name="M:Test.Common.Library.UnifiedLogger.TRXTestResult.#ctor">
            <summary>
            Initialize a new instance of the TRXTestResult class.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.SessionId">
            <summary>
            The Test Session Id for the TRX log.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildNumber">
            <summary>
            The Build number of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestName">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Description">
            <summary>
            The description of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.ProjectAreaGUID">
            <summary>
            The TFS Area GUID under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestOwnerAlias">
            <summary>
            The test owner alias.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Message">
            <summary>
            The message text to add to the test result.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.TestingCategory">
            <summary>
            The category under which this test belongs.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.BuildType">
            <summary>
            The Build type of the build on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.Platform">
            <summary>
            The platform on which the test was executed.
            </summary>
        </member>
        <member name="P:Test.Common.Library.UnifiedLogger.TRXTestResult.StartDate">
            <summary>
            The start timestamp of the test.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\WebServiceTestFramework\WebServiceTestFramework\bin\Debug\WebServiceTestFramework\Test.Common.Library.WebServiceTestFramework.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.WebServiceTestFramework</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy">
            <summary>
            Represents the Policy parameters for the WebService Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.#ctor">
            <summary>
            Initializes a new instance of FrameWorkPolicy class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.GetCachePolicy">
            <summary>
            Gets an object of the Requested Cache Policy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.RequestCacheLevelPolicy">
            <summary>
            Get or Set the policy for Request Cache Level.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.RequestTimeOut">
            <summary>
            Get or Set the policy for the Request Timeout.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel">
            <summary>
            The requested Cache Level.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.BypassCache">
            <summary>
            Indicates that the request will be satisfied by using the server. No entries are taken from cache, added to cache,
            or removed from cache between the client and server.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.CacheIfAvailable">
            <summary>
            Indicates that the request will be satisfied from the cache, if available; otherwise it will be fetched from the server.
            If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.CacheOnly">
            <summary>
            Indicates that the request will be satisfied using the locally cached resource; does not send a request for an item
            that is not in the cache. Exception is thrown if the item is not in the client cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.Default">
            <summary>
            Indicates that the request will be satisfied either by using the cached copy of the resource or by sending a request for
            the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.NoCacheNoStore">
            <summary>
            Indicates that the request will never be satisfied by using the cache. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.Reload">
            <summary>
            Indicates that the request will be satisfied by using the server. The response might be saved in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.Revalidate">
            <summary>
            Indicates that the request will be satisfied by using the cached copy of the resource if the timestamp is the same as the timestamp
            of the resource on the server; otherwise, the resource is fetched from the server, and stored in the cache. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity">
            <summary>
            Represents the Security for the WebService Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.#ctor">
            <summary>
            Initializes a new instance of FrameWorkSecurity class. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.GetNetworkCredential">
            <summary>
            Gets an instance of System.Net.NetworkCredential composed of the supplied credentials.
            See Username, Password and Domain. If not set, the Default Network Credential is returned.
            </summary>
            <returns>An object of System.Net.NetworkCredential.</returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.IsDefaultNetworkCredentials">
            <summary>
            Checks if the credential in use is the Default Network Credential.
            </summary>
            <returns>An object of System.Boolean. True if default credential is being used. False if not.</returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.Username">
            <summary>
            The Username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.Password">
            <summary>
            The Password to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.Domain">
            <summary>
            The Domain for the username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.RequirePreAuthentication">
            <summary>
            Gets or Sets whether Pre-Authentication is required for the WebService Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.RequestAuthenticationLevel">
            <summary>
            Gets or Sets the Authentication Level for the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.RequestImpersonationLevel">
            <summary>
            Gets or Sets the Impersonation Level for the WebService Request object.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel">
            <summary>
            Supported Authentication Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequested">
            <summary>
            Indicates that the client and server should be authenticated. The request does not fail if the server is not authenticated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequired">
            <summary>
            Indicates that the client and server should be authenticated. If the server is not authenticated, an Exception will be raised.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel.None">
            <summary>
            Indicates that no authentication is required for the client and server.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel">
            <summary>
            Supported Impersonation Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Anonymous">
            <summary>
            Indicates that the server process cannot obtain identification information about the client, and it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Delegation">
            <summary>
            Indicates that the server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Identification">
            <summary>
            Indicates that the server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Impersonation">
            <summary>
            Indicates that the server process can impersonate the client's security context on its local system. The server cannot 
            impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.None">
            <summary>
            Indicates that an impersonation level is not assigned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess">
            <summary>
            Represents access of Web Service via HTTP GET protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPGetAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.#ctor(System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[])">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Service URI, WebMethod name and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.#ctor(System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[],Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity,Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Service URI, WebMethod name, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName"></param>
            <param name="ParameterCollection">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Web Service.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Web Service.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.IsGETRequestInitialized">
            <summary>
            Indicates if the GET Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.CreateGETRequest">
            <summary>
            Create the GET Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.GetResponse">
            <summary>
            Get the Response for the GET request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Get Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.CreateGetRequestURI">
            <summary>
            Create the Get Request URI String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.WebServiceURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.WebMethodName">
            <summary>
            Gets or Sets the Request WebMethod name.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseData">
            <summary>
            Gets the Response Data for the WebService HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebService HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetResponseHeader">
            <summary>
            Gets the header of the Response for the WebService HTTP GET Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.HttpGetRequestString">
            <summary>
            Gets the actual HTTP GET Request string to access the Web Service.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess">
            <summary>
            Represents access of Web Service via HTTP POST protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPPostAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.#ctor(System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[])">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Service URI, WebMethod name and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.#ctor(System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[],Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity,Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPPostAccess class with the specified
            Hostname, Service URI, WebMethod name, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName"></param>
            <param name="ParameterCollection">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Web Service.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Web Service.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.IsPOSTRequestInitialized">
            <summary>
            Indicates if the POST Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.CreatePOSTRequest">
            <summary>
            Create the POST Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.GetResponse">
            <summary>
            Get the Response for the POST request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Post Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP POST Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.CreatePostRequestURI">
            <summary>
            Create the POST Request URI String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.CreatePostRequestContent">
            <summary>
            Create the POST request content containing the parameter-value collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.WebServiceURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.WebMethodName">
            <summary>
            Gets or Sets the Request WebMethod name.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseData">
            <summary>
            Gets the Response Data for the WebService HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebService HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostResponseHeader">
            <summary>
            Gets the header of the Response for the WebService HTTP POST Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostRequestString">
            <summary>
            Gets the actual HTTP POST Request string to access the Web Service.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPPostAccess.HttpPostRequestContent">
            <summary>
            Gets the HTTP POST Request content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPSoap11Access">
            <summary>
            Represents access of Web Service via SOAP 1.1 protocol.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess">
            <summary>
            Represents access of Web Service via SOAP protocol.
            Version specific implementation in the derived class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.#ctor">
            <summary>
            Initializes HTTPSoapAccess from derived class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.#ctor(System.String,System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[])">
            <summary>
            Initializes HTTPSoapAccess from derived class with specified
            Hostname, Service URI, WebMethod name, Service namespace and the Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceXMLNameSpace">The XML namespace of the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.#ctor(System.String,System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[],Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity,Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy)">
            <summary>
            Initializes HTTPSoapAccess from derived class with specified
            Hostname, Service URI, WebMethod name, Service namespace, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName"></param>
            <param name="WebServiceXMLNameSpace">The XML namespace of the Web Service.</param>
            <param name="ParameterCollection">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Web Service.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Web Service.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SetSOAPAccessType(Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SOAPAccessType)">
            <summary>
            Set the SOAP Version.
            </summary>
            <param name="SOAPVersion">The version of the SOAP Request.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.IsSOAPRequestInitialized">
            <summary>
            Indicates if the SOAP Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.CreateSOAPRequest">
            <summary>
            Create the SOAP Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.GetResponse">
            <summary>
            Get the Response for the SOAP request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Soap Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP SOAP Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP SOAP Request Object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.CreateSoapRequestURI">
            <summary>
            Create the SOAP Request URI String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.CreatePostRequestSoapContent">
            <summary>
            Create the POST request content containing the SOAP Envelope.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.WebServiceURI">
            <summary>
            Gets or Sets the WebService URI.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.WebMethodName">
            <summary>
            Gets or Sets the Request WebMethod name.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.WebServiceXMLNameSpace">
            <summary>
            Gets or Sets the Web Service XML NameSpace.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.RequestParameterCollection">
            <summary>
            Gets or Sets the Request Parameter Collection.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.RequestSecurity">
            <summary>
            Gets or Sets the Request Security object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.RequestPolicy">
            <summary>
            Gets or Sets the Request Policy object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseData">
            <summary>
            Gets the Response Data for the WebService HTTP SOAP Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseContentLength">
            <summary>
            Gets the length of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseContentType">
            <summary>
            Gets the Content Type of the Response Data.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseIsFromCache">
            <summary>
            Indicates if the Response Data has been fetched from the cache.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseIsMutuallyAuthenticated">
            <summary>
            Indicates if the communication has been Mutually Authenticated.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseActualURI">
            <summary>
            Gets the actual URI which responded to the WebService HTTP SOAP Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapResponseHeader">
            <summary>
            Gets the header of the Response for the WebService HTTP SOAP Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapRequestString">
            <summary>
            Gets the actual HTTP SOAP Request string to access the Web Service.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.HttpSoapRequestContent">
            <summary>
            Gets the HTTP SOAP Request content.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SOAPAccessType">
            <summary>
            Indicates the version of the SOAP Access.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SOAPAccessType.Soap11">
            <summary>
            Indicates that access is of SOAP 1.1.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.HTTPSoapAccess.SOAPAccessType.Soap12">
            <summary>
            Indicates that access is of SOAP 1.2.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap11Access.#ctor">
            <summary>
            Initializes a new instance of HTTPSoap11Access.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap11Access.#ctor(System.String,System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[])">
            <summary>
            Initializes a new instance of HTTPSoap11Access with specified
            Hostname, Service URI, WebMethod name and the request parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceXMLNameSpace">The XML namespace of the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap11Access.#ctor(System.String,System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[],Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity,Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of HTTPSoap11Access with specified
            Hostname, Service URI, WebMethod name, request parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceXMLNameSpace">The XML namespace of the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Web Service.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Web Service.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap11Access.ReSetSoap11Defaults">
            <summary>
            Sets the defaults for SOAP 1.1 specific implementation.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap11Access.CreatePostRequestSoapContent">
            <summary>
            Create the POST request content containing the SOAP 1.1 Envelope.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPSoap12Access">
            <summary>
            Represents access of Web Service via SOAP 1.2 protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap12Access.#ctor">
            <summary>
            Initializes a new instance of HTTPSoap12Access.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap12Access.#ctor(System.String,System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[])">
            <summary>
            Initializes a new instance of HTTPSoap12Access with specified
            Hostname, Service URI, WebMethod name and the request parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceXMLNameSpace">The XML namespace of the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap12Access.#ctor(System.String,System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[],Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity,Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of HTTPSoap12Access with specified
            Hostname, Service URI, WebMethod name, request parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceXMLNameSpace">The XML namespace of the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Web Service.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Web Service.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap12Access.ReSetSoap12Defaults">
            <summary>
            Sets the defaults for SOAP 1.2 specific implementation.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPSoap12Access.CreatePostRequestSoapContent">
            <summary>
            Create the POST request content containing the SOAP 1.2 Envelope.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.RequestParameter">
            <summary>
            Represents a parameter name-value pair to be sent with the Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.RequestParameter.#ctor">
            <summary>
            Initializes a new instance of RequestParameter.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.RequestParameter.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of RequestParameter with the specified
            Parameter name and value.
            </summary>
            <param name="ParameterName">The name of the Request parameter.</param>
            <param name="ParameterValue">the value of the Request parameter.</param>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.RequestParameter.ParameterName">
            <summary>
            Gets or Sets the name of the Request parameter.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.RequestParameter.ParameterValue">
            <summary>
            Gets or Sets the value of the Request parameter.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\TestSource\Common\Library\WebServiceTestFramework\WebServiceTestFramework\bin\Release\WebServiceTestFramework\Test.Common.Library.WebServiceTestFramework.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Test.Common.Library.WebServiceTestFramework</name>
    </assembly>
    <members>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy">
            <summary>
            Represents the Policy parameters for the WebService Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.#ctor">
            <summary>
            Initializes a new instance of FrameWorkPolicy class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.GetCachePolicy">
            <summary>
            Gets an object of the Requested Cache Policy.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.RequestCacheLevelPolicy">
            <summary>
            Get or Set the policy for Request Cache Level.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.RequestTimeOut">
            <summary>
            Get or Set the policy for the Request Timeout.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel">
            <summary>
            The requested Cache Level.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.BypassCache">
            <summary>
            Indicates that the request will be satisfied by using the server. No entries are taken from cache, added to cache,
            or removed from cache between the client and server.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.CacheIfAvailable">
            <summary>
            Indicates that the request will be satisfied from the cache, if available; otherwise it will be fetched from the server.
            If the requested item is available in any cache between the client and the server, the request might be satisfied by the intermediate cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.CacheOnly">
            <summary>
            Indicates that the request will be satisfied using the locally cached resource; does not send a request for an item
            that is not in the cache. Exception is thrown if the item is not in the client cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.Default">
            <summary>
            Indicates that the request will be satisfied either by using the cached copy of the resource or by sending a request for
            the resource to the server. The action taken is determined by the current cache policy and the age of the content in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.NoCacheNoStore">
            <summary>
            Indicates that the request will never be satisfied by using the cache. If the resource is present in the local cache, it is removed. This policy level indicates to intermediate caches that they should remove the resource.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.Reload">
            <summary>
            Indicates that the request will be satisfied by using the server. The response might be saved in the cache.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy.CacheLevel.Revalidate">
            <summary>
            Indicates that the request will be satisfied by using the cached copy of the resource if the timestamp is the same as the timestamp
            of the resource on the server; otherwise, the resource is fetched from the server, and stored in the cache. 
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity">
            <summary>
            Represents the Security for the WebService Request object.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.#ctor">
            <summary>
            Initializes a new instance of FrameWorkSecurity class. 
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.GetNetworkCredential">
            <summary>
            Gets an instance of System.Net.NetworkCredential composed of the supplied credentials.
            See Username, Password and Domain. If not set, the Default Network Credential is returned.
            </summary>
            <returns>An object of System.Net.NetworkCredential.</returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.IsDefaultNetworkCredentials">
            <summary>
            Checks if the credential in use is the Default Network Credential.
            </summary>
            <returns>An object of System.Boolean. True if default credential is being used. False if not.</returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.Username">
            <summary>
            The Username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.Password">
            <summary>
            The Password to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.Domain">
            <summary>
            The Domain for the username to send with the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.RequirePreAuthentication">
            <summary>
            Gets or Sets whether Pre-Authentication is required for the WebService Request.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.RequestAuthenticationLevel">
            <summary>
            Gets or Sets the Authentication Level for the WebService Request object.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.RequestImpersonationLevel">
            <summary>
            Gets or Sets the Impersonation Level for the WebService Request object.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel">
            <summary>
            Supported Authentication Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequested">
            <summary>
            Indicates that the client and server should be authenticated. The request does not fail if the server is not authenticated.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel.MutualAuthRequired">
            <summary>
            Indicates that the client and server should be authenticated. If the server is not authenticated, an Exception will be raised.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.AuthenticationLevel.None">
            <summary>
            Indicates that no authentication is required for the client and server.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel">
            <summary>
            Supported Impersonation Levels for the request.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Anonymous">
            <summary>
            Indicates that the server process cannot obtain identification information about the client, and it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Delegation">
            <summary>
            Indicates that the server process can impersonate the client's security context on remote systems.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Identification">
            <summary>
            Indicates that the server process can obtain information about the client, such as security identifiers and privileges, 
            but it cannot impersonate the client.
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.Impersonation">
            <summary>
            Indicates that the server process can impersonate the client's security context on its local system. The server cannot 
            impersonate the client on remote systems. 
            </summary>
        </member>
        <member name="F:Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity.ImpersonationLevel.None">
            <summary>
            Indicates that an impersonation level is not assigned.
            </summary>
        </member>
        <member name="T:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess">
            <summary>
            Represents access of Web Service via HTTP GET protocol.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.#ctor">
            <summary>
            Initializes a new instance of the HTTPGetAccess class.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.#ctor(System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[])">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Service URI, WebMethod name and Request Parameter collection.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName">The Web Methodname to call in the Web Service.</param>
            <param name="ParameterCollection">An array of parameter-value to pass to the Web Method.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.#ctor(System.String,System.String,System.String,Test.Common.Library.WebServiceTestFramework.RequestParameter[],Test.Common.Library.WebServiceTestFramework.FrameWorkSecurity,Test.Common.Library.WebServiceTestFramework.FrameWorkPolicy)">
            <summary>
            Initializes a new instance of the HTTPGetAccess class with the specified
            Hostname, Service URI, WebMethod name, Request Parameter collection, Security object and Policy object.
            </summary>
            <param name="RemoteHostName">The Remote computername hosting the Web Service.</param>
            <param name="WebServiceURI">The URI path to the Web Service.</param>
            <param name="WebMethodName"></param>
            <param name="ParameterCollection">The Web Methodname to call in the Web Service.</param>
            <param name="WebServiceSecurity">The Security object for accessing the Web Service.</param>
            <param name="WebServicePolicy">The Policy object for accessing the Web Service.</param>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.IsGETRequestInitialized">
            <summary>
            Indicates if the GET Request object has been initialized.
            </summary>
            <returns>A value of type System.Boolean. True if the object has been initialized.</returns>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.CreateGETRequest">
            <summary>
            Create the GET Request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.GetResponse">
            <summary>
            Get the Response for the GET request.
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.SetDefaults">
            <summary>
            Sets default values for the various properties of the Get Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.SetSecurity">
            <summary>
            Set the Security parameters of the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.SetPolicy">
            <summary>
            Set the general policy for the HTTP GET Request Object
            </summary>
        </member>
        <member name="M:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.CreateGetRequestURI">
            <summary>
            Create the Get Request URI String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RequestContentType">
            <summary>
            Gets or Sets the Request Content-Type.
            </summary>
        </member>
        <member name="P:Test.Common.Library.WebServiceTestFramework.HTTPGetAccess.RemoteHostName">
            <summary>
            Gets or Sets the Remote hostname where the WebService is hosted.
            </summary>
        </member>
 