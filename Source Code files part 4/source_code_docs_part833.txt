></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateServerRebootStatus(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DataServerUID"></param>
            <param name="Step"></param>
            <param name="StepDescription"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.SQLSprocs.WspUpdateSQLFailSafeSetDemoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckJobStatus(System.String)">
            <summary>
            </summary>
            <param name="JobName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDisEnableJob(System.String,System.Boolean,System.Int32@)">
            <summary>
            Disable/Enable job
            </summary>
            <param name="JobName"></param>
            <param name="fDisEnable"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropJob(System.String,System.Int32@)">
            <summary>
            Drop job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspEnableJob(System.String,System.Int32@)">
            <summary>
            Start a distribution job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDistributionJobName(System.String,System.String,System.String,System.String)">
            <summary>
            Start a distribution job
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDatabase"></param>
            <param name="SubscribingServer"></param>
            <param name="SubscribingDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetLogReaderJobName(System.String,System.String)">
            <summary>
            Get log reader job name
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspStartJob(System.String,System.Int32@)">
            <summary>
            Start a distribution job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspStopJob(System.String,System.Int32@)">
            <summary>
            Stop a job
            </summary>
            <param name="JobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddAccountToRole(System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="Role"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropAccountFromRole(System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="Role"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddLinkedServer(System.String,System.Int32@)">
            <summary>
            Add a linked server
            </summary>
            <param name="remoteServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspAddSubscription(System.String,System.String,System.String,System.Boolean,System.Int32@)">
            <summary>
            Add a subscription
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="IsPaused"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckColumnExist(System.String,System.String,System.Int32@)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="TableName"></param>
            <param name="ColumnName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckDrainableLogreader(System.String,System.Int32@)">
            <summary>
            Check if logreader exists
            1-logreader is there
            0-logreader is missing
            </summary>
            <param name="Publication"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckDrainableSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Check if subscription exists
            1-Subscription is there
            0-Subscription is missing
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspCheckSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Check if subscription exists
            1-Subscription is there
            0-Subscription is missing
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDeleteWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDeleteWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropAllSubscription(System.String,System.Int32@)">
            <summary>
            Drop all subscription
            </summary>
            <param name="Publication"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropPublication(System.String,System.Int32@)">
            <summary>
            Add a publication
            </summary>
            <param name="publicationName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspDropSubscription(System.String,System.String,System.String,System.Int32@)">
            <summary>
            Drop a subscription
            </summary>
            <param name="Publication"></param>
            <param name="SubscribingDB"></param>
            <param name="SubscribingServer"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetActivePrimaryProcess(System.String)">
            <summary>
            Get information on a file group from SQLDatabase table
            </summary>
            <param name="DatabaseName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetActualFileGroups">
            <summary>
            Get FileGroups and Logical files that actually make up a database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDBRecoveryMode(System.String)">
            <summary>
            Add a subscription
            </summary>
            <param name="vcDatabase"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDeleteMoveDataCount(System.String,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="table_name"></param>
            <param name="hash_column"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetDeleteMoveDataQuery(System.String,System.String,System.Int32)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="table_name"></param>
            <param name="hash_column"></param>
            <param name="batch_size"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetReplTimeStamp(System.String,System.String)">
            <summary>
            Get the transaction timestamp for the publication from the given publishing db
            </summary>
            <param name="PublishingServer"></param>
            <param name="PublishingDB"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetSelectMoveDataQuery(System.Int16,System.Int16,System.String,System.String,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="DataPartitionColumnName"></param>
            <param name="NeedsReplColumnName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstoreBcpInfo(System.Int16,System.Int16,System.String)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="SourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspGetWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspInitializeWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="SourceUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsRepl(System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="UpdateDateTimeColumn"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="TableName"></param>
            <param name="StartDateTime"></param>
            <param name="EndDateTime"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsReplAll(System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="TableName"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMarkNeedsReplByPartition(System.String,System.String,System.String,System.Int16,System.Int32@)">
            <summary>
            </summary>
            <param name="TableName"></param>
            <param name="NeedsReplicationColumn"></param>
            <param name="PartitionColumn"></param>
            <param name="PartitionNumber"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSDelMultiMaster(System.String,System.String)">
            <summary>
            generate delete repl sproc for multimaster
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSDelSingleMaster(System.String,System.String)">
            <summary>
            generate delete repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSInsMultiMaster(System.String,System.String,System.String,System.String)">
            <summary>
            generate insert repl sproc for mutli master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
            <param name="dt_colname"></param>
            <param name="ti_NeedsRepl_colname"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSInsSingleMaster(System.String,System.String)">
            <summary>
            generate insert repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSUpdMultiMaster(System.String,System.String,System.String,System.String)">
            <summary>
            generate update repl sproc for mutli master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
            <param name="dt_colname"></param>
            <param name="ti_NeedsRepl_colname"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspMSUpdSingleMaster(System.String,System.String)">
            <summary>
            generate update repl sproc for single master
            </summary>
            <param name="dest_tabname"></param>
            <param name="dest_proc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRegisterWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="Filter_clause"></param>
            <param name="BcpFile"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRegisterWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="IsSource"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspRevokeDBAccess(System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="LoginName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreBcpInfo(System.Int16,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="BcpOut"></param>
            <param name="BcpIn"></param>
            <param name="BcpTotal"></param>
            <param name="Status"></param>
            <param name="Progress"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreBcpInfoStatus(System.Int16,System.Int16,System.String,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstoreBcpInfo
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="TableName"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstoreFSSLatency(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Insert or update WebstoreFSSLatency
            </summary>
            <param name="SourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentSprocs.WspUpdateWebstorePartitionMoveMap(System.Int16,System.Int16,System.Int16,System.Int32,System.Int32@)">
            <summary>
            Insert or update WebstorePartitionMoveMap
            </summary>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="PartitionNum"></param>
            <param name="Status"></param>
            <param name="retVal"></param>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoAgentFileShare">
            <summary>
            fileshare object for the WmoAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentFileShare.ValidateFileShare(System.String,System.String)">
            <summary>
            validate fileshare
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase">
            <summary>
            database object for the WmoAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.GetLockObject(System.String)">
            <summary>
            LockObject
            BR - backup/restore (bug3591)
            GL - general server synchronization (bug3682, bug3807)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.m_htDatabases">
            <summary>
            Ensure Sproc installed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupJobs(System.String,System.String,System.Data.DataSet)">
            <summary>
            creates jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropJob(System.String,System.String)">
            <summary>
            Drops the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DisEnableJob(System.String,System.String,System.Boolean)">
            <summary>
            Disables or Enables the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Restarts the specified job.
            Creates the job if job is missing and SourceText is specified.
            SourceFileName is used for error messaging if job is created with SourceText.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.EnableJob(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Enables the specified job.
            Creates the job if job is missing and SourceText is specified.
            SourceFileName is used for error messaging if job is created with SourceText.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJobWait(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RestartJobWait(System.String,System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CheckJobStatus(System.String,System.String)">
            <summary>
            Restarts the specified job and wait until restarting succeeds
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.StopJob(System.String,System.String)">
            <summary>
            Stops the specified job and wait until restarting succeeds.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.StopJobWait(System.String,System.String)">
            <summary>
            Stops the specified job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateSqlServerIP(System.String,System.String)">
            <summary>
            Validate SqlServer IP
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateStripe(System.String,System.String,System.String)">
            <summary>
            Validate stripe directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.ValidateMinSqlVersion(System.String,System.String)">
            <summary>
            Validate Minimum SQL Version.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CreateDirectory(System.String,System.String)">
            <summary>
            Create transfer directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSqlRunning(System.String)">
            <summary>
            Method to just make sure sql server is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSqlAgentRunning(System.String)">
            <summary>
            Method to just make sure sql server agent is running
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.GetConnectionString(System.String,System.String)">
            <summary>
            Get a Sql Connection string with default settings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsRepl(System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsReplByPartition(System.String,System.String,System.String,System.String,System.String,System.Int16)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored. This version updates the 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.MarkNeedsReplAll(System.String,System.String,System.String,System.String)">
            <summary>
            Marks the tiNeedsRepl column on all tables in a multi-master database. Used for
            synchronizing the data between databases of a fail safe set after replication has
            been restored. This version updates the 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Backup(System.String,System.String,System.String,System.Boolean)">
            <summary>
            takes a backup of this database, BackupFilePath is a share
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.Restore(System.String,System.String,System.String,System.Boolean)">
            <summary>
            restores over this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RemapDBUsers(System.String,System.String)">
            <summary>
            remap db users
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.UpdateAccount(System.String,System.String,System.String,System.Boolean)">
            <summary>
            remap db users
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.RunRegisteredScripts(System.String,System.String,System.Data.DataSet)">
            <summary>
            runs registered sql files in the database
            (scripts, tables, views, functions, sprocs and triggers)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupRegisteredSecurity(System.String,System.String,System.Data.DataSet)">
            <summary>
            sets up roles and accounts as registered
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AggressiveDropDB(System.String,System.String)">
            <summary>
            Aggressively drops this database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupPublication(System.String,System.String,System.String,System.String,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
            <summary>
            run to set up a publication
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AddPublisherToDistributor(System.String,System.String,System.String,System.String)">
            <summary>
            run once per publishing server to associate the publishing server
            with a distribution server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetupSubscription(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropSubscription(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.DropAllSubscription(System.String,System.String,System.String)">
            <summary>
            run to set up subscription
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.AddSubscriberToPublisher(System.String,System.String)">
            <summary>
            run once per publisher-subscriber pair to allow the subscribing server
            to subscribe to publications from the publishing server
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.CreateMirroringEndPoint(System.String,System.String,System.String)">
            <summary>
            Create mirroring end point on the server
            </summary>
            <param name="serverName"></param>
            <param name="endPointName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsSecondaryNeedBackupRestore(System.String,System.String)">
            <summary>
            If the database is in a synchronized mirroring session, there is no need to backup/restore.
            Otherwise, there is a need to backup/restore.
            </summary>
            <param name="serverName"></param>
            <param name="DatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsDbForceRepairable(System.String,System.String)">
            <summary>
            Determines the state of the database. If db in restore state, cannot forcerepair
            </summary>
            <param name="serverName"></param>
            <param name="DatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetWitnessOrPartnerOff(System.String,System.String,System.String)">
            <summary>
            Set Witness/Partner off when trying to drop mirroring
            </summary>
            <param name="WitnessOrPartner"></param>
            <param name="serverName"></param>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetWitnessOrPartner(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Set up witness or partner
            </summary>
            <param name="witnessOrPartener"></param>
            <param name="serverName"></param>
            <param name="partnerServerName"></param>
            <param name="dbName"></param>
            <param name="completeDomainName"></param>
            <param name="port"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringTimeout(System.String,System.String,System.String)">
            <summary>
            Sets the timeout value for the mirroring session.
            </summary>
            <param name="primaryServerName"></param>
            <param name="primaryDBName"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetSessionSafety(System.String,System.String,System.String)">
            <summary>
            Set mirroring session safety to FULL or OFF. It must be FULL for automatic failover.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="safetyLevel"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.IsMirroringPrincipal(System.String,System.String)">
            <summary>
            Check if a database is participate in a mirroring session and participate as a principal
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringPartnerFailover(System.String,System.String)">
            <summary>
            Failover to a mirroring partner
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.SetMirroringPartnerSuspendOrResume(System.String,System.String,System.String)">
            <summary>
            Suspend a mirroring partner
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="suspendOrResume"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.FileGroup.ToString">
            <summary>
            returns string needed to put this file in a
            sql "create database" statement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoSqlAgentDatabase.FileInstance.ToString">
            <summary>
            returns string needed to put this file in a
            sql "create database" statement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.WmoAgent.WmoAgentResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoErrorHelper">
            <summary>
            Error Helper for getting string resources, IDs and names.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoErrorHelper.Number">
            <summary>
            The ID Number associated with this error resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Management.Wmo.WmoErrorHelper.Format">
            <summary>
            The Format string before the parameters are inserted.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoErrorHelper.#ctor(System.String)">
            <summary>
            The constructor for the class requires the Short name.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingFile(System.String,System.String)">
            <summary>
            XMLMissingFile = 4;The Xml file {0} failed to load. The exception was {1}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLValidationFailure">
            <summary>
            XMLValidationFailure = 5;XML Validation was not successful. The XmlFileName is not loaded.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLValidationError(System.String)">
            <summary>
            XML Validation Error: {0}
            </summary>
            <param name="ValidationError"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingElement(System.String)">
            <summary>
            The required XML element "{0}" was not found.
            </summary>
            <param name="MissingElement"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingAttribute(System.String,System.String)">
            <summary>
            The required XML attribute "{0}" in the element "{1}" was not found.
            </summary>
            <param name="MissingAttribute"></param>
            <param name="Element"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLMissingNode(System.String)">
            <summary>
            The required XML node "{0}" was not found.
            </summary>
            <param name="MissingNode"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidMinSqlVersion(System.String)">
            <summary>
            Invalid minimum SQL Server version ({0}). It must be in the form M.mm.BBB or MM.mm.BBBB. For example 8.00.760.
            </summary>
            <param name="BadVersion"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotObtainDTCWithWstConfig(System.String,System.Data.SqlClient.SqlException)">
            <summary>
            The WstConfig database on the server {0} could not be accessed. Check net connectivty and MSSqlServer service status. If connectivity cannot be re-established, mark the database offline. The SQL error was \"{1}\".
            </summary>
            <param name="ServerName"></param>
            <param name="se"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DuplicateName(System.String,System.String)">
            <summary>
            DuplicateName = 25;{0} "{1}" already exists in the collection.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooOldWstConfig(System.String,System.String)">
            <summary>
            WstConfig version "{0}" is less than minimum WstConfig version "{1}" supported by Wmo.dll.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MultipleDatabasesWithNoSecondaries(System.String,System.String)">
            <summary>
            Deployment "{0}" has SqlSecondaryType of NoSecondaries but has multiple databases in SqlFailSafeSet "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MismatchPartitionCount(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Manifest "{0}" has LogicalPartitionCount = {1} but Deployment "{2}" lists {3} Data Partitions.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedDataPartition(System.String,System.Int16)">
            <summary>
            Expected Data Partition with Number = {0}, found Data Partition with Number = {1}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropWstConfigDeployment">
            <summary>
            Cannot drop deployment "WstConfig".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PartitionMappedToInvalidFss(System.Int16,System.String,System.Int16)">
            <summary>
            Data Partition {0} is mapped to invalid {1} FailSafe Set {2}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPartitionsSpecified">
            <summary>
            34;No data partitions specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPublication(System.String,System.String)">
            <summary>
            Publication "{0}" not found for manifest "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoDistribInfo">
            <summary>
            XML tag "DistributionDirectories" required for replication.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MultipleManifestVersions(System.Int32)">
            <summary>
            There are {0} versions of that manifest stored in the config.  Please specify a specific version to export.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnknownDistribServerSetup(System.String,System.String)">
            <summary>
            Server "{0}" is set up as the distribution server for server "{1}" but is not registered as a data server.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DistribDBRegisteredInFss(System.String,System.String)">
            <summary>
            Distribution database "{0}:{1}" is registered in a SQL FailSafe Set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoDistribDB(System.String)">
            <summary>
            Server "{0}" does not have a distribution database registered.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidPublicationType(System.String)">
            <summary>
            49;Invalid PublicationType: "{0}"
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AgentNotRunning(System.Exception)">
            <summary>
            AgentNotRunning = 19;Webstore agent is not running!
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AgentAccessDenied(System.Exception)">
            <summary>
            AgentAccessDenied = 20;Webstore agent access is denied!
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DTCException(System.Exception,System.Reflection.MethodBase)">
            <summary>
            Unexpected DTC error {0}
            </summary>
            <param name="e"></param>
            <param name="mb"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DTCException2(System.String,System.Guid,System.EnterpriseServices.TransactionStatus)">
            <summary>
            220;{0} with transaction ID {1} returned {2}.
            </summary>
            <param name="methodName"></param>
            <param name="ts"></param>
            <param name="tranID"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryExistsCannotPromote(System.String,System.String,System.String,System.String)">
            <summary>
            Cannot Promote {0}:{1} until {2}:{3} has been demoted.
            </summary>
            <param name="desiredPrimaryServer"></param>
            <param name="desiredPrimaryName"></param>
            <param name="currentPrimaryServer"></param>
            <param name="currentPrimaryName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorWeAreInDTC">
            <summary>
             The Wait For Polling Interval must not be called while we are in a DTC.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DefaultPrimaryNotExist(System.String,System.String)">
            <summary>
             You must have a DefaultPrimary database listed for each partition.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPrimaryInPartition(System.String)">
            <summary>
             Sql Failsafe Set {0} does not have a Primary database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateStatus(System.String,Microsoft.Webstore.Management.Wmo.WmoDatabase,System.String)">
            <summary>
            52;The {0} operation is inappropriate for the database "{1}:{2}" with {3} status.  The database must be in the following state(s) for this operation to complete:  ({4}).
            </summary>
            <param name="op"></param>
            <param name="db"></param>
            <param name="validStates"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateFileStatus(System.String,Microsoft.Webstore.Management.Wmo.WmoFileShare,System.String)">
            <summary>
            53;The {0} operation is inappropriate for the fileshare "\\\\{1}\\{2}" with {3} status.  The fileshare must be in the following state(s) for this operation to complete:  ({4}).
            </summary>
            <param name="op"></param>
            <param name="fs"></param>
            <param name="validStates"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDrainReplication(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            CannotDrainReplication = 54;Replication from {0}:{1} to {2}:{3} cannot be
                drained. Standard drain settings for this deployment use an interval
                of {4} and max number of retries of {5}. To set these values differently,
                use the "wst dep settings" command.
            </summary>
            <param name="publicationServerName"></param>
            <param name="publicationDatabaseName"></param>
            <param name="subscribingServerName"></param>
            <param name="subscribingDatabaseName"></param>
            <param name="drainInterval"></param>
            <param name="drainRetries"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoSubscriptionExistsToDrain(System.String,System.String,System.String,System.String)">
            <summary>
            NoSubscriptionExistsToDrain = 55;No subscription exists from the publishing
                database {0}:{1} to the database {2}:{3}.
            </summary>
            <param name="publicationServerName"></param>
            <param name="publicationDatabaseName"></param>
            <param name="subscribingServerName"></param>
            <param name="subscribingDatabaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorInApplicationSQL(System.String,System.Data.SqlClient.SqlException)">
            <summary>
            A SQL error was found in the file "{0}". The error was: {1}.
            </summary>
            <param name="Filename"></param>
            <param name="se"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPermission(System.Data.SqlClient.SqlException)">
            <summary>
            No permission to perform the operation.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFileShare(System.String,System.String,System.Exception)">
            <summary>
            Invalid FileShare: "\\\\{0}\\{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotStartJob(System.String,System.String)">
            <summary>
            Job {0}:{1} cannot be started.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotStopJob(System.String,System.String)">
            <summary>
            Job {0}:{1} cannot be stopped.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ChangeNotAllowedInUpdateVersion(System.String)">
            <summary>
            {0} isn't allowed to be changed in Upgrade version.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CouldNotCreateSourceFile(System.String,System.Exception)">
            <summary>
            Could not write to the source file {0}. The error was {1}.
            </summary>
            <param name="FileName"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FileGroupMissing(System.String,System.String,System.String)">
            <summary>
            65;You have specified the FileGroup "{0}" in your {1}, however, this FileGroup is missing from your {2}. By default, the standard FileGroups "Primary" and "LogFileGroup" are available in your Manifest, but custom FileGroups must be specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustDeclareSqlOrFileFailSafeSetNodes">
            <summary>
            You must declare either SqlFailSafeSet or FileFailSafeSet nodes for adding a partition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFailSafeSetNumber">
            <summary>
            All Fail Safe Set numbers must be unique, sequential and start from 0. With add partition, new FSS numbers must resume from the last available FSS Number.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RequiredParameterMissing(System.String)">
            <summary>
            The required parameter {0} is missing from the command line.
            </summary>
            <param name="Parameter"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoDatabase(System.String,System.String)">
            <summary>
            Database "{0}:{1}" is not registered.
            </summary>
            <param name="ServerName"></param>
            <param name="DatabaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFileShare(System.String,System.String)">
            <summary>
            FileShare "{0}:{1}" is not registered.
            </summary>
            <param name="ServerName"></param>
            <param name="FileSharePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropPrimary(System.String,System.String,System.String)">
            <summary>
            CannotDropPrimary = "{0}:{1}" is a primary {2}. Please demote before dropping.
            </summary>
            <param name="ServerName"></param>
            <param name="ObjName"></param>
            <param name="ObjType"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultPrimary(System.String,System.String)">
            <summary>
            Database "{0}:{1}" is a default primary database. Cannot drop the default primary.
            </summary>
            <param name="ServerName"></param>
            <param name="DatabaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustHaveAnOnlineConfig(System.String)">
            <summary>
            Cannot change the status of "{0}:WstConfig" to "{1}" because it is the last online WstConfig database.
            </summary>
            <param name="ServerName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoOnlineDatabaseInFss(System.String,System.String)">
            <summary>
            No databases in the same failsafe set as "{0}:{1}" are online.
            </summary>
            <param name="ServerName"></param>
            <param name="DBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlException(System.Data.SqlClient.SqlException)">
            <summary>
            SqlException Wrapper
            </summary>
            <param name="se"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WstConfigAlreadyExists(System.String)">
            <summary>
            The WstConfig database already exists on the server {0}
            </summary>
            <param name="ServerName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NotYetImplemented_NYI(System.String)">
            <summary>
            The function {0} is Not Yet Implemented (NYI)
            </summary>
            <param name="UnimplementedMethod"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoReplSecondary(System.String)">
            <summary>
            NoReplSecondary = Type of Secondary {0} doesn't support replication.
            </summary>
            <param name="TypeOfSqlSecondary"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PubSubNotInSameFSS">
            <summary>
            Publishing database and subscribing database are not in the same fail safe set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConfigChangedForAdminLock">
            <summary>
            Config Databases have changed. Please rerun command.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValue(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            89;The value {0} for {1} is invalid. Valid values are {2} to {3}.
            </summary>
            <param name="Value"></param>
            <param name="Description"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValue(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            The value {0} for {1} is invalid. Valid values are {2} to {3}.
            </summary>
            <param name="Value"></param>
            <param name="Description"></param>
            <param name="minVal"></param>
            <param name="maxVal"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ReplicasCannotBeOnSameServer(System.String,System.String,System.String)">
            <summary>
            There are 2 or more {0} in Fail Safe Set {1} on the same server "{2}".
            </summary>
            <param name="fssType"></param>
            <param name="partitionNum"></param>
            <param name="serverName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorGeneratingReplicationStoredProcedures(System.String,System.Exception)">
            <summary>
            Could not create temporary database for generating replication stored procedures. The error occured on server {0}. The error message was {1}
            </summary>
            <param name="Server"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FixedParCannotHaveFileShare">
            <summary>
            Only non-partitioned or variable partitioning applications are allowed to have file shares.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorReservedWord(System.String)">
            <summary>
            You cannot use the term {0} for the requested action. This is a Webstore reserved word.
            </summary>
            <param name="ReservedWord"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropNonEmptyDep(System.String)">
            <summary>
            Deployment {0} is already deployed and can only be dropped with -force option.
            </summary>
            <param name="DeploymentName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotForceRepairWithPrimaryExist">
            <summary>
            CannotForceRepairWithPrimaryExist = 95;Cannot force repair the database because there is still primary database in the fail safe set. Please demote primary before force repair.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAddPartition">
            <summary>
            CannotAddPartition = 96;Cannot add partition to fixed or non partitioned application.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogReaderJobMissing(System.String,System.String)">
            <summary>
            LogReader Job does not exist for database {1}:{2}.
            </summary>
            <param name="pubSvrName"></param>
            <param name="pubDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DistribJobMissing(System.String,System.String,System.String,System.String)">
            <summary>
            98;Distribution Job does not exist for replication from {0}:{1} to {2}:{3}.
            </summary>
            <param name="pubSvrName"></param>
            <param name="pubDBName"></param>
            <param name="subSvrName"></param>
            <param name="subDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DistribJobMissing2(System.String,System.String,System.String)">
            <summary>
            215;Distribution Job {0} does not exist for replication on server {1} for database {2}.
            </summary>
            <param name="JobName"></param>
            <param name="ServerName"></param>
            <param name="DatabaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlServerAgentNotRunning(System.String)">
            <summary>
            Sql Server Agent on Server {0} is not running.
            </summary>
            <param name="serverName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConfigVersionDifferent">
            <summary>
            WstConfig databases have different versions. Please finish upgrading before running any operation.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogError(System.Exception,System.String)">
            <summary>
            {0}\r\n\r\nFor more info see "{1}"
            </summary>
            <param name="e"></param>
            <param name="LogFile"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFailSafeSetsToSetup">
            <summary>
            There are no Fail Safe Sets to Setup. Run Import first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantSetBoth">
            <summary>
            Can't set default primary for SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantViewBoth">
            <summary>
            Can't view history for SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFormat(System.String)">
            <summary>
            Invalid format {0}. The -newprimary parameter needs to be of the format Server\\Databasename for database or Server\\Filesharepath for fileshares.
            </summary>
            <param name="BadParm"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LockException(System.Exception)">
            <summary>
            108;Unexpected SQL error creating Administration Lock {0}.  This means another WMO command is running and that process has created a lock that is in place.  That process must complete and release it's lock before this process can execute.
            </summary>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidEnum(System.String,System.String)">
            <summary>
            109;Invalid {0}: "{1}"
            </summary>
            <returns>WmoException</returns>
            <param name="strType"></param>
            <param name="str"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFailSafeSetCount(System.Int32)">
            <summary>
            119;Invalid Fail Safe Set Count: {0}
            </summary>
            <param name="i"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedFailure(System.Exception)">
            <summary>
            121;Unexpected failure: {0}
            </summary>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedFailure(System.String)">
            <summary>
            121;Unexpected failure: {0}
            </summary>
            <param name="Problem"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UnexpectedFailure">
            <summary>
            127;Unexpected failure
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidFileShareState">
            <summary>
            122;If you specify a Primary node, the FileShare and DataServer must be in the list of FileShares on this partition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotSpecifySource">
            <summary>
            124;Validation failure: Cannot specify source for a publication used for Secondaries.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ColumnNamesMissing">
            <summary>
            125;Validation failure: Must specify names for the ChangeDateTime and NeedsReplication columns for MultiMaster publications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FileIOError(System.String,System.Exception)">
            <summary>
            126;Failed to read file {0}
            </summary>
            <param name="Filename"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ReThrow(System.Exception)">
            <summary>
            ReThrow WmoExecption
            </summary>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProxyCallException(System.String,System.String,System.Exception)">
            <summary>
            128;{0}+{1}: Unexpected proxy call error.
            </summary>
            <param name="objectName"></param>
            <param name="methodName"></param>
            <param name="e"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CommandAbortException(System.Exception)">
            <summary>
            129;Command aborted
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoPartitionMoveMap(System.String)">
            <summary>
            130;No movedata specified for "{0}" deployment!
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MoreThanTwoNICsNotAllowed(System.String)">
            <summary>
            More than 2 NICs for server {0} is not allowed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OnlyOnePreferredNICAllowed(System.String)">
            <summary>
            Only one preferred NIC is allowed for server {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidArgument(System.String,System.String,System.String)">
            <summary>
            133;Invalid argument "{0} {1}": {2}
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ColumnNotExist(System.String,System.String)">
            <summary>
            ColumnNotExist = 134;After Manifest import, the required column [{0}] on Table [{1}] does not exist!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MismatchServerAndIP(System.String,System.String)">
            <summary>
            137;IP "{0}" does not belong to Server "{1}".
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MoveDataNotFinish">
            <summary>
            138;MoveData process is not yet finished!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidJobName(System.String,System.String)">
            <summary>
            201;The job name {0}, when combined with the database {1} exceeds 128 characters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotUpdateDeployedDatabase(System.String,System.String)">
            <summary>
            202;Cannot update info of database {0}:{1}. Only databases in the state of NotDeployed or NeedsRepair can be updated.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingReplicationStoredProcedure(System.String)">
            <summary>
            203;The replication stored procedure {0} was not found in the list of registered stored procedures. This is required for replication.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooManySecondaries">
            <summary>
            205;Number of replicas per fail safe set has to be less than number of servers per cluster for the deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NumSqlFssNumFileFssNotDivisible">
            <summary>
            206;Number of SqlFailSafeSet and NumberFileFailSafeSet are not divisible by each other.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.JobWouldNotStop(System.String)">
            <summary>
            207;The job "{0}" was disabled, but would not stop. Investigate the process to see if it is hung.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidCharacters(System.String,System.String,System.String)">
            <summary>
            208;The {2} with the identifier "{0}" contains an invalid character. The characters {1} are not allowed in identifiers.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OneParameterOrTheOther(System.String,System.String)">
            <summary>
            210;This command requires either the {0} parameter or the {1} parameter. Specify one or the other, and not both.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlServerNotRunning(System.String)">
            <summary>
            214;Sql Server on {0} is not running!
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllNeedsRepair(System.Int32)">
            <summary>
            216;The Sql Fail Safe Set {0} has all databases marked needs repair. At least one database must be online or offline.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryCannotBeNeedsRepair(System.Int32,System.String,System.String)">
            <summary>
            217;The Sql Fail Safe Set {0} has the primary database {1}:{2} marked needs repair.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OfflineNotAllowed(Microsoft.Webstore.Management.Wmo.WmoDatabase)">
            <summary>
            OfflineNotAllowed = 221;"{0}:{1}" is a {2} database so it cannot be marked Offline. Demote first and then mark Offline. See also the -force option.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpdateVersionNotCalled">
            <summary>
            222:In order to call UpgradeStatus or UpgradeSetup, you must import a new Manifest and call UpdateVersion first.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustFinishUpgrade">
            <summary>
            224:The previous call to UpdateVersion was not completed by a call to UpgradeSetup or UpgradeRollback.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.XMLInvalidValue(System.String,System.String)">
            <summary>
            225:The {0} element "{1}" is invalid.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WitnessServerMissing(System.String)">
            <summary>
            226;Witness server (per SQL FailsafeSet) missing for (Mirroring) deployment {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.OnlyTwoMirroringDbsPerFSSAllowed">
            <summary>
            227;Number of databases per SQL FailsafeSet cannot exceed 2 for Mirroring Topology.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringDbsRequireSameName(System.String)">
            <summary>
            228;The database names in a Mirroring Failsafeset are required to be the same. Failsafeset Number={0}
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoMirroringInfo">
            <summary>
            229;XML tag "Mirroring" required for Mirroring.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WitnessServerCannotShareServer">
            <summary>
            230;Witness Server cannot be on the same server as that of Principal or Mirror database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerHasNoMirroringEndPoint(System.String)">
            <summary>
            231;Server {0} does not have a registered end-point. Please re-register the server with end point information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringStateChangedDuringOperation(System.String,System.String,System.String,System.Exception)">
            <summary>
            232;{0}:{1} is no more a {2}. Please rerun the command.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooFewDataPartitions(System.String,System.String)">
            <summary>
            233;There are too few data partitions specified.  Presently there are {0} specified in the Manifest, but due to the Deployment XML at least {1} are required.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingDataServerInfo">
            <summary>
            234;The &lt;DataServers&gt; and &lt;DataServer&gt; elements must be defined in the Deployment XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotForceRepair">
            <summary>
            CannotForceRepair = 500;In order to do a forced Repair, all other databases in the FailSafeSet must be marked NeedsRepair or not be deployed.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropSecurityRole(System.String,System.String)">
            <summary>
            501;Cannot drop security role {1}, it still has a member security account {0}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAddLogicalFileNameIfNotExistInSqlFileLogical">
            <summary>
            502;The list of Logical Files from the FileGroup section of your Manifest must match the DeploymentLogicalFiles section of your Deployment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DeployedDatabaseDoesNotMatchDatabaseTemplate(System.String,System.String,System.String,System.String)">
            <summary>
            503;During validation of the database {0}:{1}, Webstore found that the list of File groups and Logical Files for this database: {2} does not match Webstore's configuration for this database {3}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MustSetDefaultPhysicalLocation(System.String,System.String)">
            <summary>
            504;The {0} value must be set for the Deployment Logical File {1}. Use wst dep sqlfiledefault.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ErrorInGrantPermission(System.String,System.String,System.String,System.String)">
            <summary>
            1000;The object {0} could not have the permission {1} granted to {2}. The error was {3}.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingElementInAddCluster">
            <summary>
            With Add Clusters, the Clusters and Cluster elements must be defined in the XML.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssCrossCluster(System.Int32,System.String)">
            <summary>
            Fail Safe Set {0} of Deployment {1} doesnt have all members accessed by the same affinity cluster.
            </summary>
            <param name="sqlFssId"></param>
            <param name="depName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoReplStream(System.String,System.String)">
            <summary>
            509;No replication stream setup for "{0}:{1}".
            </summary>
            <param name="ServerName"></param>
            <param name="DBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ForceMarkOfflineNotAllowedWithWriteAllCopies">
            <summary>
            511;Force mark offline is not allowed for WriteAllCopies topology.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantSetBothParameter(System.String,System.String)">
            <summary>
            512;Can't set [{0}] and [{1}] at the same time.
            </summary>
            <param name="Param1"></param>
            <param name="Param2"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogicalPartitionCountMustBeDividableByClusterCount">
            <summary>
            513;Logical Partition Count Must be Dividable By Cluster Count
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoObjectInConfig(System.String,System.String,System.Exception)">
            <summary>
            519;The {0} "{1}" is not registered.
            </summary>
            <param name="objectType"></param>
            <param name="name"></param>
            <param name="innerException"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ObjectAlreadyExistsOverwrite(System.String,System.String)">
            <summary>
            The {0} "{1}" already exists in the Config Database. Use -overwrite to update.
            </summary>
            <param name="objectType"></param>
            <param name="name"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidParameter(System.String,System.String)">
            <summary>
            Parameter "{0} {1}" is invalid.
            </summary>
            <param name="Switch"></param>
            <param name="Value"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ConnectionFailureToWstConfig">
            <summary>
            ConnectionFailureToWstConfig = 529;Connection failure to WstConfig database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantPromoteDemoteBoth(System.String)">
            <summary>
            CantPromoteDemoteBoth = 530;Can't {0} both the SQLFailSafeSet and FileFailSafeSet at the same time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CantUpgradeWithOfflineDatabases">
            <summary>
            CantUpgradeWithOfflineDatabases = 531;Under Write All Read Any topology, databases cannot be offline during upgrade.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateOperation(System.String,System.String,System.String)">
            <summary>
            532;The {0} operation is inappropriate for topology {1}.  The toplogy can only accept the following operation(s) to complete:  ({2}).
            </summary>
            <param name="topology"></param>
            <param name="op"></param>
            <param name="validOperations"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.LogreaderDrainFailed(System.String,System.String)">
            <summary>
            553; Logreader for {0}:{1} cannot be drained.
            </summary>
            <param name="PubSvrName"></param>
            <param name="PubDBName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropReplFromPrimary(System.String,System.String)">
            <summary>
            534; Can not drop replication from primary database {0}:{1}. See also the -force option.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDoReplAction(System.String,System.String,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.DBStatus)">
            <summary>
            535; Cannot {0} replication with database {1}:{2} in this state: {3}
            </summary>
            <param name="action"></param>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="dbState"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryDefaultStatusNotOnline(System.String,System.String,System.String)">
            <summary>
            536; Can not set primary database {0}:{1} with default status {2}. Primary database default status must be online.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <param name="strDefaultStatus"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryStandbyNotAllowed(System.String,System.String)">
            <summary>
            537; Can not set primary database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CanNotStandbyConfig(System.String,System.String)">
            <summary>
            538; Can not set config database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WriteAllCopiesNotSupportStandby(System.String,System.String)">
            <summary>
            539; WriteAllCopies topology does not support database {0}:{1} standby status
            </summary>
            <param name="serverName"></param>
            <param name="dbName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotUpgradeWstConfig">
            <summary>
            1001;Use the WstConfigUpgrade.exe tool to upgrade the WstConfig database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidCommandLineParameter(System.String)">
            <summary>
            1002;Invalid parameter: {0}
            </summary>
            <param name="msg"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoLongerSupported(System.String)">
            <summary>
            1003;{0} is no longer supported.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AlreadyUpgradingToThisManifest">
            <summary>
            1004;Upgrade is already upgrading to this Manifest.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpgradeInProgress">
            <summary>
            1005;Upgrade is in progress. Cannot specify a different Manifest.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DuringRollingUpgradeCannotUpgradeWithFSSInBadState(System.Int32)">
            <summary>
            1006;During call to upgrade with -RollingUpgrade set, the Fail
            Safe Set {0} has databases in NeedsRepair or NotDeployed state.
            This would cause 100% R/W outage. Upgrade was not performed on
            this FSS.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DataServerCountMustBeAnEvenNumber(System.Int32)">
            <summary>
            1007;Data server count specified ({0}) must be an even number.
            </summary>
            <param name="countDataServers"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectAmountOfFss">
            <summary>
            1008;The number of fail safe sets specified is incorrect.  Only one fail safe set containing one new database can be added to a Config at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectAmountOfDatabases">
            <summary>
            1009;The number of databases specified is incorrect.  Only one database can be added to a Config at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoFileFssForFileShareOnlyManifest">
            <summary>
            1010;The Deployment XML file being imported does not have any file fail safe sets, and the Manifest is a File Share only manifest (meaning it has no SQL objects defined).  The Import cannot continue.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithWstConfig(System.String)">
            <summary>
            1100;{0} has WstConfig database on it. Cannot reboot a server which has the WstConfig database on it.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithoutSqlDbs(System.String)">
            <summary>
            1101;{0} does not have any Sql databases registered with Webstore. Cannot reboot servers that do not have registered Sql databases with Webstore.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotRebootServerWithFileShares(System.String)">
            <summary>
            1102;Server {0} has fileshares registered with Webstore. Cannot reboot servers with FileShares.
            </summary>
            <param name="serverName">Name of the server being rebooted</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerFssNotInDefaultState(System.String)">
            <summary>
            1103;The following server Fss's are not in default state. {0}
            </summary>
            <param name="errMsg">Detailed list of fss's/Db's not in default state.</param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RebootServerTimeout(System.String,System.Int32)">
            <summary>
            1104; Server reboot for server :{0} Timedout. Timeout period was {1} ms.
            </summary>
            <param name="serverName"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RebootServerFailure(System.String,System.Exception)">
            <summary>
            1105; Server reboot for server :{0} failed. Look at inner exception for details.
            </summary>
            <param name="serverName"></param>
            <param name="innerException"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.TooManyParametersForMappingDelete">
            <summary>
            1111;You cannot specify to delete more than one mapping at a time.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingParameterValueForSetting(System.String)">
            <summary>
            1200;Setting Name - {0}: Either the value or the Overwrite or the Remove attribute of a setting must be set.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SettingAlreadyExists(System.String)">
            <summary>
            1201;Setting Name - {0} already exists in the WstConfig database. Cannot override existing setting. Please remove setting and then readd.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingElementDefinition(System.String)">
            <summary>
            1202;Missing definition for {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MissingSettingDefinition(System.String)">
            <summary>
            1203;The definition for setting {0} does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidValueProvided(System.String)">
            <summary>
            1204; The value for setting {0} is not correct.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ElementCannotBeEmpty(System.String,System.String)">
            <summary>
            1205; Inner Text for element {0} under node {1} cannot be empty.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ObjectDoesNotExist(System.String,System.String,System.Exception)">
            <summary>
            1206;The {0} "{1}" does not exist in the configuration database.
            </summary>
            <param name="objectType"></param>
            <param name="objectName"></param>
            <param name="innerException"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ClusterCanNotBeNull">
            <summary>
            1208;The cluster cannot be NULL.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IndexOutOfRange(System.String,System.String)">
            <summary>
            1209;The object {0} with type {1} does not exist in the collection.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseTemplateAlreadyExists(System.String)">
            <summary>
            1211;The DatabaseTemplate {0} already exists.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.RequiredEitherParameterMissing(System.String,System.String)">
            <summary>
            1212;You must specify either the {0} parameter or the {1} parameter on the command line.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ValueHasNotBeenSpecified(System.String,System.String)">
            <summary>
            1214;The {0} property in {1} has not been specified.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultDatabaseTemplate">
            <summary>
            1215;You cannot drop the default database template.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropTemplateAssignedToFSS">
            <summary>
            1216;You cannot drop a database template assigned to one or more SqlFailSafeSets.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropTemplateAssignedToServer">
            <summary>
            1217;You cannot drop a database template assigned to one or more Servers.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlFailSafeSetNotRegistered(System.Int16,System.String)">
            <summary>
            1219;Sql fail safe set number {0} from the Deployment {1} is not registered.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropWebstoreSetting(System.String)">
            <summary>
            1221;Setting {0} is a webstore setting. Cannot drop webstore setting.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDemotePrincipal(System.String,System.String,System.String,System.String)">
            <summary>
            1227;Cannot demote database {0}:{1} while the mirror database {2}:{3} is offline.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotOfflinePrincipal(System.String,System.String,System.String,System.String)">
            <summary>
            1228;Cannot offline database {0}:{1} while the mirror database {2}:{3} is offline.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotOnlineMirror(System.String,System.String,System.String,System.String)">
            <summary>
            1229;Cannot online database {0}:{1} while the principal database {2}:{3} is offline. Online the principal database first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MirroringDoesNotSupportServerDemoteWithNopromote">
            <summary>
            1231;Mirroring does not support server level demote with -nopromote option.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultCluster">
            <summary>
            1232;You cannot drop the default cluster
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropClusterAssignedToServer">
            <summary>
            1233;You cannot drop a cluster assigned to one or more Server(s)
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PrimaryFileGroupIsMissing">
            <summary>
            1235;The "Primary" filegroup is missing. Sql Server requires that a Primary filegroup be defined for every database.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultServerRole">
            <summary>
            1237;You cannot drop a default server role.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropServerRole(System.String)">
            <summary>
            1238;You cannot drop a server role assigned to one or more {0}(s).
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropServer(System.String)">
            <summary>
            1239;The server {0} is in use. It cannot be dropped.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ServerMustHaveDistributionDatabaseTemplate(System.String)">
            <summary>
            1240;You cannot assign the database template {0} to a server. Servers can only have distribution database templates.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.SqlFailSafeSetCannotHaveDistributionDatabaseTemplate(System.String)">
            <summary>
            1241;You cannot assign the database template {0} to a sql fail safe set. Sql fail safe sets can only have database templates that are not for distribution databases.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotAssignServersToCrossClusters(System.String,System.Int32,System.String,System.String)">
            <summary>
            1242;The Deployment {0} at Fail Safe Set {1}. You cannot assign the Data Servers {2} and {3} to different clusters within the same FSS.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseNotForceRepairable(System.String,System.String)">
            <summary>
            1243;{0}:{1} is not force repairable. It is in the restoring state. Cannot recover from this copy.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMappingInvalidMonitoredDatumType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1244;For the Mapping "{0}", the Alert Rule "{1}" has a {2} condition in which the monitored datum "{3}" is referenced, it needs to be of type "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringObjectIsInUseCannotDelete(System.String)">
            <summary>
            1245;{0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ActionIdMustExistInTheCollection(System.String,System.String)">
            <summary>
            1246;The ActionID "{0}" does not exist in the list of ProcessAction for for AlertProcess "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ProcessActionDoesNotHaveAnAction(System.String,System.String)">
            <summary>
            1247;The ProcessAction "{0}" specifies the Action "{1}" for a parent, but it does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            1248;The {0} "{1}" has invalid data for attribute "{2}".  Valid values are "{3}";
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMissingAttribute(System.String,System.String,System.String)">
            <summary>
            1249;The {0} object with a name of "{1}" has a missing attribute "{2}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMappingInvalidMonitoredDatumPropDatumType(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1250;For the Mapping "{0}", the Alert Rule "{1}" has a {2} condition in which the monitored datum "{3}" is referenced, which is of type "{4}".  However, the "{5}" property on this MonitoredDatum refers to another MonitoredDatum that has a type that will not roll up data correctly to this level.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMissingProperty(System.String,System.String,System.String,System.String)">
            <summary>
            1251;The {0} object with a name of "{1}" has a missing property "{2}" for a type of "{3}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1252;The {0} object with a name of "{1}" has a property named "{2}" which has an invalid value "{3}".  Acceptable values are "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidNextAction(System.String,System.String,System.String)">
            <summary>
             1253;For Action "{0}" the "{1}" value must match a name in the collection, or it must be "{2}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidMonitoreDatumForAlertRule(System.String,System.String,System.String)">
            <summary>
             1254;The the alert rule [{0}], there is an invalid Monitored Datum [{1}] in the {2} conditions.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyDataType(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1255;The {0} object with a name of "{1}" has a property named "{2}" which has an invalid data type of "{3}".  The only acceptable value is "{4}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPropertyName(System.String,System.String,System.String,System.String)">
            <summary>
            1256;The {0} object with a name of "{1}" has a property named "{2}", which is invalid.  The only acceptable property names are "{3}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidAlertRuleCondition(System.String,System.String)">
            <summary>
            1257;For Alert Rule [{0}] there is a generate alert condition for which the monitored datum [{1}] will cause an infinte loop with the resolve alert condition.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidTimeAlertRuleCondition(System.String,System.String,System.Int32,System.String)">
            <summary>
            1258;For Alert Rule [{0}] there is a [{1}] condition for which threhold needs to be greater than [{2}], the sampling frequency for the monitored datum [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidXML(System.String,System.Int32,System.Int32)">
            <summary>
            1259;There was an error importing the XML: [{0}].\nThis occurred in line {1} at position {2}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidDataPartition(System.String)">
            <summary>
            1260;The Monitoring Data Partition Num for Cluster [{0}] must be greater than zero, but less than the total # of data partitions in the WstPerf deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadMonitoredDatum(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            1261;The MonitoredDatum "{0}" has a {1} attribute of with a value of "{2}".  The {3} attribute is set to "{4}", which must be greater than or equal to the {1} attribute.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringAlertRuleMustHaveMonitoredDatumMapped(System.String,System.String,System.String,System.String)">
            <summary>
            1262;For the Mapping "{0}", the Alert Rule "{1}" has a {2} condition in which the monitored datum "{3}" is referenced.  It is not mapped to this Server Role, and must be for this alert rule to work.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ActionIdHasCircularReference(System.String,System.String)">
            <summary>
            1263;The ActionID "{0}" has a circular reference in the AlertProcess "{1}".
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MovingDataAlreadyInProgress(System.Int32)">
            <summary>
            1264;The Sql Fail Safe Set {0} is already in a Move Data state. Abort the process with 'wst par movedata -abort -FssNum ###' or Force the process to complete with 'wst par movedata -force -FssNum ###'
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.EmptyUID(System.String)">
            <summary>
            1265;UID for {0} cannot be Empty.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.EmptyProperties">
            <summary>
            1266;Properties is NULL or has an invalid Uid.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoAlertProcessRetryCount(System.String)">
            <summary>
            1267;If the AlertProcessName has a value, it is necessary to specify an AlertProcessRetryCount (greater than or equal to zero) for Alert Rule [{0}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoAlertProcessRetryPeriod(System.String)">
            <summary>
            1268;If the AlertProcessName has a value, it is necessary to specify an AlertProcessRetryPeriod (greater than zero) for Alert Rule [{0}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AlertProcessAttributeNotNeeded(System.String,System.String)">
            <summary>
            1269;The {0} is not necessary without an AlertProcessName for Alert Rule [{1}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateSqlFailSafeSetStatus(System.String,System.Int16)">
            <summary>
            1270;The {0} operation is inappropriate for fail safe set #{1}. The FSS is in the process of moving data between fail safe sets. Complete or abort the move data process and try again.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllocateInvalidNumberOfServers">
            <summary>
            1271;With "None" as the PartitionType in the manifest and with the Topology set to "NoSecondaries", only one server can be used when creating a deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.AllocateServersMustBeInSameCluster">
            <summary>
            1272;With "None" as the PartitionType in the manifest, all servers must be in the same cluster.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidSeverity(System.String)">
            <summary>
            1273;The severity on the Alert Rule [{0}] must be greater than 0.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotFindClassInAction(System.String,System.String,System.String)">
            <summary>
            1274;Cannot find class [{0}] for Action [{1}] of type [{2}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotFindMethodInClass(System.String,System.String,System.String,System.String)">
            <summary>
            1275;Cannot find method [{0}] on class [{1}] for Action [{2}] of type [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotApplyPropertyToClass(System.String,System.String,System.String,System.String)">
            <summary>
            1276;Cannot apply property [{0}] on class [{1}] for Action [{2}] of type [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidPropertyTypeForClass(System.String,System.String,System.String,System.String)">
            <summary>
            1277;The passed in type [{0}] on property [{1}] for Action [{2}] is invalid, it needs to be [{3}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.StripeValidationFailure(System.String,System.String,System.String,System.String)">
            <summary>
            1278;Failure validating server {0} shares "{1}" as "{2}". The exception was: {3}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CleanUpHasStarted">
            <summary>
            1279;MoveData cannot be called. We are currently cleaning data. Call wst par cleanup
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.JobStatusInvalidDataPartition(System.String,System.String)">
            <summary>
            JobStatusInvalidDataPartition = 1280;The JobStatus Data Partition Num for Cluster [{0}] must be greater than zero, but less than the total # of data partitions in the [{1}] deployment.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropSqlFailSafeSet(System.Int32)">
            <summary>
            1281;Cannot drop Sql Fail Safe Set #{0} until all databases in the FSS are marked Needs Repair.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssPurgeCannotBeUsedForVariable">
            <summary>
            1282;The fss purge command cannot be used for variable partitioned applications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.FssDropCannotBeUsedForFixed">
            <summary>
            1283;The fss drop command cannot be used for fixed partitioned applications.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.IncorrectSqlFssState(System.Int16,System.String,Microsoft.Webstore.Management.Wmo.WmoEnum.FailSafeSetStatus)">
            <summary>
            1284;The Sql Fail Safe ID {0} on the deployment {1} has an invalid state for this operation: {2}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MethodHasBeenDeprecated(System.String,System.String)">
            <summary>
            1285;The method [{0}] on the [{1}] object has been deprecated.  It should no longer be used.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.PartitionOperationFailed(System.String)">
            <summary>
            1286;{0} failed on one or more partitions.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotBeUsedForVariable(System.String)">
            <summary>
            1287;The operation {0} cannot be used for variable partitioned environments.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InappropriateStatusDuringMoveData(System.String,System.String,System.String)">
            <summary>
            1288;The {0} operation is inappropriate for the database "{1}:{2}". Finish moving or cleaning data first.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadEventLogProperty(System.String)">
            <summary>
            1289;The MonitoredDatum "{0}", which is an EventLog type contains a negative property with no positive properties.  With a negative property, at least one positive property is necessary.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringBadEventLogProperty(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            1290;The MonitoredDatum "{0}" has a property "{1}" which has a value of {2}.  It must be greater or equal to the sampling frequency, which is {3}.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringTooManyConditions(System.String,System.String,System.String)">
            <summary>
            1291;The Alert Rule "{0}" has a problem with the "{1}" conditions.  There are too many conditions using "{2}", the maximum is that can be used is 2.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidPairedAlertRuleConditions(System.String,System.String)">
            <summary>
            1292;For Alert Rule [{0}] there are paired {1} conditions that will cause an infinite loop.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringAlertRuleInvalidOperator(System.String,System.String,System.String)">
            <summary>
            1293;For Alert Rule [{0}] there are paired {1} conditions in which there is an invalid operator type [{2}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringAlertRuleNoMatchingCondition(System.String,System.Int32,System.String,System.String)">
            <summary>
            1294;For Alert Rule [{0}] there is are {1} condition(s) (with the monitored datum [{2}]), for which there are no a corresponding {2} condition(s).
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringAlertRuleNoMatchingCondition(System.String,System.String)">
            <summary>
            MonitoringAlertRuleConditionRangeCollision = 1295;For Alert Rule [{0}] there is a collision in the ranges using the monitored datum [{1}].
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringDeploymentDoesNotExist">
            <summary>
            MonitoringDeploymentDoesNotExist = 1296;The WstPerf deployment does not exist, so this action cannot continue.  To install it, see the BOL for further information.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultDataCenter">
            <summary>
            CannotDropDefaultDataCenter = 1297;You cannot drop the default data center.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDataCenterWithAssociatedServers">
            <summary>
            CannotDropDataCenterWithAssociatedServers = 1298;You cannot drop a data center that has servers associated with it.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoEnabledOnImport(System.Int16)">
            <summary>
            GeoEnabledOnImport = 1299;The deployment has GeoEnabled set. Sql Fail Safe set {0} did not list GeoPartner information.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DefaultGeoPartnerNotExist(System.Int16)">
            <summary>
            DefaultGeoPartnerNotExist - 1300;The DefaultGeoPartner listed for SqlFailSafeSet {0} does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoPartnerNotExist(System.Int16)">
            <summary>
            GeoPartnerNotExist - 1301;The SqlDatabase listed as the GeoPartner for SqlFailSafeSet {0} does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoPartnerMustHaveDefaultGeoPartner(System.Int16,System.String)">
            <summary>
            GeoPartnerMustHaveDefaultGeoPartner = 1302;The GeoPartner specified for FailSafeSet {0} does not have a Default GeoPartner in the {1} DataCenter.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DataCenterDoesNotMatch(System.String,System.String,System.String)">
            <summary>
            DataCenterDoesNotMatch = 1303;The DataCenter "{0}" that you have specified for DataServer {1} does not match. This server lists "{2}" as its DataCenter.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoMustHaveAllDefinedIfSomeAreDefined">
            <summary>
            GeoMustHaveAllDefinedIfSomeAreDefined = 1304;When some GeoPartner data is defined, all FSSes must define their GeoPartner data.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.WhenGeoIsEnabledAllFSSesMustHaveGeoPartnerDefined">
            <summary>
            WhenGeoIsEnabledAllFSSesMustHaveGeoPartnerDefined = 1305;When the deployment is GeoEnabled GeoPartner information must be supplied for servers in the FSS that are in different datacenters.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotHaveGeoPartnerInSameDCAsPrimary(System.Int32)">
            <summary>
            CannotHaveGeoPartnerInSameDCAsPrimary = 1306;Cannot declare a GeoPartner or DefaultGeoPartner in the same DataCenter as your Primary or Default Primary database. Sql Fail safe Set {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.UpdateGeoInfoMustHaveAllFSSes">
            <summary>
            UpdateGeoInfoMustHaveAllFSSes = 1307;When calling UpdateGeoInfo, all fail safes sets in the deployment must be listed with the correct Geo data.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotDropDefaultGeoPartner(System.String,System.String)">
            <summary>
            CannotDropDefaultGeoPartner = 1308;Database "{0}:{1}" is a default GeoPartner database. Cannot drop the default GeoPartner.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoPartnerCannotBeNeedsRepair(System.Int32,System.String,System.String)">
            <summary>
            GeoPartnerCannotBeNeedsRepair = 1309;The Sql Fail Safe Set {0} has the GeoPartner database {1}:{2} marked needs repair.
            </summary>
            <param name="id"></param>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoPartnerDefaultStatusNotOnline(System.String,System.String,System.String)">
            <summary>
            GeoPartnerDefaultStatusNotOnline = 1310;Can not set GeoPartner database {0}:{1} to default status {2}. GeoPartner database default status must be online.
            </summary>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <param name="incorrectDefaultStatus"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoPartnerStandbyNotAllowed(System.String,System.String)">
            <summary>
            GeoPartnerStandbyNotAllowed = 1311;Can not set GeoPartner database {0}:{1} standby.
            </summary>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NewGeopartnerInvalidFormat(System.String)">
            <summary>
            NewGeopartnerInvalidFormat = 1312;Invalid format "{0}". The -newGeoPartner parameter needs to be of the format serverName\\databaseName.
            </summary>
            <param name="badParameter"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DefaultGeoPartnerCannotBeInsameDataCenterAsPrimary(System.String)">
            <summary>
            DefaultGeoPartnerCannotBeInsameDataCenterAsPrimary = 1313;A Default GeoPartner database cannot be in the same datacenter as the Primary database. The Primary datacenter is {0}.
            </summary>
            <param name="dataCenterName"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DatabaseNotRegisteredWithThisFailSafeSet(System.String,System.String)">
            <summary>
            DatabaseNotRegisteredWithThisFailSafeSet = 1314;The database "{0}:{1}" is not registered in this fail safe set.
            </summary>
            <param name="serverName"></param>
            <param name="databaseName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InCorrectStateForMovePrimary(System.String)">
            <summary>
            InCorrectStateForMovePrimary = 1315;Incorrect state for MovePrimary: {0}
            </summary>
            <param name="badState"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.DefaultPrimaryAndPrimaryMustBeInSameDataCenter">
            <summary>
            DefaultPrimaryAndPrimaryMustBeInSameDataCenter = 1316;When the deployment is GeoEnabled, the Primary database must be in the same DataCenter as the Default Primary database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotResetGeoInfomation">
            <summary>
            CannotResetGeoInfomation = 1317;When the Deployment is GeoEnabled, you cannot reset GeoPartner information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.CannotChangeDataCenterWhenGeoEnabled">
            <summary>
            CannotChangeDataCenterWhenGeoEnabled = 1317;When a server is used in a Deployment that is GeoEnabled, you cannot change the DataCenterName.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.BadJobInvalidData(System.String,System.String,System.String,System.String)">
            <summary>
            BadJobInvalidData = 1318;For job "{0}", there is an invalid "{1}" of "{2}".  That {3} does not exist in the configuration database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.NoServerRoleForJobs(System.String,System.String,System.String)">
            <summary>
            NoServerRoleForJobs = 1319;For job {0}, there are no servers in {1} Server Role for the {2} Attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MovePrimaryOnlyAvailableForGeoEnabledApps">
            <summary>
            MovePrimaryOnlyAvailableForGeoEnabledApps = 1320;The MovePrimary command is only available to deployments that have the GeoEnabled flag set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.GeoNotAvailableForThisTopology">
            <summary>
            GeoNotAvailableForThisTopology = 1321;GeoPartner is not available for Mirroring and No Secondary topologies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringMappingInvalidName(System.String,System.String,System.String)">
            <summary>
            MonitoringMappingInvalidName = 1330;For the {0} Mapping, "{1}" does not exist in the {2} collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidDefaultStatus(System.String)">
            <summary>
            InvalidDefaultStatus = 1331;{0} is an invalid DefaultStatus. The value can only be Online or Standby.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.MonitoringInvalidMonitoredDatumForAlertRule(System.String,System.String,System.String)">
            <summary>
            MonitoringInvalidMonitoredDatumForAlertRule = 1350;For Alert Rule [{0}] there is a {0} alert condition for which the monitored datum [{2}] that cannot be used in alert rule conditions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.ArgumentOutOfRangeException(System.String)">
            <summary>
            ArgumentOutOfRangeException = 1351;{0}
            </summary>
            <param name="message">Free form text. The error can take several forms.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidJobScheduleType(System.String,System.Int32)">
            <summary>
            InvalidJobScheduleType = 1352;JobName:{0}, scheduleNumber:{1} - Cannot update schedule type
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidJobElement(System.String,System.String,System.Int32,System.String)">
            <summary>
            InvalidJobElement = 1353;[{0}] element is not allowed with ScheduleType of [{1}] for schedule # [{2}] for job [{3}]
            </summary>
            <param name="element"></param>
            <param name="scheduleType"></param>
            <param name="scheduleNumber"></param>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoError.InvalidJobSchedules(System.String,System.String)">
            <summary>
            InvalidJobSchedules = 1354;Cannot have {0} and {1} schedules for the same job
            </summary>
            <param name="schedule1"></param>
            <param name="schedule2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoMoveDataResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WmoResource.GetObject(System.String)">
            <summary>
            GetObject
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Management.Wmo.WmoCentralizedSettings">
            <summary>
            Holds the metadata about the centaralized settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspCheckWmoVersion(System.String)">
            <summary>
            Compare wmo version and return config version
            </summary>
            <param name="WmoVersion"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDemoteGeoPartner(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SqlFssNum"></param>
            <param name="DataCenterName"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropGeoInfoForDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Unregister a GeoPartner
            </summary>
            <param name="DeploymentUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspPromoteGeoPartner(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a GeoPartner
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SqlFssNum"></param>
            <param name="DataCenterName"></param>
            <param name="SqlDatabaseUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterObjectSource(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update an Object Source
            </summary>
            <param name="ObjectSourceUid"></param>
            <param name="ManifestUID">for [ObjectSource].[ManifestUID] column</param>
            <param name="InstallOrder">for [ObjectSource].[InstallOrder] column</param>
            <param name="SetupStep">for [ObjectSource].[SetupStep] column</param>
            <param name="SourceCRC">for [ObjectSource].[SourceCRC] column</param>
            <param name="SourceModDateTime">for [ObjectSource].[SourceModDateTime] column</param>
            <param name="SourceFileName">for [ObjectSource].[SourceFileName] column</param>
            <param name="SourceText">for [ObjectSource].[SourceText] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetFiles(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetJobSource(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get the Object Source for Jobs in a Manifest.
            </summary>
            <param name="SqlDatabaseUid"></param>
            <param name="GetPrimaryJobs"></param>
            <param name="GetSecondaryJobs"></param>
            <param name="ManifestUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspAgentGetRegisteredSecurity(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the Accounts belonging belonging to a Deployment
            </summary>
            <param name="DatabaseUid"></param>
            <param name="ManifestUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="SiteWideDeploymentTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropManifest(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Purge manifest and that is no longer in use. Remove from all tables that reference the Manifest.
            </summary>
            <param name="ManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetWstConfigDatabase">
            <summary>
            Get information on a file group from SQLDatabase table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFileSharesForServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLDatabases belonging belonging to a Server
            </summary>
            <param name="DataServerUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSQLFileGroups(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all SQLFileGroups belonging to a Manifest
            </summary>
            <param name="ManifestUID">for SQLFileGroup.ManifestUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllManifests">
            <summary>
            Get all the Manifests
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDeployments">
            <summary>
            Get all the Deployments belonging belonging to a Manifest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSQLFailSafeSets(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLFailSafeSets and databases belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for SQLFailSafeSet.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataPartitions(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the LogicalPartitions belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for DataPartition.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetEnvironment">
            <summary>
            Get information on environment, datacenter, switch and dataserver
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetClientSettings(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Deployment table
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetManifest(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a manifest from Manifest table
            </summary>
            <param name="ManifestUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeployment(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Deployment table
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get a specific Server
            </summary>
            <param name="DataServerUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataServer(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a DataServer
            </summary>
            <param name="DataServerUID"></param>
            <param name="ServerName"></param>
            <param name="DataCenterName"></param>
            <param name="ClusterName"></param>
            <param name="Description"></param>
            <param name="Ticket"></param>
            <param name="DistributionDatabaseTemplateUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDeployment(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Boolean,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID">for [Deployment].[DeploymentUID] column</param>
            <param name="ManifestUID">for [Deployment].[ManifestUID] column</param>
            <param name="DeploymentName">for [Deployment].[DeploymentName] column</param>
            <param name="MaxTicket">for [Deployment].[MaxTicket] column</param>
            <param name="MaxPartitionTicket">for [Deployment].[MaxPartitionTicket] column</param>
            <param name="MaxDeleteTicket">for [Deployment].[MaxDeleteTicket] column</param>
            <param name="Description">for [Deployment].[Description] column</param>
            <param name="SystemManifestUID">for [Deployment].[SystemManifestUID] column</param>
            <param name="SiteWideDeploymentTicket">for [Environment].[MaxDeploymentTicket] column</param>
            <param name="PreviousManifestUID"></param>
            <param name="GeoEnabled"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterEnvironment(System.Data.SqlTypes.SqlGuid,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Deployment
            </summary>
            <param name="EnvironmentUID">for [Environment].[EnvironmentUID] column</param>
            <param name="EnvironmentName">for [Environment].[EnvironmentName] column</param>
            <param name="TicketExpirationInterval">for [Environment].[TicketExpirationInterval] column</param>
            <param name="PollingIntervalClient">for [Environment].[PollingIntervalClient] column</param>
            <param name="PollingOffsetClient">for [Environment].[PollingOffsetClient] column</param>
            <param name="PollingOffsetService">for [Environment].[PollingOffsetService] column</param>
            <param name="LatencyBucket0">for [Environment].[LatencyBucket0] column</param>
            <param name="LatencyBucket1">for [Environment].[LatencyBucket1] column</param>
            <param name="LatencyBucket2">for [Environment].[LatencyBucket2] column</param>
            <param name="LatencyBucket3">for [Environment].[LatencyBucket3] column</param>
            <param name="LockWaitInterval">for [Environment].[LockWaitInterval] column</param>
            <param name="LockNumRetries">for [Environment].[LockNumRetries] column</param>
            <param name="Ticket">for [Environment].[Ticket] column</param>
            <param name="SiteWideServerTicket">for [Environment].[SiteWideServerTicket] column</param>
            <param name="SiteWideServerDeleteTicket">for [Environment].[SiteWideServerDeleteTicket] column</param>
            <param name="SiteWideDeploymentTicket">for [Environment].[SiteWideDeploymentTicket] column</param>
            <param name="MaxSelfAdminInfoTicket">for [Environment].[MaxSelfAdminInfoTicket ] column</param>
            <param name="MaxSelfAdminInfoDeleteTicket">for [Environment].[MaxSelfAdminInfoDeleteTicket] column</param>
            <param name="MaxSettingsTicket">for [Environment].[MaxSettingsTicket] column</param>
            <param name="MaxSettingsDeleteTicket">for [Environment].[MaxSettingsDeleteTicket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterClientSettings(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Deployment
            </summary>
            <param name="DeploymentUID">for [ClientSettings].[DeploymentUID] column</param>
            <param name="FailSafeSetType">for [ClientSettings].[FailSafeSetType] column</param>
            <param name="DefaultReadCmdType"></param>
            <param name="DefaultWriteCmdType"></param>
            <param name="SecondaryStaleThreshold">for [ClientSettings].[SecondaryStaleThreshold] column</param>
            <param name="SecondaryStaleDCThreshold">for [ClientSettings].[SecondaryStaleDCThreshold] column</param>
            <param name="Ticket">for [ClientSettings].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLFileGroup(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Insert or update SQLFileGroup
            </summary>
            <param name="ManifestUID">for [SQLFileGroup].[ManifestUID] column</param>
            <param name="Name">for [SQLFileGroup].[Name] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterIPAddress(System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Boolean,System.Int32@)">
            <summary>
            Insert or update an IPAddress
            </summary>
            <param name="IPAddr"></param>
            <param name="DataServerUID">for [IPAddress].[DataServerUID] column</param>
            <param name="SwitchName">for [IPAddress].[SwitchName] column</param>
            <param name="IsPreferred">for [IPAddress].[IsPreferred] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterManifest(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int16,System.String,System.Boolean,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a Manifest
            </summary>
            <param name="ManifestUID">for [Manifest].[ManifestUID] column</param>
            <param name="ManifestName">for [Manifest].[ManifestName] column</param>
            <param name="ManifestVersion">for [Manifest].[ManifestVersion] column</param>
            <param name="PartitionType">for [Manifest].[PartitionType] column</param>
            <param name="PartitionCount">for [Manifest].[PartitionCount] column</param>
            <param name="PartitionColumnName">for [Manifest].[PartitionColumnName] column</param>
            <param name="isNoExtraObjectValidation">for [Manifest].[isNoExtraObjectValidation] column</param>
            <param name="TypeOfSQLSecondaries"></param>
            <param name="minSQLServerVersion"></param>
            <param name="Description">for [Manifest].[Description] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataPartition(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a DataPartition
            </summary>
            <param name="DeploymentUID">for [DataPartition].[DeploymentUID] column</param>
            <param name="PartitionNum">for [DataPartition].[PartitionNum] column -- bug 4377</param>
            <param name="SQLFSSNum">for [DataPartition].[SQLFSSNum] column -- bug 4377</param>
            <param name="FileShareFSSNum">for [DataPartition].[FileShareFSSNum] column -- bug 4377</param>
            <param name="Status">for [DataPartition].[Status] column</param>
            <param name="Ticket">for [DataPartition].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllDataPartitions(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Register all logical partitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DataPartitions"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllSqlFailSafeSets(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Bulk Insert SqlFailSafeSet and Database.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="RawXml"></param>
            <param name="Ticket"></param>
            <param name="ManifestUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAllFileFailSafeSets(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Bulk Insert FileFailSafeSet and FileShare.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="RawXml"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplPublication(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ReplPublication (Manifest)
            </summary>
            <param name="ManifestUID"></param>
            <param name="Name"></param>
            <param name="SourceUid"></param>
            <param name="PublicationType"></param>
            <param name="MMChangeDateTimeColumnName"></param>
            <param name="MMNeedsReplicationColumnName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplArticle(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ReplArticle (Manifest)
            </summary>
            <param name="ManifestUID"></param>
            <param name="PublicationName"></param>
            <param name="ArticleName"></param>
            <param name="SqlTableName"></param>
            <param name="InsertSprocName"></param>
            <param name="UpdateSprocName"></param>
            <param name="DeleteSprocName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplPublicationDeploy(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a ReplPublicationDeploy row
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PublicationName"></param>
            <param name="ManifestPubName"></param>
            <param name="ManifestUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterReplDistribDeploy(System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Insert or update a ReplDistribDeploy row
            </summary>
            <param name="DeploymentUid"></param>
            <param name="StaleAlertInterval"></param>
            <param name="DrainInterval"></param>
            <param name="DrainNumRetries"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a SQLFailSafeSet
            </summary>
            <param name="DeploymentUID">for [SQLFailSafeSet].[DeploymentUID] column</param>
            <param name="SQLFSSNum">for [SQLFailSafeSet].[SQLFSSNum] column</param>
            <param name="PrimarySQLDBUID">for [SQLFailSafeSet].[PrimarySQLDBUID] column</param>
            <param name="DfltPriSQLDBUID">for [SQLFailSafeSet].[DfltPriSQLDBUID] column</param>
            <param name="Ticket">for [SQLFailSafeSet].[Ticket] column</param>
            <param name="Status">for [SQLFailSafeSet].[Status] column  -- bug 4377</param>
            <param name="ManifestUID"></param>
            <param name="ClusterUID"></param>
            <param name="DatabaseTemplateUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityAccount(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="AccountName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityAccountRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Get a lock for a failsafe set or partition if available.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="AccountName"></param>
            <param name="RoleName"></param>
            <param name="ManifestUid"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSecurityRole(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32@)">
            <summary>
            Insert or update a SecurityRole
            </summary>
            <param name="ManifestUID">for [SecurityRole].[ManifestUID] column</param>
            <param name="Name">for [SecurityRole].[Name] column</param>
            <param name="SourceUid"></param>
            <param name="SprocGrantMask">for [SecurityRole].[SprocGrantMask] column</param>
            <param name="FunctionGrantMask">for [SecurityRole].[FunctionGrantMask] column</param>
            <param name="TableGrantMask">for [SecurityRole].[TableGrantMask] column</param>
            <param name="ViewGrantMask">for [SecurityRole].[ViewGrantMask] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLDatabase(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Insert or update a SQLDatabase
            </summary>
            <param name="SQLDatabaseUID">for [SQLDatabase].[SQLDatabaseUID] column</param>
            <param name="DataServerName">for [SQLDatabase].[SQLServerName] column</param>
            <param name="SQLDatabaseName">for [SQLDatabase].[SQLDatabaseName] column</param>
            <param name="DeploymentUID">for [SQLDatabase].[DeploymentUID] column</param>
            <param name="SQLFSSNum">for [SQLDatabase].[PhysicalPartitionNum] column -- bug 4377</param>
            <param name="Ticket">for [SQLDatabase].[Ticket] column</param>
            <param name="Status">for [SQLDatabase].[Status] column</param>
            <param name="DefaultStatus">for [SQLDatabase].[DefaultStatus] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLTable(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Boolean,System.String,System.Int32@)">
            <summary>
            Insert or update a SQLTable
            </summary>
            <param name="ManifestUID">for [SQLTable].[ManifestUID] column</param>
            <param name="Name">for [SQLTable].[Name] column</param>
            <param name="SourceUid"></param>
            <param name="TableType"></param>
            <param name="IsNonPartitioned">for [SQLTable].[IsNonPartitioned] column</param>
            <param name="PartitionColumnName">for [SQLTable].[PartitionColumnName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSQLObject(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32@)">
            <summary>
            Insert or update the SQLObject table
            </summary>
            <param name="ManifestUID">for SQLObject.ManifestUID column</param>
            <param name="ObjectType">for SQLObject.ObjectType column</param>
            <param name="Name">for SQLObject.Name column</param>
            <param name="SourceUID">for SQLObject.SourceUID column</param>
            <param name="IsInstallOnPrimary">for SQLObject.IsInstallOnPrimary column</param>
            <param name="IsInstallOnSecondary">for SQLObject.IsInstallOnSecondary column</param>
            <param name="IsGenerated">for SQLObject.IsGenerated column</param>
            <param name="IsUpgradeOnly">for SQLObject.IsUpgradeOnly column</param>
            <param name="IsDowngradeOnly">for SQLObject.IsDowngradeOnly column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateDBStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="DBUid"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateGeoEnabled(System.String,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentName"></param>
            <param name="GeoEnabled"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetDemoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetPromoteDB(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetOneStepPromoteDemote(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBToDemoteUid"></param>
            <param name="DBToPromoteUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDatabaseTemplate">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDatabaseTemplate(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllFileGroup(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFileGroup(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllLogicalFile(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllLogFile(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetLogicalFile(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetStripe(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllStripe(System.Int32@)">
            <summary>
            </summary>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Boolean,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="Name"></param>
            <param name="Description"></param>
            <param name="IsDistributionOnly"></param>
            <param name="DatabaseBackupAdditionalScript"></param>
            <param name="DatabaseRestoreAdditionalScript"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Drop DatabaseTemplate(s) that are no longer in use.
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileGroup(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="FileGroupName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterLogicalFile(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="FileGroupName"></param>
            <param name="LogicalFileName"></param>
            <param name="Path"></param>
            <param name="Size"></param>
            <param name="MaxSize"></param>
            <param name="FileGrowth"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterStripe(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUid"></param>
            <param name="Directory"></param>
            <param name="Share"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetAssignDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="DeploymentUID"></param>
            <param name="SQLFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateServerAssignDatabaseTemplate(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DatabaseTemplateUID"></param>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataServers">
            <summary>
            Get all Servers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetSQLDBsForServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the SQLDatabases belonging belonging to a Server
            </summary>
            <param name="DataServerUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllFileFailSafeSets(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the FileFailSafeSets and databases belonging belonging to a Deployment
            </summary>
            <param name="DeploymentUID">for FileFailSafeSet.DeploymentUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32@)">
            <summary>
            Insert or update a FileFailSafeSet
            </summary>
            <param name="DeploymentUID">for [FileFailSafeSet].[DeploymentUID] column</param>
            <param name="FileShareFSSNum">for [FileFailSafeSet].[FileShareFSSNum] column  -- bug 4377</param>
            <param name="PrimaryFileShareUID">for [FileFailSafeSet].[PrimaryFileShareUID] column</param>
            <param name="DfltPriFileShareUID">for [FileFailSafeSet].[DfltPriFileShareUID] column</param>
            <param name="Ticket">for [FileFailSafeSet].[Ticket] column</param>
            <param name="Status">for [FileFailSafeSet].[Status] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetDemoteFileShare(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Demote a file share on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileFailSafeSetID"></param>
            <param name="FileShareUID"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetPromoteFileShare(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Promote a database on the physical partition
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileFailSafeSetID"></param>
            <param name="FileShareUID"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterFileShare(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32@)">
            <summary>
            Insert or update a FileShare
            </summary>
            <param name="FileShareUID">for [FileShare].[FileShareUID] column</param>
            <param name="DataServerName">for [FileShare].[SQLServerName] column</param>
            <param name="FileSharePath">for [FileShare].[FileSharePath] column</param>
            <param name="DeploymentUID">for [FileShare].[DeploymentUID] column</param>
            <param name="FileShareFSSNum">for [FileShare].[PhysicalPartitionNum] column  -- bug 4377</param>
            <param name="Ticket">for [FileShare].[Ticket] column</param>
            <param name="Status">for [FileShare].[Status] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileShareStatus(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the FileShare status
            DeploymentUID is passed in because we need to row lock the deployment
            table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileShareUID"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeploymentTemplateObjects(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all information for the DatabaseTemplateObject. This includes default
            File Group info, Jobs, DistributionDefaults, Replication Publication, 
            Subscription and Accounts.
            </summary>
            <param name="DeploymentUid">Guid of the Deployment</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetClientPollingInterval">
            <summary>
            Get Client Polling Interval
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetJobsForDatabase(System.String,System.String,System.Data.SqlTypes.SqlGuid)">
            <summary>
             Get rows from Job table, but only jobs that would be installed on the
             passed in SqlServer and Database.
            </summary>
            <param name="ServerName"></param>
            <param name="SqlDatabaseName"></param>
            <param name="ManifestUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetObjectSource(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a Object from the ObjectSource table
            </summary>
            <param name="ObjectSourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the status to be Deployed or Not Deployed.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetManifestUid(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="ManifestUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateFileFailSafeSetStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the status to be Deployed, Not Deployed, upgrading or moving data.
             DeploymentUID is passed in because we need to row lock the deployment
             table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="FileShareFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFSSLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DestSQLDBUID"></param>
            <param name="SourceSQLDBUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSQLDatabase(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="SQLDatabaseUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxDeleteTicket(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxTicket(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAdminHistory(System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32)">
            <summary>
            Get the history for all objects or a particular object.
            </summary>
            <param name="CmdObjectType"></param>
            <param name="ObjectName"></param>
            <param name="FromDateTime"></param>
            <param name="ToDateTime"></param>
            <param name="Count"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDPAdminHistory(System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
            <summary>
            Get the history for a deployment
            </summary>
            <param name="DeploymentName"></param>
            <param name="FromDateTime"></param>
            <param name="ToDateTime"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterFileShare(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="FileShareUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterIPs(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Delete from all IPs belonging to one dataserver
            </summary>
            <param name="DataServerUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.String,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum">for [PartitionMoveMap].[PartitionNum] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="Status">for [PartitionMoveMap].[Status] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get information on a file group from Account table
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetNewPartitionMoveMap(System.Data.SqlTypes.SqlGuid)">
            <summary>
            When adding partition(s), the data needed for the transfer is kept in the PartitionMoveMap table.
            This sproc fetches the relevant data and returns it to the caller.
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspNewRemapDataPartition(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions using the redesigned movedata system.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspNewUpdateDataPartitionStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Set the status (readonly vs readwrite) on the DataPartition table.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="SQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateNewPartitionMoveMapStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32,System.String,System.Int32@)">
            <summary>
            Set status of a partition that is being moved.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="Status"></param>
            <param name="Progress"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int16,System.Boolean,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="PartitionNum"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="IsForce"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterNewPartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdatePartitionMoveMap(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.String,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="OldSQLFSSNum">for [PartitionMoveMap].[OldSQLFSSNum] column</param>
            <param name="Status">for [PartitionMoveMap].[Status] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="OldSQLDBUid">for [PartitionMoveMap].[OldSQLDBUid] column</param>
            <param name="NewSQLDBUid">for [PartitionMoveMap].[NewSQLDBUid] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdatePartitionMoveMapProgress(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.String,System.Int32@)">
            <summary>
            Insert or update a Account
            </summary>
            <param name="DeploymentUID">for [PartitionMoveMap].[DeploymentUID] column</param>
            <param name="NewSQLFSSNum">for [PartitionMoveMap].[NewSQLFSSNum] column</param>
            <param name="OldSQLFSSNum">for [PartitionMoveMap].[OldSQLFSSNum] column</param>
            <param name="Progress">for [PartitionMoveMap].[Progress] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetPartitionMoveMapStatus(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get the status from the PartitionMoveMap table.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemapMoveDataPartition(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int16,System.Int32,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="PartitionNum"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="Status"></param>
            <param name="IsForce"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMoveDataPartitionStatus(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int16,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Remap DataPartitions
            </summary>
            <param name="DeploymentUID"></param>
            <param name="NewSQLFSSNum"></param>
            <param name="OldSQLFSSNum"></param>
            <param name="Status"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSQLFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int16,System.Boolean,System.Int32@)">
            <summary>
            Drop a SqlFailSafeSet. If IsDropPartitions is true, drop the DataPartitions pointing to this FSS.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="SQLFSSNum"></param>
            <param name="IsDropPartitions"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterFileFailSafeSet(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FileShareFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAllFileShares(System.Data.SqlTypes.SqlGuid,System.Int16,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FileShareFSSNum"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetNumFilePrimariesOnServer(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get information on a security role from SQLTable table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="FSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterDataServer(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from DataServer table
            </summary>
            <param name="DataServerUID"></param>
            <param name="SiteWideServerTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllJobsForDatabase(System.String,System.String,System.Data.SqlTypes.SqlGuid)">
            <summary>
             Get rows from Job table, but only jobs that would be installed on the
             passed in SqlServer and Database.
            </summary>
            <param name="ServerName"></param>
            <param name="SqlDatabaseName"></param>
            <param name="ManifestUid"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSecurityAccountRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="AccountName"></param>
            <param name="SecurityRole"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterSecurityAccount(System.Data.SqlTypes.SqlGuid,System.String,System.Int32@)">
            <summary>
            Delete from SQLDatabase table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="AccountName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMirroringDeploy(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update the MirroringDeploy table.
            </summary>
            <param name="DeploymentUID">for [MirroringDeploy].[DeploymentUID] column</param>
            <param name="PortNumber">for [MirroringDeploy].[Port] column</param>
            <param name="CompleteDomainName">for [MirroringDeploy].[CompleteDomainName] column</param>
            <param name="EndPointName">for [MirroringDeploy].[EndPointName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMirroringEndPoint(System.Data.SqlTypes.SqlGuid,System.Int16,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update the MirroringEndPoint table.
            </summary>
            <param name="DataServerUID">for [MirroringEndPoint].[DeploymentUID] column</param>
            <param name="PortNumber">for [MirroringEndPoint].[Port] column</param>
            <param name="CompleteDomainName">for [MirroringEndPoint].[CompleteDomainName] column</param>
            <param name="EndPointName">for [MirroringEndPoint].[EndPointName] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServersForCluster(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all the dataserver belonging to a cluster
            </summary>
            <param name="ClusterUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspPurgeCluster(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Drop Cluster(s) that are no longer in use.
            </summary>
            <param name="ClusterUID"></param>
            <param name="TicketIn"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterCluster(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlGuid,System.Int16,System.Byte,System.Int16,System.Int32@)">
            <summary>
            Insert or update a Cluster
            </summary>
            <param name="ClusterUID">for [Cluster].[ClusterUID] column</param>
            <param name="ClusterName">for [Cluster].[ClusterName] column</param>
            <param name="ClusterPath">for [Cluster].[ClusterPath] column</param>
            <param name="Ticket">for [DataServer].[Ticket] column</param>
            <param name="MonitoringServerUID">for [Cluster].[MonitoringServerUID] column</param>
            <param name="MonitoringDataPartitionNum">for [Cluster].[MonitoringDataPartitionNum] column</param>
            <param name="IsCommon"></param>
            <param name="JobStatusDataPartitionNum">for [Cluster].[JobStatusDataPartitionNum] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllClusters">
            <summary>
            Get all the Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSiteWideDeploymentTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSiteWideServerTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            DeploymentUID is passed in because we need to row lock the deployment table first
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxSelfAdminInfoDeleteTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateMaxSelfAdminInfoTicket(System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAlertRules">
            <summary>
            Get all the AlertRule
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllMonitoredData">
            <summary>
            Get all the MonitoredDatums
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRule(System.Data.SqlTypes.SqlGuid,System.String,System.Byte,System.String,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertRule
            </summary>
            <param name="AlertRuleUid">for [AlertRule].[AlertRuleUid] column</param>
            <param name="Name">for [AlertRule].[Name] column</param>
            <param name="Severity">for [AlertRule].[Severity] column</param>
            <param name="GenerateAlertAt">for [AlertRule].[GenerateAlertAt] column</param>
            <param name="AlertProcessUID">for [AlertRule].[AlertProcessUID] column</param>
            <param name="AlertProcessRetryCount">for [AlertRule].[AlertProcessRetryCount] column</param>
            <param name="AlertProcessRetryPeriod">for [AlertRule].[AlertProcessRetryPeriod] column</param>
            <param name="Ticket">for [AlertRule].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRule(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from AlertRule table
            </summary>
            <param name="AlertRuleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRuleCondition(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Byte,System.String,System.String,System.Double,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertRuleCondition
            </summary>
            <param name="AlertRuleConditionUID">for [AlertCondition].[AlertRuleConditionUID] column</param>
            <param name="AlertRuleUID">for [AlertCondition].[AlertRuleUID] column</param>
            <param name="AlertRuleConditionType">for [AlertCondition].[AlertRuleConditionType] column</param>
            <param name="MonitoredDatumName">for [AlertCondition].[MonitoredDatumUID] column</param>
            <param name="ComparisonOperator">for [AlertCondition].[ComparisonOperator] column</param>
            <param name="Threshold">for [AlertCondition].[Threshold] column</param>
            <param name="Ticket">for [AlertCondition].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRuleConditions(System.Data.SqlTypes.SqlGuid,System.Byte,System.Int32@)">
            <summary>
            Delete from all AlertRuleCondition belonging to one AlertRule
            </summary>
            <param name="AlertRuleUID">for [AlertCondition].[AlertRuleUID] column</param>
            <param name="AlertRuleConditionType">for [AlertCondition].[AlertRuleConditionType] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllAlertRuleConditions(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all conditions for an Alert Rule.  Used prior to the registration of an ALert Rule.
            </summary>
            <param name="AlertRuleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from MonitoredDatum table
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="MaxSelfAdminInfoTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllMonitoredDatumProperties(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all properties for a Monitored Datum.  Used prior to the registration of a Monitored Datum.
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update MonitoredData
            </summary>
            <param name="MonitoredDatumUid">for [MonitoredDatum].[MonitoredDatumUid] column</param>
            <param name="Name">for [MonitoredDatum].[Name] column</param>
            <param name="Type">for [MonitoredDatum].[Type] column</param>
            <param name="CollectAt">for [MonitoredDatum].[CollectAt] column</param>
            <param name="SamplingFrequency">for [MonitoredDatum].[SamplingFrequency] column</param>
            <param name="AggregationType">for [MonitoredDatum].[AggregationType] column</param>
            <param name="AggregationInterval">for [MonitoredDatum].[AggregationInterval] column</param>
            <param name="StaleTime">for [MonitoredDatum].[StaleTime] column</param>
            <param name="RatePrecision">for [MonitoredDatum].[RatePrecision] column</param>
            <param name="Ticket">for [MonitoredDatum].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterMonitoredDatumProperty(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a MonitoredDatumProperty (used in Self healing)
            </summary>
            <param name="MonitoredDatumUID"></param>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="Value"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllMappings(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="ObjectSourceUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a mapping for a server role and monitoreddatum
            </summary>
            <param name="ServerRoleUID">for [ServerRoleMonitoredDatumMapping].[ServerRoleUID] column</param>
            <param name="MonitoredDatumName">for [ServerRoleMonitoredDatumMapping].[MonitoredDatumUID] column</param>
            <param name="Ticket">for [ServerRoleMonitoredDatumMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRoleForMonitoredDatum(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            remove a mapping for a server role and monitoreddatum
            </summary>
            <param name="ServerRoleUID">for [ServerRoleMonitoredDatumMapping].[ServerRoleUID] column</param>
            <param name="MonitoredDatumName">for [ServerRoleMonitoredDatumMapping].[MonitoredDatumUID] column</param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertRuleMapping(System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="ObjectType"></param>
            <param name="ObjectSourceUID"></param>
            <param name="AlertRuleName"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertRuleMapping(System.String,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="ObjectType"></param>
            <param name="ObjectSourceUID"></param>
            <param name="AlertRuleName"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetMMDropReplication(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="MMDropReplication"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetSqlFailSafeSetMMDropReplication(System.Data.SqlTypes.SqlGuid,System.Int16)">
            <summary>
            Get date that replication was dropped for a MultiMaster deployment. Used in Dep Upgrade.
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetFailSafeSetReplPublicationDeploy(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
            <param name="ManifestUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSqlFssLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Int32,System.Int32,System.Boolean,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert a placeholder row in the SqlFssLatency table if it doesn't exist.
            </summary>
            <param name="SourceSQLDBUID"></param>
            <param name="DestSQLDBUID"></param>
            <param name="Latency"></param>
            <param name="LatencyBucket"></param>
            <param name="IsForce"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspBulkRegisterSqlFssLatency(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Inserts or sets a placeholder row in the SqlFssLatency table
            </summary>
            <param name="DeploymentUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllServerRoles">
            <summary>
            Get all the Cluster
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServerRolesForDataServer(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all ServerRoles belonging to a DataServer
            </summary>
            <param name="DataServerUID">for DatatServer.DataServerUID column</param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllServerRolesForDataServer(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all server roles on a data server. Used during DataServer Update.
            </summary>
            <param name="DataServerUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllMonitoringDataForServerRole(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all monitored data and alert rules for a server role. Used during Server Role Mappings Update.
            </summary>
            <param name="ServerRoleUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRole(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int32@)">
            <summary>
            Insert or update a ServerRole
            </summary>
            <param name="ServerRoleUID">for [ServerRole].[ServerRoleUID] column</param>
            <param name="ServerRoleName">for [ServerRole].[ServerRoleName] column</param>
            <param name="ServerRoleDescription">for [ServerRole].[ServerRoleDescription] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterServerRole(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete from ServerRole table
            </summary>
            <param name="ServerRoleUID"></param>
            <param name="SiteWideServerTicket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterServerRoleForDataServer(System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a ServerRole
            </summary>
            <param name="DataServerUID">for [ServerRoleDataServerMapping].[DataServerUID] column</param>
            <param name="ServerRoleName">for [ServerRoleDataServerMapping].[ServerRoleUID] column</param>
            <param name="Ticket">for [ServerRoleDataServerMapping].[Ticket] column</param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllSettings">
            <summary>
            Get all the Centralized Settings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterSetting(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="SettingName"></param>
            <param name="SettingValueType"></param>
            <param name="SettingDefaultValue"></param>
            <param name="SettingOverrideLevel"></param>
            <param name="isWebstoreSetting"></param>
            <param name="IsSettingFromFile"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateClientServerSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ClientServerUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateClusterSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ClusterUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateDeploymentSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="DeploymentUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateServerRoleSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="ServerRoleUid"></param>
            <param name="SettingValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveDeploymentSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the DeploymentSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="DeploymentUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveClusterSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ClusterSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="ClusterUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveServerRoleSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerRoleSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="ServerRoleUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRemoveClientServerSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="DataServerUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             removes the the setting from the ServerSetting table.
            </summary>
            <param name="SettingUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateGlobalSetting(System.Data.SqlTypes.SqlGuid,System.String,System.Int16,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="SettingValue"></param>
            <param name="IsResetValue"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspResetGlobalSetting(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Get all the filegroups and files information
            </summary>
            <param name="SettingUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataSetOfFileGroupsAndLogicalFiles(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get the FileGroups and LogicalFiles information
            </summary>
            <param name="DatabaseTemplateUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSqlFailSafeSetWitnessServer(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Update the MainfestUID of the Sql Fail Safe Set
             DeploymentUID is passed in because we need to row lock the deployment table first.
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFSSNum"></param>
            <param name="WitnessServerUid"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetMirroringTimeout(System.String)">
            <summary>
            Compare wmo version and return config version
            </summary>
            <param name="DeploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDeploymentAndInUseObjects(System.Data.SqlTypes.SqlGuid)">
            <summary>
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAction(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Action (used in Self healing)
            </summary>
            <param name="ActionUID"></param>
            <param name="Name"></param>
            <param name="Type"></param>
            <param name="Description"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete an Action
            </summary>
            <param name="ActionUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropAllActionProperties(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all properties for an Action. Used prior to the registration of an action.
            </summary>
            <param name="ActionUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterActionProperty(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a ActionProperty (used in Self healing)
            </summary>
            <param name="ActionUID"></param>
            <param name="Name"></param>
            <param name="DataType"></param>
            <param name="Value"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAction">
            <summary>
             Return all rows in the Action table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterAlertProcess(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a AlertProcess (used in Self healing)
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Name"></param>
            <param name="Description"></param>
            <param name="StartActionId"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAlertProcess(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Delete an AlertProcess
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllAlertProcess">
            <summary>
             Return all rows in the AlertProcess table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterProcessAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.String,System.String,System.String,System.String,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Insert or update a Action (used in Self healing)
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="ActionUID"></param>
            <param name="Id"></param>
            <param name="OnProceedId"></param>
            <param name="OnFailureId"></param>
            <param name="OnResolveId"></param>
            <param name="ActionRetryCount"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetProcessAction">
            <summary>
             Return all rows in the ProcessAction table
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterAllProcessAction(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
             Delete all ProcessActions under an AlertProcess. Called as part of
             deleting or updating the AlertProcess. It should not be called directly.
            </summary>
            <param name="AlertProcessUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterJob(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int16,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="DOP"></param>
            <param name="batch"></param>
            <param name="location"></param>
            <param name="machineClass"></param>
            <param name="nMachines"></param>
            <param name="assemblyName"></param>
            <param name="version"></param>
            <param name="partitionSetType"></param>
            <param name="partitionSetTarget"></param>
            <param name="arguments"></param>
            <param name="numRetries"></param>
            <param name="retryInterval"></param>
            <param name="isDisabled"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterJobSchedule(System.String,System.Int32,System.Int32,System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <param name="schedulePriority"></param>
            <param name="startDate"></param>
            <param name="startTime"></param>
            <param name="scheduleType"></param>
            <param name="reccurenceType"></param>
            <param name="occursOn"></param>
            <param name="maxScheduleDelta"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropJob(System.String,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspDropJobSchedule(System.String,System.Int32,System.Int32@)">
            <summary>
            Get all the Centralized Settings
            </summary>
            <param name="jobName"></param>
            <param name="scheduleNumber"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllJobFrameworkJobs">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUpdateSQLFailSafeSetSyncMirroring(System.Data.SqlTypes.SqlGuid,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            </summary>
            <param name="DeploymentUid"></param>
            <param name="SQLFailSafeSetID"></param>
            <param name="DBUid"></param>
            <param name="ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllDataCenters">
            <summary>
            Get all DataCenters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetServersForDataCenter(System.String)">
            <summary>
            Get all the dataservers belonging to a DataCenter
            </summary>
            <param name="DataCenterName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterDataCenter(System.String,System.String,System.Int32@)">
            <summary>
            Register a DataCenter
            </summary>
            <param name="DataCenterName"></param>
            <param name="Description"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetDataCenter(System.String)">
            <summary>
            Get a specific DataCenter
            </summary>
            <param name="DataCenterName"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspUnregisterDataCenter(System.String,System.Int32@)">
            <summary>
            Purge from the DataCenter table if it is no longer in use.
            </summary>
            <param name="DataCenterName"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspGetAllGeoPartners(System.Data.SqlTypes.SqlGuid)">
            <summary>
            Get all GeoPartners
            </summary>
            <param name="DeploymentUID"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspRegisterGeoPartner(System.Data.SqlTypes.SqlGuid,System.String,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Register a GeoPartner
             NOTE: When this sproc is called, the ticket value used must also be used for the SQL FSS.
             We currently do not have seperate eventing for the GeoPartner. GeoPartner changes will
             be seen as a SqlFss change.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="DataCenterName"></param>
            <param name="SQLFSSNum"></param>
            <param name="GeoPartnerDBUID"></param>
            <param name="DefaultGeoPartnerDBUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
        <member name="M:Microsoft.Webstore.Management.Wmo.WMOSprocs.WspMoveGeoPartner(System.Data.SqlTypes.SqlGuid,System.String,System.String,System.Int16,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlDateTime,System.Int32@)">
            <summary>
            Move a GeoPartner from one datacenter to another.
            </summary>
            <param name="DeploymentUID"></param>
            <param name="OldDataCenterName"></param>
            <param name="NewDataCenterName"></param>
            <param name="SQLFSSNum"></param>
            <param name="GeoPartnerDBUID"></param>
            <param name="DefaultGeoPartnerDBUID"></param>
            <param name="Ticket"></param>
            <param name="retVal"></param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstCollectorJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstCollectorJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetQueueItemsByServer(System.String)">
            <summary>
            Gets the active queue items for a particular server.
            UT NOTE: This is tests in QueueItemSet tests.
            </summary>
            <param name="serverName">name of the server to retrieve queue items for</param>
            <returns>a set of queue items</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.HeartBeat(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Updates the heartbeat on a particular QueueItem.
            </summary>
            <param name="item">item to update heartbeat on</param>
            <returns>true if heartbeating was successful, false otherwise (means the item has been cancelled or claimed by another server)</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetDeploymentRecord(System.Guid)">
            <summary>
            Retrieves a DeploymentRecord for a given deployment GUID.
            UT NOTE: tested as part of DeploymentRecord tests
            </summary>
            <param name="deploymentUID">deployment guid to retrieve</param>
            <returns>DeploymentRecord</returns>
            <exception cref="T:System.Data.DataException">if deploymentUID does not match a deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.ArgumentNullException">if SPROCText for any sprocs are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CreateNewQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.DateTime,System.String)">
            <summary>
            Attempts to create a new queue item.  If it fails (due to constraint violations)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="expires">expiration date of this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if a new queue item could be created</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.ArgumentException">if expires is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.String)">
            <summary>
            Attempts to reclaim a reset queue item.  If it fails (due to race conditions)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if the queue item could be reclaimed</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.RestoreQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem,System.Int32,System.String)">
            <summary>
            Attempts to move a backup from the "waiting for restore" state to the "restoring" state.
            Might fail due to race condition (many restore jobs all running at same time on same
            server), in which case it will return false.
            </summary>
            <param name="itemToRestore">QueueItem to switch to restoring state</param>
            <param name="restoreJobId">id of this restore job</param>
            <param name="restoredDatabaseName">name to use for the restored database</param>
            <returns>true if the queue item was transitioned by this job to restoring state, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if itemToRestore or restoredDatabaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item fails, handles reassigning / cancelling it in the database.
            </summary>
            <param name="item">item to cancel</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItemNoThrow(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Calls FailQueueItem but logs and swallows any exceptions.
            </summary>
            <param name="item">item to cancel</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FinishQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item finishes.
            </summary>
            <param name="item">item to finish</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CleanupQueue(System.DateTime)">
            <summary>
            Performs the routine per-iteration queue cleanup.  Fails anything that has
            a stale heartbeat and cancels anything that is expired.
            </summary>
            <param name="oldestValidHeartbeat">the time of the oldest valid heartbeat, in UTC</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetNewFSSBackups">
            <summary>
            Retrieves the list of available new FSSBackups (new backups are backups are non-reset backups).
            UT NOTE: Tested in FSSBAckupRecord Tests
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentNullException">on null values from database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetResetFSSBackups">
            <summary>
            Retrieves the list of available reset FSSBackups.
            UT NOTE: Tested in FSSBAckupRecord tests.
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentNullException">if any of the database fields are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetTransferringItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String)">
            <summary>
            Retrieves the QueueItem that is being transferred for a particular backup record
            and owner server.
            </summary>
            <param name="record">record that belongs to the queue item</param>
            <param name="ownerServer">server that owns the queue item</param>
            <returns>QueueItem if found, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if record or ownerServer are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateAllHeartbeats(System.String)">
            <summary>
            Updates the heartbeats of all items belonging to this server in the 
            "waiting for restore" state.
            </summary>
            <param name="ownerServer">server the items belong to</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateQueueState(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.QueueItem.State)">
            <summary>
            Updates the state of a queue item.
            </summary>
            <param name="item">item to update</param>
            <param name="newState">new state to assign to it</param>
            <returns>true if update succeeded</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentRecord">
            <summary>
            This class represents a deployment record in the WstBackup database.
            This includes things like the deploymentname and client name, the times
            during which a database can be pulled, and the times during which a database
            can be processed.  These records live in the "Deployment" table in WstBackup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.#ctor(System.Guid,System.String,System.String,System.DateTime,System.Int32,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="deploymentUid">DeploymentUID</param>
            <param name="deploymentName">name of this deployment</param>
            <param name="clientName">name of the client (partner) this deployment belongs to</param>
            <param name="pullStartTime">start time of a pull, must be in the past</param>
            <param name="pullDurationInMinutes">max duration of a pull window in minutes, &gt;0</param>
            <param name="processingStart">start time of any processing cycle, must be in the past</param>
            <param name="processingCycleLength">length of time for a processing cycle, must be &gt;0</param>
            <param name="processingCycleLengthUnits">units for length of time of a processing cycle</param>
            <param name="requiresReportingDb">whether or not this deployment requires a reporting DB</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:System.ArgumentException">if pullStartTime or processingStart occur in future</exception>
            <exception cref="T:System.ArgumentException">if pullDurationInMinutes or processingCycleLength are .lt. 1</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsPullTimeOkay(System.DateTime)">
            <summary>
            Checks to see if a given time is within a valid pull window.
            </summary>
            <param name="timeToCheck">time to check</param>
            <returns>true if the given time is during a valid pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetPullWindowEnd">
            <summary>
            Gets the time of the end of the most recent pull window.
            </summary>
            <returns>end of the most recent pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetCycleExpirationTime(System.DateTime,System.Int32)">
            <summary>
            Calculates the cycle expiration time based on any time.  If you want the expiration time
            for the cycle that someTime is in, use cyclesAfterCurrent == 0.  If you want the expiration
            time of cycle one after someTime is in, use cyclesAfterCurrent == 1, etc.
            </summary>
            <param name="someTime">time to calculate expiration for</param>
            <param name="cyclesAfterCurrent">number of cycles after the current to add</param>
            <returns>start of next cycle - 1 minute</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsInCycles(System.DateTime,System.Int32)">
            <summary>
            Checks to see if a given time is within a processing cycle window(s).  It will check
            the current processing window plus cyclesBeforeCurrent.
            </summary>
            <param name="timeToCheck">time to check</param>
            <param name="cyclesBeforeCurrent">number of cycles before the current to check</param>
            <returns>true if the given time is during a valid cycle window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleStartTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the start time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle beginning of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>start time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleEndTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the end time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle end of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>end time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CalcCycleSpan(System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Calculates the span of a cycle, given a length and units
            </summary>
            <param name="cycleLength"></param>
            <param name="cycleLengthUnits"></param>
            <returns>timespan of the cycle</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.AddSproc(Microsoft.Webstore.OfflineProcessing.DeploymentSproc)">
            <summary>
            Adds a sproc to the internal list.
            </summary>
            <param name="sproc">sproc to add</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.DeploymentUID">
            <summary>
            The GUID that uniquely identifies this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullStartTime">
            <summary>
            The start time (for a given day) of the time window during which it is
            okay to pull a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullDurationInMinutes">
            <summary>
            The duration of the time window each day during which it is okay to pull
            a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingStart">
            <summary>
            The start of any processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLength">
            <summary>
            The magnitude of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLengthUnits">
            <summary>
            The units of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.RequiresReportingDb">
            <summary>
            Whether or not processing of backups for this deployment requires the
            reporting DB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Sprocs">
            <summary>
            The sprocs configured for this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Name">
            <summary>
            The name of this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ClientName">
            <summary>
            The name of the client (aka partner) this deployment belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentSproc">
            <summary>
            This class represents a sproc (really a script) for a deployment.  Sprocs have
            a many to one relationship with deployments and are strongly ordered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deploymentUid">UID of the deployment this belongs to</param>
            <param name="commandText">commandText, can't be null</param>
            <exception cref="T:System.ArgumentNullException">if commandText is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.DeploymentUid">
            <summary>
            The UID of the deployment this sproc belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.CommandText">
            <summary>
            The command text to dump into a SqlCommand object for this sproc.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord">
            <summary>
            This class represents a backup record from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.#ctor(System.Guid,System.Int16,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor for FSSBackupRecord.
            </summary>
            <param name="deploymentUid">guid of the deployment that this record belongs to</param>
            <param name="sqlfssNum">FSSNum that this record belongs to</param>
            <param name="serverName">name of the server that contains the backup</param>
            <param name="serverShare">share on the server that contains the backup</param>
            <param name="created">date and time this backup record was created</param>
            <param name="finished">date and time this backup record was finished</param>
            <param name="backupSizeInMB">size of the backup record in MB</param>
            <param name="deploymentManifestVersion">deployment manifest version that generated this backup</param>
            <param name="usingLiteSpeed">whether or not this backup was created using LiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if serverName, serverShare, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.QueueItem">
            <summary>
            Contains the QueueItem that represents this FSSBackupRecord.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Deployment">
            <summary>
            Contains the deployment record that belongs to this FSSBackupRecord.
            Isn't guaranteed to be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentUID">
            <summary>
            Returns the deploymentUID that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.SQLFSSNum">
            <summary>
            Returns the FSSNum that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerName">
            <summary>
            The name of the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerShare">
            <summary>
            The share on the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Created">
            <summary>
            Returns the date this backup was Created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Finished">
            <summary>
            Returns the date this backup was finished.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.BackupSizeInMB">
            <summary>
            The size of this backup record in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentManifestVersion">
            <summary>
            The deployment manifest version that generated this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.UsingLiteSpeed">
            <summary>
            Whether or not this backup was created using SqlLiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem">
            <summary>
            Represents a long-running synchronous work item.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Run">
            <summary>
            Executes the work item, throws an exception if it fails.
            </summary>
            <returns>true if the job ran to completion, false if it was aborted (due to Cancel)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Cancel">
            <summary>
            Cancels the work item.  This will be called from a different thread
            than Run so it needs to be threadsafe.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker">
            <summary>
            This class implements a worker thread that performs periodic heartbeating.  It does
            the following:
            - execute a long-running synchronous operation on a background thread
            - periodically notify the calling thread that we are still alive (so it can heartbeat)
            - return status/success
            - provide a cancel method for the synchronous operation in the background thread
            - provide a timeout for the synchronous operation in the background thread
            
            Technically since we are using events we should implement IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.#ctor(System.Int64,System.DateTime,Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate,Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem)">
            <summary>
            Constructor for the HeartbeatingWorker.
            </summary>
            <param name="heartbeatIntervalInMS">interval in MS between heartbeats, minimum 1000</param>
            <param name="endTime">the time at which to end the background operation</param>
            <param name="heartbeatDelegate">delegate to call back whenever we heartbeat</param>
            <param name="workItem">item that implements the long-running synchronous work</param>
            <exception cref="T:System.ArgumentException">if heartbeatIntervalInMS is less than 1000</exception>
            <exception cref="T:System.ArgumentException">if endTime is in the past</exception>
            <exception cref="T:System.ArgumentNullException">if heartbeatDelegate or workItem are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Finalize">
            <summary>
            Finalizer, needs to call dispose.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatTimerCallback(System.Object)">
            <summary>
            The callback used by the timer to indicate that we need to do periodic processing.
            This is called from an anonymous background threadpool thread.
            </summary>
            <param name="arg">ignored</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.CancelAbort">
            <summary>
            This is called to attempt cancelling and then aborting the thread.  Can only be
            called from the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Run">
            <summary>
            This runs the background synchronous worker and starts heartbeating.  When this
            returns the result of the operation can be determined by checking OperationResult
            and OperationException.
            
            Here are what the different status means:
             NotInitialized - something went wrong in this library, report the error to us
             Success - job ran to completion and all heartbeats occurred as expected
             Cancel - job expired or heartbeat delegate returned false and Cancel method worked correctly
             Abort - job expired or heartbeat delegate returned false and Cancel method didn't work (check OperationException)
             Exception - workItem.Run method generated an exception (check OperationException)          
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.ThreadStart">
            <summary>
            This method implements the background worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose">
            <summary>
            Tears down this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose(System.Boolean)">
            <summary>
            Tears down this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.EndTime">
            <summary>
            The time at which this copy operation should end.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatIntervalInMS">
            <summary>
            The heartbeat interval in MS to use.  When the thread is running a timer
            will be created with this interval and the HeartbeatEvent will be set
            everytime the timer goes off.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationResult">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationException">
            <summary>
            If an exception was generated, a copy of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate">
            <summary>
            This is called to perform heartbeating.  This will always be called in the context
            of the main thread.
            </summary>
            <returns>true if successful and loop should continue, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItem">
            <summary>
            This class represents a single backup record in the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItem.#ctor(System.Guid,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new QueueItem.
            </summary>
            <param name="deploymentUid">guid of the deployment this queue item belongs to</param>
            <param name="fssNum">fssNum this item belongs to</param>
            <param name="ownerServer">name of the server that owns this item</param>
            <param name="iterationNumber">FSS iteration number this item belongs to</param>
            <param name="currentState">current state of the queue item</param>
            <param name="failureCount">current failure count of the queue item</param>
            <param name="created">time this item was created in UTC</param>
            <param name="expires">time this item expires in UTC</param>
            <param name="lastHeartbeat">the last heartbeat time of this item</param>
            <param name="enqueueTime">the time this item was added to the active queue</param>
            <param name="path">path (if exists) to the backup file on OwnerServer</param>
            <param name="deploymentManifestVersion">deployment manifest version of the backup record this queue item is for</param>
            <param name="restoredDatabaseName">name of the restored database for this item</param>
            <param name="usingLiteSpeed">whether or not the backup for this queue item was made using SQLLiteSpeed</param>
            <param name="backupFinishDate">date and time the backup finished</param>
            <param name="backupServer">server the backup was created on</param>
            <param name="backupStartDate">date and time the backup started</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer, path, restoredDatabaseName, backupServer, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.RestoredDatabaseName">
            <summary>
            The name of the database once it has been restored by OP.  May be empty if it hasn't been restored
            yet.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentManifestVersion">
            <summary>
            The deployment manifest version of the backup record this queue item is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Path">
            <summary>
            The path to the backup file on the offline processing server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentUid">
            <summary>
            The DeploymentUID of the deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FSSNum">
            <summary>
            The SQLFSSNum of the FSS/deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.OwnerServer">
            <summary>
            The name of the server that currently owns this queue item, can be empty if not owned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.IterationNumber">
            <summary>
            The iteration number, within this FSS/Deployment, of this queue item.  This
            is to enforce the uniqueness constraint that only a single queue item can
            exist at any time for a given FSS/Deployment pair.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FailureCount">
            <summary>
            The number of times this queue item has been failed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.CurrentState">
            <summary>
            The current state of this QueueItem.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Created">
            <summary>
            The time this queue item was created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Expires">
            <summary>
            The time this queue item expires (can be in the past if it already expired).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.LastHeartBeat">
            <summary>
            The time this queue item was last heartbeated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.EnqueueTime">
            <summary>
            The time this queue item was last put into the queue (or bumped to the back
            if it was failed).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.UsingLiteSpeed">
            <summary>
            Whether or not the backup for this item was made using Lite Speed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupServer">
            <summary>
            The server that generated the backup belonging to this queue item.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupStartDate">
            <summary>
            The time the backup was started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupFinishDate">
            <summary>
            The time the backup for this queue item was finished.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItemSet">
            <summary>
            This class represents a set of backup records from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.QueueItem})">
            <summary>
            Constructor which takes an enumeration of records.
            </summary>
            <param name="newRecords">enumeration of records to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Constructor which takes a single record.
            </summary>
            <param name="newRecord">single record to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByServer(System.String,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the set of all backup records in WstBackup database for a given server.
            </summary>
            <param name="serverName">name of the server to retrieve QueueItems for</param>
            <param name="backupDb">backup database to use for retrieving the recordset</param>
            <returns>a set of QueueItems that are active on that server</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByPath(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular filepath.
            </summary>
            <param name="filePath">path of item to retrieve</param>
            <returns>QueueItem that belongs to that filePath, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByRestoredDatabaseName(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular restored database name.
            </summary>
            <param name="dbName">database name of the item to retrieve</param>
            <returns>QueueItem that belongs to the restored database name, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByPath">
            <summary>
            Retrieves the items in the set, indexed by path.
            </summary>
            <returns>the items in this set, indexed by path</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByRestoredDbName">
            <summary>
            Retrieves the items in the set, indexed by restored Db name.
            </summary>
            <returns>the items in this set, indexed by restored db name</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Count">
            <summary>
            Number of records in this set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Item(System.Int32)">
            <summary>
            Indexor for the set.
            </summary>
            <param name="i">0-based index into the array</param>
            <returns>requested item in the array</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml">
            <summary>
            This class implements round-tripping to and from XML for collector job arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.#ctor">
            <summary>
            Creates a new object with default arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.CreateFromXML(System.String,System.String)">
            <summary>
            This method parses a string containing xml conforming to CollectorJobArgumentsSchema.xsd
            and returns a new CollectorJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <param name="schema">string containing the XSD schema</param>
            <returns>newly created CollectorJobArgumentsXml from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or schema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.BackupPath">
            <summary>
            The path where pulled backups should be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.Xml">
            <summary>
            Converts the current arguments into valid XML.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller">
            <summary>
            Category installer for the CommonJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobEvents">
            <summary>
            Events in the CommonJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlErrorValue">
            <summary>
            EventDefinition for SqlError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstErrorValue">
            <summary>
            EventDefinition for WstError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String)">
            <summary>
            Method to log an event of type WstError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseErrorValue">
            <summary>
            EventDefinition for DatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatErrorValue">
            <summary>
            EventDefinition for HeartbeatError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String)">
            <summary>
            Method to log an event of type HeartbeatError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HeartbeatError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentErrorValue">
            <summary>
            EventDefinition for GetDeploymentError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String)">
            <summary>
            Method to log an event of type GetDeploymentError.
            </summary>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetDeploymentError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemErrorValue">
            <summary>
            EventDefinition for CreateNewQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type CreateNewQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CreateNewQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemErrorValue">
            <summary>
            EventDefinition for GetTransferringItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type GetTransferringItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetTransferringItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemErrorValue">
            <summary>
            EventDefinition for ReclaimQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type ReclaimQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ReclaimQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsErrorValue">
            <summary>
            EventDefinition for UpdateAllHeartbeatsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateErrorValue">
            <summary>
            EventDefinition for UpdateQueueStateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type UpdateQueueStateError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateQueueStateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemErrorValue">
            <summary>
            EventDefinition for FailQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FailQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FailQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemErrorValue">
            <summary>
            EventDefinition for RestoreQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type RestoreQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemErrorValue">
            <summary>
            EventDefinition for FinishQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FinishQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FinishQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlError">
            <summary>
              Gets the EventDefinition for the SqlError.
            </summary>
            <value>The EventDefinition for the SqlError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstError">
            <summary>
              Gets the EventDefinition for the WstError.
            </summary>
            <value>The EventDefinition for the WstError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseError">
            <summary>
              Gets the EventDefinition for the DatabaseError.
            </summary>
            <value>The EventDefinition for the DatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatError">
            <summary>
              Gets the EventDefinition for the HeartbeatError.
            </summary>
            <value>The EventDefinition for the HeartbeatError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentError">
            <summary>
              Gets the EventDefinition for the GetDeploymentError.
            </summary>
            <value>The EventDefinition for the GetDeploymentError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemError">
            <summary>
              Gets the EventDefinition for the CreateNewQueueItemError.
            </summary>
            <value>The EventDefinition for the CreateNewQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemError">
            <summary>
              Gets the EventDefinition for the GetTransferringItemError.
            </summary>
            <value>The EventDefinition for the GetTransferringItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemError">
            <summary>
              Gets the EventDefinition for the ReclaimQueueItemError.
            </summary>
            <value>The EventDefinition for the ReclaimQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsError">
            <summary>
              Gets the EventDefinition for the UpdateAllHeartbeatsError.
            </summary>
            <value>The EventDefinition for the UpdateAllHeartbeatsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateError">
            <summary>
              Gets the EventDefinition for the UpdateQueueStateError.
            </summary>
            <value>The EventDefinition for the UpdateQueueStateError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemError">
            <summary>
              Gets the EventDefinition for the FailQueueItemError.
            </summary>
            <value>The EventDefinition for the FailQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemError">
            <summary>
              Gets the EventDefinition for the RestoreQueueItemError.
            </summary>
            <value>The EventDefinition for the RestoreQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemError">
            <summary>
              Gets the EventDefinition for the FinishQueueItemError.
            </summary>
            <value>The EventDefinition for the FinishQueueItemError</value>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FileCopyWorker">
            <summary>
            This class implements the file copy worker.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.#ctor(System.String,System.String)">
            <summary>
            Constructor for the FileCopyWorker.
            </summary>
            <param name="copySource">source file and path</param>
            <param name="copyTarget">target file and path</param>
            <exception cref="T:System.ArgumentNullException">if copySource or copyTarget are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.Run">
            <summary>
            Performs the file copy.
            </summary>
            <returns>true, always</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.Cancel">
            <summary>
            doesn't do anything, we can't cancel a copy
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.CopySource">
            <summary>
            The source path of the file to copy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.CopyTarget">
            <summary>
            The target path to copy the file to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstCollectorJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing collector job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstCollectorJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing collector job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstCollectorJob.ValidateArgs(System.String)">
            <summary>
            All we do is make sure the CollectorJobArguments can be created.  We don't
            validate the path at this stage because we are the coordinator and who
            knows if the path will be valid on the worker machines?
            </summary>
            <param name="userArgs">arguments conforming to CollectorJobArgumentsSchema.xsd</param>
            <exception cref="T:System.Xml.XmlException">if userArgs cannot be validated or are missing components</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments">
            <summary>
            This class represents the arguments passed to the collector job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to CollectorJobArgumentsSchema.xsd
            and returns a new CollectorJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml is null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments.BackupPath">
            <summary>
            The path where pulled backups should be stored.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.CollectorJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;CollectorJobArguments&quot;
                targetNamespace=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;BackupJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for backup job settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:co [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Creates a new job worker from xml arguments.
            </summary>
            <param name="xmlArgs">arguments in xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobWorker</returns>
            <exception cref="T:System.Xml.XmlException">if xml fails to validate</exception>
            <exception cref="T:System.ArgumentNullException">if xmlArgs is null</exception>
            <exception cref="T:System.IO.IOException">if backup directory cannot be created</exception>
            <exception cref="T:System.NotSupportedException">if backup directory is not a recognizable path</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.#ctor(System.String)">
            <summary>
            Internal constructor, instead use CreateFromXmlArguments since that performs validation.
            </summary>
            <param name="backupPath">path for this worker to use, can't be null</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.DoIteration(System.Boolean)">
            <summary>
            Performs one iteration of the service.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the number of milliseconds that the job should sleep between iterations.
            </summary>
            <returns>number of milliseconds the job should sleep between iterations</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateCopyWorker(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Creates a FileCopyWorker and populates it with all the appropriate values.
            </summary>
            <param name="record">record to use for creating the copy worker</param>
            <returns>newly created FileCopyWorker</returns>
            <exception cref="T:System.ArgumentNullException">if record or record.Deployment are null</exception>
            <exception cref="T:System.ArgumentException">if heartbeat interval is less than 1</exception>
            <exception cref="T:System.ArgumentException">if calculated pull window enddTime is in the past</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ClaimNewBackup(Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the next available backup record that a queue item can
            be created for, creates the queue item, and returns success/failure.
            If successful stores the backup record to pull in backupToPull and stores
            the deployment it belongs to in deploymentToPull.
            </summary>
            <param name="db">database to use</param>
            <returns>null if couldn't be claimed, FSSBackupRecord otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if db is null</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.Data.DataException">if record does not have a matching deployment in the database</exception>
            <exception cref="T:System.Data.DataException">if newly created queue item cannot immediately be requeried</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.HaveEnoughDiskSpace(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates whether or not we have enough disk space to pull a backup record.
            </summary>
            <param name="record">record to use for disk space calculations</param>
            <returns>true if we probably have enough disk space for this record</returns>
            <exception cref="T:System.ArgumentNullException">if record is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetAndValidateDeployment(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to retrieve the DeploymentRecord for a backup, and validates that it is
            appropriate to pull the backup (the backup is within the current cycle and the current
            time is within the deployment pulling window).  If success it stores the
            deployment record in record.Deployment and returns true.
            </summary>
            <param name="record">record to check</param>
            <param name="db">db to use for retrieving deployment info</param>
            <returns>true if it was possible to get and validate the deployment record</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null</exception>
            <exception cref="T:System.Data.DataException">if record does not have a matching deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CalculateQueueItemExpiration(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates the expiration time for a new queue item based on a backup record.
            The reason this is tricky is because we accept backup records from the current
            cycle or the previous cycle.  So what we need to first try taking the end time
            of the previous cycle and see if that is in the past, and if so try taking
            the end time of the current cycle.
            </summary>
            <param name="record">backup record to try creating queue item for</param>
            <returns>expiration time for the new queue item</returns>
            <exception cref="T:System.ArgumentNullException">if record is null, or record.Deployment</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to create a new QueueItem for a backup record.  Might fail
            if some other collector beat us to it.
            </summary>
            <param name="record">backup record to try creating queue item for</param>
            <param name="db">db to use for creating the new queue item</param>
            <returns>null if someone beat us to it</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null, or record.Deployment</exception>
            <exception cref="T:System.ArgumentException">if calculated expiration date is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
            <exception cref="T:System.Data.DataException">if the newly created queueitem can't be immediately queried</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to reclaim an existing reset QueueItem for a backup record.  Might fail
            if some other collector beat us to it.
            </summary>
            <param name="record">backup record to reclaiming queue item for</param>
            <param name="db">db to use for reclaiming the new queue item</param>
            <returns>null if someone beat us to it</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null, or record.Deployment</exception>
            <exception cref="T:System.Data.DataException">if we are not able to query the newly reclaimed queue item</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetPathFromRecord(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates the path on local disk for a file that a given backup record
            will be copied to.
            </summary>
            <param name="record">record</param>
            <returns>full path on local disk</returns>
            <exception cref="T:System.ArgumentNullException">if record is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ClaimResetBackup(Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the next available reset backup record that a queue item can
            be created for, claims the queue item, and returns a result code.
            </summary>
            <param name="db">database to use</param>
            <returns>a backup record if one could be claimed, null otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.UpdateOnDiskBackup(System.String,Microsoft.Webstore.OfflineProcessing.QueueItemSet,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs the once-per-iteration processing on an on-disk backup.  This consists of checking
            to see if the backup should still be around (if it exists in the queue in a non-restored state)
            and heartbeating it if necessary.  Increments restoreWaitingCount for each backup that is
            valid and waiting for restore.
            </summary>
            <param name="backupItem">path to the backup to update</param>
            <param name="ourItems">collection of all active queue items for our service</param>
            <param name="backupDb">backup database to use for heartbeating, if needed</param>
            <exception cref="T:System.ArgumentNullException">if backupItem, ourItems, or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.FindBackupsForPath(System.String)">
            <summary>
            Finds all of the backup files in a particular path.
            We don't use nested sub-directories, to keep things simple.  So
            this really only searches the path name passed in and none of its
            sub-paths.  Additionally, we only look for *.bak as backup files.
            </summary>
            <param name="backupPath">path to find files in</param>
            <returns>list of discovered backup files</returns>
            <exception cref="T:System.ArgumentNullException">if backupPath is null</exception>
            <exception cref="T:System.ArgumentException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.Security.SecurityException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.IO.PathTooLongException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">from DirectoryInfo.GetFiles</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.IsReportingDbInstalled">
            <summary>
            Determines whether or not the reporting DB infrastructure is installed and working
            on this server.
            </summary>
            <returns>true if reporting DB is installed, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.BackupPath">
            <summary>
            Retrieves the backup path as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.MaxWaitingForRestore">
            <summary>
            Maximum number of backups on disk that can be in the state "waiting for restore".
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.HeartbeatIntervalInMinutes">
            <summary>
            Interval in minutes between heartbeating items we own.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.MaxMissedHeartbeats">
            <summary>
            Maximum number of missed heartbeats before an item gets cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.WaitingForRestoreCount">
            <summary>
            After an iteration, the number of backups on disk waiting for restore.
            Only exposed for testing purposes, otherwise its an internal.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.FreeSpaceCalc">
            <summary>
            The FreeSpaceCalculator used for calculating free space.  The only reason
            we expose this as a property is to allow us to provide a mock for it in
            the unit tests, because it is notoriously difficult to create low-space conditions
            for unit tests and have everything work correctly.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Heartbeater">
            <summary>
            This class is used for heartbeating during a long synchronous copy operation.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Constructor
            </summary>
            <param name="itemToHeartbeat">queue item we are copying that needs to be heartbeated</param>
            <param name="backupDb">database to heartbeat</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.DoHeartbeat">
            <summary>
            This method performs the heartbeat.
            </summary>
            <returns>true if heartbeating succeeded</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobCategoryInstaller">
            <summary>
            Category installer for the CollectorJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents">
            <summary>
            Events in the CollectorJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LiteSpeedBackupSkippedValue">
            <summary>
            EventDefinition for LiteSpeedBackupSkipped
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogLiteSpeedBackupSkipped(System.String)">
            <summary>
            Method to log an event of type LiteSpeedBackupSkipped.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogLiteSpeedBackupSkipped(System.String,System.Exception)">
            <summary>
            Method to log an event of type LiteSpeedBackupSkipped with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ReportingBackupSkippedValue">
            <summary>
            EventDefinition for ReportingBackupSkipped
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogReportingBackupSkipped(System.String)">
            <summary>
            Method to log an event of type ReportingBackupSkipped.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogReportingBackupSkipped(System.String,System.Exception)">
            <summary>
            Method to log an event of type ReportingBackupSkipped with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ServerNotInMetaDataValue">
            <summary>
            EventDefinition for ServerNotInMetaData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogServerNotInMetaData(System.String)">
            <summary>
            Method to log an event of type ServerNotInMetaData.
            </summary>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogServerNotInMetaData(System.String,System.Exception)">
            <summary>
            Method to log an event of type ServerNotInMetaData with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.FileDeleteErrorValue">
            <summary>
            EventDefinition for FileDeleteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogFileDeleteError(System.String,System.String)">
            <summary>
            Method to log an event of type FileDeleteError.
            </summary>
            <param name="file">Argument file for formatting the event text.</param>
            <param name="ex">Argument ex for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogFileDeleteError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FileDeleteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="file">Argument file for formatting the event text.</param>
            <param name="ex">Argument ex for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LiteSpeedBackupSkipped">
            <summary>
              Gets the EventDefinition for the LiteSpeedBackupSkipped.
            </summary>
            <value>The EventDefinition for the LiteSpeedBackupSkipped</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ReportingBackupSkipped">
            <summary>
              Gets the EventDefinition for the ReportingBackupSkipped.
            </summary>
            <value>The EventDefinition for the ReportingBackupSkipped</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ServerNotInMetaData">
            <summary>
              Gets the EventDefinition for the ServerNotInMetaData.
            </summary>
            <value>The EventDefinition for the ServerNotInMetaData</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.FileDeleteError">
            <summary>
              Gets the EventDefinition for the FileDeleteError.
            </summary>
            <value>The EventDefinition for the FileDeleteError</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstCustomScriptJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstCustomScriptJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobWorker">
            <summary>
            Class to execute Custom Script jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobCategoryInstaller">
            <summary>
            Category installer for the WstCustomScriptJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobEvents">
            <summary>
            Events in the CustomScriptJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecuteErrorValue">
            <summary>
            EventDefinition for CustomScriptExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecuteError(System.String)">
            <summary>
            Method to log an event of type CustomScriptExecuteError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecuteError(System.String,System.Exception)">
            <summary>
            Method to log an event of type CustomScriptExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.ArgumentsErrorValue">
            <summary>
            EventDefinition for ArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogArgumentsError(System.String)">
            <summary>
            Method to log an event of type ArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type ArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.RecordExceptionValue">
            <summary>
            EventDefinition for RecordException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogRecordException(System.String)">
            <summary>
            Method to log an event of type RecordException.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogRecordException(System.String,System.Exception)">
            <summary>
            Method to log an event of type RecordException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecutionFailureValue">
            <summary>
            EventDefinition for CustomScriptExecutionFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecutionFailure(System.Int32,System.Int32)">
            <summary>
            Method to log an event of type CustomScriptExecutionFailure.
            </summary>
            <param name="exitCode">Argument exitCode for formatting the event text.</param>
            <param name="successCode">Argument successCode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecutionFailure(System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type CustomScriptExecutionFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exitCode">Argument exitCode for formatting the event text.</param>
            <param name="successCode">Argument successCode for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecuteError">
            <summary>
              Gets the EventDefinition for the CustomScriptExecuteError.
            </summary>
            <value>The EventDefinition for the CustomScriptExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.ArgumentsError">
            <summary>
              Gets the EventDefinition for the ArgumentsError.
            </summary>
            <value>The EventDefinition for the ArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.RecordException">
            <summary>
              Gets the EventDefinition for the RecordException.
            </summary>
            <value>The EventDefinition for the RecordException</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecutionFailure">
            <summary>
              Gets the EventDefinition for the CustomScriptExecutionFailure.
            </summary>
            <value>The EventDefinition for the CustomScriptExecutionFailure</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstJobFrameworkManager.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkManager</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobEngine.JobServiceBase">
            <summary>
            Service provides a mechanism for ensuring that we have one and only instance
            of a service running among a group of machines
            We install and run the service on all the machines but only the one which has its name
            in the serviceTG will run
            At startup, they will look for the entry which has the right Service ID (a GUID) and that is
            either expired (lease_expiration) or unassigned (machine null)
            They will try to update such entry with the local machine name. Only one will succeed
            Then they query the table and check that they are the winner before proceeding further
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Service.OnStart(System.String[])">
            <summary>
            Set things in motion so your service can do its work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Service.OnStop">
            <summary>
            Stop this service.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkManagerCategoryInstaller">
            <summary>
            Category installer for the WstJobFrameworkManager event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents">
            <summary>
            Events in the JobFrameworkManager module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.ScheduleJobFailureValue">
            <summary>
            EventDefinition for ScheduleJobFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogScheduleJobFailure(System.String,System.String)">
            <summary>
            Method to log an event of type ScheduleJobFailure.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="exceptionString">Argument exceptionString for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogScheduleJobFailure(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScheduleJobFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="exceptionString">Argument exceptionString for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.UpdateLeaseFailureValue">
            <summary>
            EventDefinition for UpdateLeaseFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogUpdateLeaseFailure">
            <summary>
            Method to log an event of type UpdateLeaseFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogUpdateLeaseFailure(System.Exception)">
            <summary>
            Method to log an event of type UpdateLeaseFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.TryBecomeJobManagerFailureValue">
            <summary>
            EventDefinition for TryBecomeJobManagerFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogTryBecomeJobManagerFailure(System.String)">
            <summary>
            Method to log an event of type TryBecomeJobManagerFailure.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogTryBecomeJobManagerFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type TryBecomeJobManagerFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobStatusUpdateFailed">
            <summary>
            Method to log an event of type JobStatusUpdateFailed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobStatusUpdateFailed(System.Exception)">
            <summary>
            Method to log an event of type JobStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobFrameworkCoordinatorThreadFailureValue">
            <summary>
            EventDefinition for JobFrameworkCoordinatorThreadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobFrameworkCoordinatorThreadFailure">
            <summary>
            Method to log an event of type JobFrameworkCoordinatorThreadFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobFrameworkCoordinatorThreadFailure(System.Exception)">
            <summary>
            Method to log an event of type JobFrameworkCoordinatorThreadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobCoordinatorExtractionFailedValue">
            <summary>
            EventDefinition for JobCoordinatorExtractionFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobCoordinatorExtractionFailed">
            <summary>
            Method to log an event of type JobCoordinatorExtractionFailed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogJobCoordinatorExtractionFailed(System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorExtractionFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.CoordinatorAssemblyInfoReadFailureValue">
            <summary>
            EventDefinition for CoordinatorAssemblyInfoReadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogCoordinatorAssemblyInfoReadFailure(System.String)">
            <summary>
            Method to log an event of type CoordinatorAssemblyInfoReadFailure.
            </summary>
            <param name="jcFullName">Argument jcFullName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.LogCoordinatorAssemblyInfoReadFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type CoordinatorAssemblyInfoReadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jcFullName">Argument jcFullName for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.ScheduleJobFailure">
            <summary>
              Gets the EventDefinition for the ScheduleJobFailure.
            </summary>
            <value>The EventDefinition for the ScheduleJobFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.UpdateLeaseFailure">
            <summary>
              Gets the EventDefinition for the UpdateLeaseFailure.
            </summary>
            <value>The EventDefinition for the UpdateLeaseFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.TryBecomeJobManagerFailure">
            <summary>
              Gets the EventDefinition for the TryBecomeJobManagerFailure.
            </summary>
            <value>The EventDefinition for the TryBecomeJobManagerFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobFrameworkCoordinatorThreadFailure">
            <summary>
              Gets the EventDefinition for the JobFrameworkCoordinatorThreadFailure.
            </summary>
            <value>The EventDefinition for the JobFrameworkCoordinatorThreadFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.JobCoordinatorExtractionFailed">
            <summary>
              Gets the EventDefinition for the JobCoordinatorExtractionFailed.
            </summary>
            <value>The EventDefinition for the JobCoordinatorExtractionFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkManagerEvents.CoordinatorAssemblyInfoReadFailure">
            <summary>
              Gets the EventDefinition for the CoordinatorAssemblyInfoReadFailure.
            </summary>
            <value>The EventDefinition for the CoordinatorAssemblyInfoReadFailure</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstJobFrameworkAgent.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkAgent</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProxy">
            <summary>
            The JobStepProxy is the jobstep from the agent app domain that we can return to the client through
            remoting. It forwards all call to the JobStep from the job appdomain. This allows us to have a single
            network sink.
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProxy.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Allows the Job Agent to add new partitions if it notices that there is
            currently a worker running of the same type.
            It is a performance optimization.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProxy.AcceptAdd">
            <summary>
            If true, the Job Agent is allowed to pass in new partitions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Create the ASyncExecuteBatch that will host the worker in the Job Agent machine
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.SendMessage(System.String,System.String)">
            <summary>
            A message was sent to us via the WstJobFrameworkManager.  We need to store it, so that workers
            can utilize it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.InitializeLifetimeService">
            <summary>
            Make the JobAgent lease eternal so that JobAgent doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.AddWorkItemToExpiredList(Microsoft.Webstore.JobEngine.JobAgentWorkItem)">
            <summary>
            This puts the work item into one of the expired list and writes info to the event log.
            </summary>
            <param name="jaWorkItem">the item to be expired.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgent.IsListenerInitialized">
            <summary>
            Has the listner for commands been initialized?
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentService.OnStart(System.String[])">
            <summary>
            Set things in motion so your service can do its work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentService.OnStop">
            <summary>
            Stop this service.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkAgentCategoryInstaller">
            <summary>
            Category installer for the WstJobFrameworkAgent event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents">
            <summary>
            Events in the JobFrameworkAgent module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobFrameworkStartupFailureValue">
            <summary>
            EventDefinition for JobFrameworkStartupFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobFrameworkStartupFailure(System.String)">
            <summary>
            Method to log an event of type JobFrameworkStartupFailure.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobFrameworkStartupFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobFrameworkStartupFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobEngineHeartBeatFailureValue">
            <summary>
            EventDefinition for JobEngineHeartBeatFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobEngineHeartBeatFailure(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobEngineHeartBeatFailure.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobEngineHeartBeatFailure(System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobEngineHeartBeatFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.CreateNewJobStepFailureValue">
            <summary>
            EventDefinition for CreateNewJobStepFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogCreateNewJobStepFailure(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Method to log an event of type CreateNewJobStepFailure.
            </summary>
            <param name="assemblyName">Argument assemblyName for formatting the event text.</param>
            <param name="Version">Argument Version for formatting the event text.</param>
            <param name="jobStepFullName">Argument jobStepFullName for formatting the event text.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogCreateNewJobStepFailure(System.String,System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Method to log an event of type CreateNewJobStepFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="assemblyName">Argument assemblyName for formatting the event text.</param>
            <param name="Version">Argument Version for formatting the event text.</param>
            <param name="jobStepFullName">Argument jobStepFullName for formatting the event text.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.HeartBeatThreadFailureValue">
            <summary>
            EventDefinition for HeartBeatThreadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogHeartBeatThreadFailure">
            <summary>
            Method to log an event of type HeartBeatThreadFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogHeartBeatThreadFailure(System.Exception)">
            <summary>
            Method to log an event of type HeartBeatThreadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.AppDomainUnloadErrorValue">
            <summary>
            EventDefinition for AppDomainUnloadError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogAppDomainUnloadError(System.Boolean)">
            <summary>
            Method to log an event of type AppDomainUnloadError.
            </summary>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogAppDomainUnloadError(System.Boolean,System.Exception)">
            <summary>
            Method to log an event of type AppDomainUnloadError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountDecrementValue">
            <summary>
            EventDefinition for JobAgentHeartbeatFailureCountDecrement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountDecrement(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountDecrement.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountDecrement(System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountDecrement with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountResetValue">
            <summary>
            EventDefinition for JobAgentHeartbeatFailureCountReset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountReset(System.Int32,System.Int32,System.String)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountReset.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountReset(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountReset with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentExpiredWorkItemValue">
            <summary>
            EventDefinition for JobAgentExpiredWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentExpiredWorkItem(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type JobAgentExpiredWorkItem.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="safeMode">Argument safeMode for formatting the event text.</param>
            <param name="numberHBFailures">Argument numberHBFailures for formatting the event text.</param>
            <param name="numberHBFailuresMax">Argument numberHBFailuresMax for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentExpiredWorkItem(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobAgentExpiredWorkItem with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="safeMode">Argument safeMode for formatting the event text.</param>
            <param name="numberHBFailures">Argument numberHBFailures for formatting the event text.</param>
            <param name="numberHBFailuresMax">Argument numberHBFailuresMax for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobFrameworkStartupFailure">
            <summary>
              Gets the EventDefinition for the JobFrameworkStartupFailure.
            </summary>
            <value>The EventDefinition for the JobFrameworkStartupFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobEngineHeartBeatFailure">
            <summary>
              Gets the EventDefinition for the JobEngineHeartBeatFailure.
            </summary>
            <value>The EventDefinition for the JobEngineHeartBeatFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.CreateNewJobStepFailure">
            <summary>
              Gets the EventDefinition for the CreateNewJobStepFailure.
            </summary>
            <value>The EventDefinition for the CreateNewJobStepFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.HeartBeatThreadFailure">
            <summary>
              Gets the EventDefinition for the HeartBeatThreadFailure.
            </summary>
            <value>The EventDefinition for the HeartBeatThreadFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.AppDomainUnloadError">
            <summary>
              Gets the EventDefinition for the AppDomainUnloadError.
            </summary>
            <value>The EventDefinition for the AppDomainUnloadError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountDecrement">
            <summary>
              Gets the EventDefinition for the JobAgentHeartbeatFailureCountDecrement.
            </summary>
            <value>The EventDefinition for the JobAgentHeartbeatFailureCountDecrement</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountReset">
            <summary>
              Gets the EventDefinition for the JobAgentHeartbeatFailureCountReset.
            </summary>
            <value>The EventDefinition for the JobAgentHeartbeatFailureCountReset</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentExpiredWorkItem">
            <summary>
              Gets the EventDefinition for the JobAgentExpiredWorkItem.
            </summary>
            <value>The EventDefinition for the JobAgentExpiredWorkItem</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\JobAgentTestJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JobAgentTestJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogFilename">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.EventLogMessageType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.PartialBaseInit(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This do a partial initial like the base.Init(), but intentionally did not init the timer.
            This is because we will be controlling the timing. Normal worker should never do this.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJob">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.JobAgentTestJob.JobAgentTestJob.Main(System.String[])">
            <summary>
            This method is not meant to run standalone. This is just to test the worker.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WebstoreWrapper.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebstoreWrapper</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWstConnection">
            <summary>
            Class that effective wraps the WstConnection for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWstConnection.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWstConnection.Open">
            <summary>
            Open a connection to the Webstore resource)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWstConnection.ConnectionString">
            <summary>
            Connection String (deployment name)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWstConnection.SqlPartitions">
            <summary>
            Returns a collection WrapperWebstoreSQLFss objects (which wrap the generic WebstoreSQLFss object) 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss">
            <summary>
            Class that effective wraps the WebstoreSQLFss object for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.FssId">
            <summary>
            Fail Safe Set ID
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreSQLFss.Databases">
            <summary>
            Returns a collection WrapperWebstoreDatabase objects (which wrap the generic WebstoreDatabase object) 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase">
            <summary>
            Class that effective wraps the WebstoreDatabase object for the express purpose of callings its 
            properties that return generic collections
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Server">
            <summary>
            Name of the server 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Name">
            <summary>
            Name of the database 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.IsPrimary">
            <summary>
            boolean value indicating if the database is primary or not 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Wrapper.WrapperWebstoreDatabase.Status">
            <summary>
            Status of the database
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstClient.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstClient</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspBulkUpdateBatchExpirationInterval(System.Guid,System.String,System.Int32)">
            <summary>
            WspBulkUpdateBatchExpirationInterval
            </summary>
            <param name="statusId"></param>
            <param name="csvBatchIdsStr"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspUpdateJobBatchPartitionStatus(System.Guid,System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Add any failed partition info to the job batch status
            </summary>
            <param name="statusId"></param>
            <param name="batchId"></param>
            <param name="partitionKey"></param>
            <param name="partitionMachine"></param>
            <param name="alertResolved"></param>
            <param name="partitionStatus"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspUpdateJobBatchCycleStatus(System.Guid,System.Int32,System.DateTime,System.Int32)">
            <summary>
            
            </summary>
            <param name="statusId"></param>
            <param name="batchId"></param>
            <param name="statusExpiresOn"></param>
            <param name="cycleNumber"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartition">
            <summary>
            An IPartition is located on a single machine. If it is a dynamic partition and it has split
            Machine should throw a PartitionException and the JE will call Repartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartition.Repartition">
            <summary>
            Repartition should return a new list of partitions in case of a split
            </summary>
            <returns>IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Machine">
            <summary>
            Get the machine where this partition is. May throw PartitionException if the partition is no
            longer on a single machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Key">
            <summary>
            The key that uniquely identifies this partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartitionSet">
            <summary>
            An enumerable set of Ipartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            add partition the the partition Set
            </summary>
            <param name="partition">The partition to add</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            This is called by the JobEngine at regular intervals,to
            get a list of changes since it was called the last time.        
            </summary>
            <param name="addedPartitions">List of added partitions. Null if nothing was added</param>
            <param name="droppedPartitions">List of dropped partitions. Null if nothing was dropped</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartitionSet.Count">
            <summary>
            Gets count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStep">
            <summary>
            One step of a job - executed sequentially
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            For a job worker, called by the JobAgent.
            This is called by the agent prior to calling the Run function for the worker.
            This gives worker a chance to setup heartbeating thread, and to do other
            initialization activites that might be needed
            </summary>
            <param name="ja">The MBR jobAgent object, to hearbeat with</param>
            <param name="localMachine">this machine</param>
            <param name="location">Location where the worker will run</param>
            <param name="userArgs">The arguments that the user passed</param>
            <param name="batchId">worker identifier. Required for heart beating with JobAgent</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            For a job worker, called by the JobAgent.
            This is the function where the worker writes to job code.
            </summary>
            <param name="inputSet">Set of Input partitions that the worker should work on</param>
            <param name="outputSet">Set of Output partition. This is for future use</param>
            <param name="statusCode">[out] The job run status. 0 = Pass, anything else = job failure. 
            The JobEngine will use this status code to determine if it needs to reschedule this 
            batch of work again.
            </param>
            <returns>IPartitionSet of the remaining partitions</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Add a partitionset to an existing Job Step
            </summary>
            <param name="inputSet">Input IPartitionSet to operate on</param>
            <param name="outputSet">Output IPartitionSet that has been operated on</param>
            <returns>Boolean value indicating success</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Finish">
            <summary>
            Job step finish. Called by the JobEngine on the worker.
            This gives the worker the opportunity to stop the Heart beat 
            thread and do other cleanup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.Alive">
            <summary>
            Returns if this Job Step is alive
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.CanJobCoordinatorSpawnJob">
            <summary>
            Returns if the job step's coordinator can actually be spwaned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.AcceptAdd">
            <summary>
            Returns whether this job step will accept adding of new partitionset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobCoordinator">
            <summary>
            IJobCoordinator interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobCoordinator.SpawnJob(System.String,System.Boolean)">
            <summary>
            Tells the coordinator whether it can spawn jobs or not
            </summary>
            <param name="jobName">Name of job</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobMain">
            <summary>
            IJobMain interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobMain.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            Implemented by the job implementor (JobCoordinator side)
            JobEngine transfers control by calling Start, where the 
            code creates instance of the Job class and add job steps.
            Also this lets users create their own implementation of
            the IPartitionSet and IPartition and pass to the JobEngine.
            Then the user code on the worker side can typecast to the correct
            type and get a much richer partitionset/partition class, with 
            functionality required for a particular job.
            </summary>
            <param name="jobName">Name of the Job</param>
            <param name="dop">Degree of Parallelism</param>
            <param name="batchOption">Batching option of partition set</param>
            <param name="location">Location where the worker should run</param>
            <param name="userArgs">Arguments passed by the user</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.BatchOption">
            <summary>
            Do we batch the work based on the input partitions, the output partitions or not at all?
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.DontBatch">
            <summary>
            DontBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByInput">
            <summary>
            BatchByInput
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByOutput">
            <summary>
            BatchByOutput 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IMachineSelector">
            <summary>
            Returns an iterator of machines through a machine class - Machines do not have to be returned only once
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.GetNextMachine">
            <summary>
            Get the next machine name in line for the selection process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.FailMachine(System.String)">
            <summary>
            This gives a way for user to explicitly fail a machine
            Once an machine is failed, user has to explicitly enable
            the machine again.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.EnableMachine(System.String)">
            <summary>
            This gives a way for user to explicitly enable a machine.
            Note that enabling a machine does not make it selectable.
            It is up to the implementation to determine if the machine is
            fit to be selected.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.LocationType">
            <summary>
            Determines where the workers are spawned
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Void">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.ServerRole">
            <summary>
            ServerRole
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Local">
            <summary>
            Use Local
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobPartitionStatus">
            <summary>
            Enum used to indicate the status of a partition within the job's running batch.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobPartitionStatus.Running">
            <summary>
            The partition is being executed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobPartitionStatus.Pass">
            <summary>
            The partition has passed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobPartitionStatus.Fail">
            <summary>
            The partition has failed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobExecutionStatus">
            <summary>
            Enum used to update job status in db
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Running">
            <summary>
            Job is running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Pass">
            <summary>
            Job Passed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Fail">
            <summary>
            Job Failed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Abort">
            <summary>
            Job Aborted
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobMessages">
            <summary>
            Message that can be sent to clients
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobMessages.Separator">
            <summary>
            Separator for job messages
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobMessages.DeleteJob">
            <summary>
            When a job is to be deleted
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobMessages.AllowJob">
            <summary>
            When a job can be spawned
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Location">
            <summary>
            A location for the worker
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.CreateLocationWithRandomMachineInClass(System.String,System.Int32)">
            <summary>
            Creates a location for a given machine class
            </summary>
            <param name="machineClass">Machine Class</param>
            <param name="machineCount">Machine count</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.GetNextMachineInClass">
            <summary>
            Next machine in class
            </summary>
            <returns>Machine Name</returns>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.LocationType">
            <summary>
            The location type indicates where we should run the worker
                Void - not used
                Machine Class - run in a pool of machine named by a class
                Same as batch - run "where the data is" - if we batched by input, run on the machines holding the input partitions
                Local - run in proc
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.ServerRole">
            <summary>
            Gets the server role 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.StepType">
            <summary>
            Type of job step
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.MapStep">
            <summary>
            MapStep
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.XProductStep">
            <summary>
            ProductStep
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RetrySettings">
            <summary>
            Max number of retries and delay between retries
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RetrySettings.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.FailoverRetry">
            <summary>
            FailoverRetry
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.InfiniteRetry">
            <summary>
            InfiniteRetry
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryCount">
            <summary>
            Get or set the RetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryDelay">
            <summary>
            Get or set the RetryDelay
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionMapping">
            <summary>
            PartitionMapping
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.AssemblyInformation">
            <summary>
            Information about worker assembly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AssemblyInformation.#ctor(System.String,System.String)">
            <summary>
            Constructs an AssemblyInformation object
            </summary>
            <param name="assemblyName">Name of the assembly</param>
            <param name="version">Version of the assmebly</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.AssemblyName">
            <summary>
            Gets the assembly name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.Version">
            <summary>
            Gets the Version
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStepProperties">
            <summary>
            IJobStepProperties interface
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.JobStepType">
            <summary>
            Gets the JobType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.BatchOption">
            <summary>
            Gets the BatchOption
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.Location">
            <summary>
            Gets the Location 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.DOP">
            <summary>
            Gets the Degree Of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.PartitionMapping">
            <summary>
            Gets the PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.StepType">
            <summary>
            Gets the StepType 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.InputSet">
            <summary>
            Gets the IPartitionSet - Input
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.OutputSet">
            <summary>
            Gets the IPartitionSet - output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.RetrySettings">
            <summary>
            Gets the RetrySettings 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.UserArgs">
            <summary>
            Gets the User given arguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.AssemblyInfo">
            <summary>
            Gets the AssemblyInformation 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.IsSafeMode">
            <summary>
            Gets if this job is running in SafeMode 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.IsContinuousStep">
            <summary>
            Indicate if the step is part of a continuous job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJob">
            <summary>
            IJob interface to be implemented by all jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            Add job step
            </summary>
            <param name="jobStepProperties">IJobStepProperties object containing the jobs steps to run</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Run">
            <summary>
            Executes the job
            </summary>
            <returns>Status of the job</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submits a job to be run
            </summary>
            <param name="callback">Callback method to be called for status updates</param>
            <param name="state">Passed in state</param>
            <returns>IAsyncResult indicating the status of the async operation</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.SendMessage(System.String)">
            <summary>
            Sends a message to the Job
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJob.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJob.IsContinuous">
            <summary>
            Indicate if this job should repeat itself.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobEngine">
            <summary>
            IJobEngine interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            Execute a specific job
            </summary>
            <param name="job">IJob interface containing the job</param>
            <returns>error code as to wether the job ran correctly</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.IsAlive(System.Int32,System.String,System.Boolean@)">
            <summary>
            Gets whether the JobAgent is alive or not
            </summary>
            <param name="batchId">Batch Id</param>
            <param name="jobName">Name of the job</param>
            <param name="shouldTerminateJob">Flag passed back to determine whether the job shoudl be terminated</param>
            <returns>Gets whether the JobAgent is alive or not</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status">Status of the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.CanSpawnJob(System.String)">
            <summary>
            For a given job, return true if the job is allowed to be spwaned and started.
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobAgent">
            <summary>
            IJobAgent interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates a job to run within the job agent
            </summary>
            <param name="je">IJobEngine object</param>
            <param name="jobName">Name of the job name</param>
            <param name="machine">Machine name</param>
            <param name="location">Location </param>
            <param name="batchId">Id of the batch</param>
            <param name="jobStepTypeFullName">The full name of the job step</param>
            <param name="assemblyName">Name of the assembly containing the job</param>
            <param name="version">Version of the assambly</param>
            <param name="userArgs">Additional user arguments</param>
            <param name="isSafeMode">Whether the job is run in safe mode or not</param>
            <param name="isContinuous">indicates if the async execution belongs to a continuous job</param>
            <returns>IAsyncResult indicating the status of the async operation</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.IsAlive(System.Int32,System.Boolean@)">
            <summary>
            Gets whether the JobAgent is alive or not
            </summary>
            <param name="batchId">Batch Id</param>
            <param name="shouldTerminateJob">Flag passed back to determine whether the job shoudl be terminated</param>
            <returns>Gets whether the JobAgent is alive or not</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.CanJobCoordinatorSpawnJob(System.Int32)">
            <summary>
            Gets whether a coordinator can spwan jobs or not.
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            </summary>
            <param name="batchId">JobAgent issued batchId</param>
            <param name="status">Status of the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.SendMessage(System.String,System.String)">
            <summary>
            Send a message to a job
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="message">Message to send to job</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor">
            <summary>
            IASyncExecuteBatchMonitor interface for monitoring work items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Finish(System.Int32,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32)">
            <summary>
            Finishes the batch from executing
            </summary>
            <param name="batchId">Batch Id being executed</param>
            <param name="failedSet">Set of failed partitions</param>
            <param name="statusCode">Status code of execution</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.CheckPartitionStatusChange(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Check if the partition has changes in its composition, if so
            then handle it accordingly.
            </summary>
            <param name="originalPartitionSet">the partition set that needs to be checked.</param>
            <returns>true if method find that there are changes to the input partition set. Else false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.UpdateBatchCycleStatus(System.Int32,System.Int32)">
            <summary>
            This updates the cycle number of a batch within a job.
            </summary>
            <param name="batchId">the batch id that we want to update</param>
            <param name="cycleNumber">the loop (i.e. cycle) number that is just completed</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.UpdateJobBatchPartitionStatus(System.Int32,Microsoft.Webstore.JobEngine.IPartition,Microsoft.Webstore.JobEngine.JobPartitionStatus)">
            <summary>
            Add the partion information to JobStatus as failed partition information.
            </summary>
            <param name="batchId">the batch id that this partition relays to</param>
            <param name="partition">the partition itself</param>
            <param name="status">the status to be updated with</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.RenewLease(System.Int32)">
            <summary>
            Renews the lease on a particular work item
            </summary>
            <param name="workItemId">Id of the work item to renew</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.JobName">
            <summary>
            Gets the JobName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatch">
            <summary>
            IASyncExecuteBatch interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Starts the batch to execute
            </summary>
            <param name="partitionSet">IPartition set to operate upon</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Monitor">
            <summary>
            Sets the IASyncExecuteBatchMonitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.ExecuteDelegate">
            <summary>
            Sets the ExecuteBatchDelegate 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsAlive">
            <summary>
            Returns whether the batch is alive
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsCoordinator">
            <summary>
            Indicate if this Async execution is coming from job coordinator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsContinuous">
            <summary>
            Indicate if this Async execution is meant to be running continuously (from a continuous job)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JEException">
            <summary>
            Exception class for Job Engine 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor">
            <summary>
            Creates a JEException object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String)">
            <summary>
            Creates a JEException object
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a JEException object
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a JEException object
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobAgentException">
            <summary>
            Exception class for JobAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="errorCode">Error code</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="errorCode">Error code</param>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgentException.ErrorCode">
            <summary>
            Returns the ErrorCode
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionException">
            <summary>
            Exception class for Partition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor">
            <summary>
            Creates a PartitionException object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String)">
            <summary>
            Creates a PartitionException object
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a PartitionException object
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a PartitionException object
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JCArguments">
            <summary>
            Container class for Job Coordinator Arguments
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.PrefixArg">
            <summary>
            PrefixArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.StartArg">
            <summary>
            StartArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.DopArg">
            <summary>
            DopArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.BatchArg">
            <summary>
            BatchArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.LocationArg">
            <summary>
            LocationArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.ClassArg">
            <summary>
            ClassArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.NumberOfMachinesArg">
            <summary>
            NumberOfMachinesArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.JobNameArg">
            <summary>
            JobNameArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.UserArgumentsArg">
            <summary>
            UserArgumentsArg
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JCArguments.#ctor">
            <summary>
            Constructor for class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.Dop">
            <summary>
            Gets and sets the Degree of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobBatchOption">
            <summary>
            Gets and sets the Batch Option of job
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobLocation">
            <summary>
            Gets and sets the Location of job
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.PartitionSetType">
            <summary>
            Gets and sets the PartitionSet Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.PartitionSetTarget">
            <summary>
            Gets and sets the Coordinator Target
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.UserArguments">
            <summary>
            Gets and sets the User Arguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobAssemblyName">
            <summary>
            Gets and sets the Job Assembly Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.MachineClass">
            <summary>
            Gets and sets the Machine Class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.NumberOfMachines">
            <summary>
            Gets and sets Number of Machines
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobName">
            <summary>
            Gets and sets the Job Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryCount">
            <summary>
            Gets and sets the Retry Count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryInterval">
            <summary>
            Gets and sets Retry Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.IsContinuous">
            <summary>
            Indicate if this is a continuous job
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JETrackingHandler">
            <summary>
            This class is required for workaround on how .net remoting works.
            When we move to WCF, we should not require it.
            Right now are making sure that if we are trying to create an 
            ObjRef for the JE object, we only pass the tcp channel data across.
            We found this bug when WstAgent used JE. WstAgent registers a custom
            channel and was causing issues, as creating of objRef was putting 
            the custom channel data, and that data was not present on the JobAgent
            side, thus resulting in an Exception on the JobAgent side.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.LocalJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status">Status of the job</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE">
            <summary>
            JobEngine class
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JE.ObjectURI">
            <summary>
            To determine the name of the file used for remoting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            RunJob
            </summary>
            <param name="job">Object that implements IJob interface</param>
            <returns>Integer value whether the job succeeded.</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.SpawnJob(System.String,System.Boolean)">
            <summary>
            Updates the internal list as to whether this job can be spawned or not
            </summary>
            <param name="jobName">name of the job that is being told to stop spawning jobs</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CanSpawnJob(System.String)">
            <summary>
            
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.SendMessage(Microsoft.Webstore.JobEngine.IJob,System.String)">
            <summary>
            Sends a message to the job
            </summary>
            <param name="job">Job for which we are sending this message to</param>
            <param name="message">Message to be sent to the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.IsAlive(System.Int32,System.String,System.Boolean@)">
            <summary>
            Returns whether this Job Engine is alive
            </summary>
            <param name="batchId">Batch Id to check</param>
            <param name="jobName">Name of the job</param>
            <param name="shouldTerminateJob">Flag passed back to determine whether the job shoudl be terminated</param>
            <returns>Returns whether this Job Engine is alive</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the JobAgent to update status (human readable) for
            workers. JobAgent passes the status given to it by workers.
            This status ultimately gets logged to the jobDetails table
            in the JobStatus deployment
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status">Status to record to the JobStatus</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateNewAsyncExecuteBatch(System.String,System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,System.Int32,System.String@)">
            <summary>
            Creates new asyncexecute batch
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="machine">Machine to execute on</param>
            <param name="jobStepProperties">Properties for the Job Step</param>
            <param name="batchId">Back ID</param>
            <param name="workerMachine">Worker machine</param>
            <returns>Object that implements IASyncExecuteBatch</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateRunner(Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Create a runner based on the batching option. The runner knows how to execute a step
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunProduct(System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Run the step - basically compose a Retry policy with a Batching policy. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.ParseArgsAndStart(System.String[],Microsoft.Webstore.JobEngine.JE.Start)">
            <summary>
            Parse the command line arguments that were passed by the Job Service then call the Start function
            </summary>
            <param name="args">JC Arguments</param>
            <param name="startFunc">Function to get called</param>
            <returns>Value indicating the success of the call</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JE.Singleton">
            <summary>
            Job Engine singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE.Start">
            <summary>
            The start function delegate
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="dop">Degree of Parallelism</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="userArgs">User arguments</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunParams">
            <summary>
            RunParams struct
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.inputSet">
            <summary>
            InputSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.outputSet">
            <summary>
            Output set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.Null">
            <summary>
            Null run param
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RunOneStep.ExecuteStepForBatch(System.String,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Get a worker - Initialize it, call Run() on it and finalize it.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunOneStepByInput">
            <summary>
            The difference between the two RunOneStep is whether we batch by input or by output. 
            If we batch by input, we slice the input partition sets by machine and we send the output partition set unchanged
            set as is to the workers. If we batch by output, it is the other way round.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionSetType">
            <summary>
            Enum for the kinds of partition sets
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.UserDefined">
            <summary>
            If the user defines their own PartitionSet and Coordinator
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.SqlDeployment">
            <summary>
            If the PartitionSet is a SQL Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.FileDeployment">
            <summary>
            If the PartitionSet is a File Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.ServerRole">
            <summary>
            If the PartitionSet is the servers within a server role
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.Servers">
            <summary>
            If the PartitionSet is a semi-colon list delimited list of servers
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobCoordinatorHelper">
            <summary>
            Helper functions for Job Coordinator
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobCoordinatorHelper.PartitionSetTypeDelimiter">
            <summary>
            The delimiting character to be used for separating servers in PartitionSetType.Servers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobCoordinatorHelper.RunJob(Microsoft.Webstore.JobEngine.JCArguments)">
            <summary>
            Code that actually runs the job, based on the JCArguments
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProperties">
            <summary>
            Impelements the IJobStepProperties
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Creates a JobStepProperties object
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.AssemblyInformation)">
            <summary>
            Creates a JobStepProperties object
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
            <param name="assemblyInformation">Assembly information</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Boolean)">
            <summary>
            Creates a JobStepProperties object. This constructor is mainly for user defined coordinator. Normally
            This constructor is not needed.
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
            <param name="isContinuousStep">Indicate if the step is part of a continuous job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Boolean,Microsoft.Webstore.JobEngine.AssemblyInformation)">
            <summary>
            Creates a JobStepProperties object
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
            <param name="isContinuousStep">Indicate if the step is part of a continuous job</param>
            <param name="assemblyInformation">Assembly information</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetRetryCount(Microsoft.Webstore.JobEngine.RetrySettings)">
            <summary>
            Sets retry count
            </summary>
            <param name="retrySettings">RetrySettings object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetPartitionMapping(Microsoft.Webstore.JobEngine.PartitionMapping)">
            <summary>
            Sets PartitionMapping
            </summary>
            <param name="partitionMappingFunc">PartitionMapping object</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.JobStepType">
            <summary>
            Gets JobStepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.BatchOption">
            <summary>
            Gets BatchOption
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.Location">
            <summary>
            Gets Location
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.DOP">
            <summary>
            Gets Degree of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.PartitionMapping">
            <summary>
            Gets PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.StepType">
            <summary>
            Gets StepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.InputSet">
            <summary>
            Gets InputSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.OutputSet">
            <summary>
            Get/Set output set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.RetrySettings">
            <summary>
            Get/Set retry settings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.UserArgs">
            <summary>
            Get/Set user args
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.AssemblyInfo">
            <summary>
            Gets worker assembly information
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.IsSafeMode">
            <summary>
            IsSafeMode: Should the worker be started in seperate app domain
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.IsContinuousStep">
            <summary>
            Indicate if the step is part of a continuous job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Job">
            <summary>
            Implements the IJob interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.#ctor(System.String)">
            <summary>
            Creates a Job object
            </summary>
            <param name="jobName">Name of the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a Job object. This constructor is mainly for user defined coordinator. Normally
            This constructor is not needed.
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="isContinuous">indicate if this is a continuous job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
            <returns>Enumerator for the IJobStepProperties objects</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            Adds a step to the job
            </summary>
            <param name="jobStepProperties">IJobStepProperties object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Run">
            <summary>
            Run job
            </summary>
            <returns>An integer value indicating the status of the job</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.SendMessage(System.String)">
            <summary>
            Sends a message to the Job
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submit async job
            </summary>
            <param name="callback">Callback method</param>
            <param name="state">State to be passed to the callback method</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Job.IsContinuous">
            <summary>
            Indicate if this is a continuous job.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Job.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepWorker">
            <summary>
            JobStepWorker is the base class from which a worker should derive from.
            It has the implementation of the keep alive timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.#ctor">
            <summary>
            Creates a JobStepWorker object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitWorker(Microsoft.Webstore.JobEngine.IJobAgent,System.String)">
            <summary>
            Start the timer which pings the JE
            </summary>
            <param name="jaIn">IJobAgent Object</param>
            <param name="localMachine">Name of the machine</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.StopWorker">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.UpdateStatus(System.String)">
            <summary>
            Updates the worker status with the JobAgent
            </summary>
            <param name="workerStatus">Status of the worker</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32)">
            <summary>
            Initialize the job step worker
            </summary>
            <param name="jaIn">IJobAgent object</param>
            <param name="localMachine">Name of the machine</param>
            <param name="location">Location</param>
            <param name="batchId">Batch Id</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Finish">
            <summary>
            Finish the work
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Add partition set
            </summary>
            <param name="inputSet">Input IPartitionSet object</param>
            <param name="outputSet">Output IPartitionSet object</param>
            <returns>False</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Aborted">
            <summary>
            Gets the aborted status
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.LocalMachine">
            <summary>
            Returns Local Machine name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.BatchId">
            <summary>
            Returns the Batch Id
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Alive">
            <summary>
            Alive
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.CanJobCoordinatorSpawnJob">
            <summary>
            CanJobCoordinatorSpawnJob
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.AcceptAdd">
            <summary>
            Returns whether it accepts 'Add' partition or not
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobWorker">
            <summary>
            JobStepWorker is the base class from which a worker should derive from.
            It has the implementation of the keep alive timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.#ctor">
            <summary>
            Creates a JobWorker object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Runs the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="ja">JobAgent reference</param>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineInfo">
            <summary>
            Represents a machine in the Autopilot environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.#ctor(System.String,System.Net.IPAddress,System.String)">
            <summary>
            Creates a MachineInfo object
            </summary>
            <param name="name">Name of the machine</param>
            <param name="IP">IP Address of the machine</param>
            <param name="type">Type of the machine</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Name">
            <summary>
            Gets or sets the name of the machine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.IP">
             <summary>
            Gets or sets the IP of the machine. 
             </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Type">
            <summary>
            Gets or sets the Type of the machine. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineSet">
            <summary>
            Adding twice the same machine to the set does not make a new entry.
            Note that the hash table is not serialized - so this guarantee does not stand once the
            set is sent across the wire
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionSet`1">
            <summary>
            PartitionSet class
            </summary>
            <typeparam name="Partition"></typeparam>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.#ctor">
            <summary>
            Create a PartitionSet object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>IEnumerator for IPartition objects</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add an IPartition
            </summary>
            <param name="partition">IPartition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh partition set
            </summary>
            <param name="addedPartitions">Added IPartitions</param>
            <param name="droppedPartitions">Dropped IPartitions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Contains(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Equality based on IPartition.Key
            </summary>
            <param name="partition">IPartition</param>
            <returns>Boolean value if the partition was found</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Count">
            <summary>
            Get the Count of IParitions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.#ctor">
            <summary>
            Creates a MachineSet object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IPartition to add</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachinePartition">
            <summary>
            Represents a machine based on machine name 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.#ctor(System.String)">
            <summary>
            Creates a MachinePartition object
            </summary>
            <param name="machine">Machine Name</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.ToString">
            <summary>
            Returns a String representation of the MachinePartition
            </summary>
            <returns>A String representation of the MachinePartition</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Machine">
            <summary>
            Get the Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Key">
            <summary>
            Gets the Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition">
            <summary>
            Represents a machine based on the IP address 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.#ctor(Microsoft.Webstore.JobEngine.Partitions.MachineInfo)">
            <summary>
            Creates a MachineIPPartition object
            </summary>
            <param name="mi">MachineInfo object</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.IP">
            <summary>
            Gets the IP
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.Type">
            <summary>
            Gets the Type
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet">
            <summary>
            MachinePartitionSet based upon a specific server role 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.#ctor(System.String)">
            <summary>
            Creates a RoleBasedMachinePartitionSet object
            </summary>
            <param name="serverRoleName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Init">
            <summary>
            Inititializes the Partition Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IParition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Returns the status changes for the partitions
            </summary>
            <param name="addedPartitions">[out] the partitions that were added</param>
            <param name="droppedPartitions">[out] the partitions that were dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetEnumerator">
            <summary>
            Gets the Enumerator for the collection
            </summary>
            <returns>An enumerator for iterating over IPartition objects</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Count">
            <summary>
            Gets the count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition">
            <summary>
            MachinePartition based on a specific Server Role 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.#ctor(System.String,System.String)">
            <summary>
            RoleBasedMachinePartition
            </summary>
            <param name="machine"></param>
            <param name="serverRole"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ToString">
            <summary>
            ToString
            </summary>
            <returns>A String representation of the RoleBasedMachinePartition</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Machine">
            <summary>
            Gets the Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ServerRole">
            <summary>
            Gets the ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Key">
            <summary>
            Gets the Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteDelegate">
            <summary>
            Execute delegate
            </summary>
            <param name="partitionSet">IPartitionSet to execute</param>
            <param name="statusCode">Integer indicating status of execution</param>
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteBatchDelegate">
            <summary>
            Execute batch delegate
            </summary>
            <param name="machine">Machine Name</param>
            <param name="partitionSet">IPartitionSet to execute</param>
            <returns>RunParams object</returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ASyncExecuteBatch">
            <summary>
            Executes a batch asychronously
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.#ctor(System.String,Microsoft.Webstore.JobEngine.IJobStep,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            ASyncExecuteBatch ()
            </summary>
            <param name="machine">Machine to run on</param>
            <param name="jobStep">IJobStep to execute</param>
            <param name="batchId">Batch Id to run on</param>
            <param name="isContinuous">Indicates if this execution batch is a continous run</param>
            <param name="isCoordinator">Indicates if this exectuion batch is assoicated with the coordinator</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Instantiates the thread to run
            </summary>
            <param name="partitionSetIn">IPartitionSet to operate upon</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Monitor">
            <summary>
            Sets the IASyncExecuteBatchMonitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.ExecuteDelegate">
            <summary>
            Gets the ExecuteBatchDelegate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsAlive">
            <summary>
            Get the IsAlive status
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsCoordinator">
            <summary>
            Indicate if this Async execution is coming from job coordinator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsContinuous">
            <summary>
            Indicate if this Async execution is meant to be running continuously (from a continuous job)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionQueue">
            <summary>
            PartitionQueue
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.JobEngine.IPartition})">
            <summary>
            Creates a PartitionQueue object
            </summary>
            <param name="partitionSet">An enumerated set of IPartitions objects</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.GetNext">
            <summary>
            Returns the next IPartition object
            </summary>
            <returns>IPartition object</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.WorkDescription.RenewLease">
            <summary>
            RenewLease
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.WorkDescription.IsAlive">
            <summary>
            IsAlive
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.Finish(System.Int32,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32)">
            <summary>
            Stop and log the ending progress of the batch.
            </summary>
            <param name="batchId"></param>
            <param name="failedSet"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.UpdateBatchCycleStatus(System.Int32,System.Int32)">
            <summary>
            Updates the cycle number of a continuous job.
            </summary>
            <param name="batchId"></param>
            <param name="cycleNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.UpdateJobBatchPartitionStatus(System.Int32,Microsoft.Webstore.JobEngine.IPartition,Microsoft.Webstore.JobEngine.JobPartitionStatus)">
            <summary>
            Add the partion information to JobStatus as failed partition information.
            </summary>
            <param name="batchId"></param>
            <param name="partition"></param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.CheckPartitionStatusChange(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Check if the partition has changes in its composition, if so
            then handle it accordingly.
            </summary>
            <param name="originalPartitionSet"></param>
            <returns>true if method find that there are changes to the input partition set. Else false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ExecutionPool.StartWork">
            <summary>
            After workitems have been submitted, this fn
            is responsible to start the job workers and
            wait till they all finish. In the mean time if
            there are failures, this function reschedules the failed
            items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.StatusCodes">
            <summary>
            These define the error status codes for jobs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.Success">
            <summary>
            When a job succeeds.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.CannotCreateRemoteBatch">
            <summary>
            The AsyncExecuteBatch returned null. It could not be created on remote machine
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.UnknownJobRunFailure">
            <summary>
            The jobStep.Run() threw exception. 
            Enable tracing to get more details. Also check NT events
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AsyncExecuteBatchFailed">
            <summary>
            Failure in AsyncExecuteBatch::ThreadStart function. 
            Look at NT events for details
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.HeartBeatFailure">
            <summary>
            Heartbeat failure for this batchID
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsRetryExceeded">
            <summary>
            Aborting workItem as retry count exceeded
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsToAddPartitions">
            <summary>
            Aborting workItems to add partition to existing batch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsPartitionDropped">
            <summary>
            Aborting work item as partition has been dropped
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.NoWorkItemsSubmitted">
            <summary>
            Job could not complete as no work items were submitted.
            This can be caused because jobworkers were being tried 
            to be scheduled on machines that are in different DataCenter
            from that of the JobCoordinator.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ThreadPoolThrottle">
            <summary>
            A wrapper around the System Thread Pool. We place a semaphore so that we can limit the number of
            work items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.#ctor(System.Int32)">
            <summary>
            ThreadPoolThrottle
            </summary>
            <param name="maximumAllowed">Maximum number of allowed threads</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            QueueUserWorkItem
            </summary>
            <param name="callback">Callback method</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the work item
            </summary>
            <param name="callback">Callback method</param>
            <param name="state">State to pass to the callback method</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet">
            <summary>
            Represents a collection of sql partitions sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.#ctor(System.String)">
            <summary>
            Creates a WebstoreSqlPartitionSet object
            </summary>
            <param name="deploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Init">
            <summary>
            Inititializes the Partition Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IParition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Returns the status changes for the partitions
            </summary>
            <param name="addedPartitions">[out] the partitions that were added</param>
            <param name="droppedPartitions">[out] the partitions that were dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetEnumerator">
            <summary>
            Gets the Enumerator for the collection
            </summary>
            <returns>An enumerator for iterating over IPartition objects</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Count">
            <summary>
            Gets the count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition">
            <summary>
            Represents a collection of Sql Fail Safe Sets 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a WebstoreSqlPartition object
            </summary>
            <param name="deploymentName">Name of the deployment</param>
            <param name="fssId">Fail Safe Set ID</param>
            <param name="machine">Machine Name</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Machine">
            <summary>
            Gets the machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.SqlFss">
            <summary>
            Gets the WebstoreSQLFss
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Database">
            <summary>
            Gets the WebstoreDatabase
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet">
            <summary>
            Represents a collection of file partitions sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.#ctor(System.String)">
            <summary>
            Creats as WebstoreFileSharePartitionSet object
            </summary>
            <param name="deploymentName">Name of the deployment</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Init">
            <summary>
            Inititializes the Partition Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IParition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Returns the status changes for the partitions
            </summary>
            <param name="addedPartitions">[out] the partitions that were added</param>
            <param name="droppedPartitions">[out] the partitions that were dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetEnumerator">
            <summary>
            Gets the Enumerator for the collection
            </summary>
            <returns>An enumerator for iterating over IPartition objects</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Count">
            <summary>
            Get the count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition">
            <summary>
            Represents a Collection of File Fail Safe Sets 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a WebstoreFilePartition object
            </summary>
            <param name="deploymentName">Name of the deployment</param>
            <param name="fssId">Fail Safe Set ID</param>
            <param name="machine">Machine Name</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Machine">
            <summary>
            Gets the machine name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Share">
            <summary>
            Gets the WebstoreFileshare
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.AverageBasedRoundRobinMachineSelector">
            <summary>
            This machine selector will select machines based on the average batch load
            - average is calculated at the begining of the round or when machines are added/removed.
            - a machine is selected based on a round robin fashion if it has 0 load, or if load is 
              less than average.
            - If all machine is on or above average load, then a normal round robin selection take place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AverageBasedRoundRobinMachineSelector.FailMachine(System.String)">
            <summary>
            This gives a way for user to explicitly fail a machine
            Once an machine is failed, user has to explicitly enable
            the machine again.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AverageBasedRoundRobinMachineSelector.EnableMachine(System.String)">
            <summary>
            This gives a way for user to explicitly enable a machine.
            Note that enabling a machine does not make it selectable.
            The machine will still be ignored if it does not have the
            required role defined.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector">
            <summary>
            Round robin machine selector class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.#ctor(System.String,System.Int32)">
            <summary>
            Creates a RoundRobinMachineSelector object
            </summary>
            <param name="machineClass">Machine class (server role) to look at</param>
            <param name="machineCount">Number of machines to allow</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.FailMachine(System.String)">
            <summary>
            This gives a way for user to explicitly fail a machine
            Once an machine is failed, user has to explicitly enable
            the machine again.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.EnableMachine(System.String)">
            <summary>
            This gives a way for user to explicitly enable a machine.
            Note that enabling a machine does not make it selectable.
            The machine will still be ignored if it does not have the
            required role defined.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ApplicationContext">
            <summary>
            There is one ApplicationContext instance per Webstore application to act as a single point of control for status and configuration.
            </summary>
            <remarks>
            The WstConnection class used by the application developer will have reference to the single ApplicationContext that controls that specific Application (e.g. "Sample").
            
            (We should try to use "WebstoreConfig" as a special case application, where we populate information on num replicas, etc, from config info (registry or webstore.ini).
            </remarks>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.applications">
            <summary>
            Static collection of all the applications that are referred by the WstConnection. It is basically a cache for ApplicationContext.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.fullName">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.deployment">
            <summary>
            Webstore deployment that is encapsulated by this application context.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.#ctor(System.String)">
            <summary>
            Constructs and initializes an instance of the ApplicationContext.
            </summary>
            <param name="applicationName">The full application name that is passed to identify the application.</param>
            <remarks>
            Each WstConnection contains reference to underlying ApplicationContext object that encapsulates the WebstoreDeployment.  There is  a global static collection of ApplicationContext objects. There should be only one ApplicationContext object per WebstoreDeployment.
            The global cache (ApplicationContextDictionary) should keep them cached, even if no WstConnection object still refers to the application. This object acts as a single point of configuration and state information for the application.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetApplication(System.String)">
            <summary>
            Global collection of applications (used to make sure we have single
            point of config and state mgmt for each app).
            </summary>
            <param name="connectionStringName">Name given as the connection string.</param>
            <returns>WstApp singleton for that app</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetFilePartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for fileshare partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetSqlPartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for sql partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationExpired">
            <summary>
            Gets whether the WebstoreDeployment that is associated with the ApplicationContext is expired.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationRemoved">
            <summary>
            Gets whether the WebstoreDeployment that is associated with the ApplicationContext is removed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverRead">
            <summary>
            Default file read failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverWrite">
            <summary>
            Default file write failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.Name">
            <summary>
            Full name of the application which is config and deployment name seperated with backslash "\"
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.SecondaryType">
            <summary>
            The secondary type for this application.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ColumnAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ColumnAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ColumnAttribute.PartitionKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ColumnAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.FailSafeSetKey">
            <summary>
              Partition key
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.FailSafeSetKey.MinKey">
            <summary>
            Represents the minumum key for a cloud partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.FailSafeSetKey.MaxKey">
            <summary>
            Represents the maximum key for a cloud partition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Int64)">
            <summary>
            Constructs a key from a Int64 value.
            </summary>
            <param name="value">The Int64 value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Int32)">
            <summary>
            Constructs a key from a Int32 value.
            </summary>
            <param name="value">The Int32 value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Guid)">
            <summary>
            Constructs a key from a Guid value.
            </summary>
            <param name="guid">The Guid value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Byte[])">
            <summary>
            Constructs a key from a Byte Array value.
            </summary>
            <param name="bytes">The Byte Array value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Byte[],System.Int64)">
            <summary>
              Constructs a partition from a byte array and a length
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
               len has to be lesser or equal to key.Length
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor">
            <summary>
            Special constructor for the maximum key, required
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.CreateKey(System.Object)">
            <summary>
            Creates a new Key for the given object as the seed.
            </summary>
            <param name="keySeed">The seed that will be used to create the new Key.</param>
            <returns>The new Key.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_Equality(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Checks two keys for equality
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs and rhs are equal</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_Inequality(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Checks two keys for inequality
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs and rhs are not equal</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_LessThan(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Lesser than comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &lt; rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_GreaterThan(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Greater than comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &gt; rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_LessThanOrEqual(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Lesser or equal comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &lt;= rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_GreaterThanOrEqual(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Greater or equal comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &gt;= rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.Min(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Returns the smaller of two keys
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>lhs if lhs &lt; rhs otherwise rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.Max(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Returns the bigger of two keys
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>lhs if lhs &gt; rhs otherwise rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToString">
            <summary>
              Converts a key to a string representation
            </summary>
            <remarks>The string representation is a hex string of 2 hex characters per byte</remarks>
            <returns>String representation of the key</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToBytes">
            <summary>
              Returns the key as a byte array
            </summary>
            <returns>Key as byte array</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetKey.IsMaxKey">
            <summary>
            Gets whether the Key is a maximum key value.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetKey.Length">
            <summary>
              Returns the length of a key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetKey.Item(System.Int64)">
            <summary>
              Returns the byte value at position 'idx'
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.FailSafeSetRange">
            <summary>
              A range of keys between a low key and a high key
            </summary>
            <remarks>The low key is inclusive (part of the range) while the high key is exclusive
            (not part of the range)</remarks>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.FailSafeSetRange.FullRange">
            <summary>
            The singleton that denotes the full range that starts from the min value for a key to the max value.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.#ctor(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Constructor from [low, high)
            </summary>
            <param name="low"></param>
              Low boundary (inclusive)
            <param name="high"></param>
              High boundary (exclusive)
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.Intersect(Microsoft.Webstore.MetaData.FailSafeSetRange)">
            <summary>
              Returns the intersection of two ranges
            </summary>
            <param name="rhs">Range to intersect with</param>
            <returns>The intersection of the current range and the rhs range. If empty, the
            returned range will have its low boundary equal to its high boundary</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.Contains(Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Checks whether the key is inside the range
            </summary>
            <param name="key">The key to check</param>
            <returns>True if inside, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.Contains(Microsoft.Webstore.MetaData.FailSafeSetRange)">
            <summary>
              Checks whether the range is inside the range
            </summary>
            <param name="range">The range to check</param>
            <returns>True if inside, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.IsEmpty">
            <summary>
              Checks if the range contains any element
            </summary>
            <returns>true if the range is empty</returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetRange.Low">
            <summary>
              Accessor for low boundary
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetRange.High">
            <summary>
              Accessor for high boundary
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.CommandExecutor">
            <summary>
            CommandExecutor is the class responsible for executing the queries that are specified by the users through WstCommand against the partitioned system.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._totalServerInteraction">
            <summary>
            Duration of the command preparation and execution againt one single database (including open time, validation etc). This timer will be used to determine if there is a bad pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._serverExecution">
            <summary>
            Duration of the command execution againt one single database (excluding open time, validation etc). This timer will be used to report server execution quality( aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._totalApplicationExecution">
            <summary>
            Duration of the overall command execution including the failover for the application. This timer will be used to determine application execution quality (aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._serverExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._application">
            <summary>
            Local copy stored so that performance counters can finish even if connections are closed or exceptions are thrown
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CreateWstDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates a WstDataReader from the given SqlDataReader.
            </summary>
            <param name="sqlDataReader">The SqlDataReader that will be wrapped by the WstDataReader to create.</param>
            <returns>The newly created WstDataReader which is wrapping the input SqlDataReader/</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CreateWstXmlReader(System.Xml.XmlReader)">
            <summary>
            Creates a WstXmlReader from the given XmlReader.
            </summary>
            <param name="xmlReader">The XmlReader that will be wrapped by the WstXmlReader to create.</param>
            <returns>The newly created WstXmlReader which is wrapping the input XmlReader/</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.PrologueForExecution(System.Data.SqlClient.SqlCommand@)">
            <summary>
            Performs final steps before the execution such as performing the associations for SqlCommand, final validation, calling sp_setPartition for CloudDB, setting command time out for SqlCommand and starting the server execution timer.
            </summary>
            <param name="sqlCommand">The SqlCommand that will be used for execution.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.OpenConnection">
            <summary>
            Opens the current DatabaseConnection for synchronous execution.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.PrologueForOpenConnection">
            <summary>
            Performs to the final steps before openning connection such as checking for throttling layer for the resource availability, starting timers, tracing and updating the performance counters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.StartTotalServerInteractionTimer">
            <summary>
            Starts the WstTimer which keeps track the total server interaction which included openning connection to the SqlServer and execution the command request. This function should ensure that it calls ReleaseRequestResources on PerformanceCounterManager in case of an exception to make sure that there are no leaking resources.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.AttemptToCloseDatabaseConnections">
            <summary>
            Attempts to close all that connections to the databases if possible. In case of an active DataReader, XmlReader or Transaction; connections will not be closed. Connections will be closed when the readers are closed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ReportException(System.Exception)">
            <summary>
            Reports that an exception which is encountered during the command execution for processing to determine the necessary actions to take.
            </summary>
            <param name="executeException">The exception which is encountered during command execution to report.</param>
            <returns>True whether failover was established and command execution should be retried otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CheckFailOverPossible(System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Determines whether the failover to other replicas is possible based on the errors encountered, failOver mode and the status of replicas.
            </summary>
            <param name="executeException">The Exception that was thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
            <returns>True whether the failover is possible based on the errors encountered, failOver mode and the status of replicas, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CheckFailOverAllowed(Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Determines whether the failover to other replicas are allowed based on the errors encountered and failOver mode.
            </summary>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
            <returns>True whether the failover is allowed based on the errors encountered and failover mode, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ThrowSpecificException(System.Exception)">
            <summary>
            Throws a specific WstException if the errors encountered and exception match with the criteria.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessException(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.Common.WstTimer,System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the Exception thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called to take the necessary steps.
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server when the given Exception is encountered.</param>
            <param name="replica">The metadata on the replica that the given Exception is encountered during the exection agains.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given Exception is encountered.</param>
            <param name="executeException">The Exception that was thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.HandleException(System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Takes the necessary steps such as logging it and denylisting the replica for the given exception based on the error types.
            </summary>
            <param name="executeException">The Exception that was thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.DetermineErrorTypes(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.Common.WstTimer,System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the given Exception to determine the type of the errors that were encountered.
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server when the given Exception is encountered.</param>
            <param name="replica">The metadata on the replica that the given Exception is encountered during the exection agains.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given Exception is encountered.</param>
            <param name="exception">The Exception to process for determining the type of the errors that were encountered.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessOperationException(Microsoft.Webstore.MetaData.WebstoreDatabase,System.InvalidOperationException,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the given InvalidOperationException to determine the type of the errors that were encountered.
            </summary>
            <param name="replica">The metadata on the replica that the given Exception is encountered during the exection agains.</param>
            <param name="operationException">The InvalidOperationException to process for determining the type of the errors that were encountered.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessSqlException(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.Common.WstTimer,System.Data.SqlClient.SqlException,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the given SqlException to determine the type of the errors that were encountered.
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server when the given SqlException is encountered.</param>
            <param name="replica">The metadata on the replica that the given SqlException is encountered during the exection agains.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given SqlException is encountered.</param>
            <param name="sqlException">The SqlException to process for determining the type of the errors that were encountered.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing SqlException.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.IsBadPoolError(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.Common.WstTimer,System.Data.SqlClient.SqlError)">
            <summary>
            Checks to see if this SqlException looks like it is a bad connection left over in the SqlClient connection pool. 
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server for the given SqlError is encountered.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given SqlError is encountered.</param>
            <param name="error">The error to determine if it is a bad pool error.</param>
            <returns>True if bad pooled connection is suspected, otherwise false.</returns>
            <remarks>The total server interaction period before exception. If this time is too short, that will be an indication for bad pool error</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.CurrentReplica">
            <summary>
            Gets the current WebstoreDatabase that the command execution is performed against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.DatabaseConnection">
            <summary>
            Gets the current DatabaseConnection that is used for the command execution.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.ServerExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.TheRequestType">
            <summary>
            Gets the request type of the current CommandExecutor.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.GeneralNetworkError">
            <summary>
            20-11-General network error.  Check your network documentation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.TransportLevelError">
            <summary>
            10054-20-A transport-level error has occurred when sending the request to the server.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPartPrimaryInTransition">
            <summary>
            The primary partition is in transition and no new transactions can start.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplNotEnoughSecondaries">
            <summary>
            This partition does not have enough valid secondaries to start a DML transaction. The needed count is %ld, the current count is %ld.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPrimaryLostQuorum">
            <summary>
            The primary partition has lost the quorum. New transactions can not start.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbUserQueriesAbortedDuringClouddbReconfiguration">
            <summary>
            A CloudDB reconfiguration is going on and all new user transactions are aborted. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbDatabaseShutdownDueToPairingFailure">
            <summary>
             A paired CloudDB fabric node failed and database %d must be shutdown. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartInDeleteState">
            <summary>
            This requested operation can not performed as this partition is in delete process.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartInTransition">
            <summary>
            The partition is in transition to Nothing state. Please run your query later.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPartInvalidAppName">
            <summary>
            The application name %s is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPartInvalidTblgrpName">
            <summary>
            The table group name %s is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartNotExist">
            <summary>
            The data node does not host a replica of the requested partition.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartNotPrimary">
            <summary>
            The replica that the data node hosts for the requested partition is not primary.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartNotSecondary">
            <summary>
            The replica that the data node hosts for the requested partition is not secondary.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.LogNotAvail">
            <summary>
            The log for database '%.*ls' is not available. Check the event log for related error messages. Resolve any errors and restart the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.AsyncCommandExecutor.EndExecute(System.String)">
            <summary>
            Returns the the result of the asynchronous command execution and finalize the state.
            </summary>
            <param name="methodName">The name of the EndExecuteXXX that initiates the EndExecute.</param>
            <returns>The result of the asynchronous command execution. The result could be a SqlException if the asynchronous command execution fails  </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.AsyncCommandExecutor.TheRequestType">
            <summary>
            Gets the request type of the current AsyncCommandExecutor.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstAsyncResult">
            <summary>
            Implements IAsyncResult interface for WstClient which will be used for Asycnhronous API of WstCommand. The class is also responsible to call the user callback delegate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.UserCallback">
            <summary>
            The AsyncCallback that is provided by the user code.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to  complete. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.DatabaseConnection">
            <summary>
            This is the class which contains the SqlConnection. It is responsible for creating, opening and maintaining the SqlConnection. There can be multiple DatabaseConnection for each WstConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.application">
            <summary>
            The application that isue using this database connection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connection">
            <summary>
            The owner WstConnection that owns this database connection. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.database">
            <summary>
            The database that the connection will be created.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.serverAddress">
            <summary>
            The actual address (the ip) of the server which the actual sql connection is established on. This field will be null until the actual connection is established.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.sqlConnection">
            <summary>
            The actual sql connection to the give database.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttempts">
            <summary>
            How many times trying to connection to the database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttemptsOnBadPool">
            <summary>
            How many times trying to connection to the database due to bad pool error
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.databaseSelector">
            <summary>
            The DatabaseSelector that will be used to select the next available database during the AutoFailover.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectionOpenGranted">
            <summary>
            Indicates whether the connection open is granted for the DatabaseConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection._requestType">
            <summary>
            Indicates whether the underlying sql connection is opened as an asynchronous connection for the current DatabaseConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.timeOutDatabases">
            <summary>
            The list of the databases that has timed out for this wstdbconnection. Sometimes, timed out databases are not added to denylist and we need to maintain a seperate denylist for this DatabaseConnection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.#ctor(Microsoft.Webstore.WstClient.ApplicationContext,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.WstClient.DatabaseSelector)">
            <summary>
            DatabaseConnection contains the sqlConnection and associated WebstoreDatabase information
            used to execute against a specific application server/database.
            </summary>
            <param name="application"></param>
            <param name="connection"></param>
            <param name="database"></param>
            <param name="databaseSelector"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.Open(Microsoft.Webstore.WstClient.RequestType)">
            <summary>
            Opens the underlying SqlConnection to Sql Server resource which is specified by the established WebstoreDatabase.
            </summary>
            <param name="requestType">Indicates whether the connection should be opened as an asynchronous connection or synchronous.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.PrepareExecution">
            <summary>
            Reset counters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.ClearSqlConnectionPool">
            <summary>
            Clear Sql connection pool
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.AddToTimeoutDBList">
            <summary>
            Add db to timeout db list
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsNonPooledConnection">
            <summary>
            This sql connection is not a pooled connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowed">
            <summary>
            Retry allowed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowedForBadPool">
            <summary>
            Retry allowed for badpool error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.UserWstConnection">
            <summary>
            Gets the owner WstConnection that owns this database connection. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.SqlServerConnection">
            <summary>
            Gets the current underlying SqlConnection to given Sql Server database defined by the WebstoreDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.Database">
            <summary>
            WebstoreDatabase object
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.resource">
            <summary>
            The Webstore resource that is denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.partitionKey">
            <summary>
            The partition key that gets the resource denylisted. This property is only applicable for CloudDB scenarios and will be null for Webstore scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.lastQueryTime">
            <summary>
            The time of the last query on this resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.enlistedTime">
            <summary>
            The time when this resource is enlisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.lastPersistentFailureLogTime">
            <summary>
            The time of the last time persistent failure event is logged.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.lastUndenylistTryTime">
            <summary>
            The time when the resource was last tried to be un-denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.denylistedIps">
            <summary>
            List of all the denylisted ip's belong to this resource. If denylistedIps is null, it means that the resource has no ips but just a server name.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.denylistedIpCodeBlock">
            <summary>
            The lock that controls the access to the critical section codes related to the denylisted ips.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.tracingID">
            <summary>
            The tracing ID that will be used for undenylisting this resource.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DenylistStaleDuration">
            <summary>
            Duration in seconds to mark a given resource as denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationSinceEnlisted">
            <summary>
            Duration since this resource was denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationSinceLastQuery">
            <summary>
            Duration in seconds since the last time this resource has been queried if it is online.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationSinceLastUnDenylistAttempt">
            <summary>
            Duration since this resource was last attempted to be un-denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationForPersistentFailureLog">
            <summary>
            Duration since the last time when this resource was denylisted or logged as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsPersistentFailure">
            <summary>
            Indicates whether the resource has been long enough to be reported as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsCloudDBPartition">
            <summary>
            Indicates whether this resource is part of CloudDB partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsDroppedFromConfig">
            <summary>
            Indicates whether this resource has been taken out from Metadata cache due to a change in the config database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsFullyDenylisted">
            <summary>
            Indicates whether all the ip's for this resource is denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsFullyReachable">
            <summary>
            Indicates whether all the ip's for this resource is reachable.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.DenylistManager.denylistTableCodeLock">
            <summary>
            Critical section lock that controls to the denylist table access. Always acquire this lock before denylistQueueCodeLock.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.DenylistManager.denylistQueueCodeLock">
            <summary>
            Critical section lock that controls to the denylist queue access. Always acquire this lock after denylistTableCodeLock.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.DenylistManager.Denylist(System.Object,System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Add the input resource to the list of denylisted resources. 
            </summary>
            <param name="partitionKey">The partitionKey that leads the resource to be denylisted. It will be always null for non-clouddb scenarios.</param>
            <param name="ipAddress">The IP on the resource to denylist. IP could be the actual servername.</param>
            <param name="resource">The resource to denylist.</param>
            <Exceptions>ApplicationException if timeout expires before the lock request is granted.</Exceptions>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.DenylistManager.IsDenylisted(System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of denylisted resources.
            </summary>
            <param name="ipAddress">The IP address of the input resource to test whether it is in the list of the denylisted resources.</param>
            <param name="resource">The input resource to test whether it is in the list of the denylisted resources.</param>
            <returns>True if the given ip address of the given resource is in the list of the denylisted resources; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.DenylistManager.IsDenylisted(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of denylisted resources.
            </summary>
            <param name="resource">The input resource to test whether it is in the list of the denylisted resources.</param>
            <returns>True if the resource is in the list of the denylisted resources and all its ip addresses are in the denylist; false otherwise.</returns>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isReadOnly">
            <summary>
            true if no write db available for the partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.availableSecondaries">
            <summary>
            number of available secondary database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ResourceSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and maxNumber
            </summary>
            <param name="maxNumber">0..maxNumber random number</param>
            <returns>0...maxNumber</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabaseConnections(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Internal helper version of GetDBConnections
            </summary>
            <param name="connection">WstConnection</param>
            <param name="command">WstCommand object</param>
            <returns>WstDBConnections</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.ValidateSecondaryType">
            <summary>
            Validates that if given failover mode is available for the deployment type.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.CreateDatabaseConnection(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates a new WstDBConnection matching the partition/cmdtype/security/connectiontimeout.
            </summary>
            <remarks>
            Creates a WstDBConnection with SqlConnection that has its 
            ConnectionString initialized to match partition cmd type, 
            security, and timeout, but is NOT opened yet.
            </remarks>
            <param name="connection">SqlConnection</param>
            <param name="command">Physical Partition Number.</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase})">
            <summary>
            Internal/private helper to get a WstDatabase from the partition that would satisfy
            the specified WstCommandType.  Checks to make sure server is not denylisted, and
            DB is online.
            </summary>
            <param name="sqlFssNumber">Physical Partition Number</param>
            
            <param name="timeOutDatabases">WstDatabases that have had CommandTimeout errors</param>
            <param name="throttledDatabases">List of dbs to skip from selection</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.DeterminePartitionBoundaries(System.Int32@,System.Int32@)">
            <summary>
            Determines the starting sqlFss number and how many of the sqlFss should be iterated.
            </summary>
            <param name="initialSqlFssNumber">The initialSqlFssNumber</param>
            <param name="maxSqlFssIteration"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetPrimaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.PrimaryDatabaseStatus@)">
            <summary>
            Helper to find best primary DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase matching the criteria</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetSecondaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.SecondaryDatabaseStatus@,System.Boolean)">
            <summary>
            Helper to find best read DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <param name="forceLocalOnly">The server must be local</param>
            <returns>WstDatabase that best matches criteria (least stale, write vs read, etc.)</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetGeoPartnerDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.PrimaryDatabaseStatus@)">
            <summary>
            Helper to find best read DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase that best matches criteria (least stale, write vs read, etc.)</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.PrologueForExecution(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            Performs the last actions before execution. 
            </summary>
            <param name="command">The command that is going to be executed.</param>
            <param name="connection">The connection that is going to be used for the command execution .</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PartnerOnlyDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PartnerThenSecondaryDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PrimaryOnlyDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PrimaryThenSecondaryDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.SpecificDatabaseDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.WriteAllCopiesDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.CheckFileOperationAllowed(Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            See if the command can be executed in current config state
            </summary>
            <param name="failoverIn">client specified failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.GetFileShare(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode,System.Boolean)">
            <summary>
            Helper to get the appropriate FileShare for this indexMode/access.
            </summary>
            <param name="partition">partition index</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
            <param name="failoverModeIn">failover mode</param>
            <param name="updatesAllowed">Would the Op allow updates</param>
            <returns>WstFileShare</returns>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstContext">
            <summary>
            WstContext provides the Webstore routing and failover information (Deployment Name, Partition, Failover options).
            This context is used as input to the Webstore File/Directory APIs 
            (WstFile, WstDirectory, WstFileStream, WstFileInfo, WstDirectoryInfo)
            so that Webstore can route the operations to the correct File Shares.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAny">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAny to randomly select an available partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAllocate">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAllocate to automatically select best partition to allocate new data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor">
            <summary>
            Initializes a new instance of the WstContext class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment.
            </summary>
            <param name="deployment">Deployment name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment and partition.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            and failover options.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode,Microsoft.Webstore.WstClient.WstPartitionType)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            failover option, and partition type (logical/physical).
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.Clone">
            <summary>
            Create copy of this context.
            </summary>
            <returns>Copy of this WstContext</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFullPath(Microsoft.Webstore.WstClient.WstPath,System.Boolean,System.String@,Microsoft.Webstore.MetaData.WebstoreFileshare@)">
            <summary>
            Internal helper to get full path given for this context given the relative path and access mode required.
            </summary>
            <param name="path">relative path on fileshare</param>
            <param name="updatesAllowed">Is this an operation that could update the fileshare</param>
            <param name="rootPath">output the share's root path</param>
            <param name="fileShareOut">output the WebstoreFileshare used</param>
            <returns>full path</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFileShare(System.Boolean)">
            <summary>
            Helper on the WstContext to find a WebstoreFileshare that satisfies the context 
            </summary>
            <param name="updatesAllowed">Is this an operation that would allow udpates to the fileshare</param>
            <returns>WebstoreFileshare for context</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.HandleIOException(System.String,System.IO.IOException,System.Boolean)">
            <summary>
            HandleIOException.
            </summary>
            <param name="fullPath"></param>
            <param name="e"></param>
            <param name="fOkToRetry"></param>
            <returns>true if retry is OK</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetPath(Microsoft.Webstore.MetaData.WebstoreFileshare)">
            <summary>
            Gets the path "\\ + ServerName + \ + SharePath" of the given Fileshare.
            </summary>
            <param name="fileshare">Fileshare whose path to get.</param>
            <returns>Path "\\ + ServerName + \ + SharePath" indicated by the input file share.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Deployment">
            <summary>
            Gets or sets the Deployment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Partition">
            <summary>
            Gets or sets the partition index
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.FailoverMode">
            <summary>
            Gets or sets the failover mode
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.PartitionType">
            <summary>
            Gets or sets the WstPartitionType
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectory">
            <summary>
            WstDirectory exposes static methods for creating, moving, and enumerating 
            through directories and subdirectories.  (This is the Webstore equivalent 
            of the System.IO.Directory class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.#ctor">
            <summary>
            Private constructor (Static only class)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.CreateDirectory(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory path to create.</param>
            <returns>A WstDirectoryInfo as specified by path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time, in coordinated universal time (UTC) format, of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type String containing the names of subdirectories in path. </returns>
            <remarks>This method is identical to GetDirectories(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters 
            in InvalidPathChars.</param>
            <returns>A String array of directories matching the search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
            <remarks>This method is identical to GetFiles(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in 
            InvalidPathChars.</param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
            <remarks>This method is identical to GetFileSystemEntries(WstContext, String, String) with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") 
            followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of 
            the characters in InvalidPathChars.</param>
            <returns>A String array of file system entries matching the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetParent(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Retrieves the parent directory of the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or a null reference (Nothing in Visual Basic) if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="context">Webstore context for source and destination</param>
            <param name="srcDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for sourceDirName.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through 
            directories and subdirectories.  (This is the Webstore equivalent to the
            System.IO.DirectoryInfo class).
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileSystemInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.ToString">
            <summary>
            Returns the original path that was passed by the user.
            </summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Context">
            <summary>
            WstContext for this WstFileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.WstFileShare">
            <summary>
            WebstoreFileshare used for this WstFileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Attributes">
            <summary>
            Gets or sets the FileAttributes of the current FileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current FileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether a file or directory exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstDirectoryInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstDirectoryInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <returns>The last directory specified in path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete">
            <summary>
            Deletes this DirectoryInfo if it is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of DirectoryInfo objects.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type WstFileInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns a list of files and subdirectories from the current directory.
            </summary>
            <returns>An array of type WstFileSystemInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Returns a list of files and subdirectories from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a DirectoryInfo instance and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory. 
            The destination cannot be another disk volume or a directory with the identical name. 
            It can be an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Name">
            <summary>
            Gets the name of this DirectoryInfo instance.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFile">
            <summary>
            Provides static methods for the creation, copying, deletion, 
            moving, and opening of files, and aids in the creation of FileStream objects.
            WstFileStream is a thin wrapper over the .NET Framework FileStream object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.#ctor">
            <summary>
            Hide Constructor... all Static Methods
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.AppendText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a StreamWriter that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file to append to</param>
            <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy.</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy (relative to Webstore context).</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file (relative to Webstore context). This cannot be a directory or an existing file.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String,System.Int32)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <param name="buffersize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.CreateText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The file to be opened for writing (relative to Webstore context).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The name of the file to be deleted (relative to the Webstore context).</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to check (relative to the Webstore context).</param>
            <returns>true if the caller has the required permissions and path contains the name 
            of an existing file; otherwise, false. This method also returns false if path is a 
            null reference (Nothing in Visual Basic) or a zero-length string. If the caller 
            does not have sufficient permissions to read the specified file, 
            no exception is thrown and the method returns false regardless of the existence of path.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file (relative to the Webstore context).</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in local time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in UTC time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="context">Webstore context for the source and destination paths</param>
            <param name="srcPath">The name of the file to move.</param>
            <param name="destPath">The new path for the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A WstFileStream opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared WstFileStream that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access and the specified sharing option.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file</param>
            <returns>A WstFileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenRead(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only WstFileStream on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenWrite(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A read/write, unshared FileStream object on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.AppendText">
            <summary>
            Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
            <remarks>By default, full read/write access to new files is granted to all users.
            This method is a wrapper for the functionality provided by WstFile.Create.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CreateText">
            <summary>
            Creates a StreamWriter that writes a new text file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destPath">The path to move the file to, which can specify a different file name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A WstFileStream object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns>A WstFileStream object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenWrite">
            <summary>
            Creates a write-only WstFileStream.
            </summary>
            <returns>A new write-only unshared WstFileStream object.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Directory">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.DirectoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Name">
            <summary>
            Overridden. Gets the name of the file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileStream">
            <summary>
            Exposes a Stream around a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path and creation mode.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, and read/write permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, and buffer size.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. 
            However, note that the underlying operating system might not support asynchronous I/O, 
            so when specifying true, the handle might be opened synchronously depending on the platform. 
            When opened asynchronously, the BeginRead and BeginWrite methods perform better on large 
            reads or writes, but they might be much slower for small reads or writes. If the application 
            is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. 
            Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, 
            but using it without redesigning the application for asynchronous I/O can 
            decrease performance by as much as a factor of 10.
            </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.CreateNativeFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            Sets the m_NativeFileHandle value.
            </summary>
            <param name="fullPath"></param>        
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read. </param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous read.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Begins an asynchronous write.
            </summary>
            <param name="array">The buffer to write data to.</param>
            <param name="offset">The zero based byte offset in array at which to begin writing.</param>
            <param name="numBytes">The maximum number of bytes to write. </param>
            <param name="userCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous write.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Close">
            <summary>
            Overridden. Closes the file and releases any resources associated with the current file stream.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.System#IDisposable#Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndRead(System.IAsyncResult)">
            <summary>
            Overridden. Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndWrite(System.IAsyncResult)">
            <summary>
            Overridden. Ends an asynchronous write, blocking until the I/O operation has completed.
            </summary>
            <param name="asyncResult">The pending asynchronous I/O request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Flush">
            <summary>
            Overridden. Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the FileStream while permitting read access.
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.ReadByte">
            <summary>
            Overridden. Reads a byte from the file and advances the read position one byte.
            </summary>
            <returns>The byte cast to an int, or -1 if reading from the end of the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Overridden. Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin. </param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.SetLength(System.Int64)">
            <summary>
            Overridden. Sets the length of this stream to the given value.
            </summary>
            <param name="length">The new length of the stream. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked.
            </summary>
            <param name="position">The beginning of the range to unlock. </param>
            <param name="length">The range to be unlocked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="array">The array to which bytes are written.</param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.WriteByte(System.Byte)">
            <summary>
            Overridden. Writes a byte to the current position in the file stream.
            </summary>
            <param name="bvalue">A byte to write to the stream.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanRead">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanSeek">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanWrite">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Handle">
            <summary>
            Gets the operating system file handle for the file that the current WstFileStream object encapsulates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.IsAsync">
            <summary>
            Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Length">
            <summary>
            Overridden. Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Name">
            <summary>
            Gets the name of the FileStream that was passed to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Position">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.WstFileshare">
            <summary>
            The WstFileShare used to open this stream.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPath">
            <summary>
            Summary description for WstPath.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstPath.ValidatePath(System.String,System.String)">
            <summary>
            Validates that the relative path is well formed.
            </summary>
            <param name="path"></param>
            <param name="argument">argument name of the path</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.Initialize">
            <summary>
            Initializes the MetadataHelper. This function is not thread-safe so should be called from a thread-safe environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCollectPeriod(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the counter collection period for the given deployment.
            </summary>
            <param name="deployment">The deployment of the counter collection period to return.</param>
            <returns>Number of seconds between resetting the request execution time counters.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyExcellent(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyGood(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "good" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "good".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyOK(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyPoor(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "poor" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "poor".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerDataCenterName(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get data center name for a specific database's server.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetLatencyBucket(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get the longest latency for replication to this database
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsLocal(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if the database is in the same datacenter this client reside.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsFirstDatabaseFresherThanSecondary(Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if secondary database1 is fresher than secondary database2,
            database2 is our preference.
            </summary>
            <param name="database1"></param>
            <param name="database2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Gets the owner ApplicationContext for the matching WebstoreDeployment of WebstoreResource.
            </summary>
            <param name="resource">The WebstoreResource to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment of WebstoreResource if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the owner ApplicationContext for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerAddress(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Get either server name or server ip address if there is one for this server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneDatabase(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets a sample WebstoreDatabase for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment that owns returned WebstoreDatabase.</param>
            <returns>One of the WebstoreDatabase which is part of the WebstoreDeployment. It may be null in case there are no Sql fail safe set for the given deployment.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment that owns returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is part of the WebstoreDeployment. It may be null in case there are no fail safe set for the given deployment.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreServer)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreServer.
            </summary>
            <param name="server">The WebstoreServer that is hosting the returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is hosted by the WebstoreServer. It may be null.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.Start">
            <summary>
            Starts the core metadata background threads: EventGeneration, PollDeployments, PollForNewServers, PollForNewDeployments, PollForUserSettings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.StartBackgroundThread(System.String,Microsoft.Webstore.MetaData.ThreadManager.ThreadFunctionDelegate,System.Object,System.TimeSpan)">
            <summary>
            Starts a background thread which will be controlled by the current thread manager.
            </summary>
            <param name="functionIdentifier">The user friendly text identifier for the function to be intiated in the background thread.</param>
            <param name="threadFunction">The function to be intiated in the background thread.</param>
            <param name="functionParameter">The parameter for the function to be intiated in the background thread.</param>
            <param name="functionSleepInterval">The interval that will be taken between each execution of the function to be intiated in the background thread.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.WrapperFunctionForBackgroundThreadFunction(System.Object)">
            <summary>
            The wrapper function for the the background thread function.
            </summary>
            <param name="threadParametersHolder"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.StopAll">
            <summary>
            Stop the background thread.
            In practice, since this Thread.IsBackground = true for our thread, it will get
            automatically Thread.abort() by the runtime when the process is exiting.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.BackgroundPollDeployments(System.Object)">
            <summary>
            The background thread updates replication delay info, denylists, 
            and checks health of WSTService to make sure we will get notifications from
            the admin console if configuration changes occur (promote/demote, online/offline).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.BackgroundPollForNewDeployments(System.Object)">
            <summary>
            Polls for addition of new deployments.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder">
            <summary>
            Privat class that holds the information set for the function, WrapperFunctionForBackgroundThreadFunction, that will initiated in the background thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.#ctor(System.String,Microsoft.Webstore.MetaData.ThreadManager.ThreadFunctionDelegate,System.Object,System.TimeSpan)">
            <summary>
            Constructs a ThreadParametersHolder that will be consumed by WrapperFunctionForBackgroundThreadFunction.
            </summary>
            <param name="functionIdentifier">The user friendly text identifier for the function to be intiated in the background thread.</param>
            <param name="threadFunction">The function to be intiated in the background thread.</param>
            <param name="functionParameter">The parameter for the function to be intiated in the background thread.</param>
            <param name="functionSleepInterval">The interval that will be taken between each execution of the function to be intiated in the background thread.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.PollingFunctionIdentifier">
            <summary>
            The user friendly text identifier for the function to be intiated in the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.PollingFunction">
            <summary>
            The function to be intiated in the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.pollingFunctionParameters">
            <summary>
            The parameters for the function to be intiated in the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.pollingFunctionSleepInterval">
            <summary>
            The interval that will be taken between each execution of the function to be intiated in the background thread.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ThreadManager.ThreadFunctionDelegate">
            <summary>
            The delagate for the the function to be intiated in the background thread.
            </summary>
            <param name="parameter">The parameter for the function to be intiated in the background thread.</param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCluster">
            <summary>
            WebstoreCluster
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreObject`1">
            <summary>
            All Wmo classes derive from this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.Equals(System.Object)">
            <summary>
            The equals method comapres the keys.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetUserStore(System.Guid)">
            <summary>
            The consumer can use this method to store information
            related to a particular WebstoreMetaDataObject.
            E.g. the client library might store information related
            to throttling per resource
            </summary>
            <param name="userStoreKey">The key for which to get the 
            user store</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.SetUserStore(System.Guid,System.Object)">
            <summary>
            Use this method to get the stored information from the
            userStore.
            </summary>
            <param name="userStoreKey"></param>
            <param name="value">The key with which to associate the 
            user store</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.RemoveUserStore(System.Guid)">
            <summary>
            Removes the UserStore data for the given key.
            NOTE: The return value is not a bool. So that 
            malacious code might not try to remove user stores
            trying different keys.
            </summary>
            <param name="userStoreKey">The key for which to 
            remove the user store</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.Key">
            <summary>
            Gets the key for the WebstoreObject.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.IsObjectExpired">
            <summary>
            Gets information about whether the given WebstoreObject
            is expired - dropped from WstConfig.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Uid">
            <summary>
            Uid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Name">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Path">
            <summary>
            Path
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreClusterCollection">
            <summary>
            Collection of WebstoreCluster objects
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2">
            <summary>
            WebstoreKeyedCollection represents a keyed collection based on a sorted list approach. WebstoreKeyedCollection values are dynamic and can be updated by other threads so there is no guarantee of repeating reads.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCollectionBase">
            <summary>
            base class for all Wmo collections.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCollectionBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2._innerList">
            <summary>
            The inner sorted list that holds the key and the values. This object might be replaced by another thread so there is no guarantee on getting the same object twice. Every access to this member should ensure that, it takes a reference to the innerlist if it will be used in the next code cycles.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.ContainsKey(`0)">
            <summary>
            Determines whether the WebstoreKeyedCollection contains a specific key.
            </summary>
            <param name="key">The key to locate in the WebstoreKeyedCollection.</param>
            <returns>true if the WebstoreKeyedCollection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.ContainsValue(`1)">
            <summary>
            Determines whether the WebstoreKeyedCollection contains a specific value.
            </summary>
            <param name="value">The value to locate in the WebstoreKeyedCollection. The value can be null for reference types.</param>
            <returns>true if the WebstoreKeyedCollection contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetKeyAt(System.Int32)">
            <summary>
            Gets the key at the index location of the collection.
            </summary>
            <param name="index">The index location for the key.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the index location of the collection.
            </summary>
            <param name="index">The index location for the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire WebstoreKeyedCollection
            </summary>
            <param name="key">The key to locate in the WebstoreKeyedCollection.</param>
            <returns>The zero-based index of key within the entire WebstoreKeyedCollection if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfValue(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the entire WebstoreKeyedCollection
            </summary>
            <param name="value">The value to locate in the WebstoreKeyedCollection The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of value within the entire WebstoreKeyedCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.MergeWithCollection(Microsoft.Webstore.MetaData.WebstoreKeyedCollection{`0,`1},System.Boolean,Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Merges the current collection with the specifed WebstoreKeyedCollection. Merge can be based on a delete mode where missing entries in the specified WebstoreKeyedCollection indicates the items should be deleted otherwise a regular merge semantics will be applied.
            </summary>
            <param name="collectionToMerge">The WebstoreKeyedCollection that will be merged with the current collection.</param>
            <param name="isMaxDeleteTicketChanged">Indicates whether missing entries should be treated as deleted or no-op.</param>
            <param name="site">The site that the current WebstoreKeyedCollection belongs to.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`0,`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="keyToRemove"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Replace(Microsoft.Webstore.MetaData.WebstoreKeyedCollection{`0,`1})">
            <summary>
            Replaces the innerlist with the innerlist of the specied KeyedCollection and returns a reference to the original innerlist, as an atomic operation.
            </summary>
            <param name="newKeyedCollection">The variable to set to the specified value.</param>
            <returns>The original value of location.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Replace(System.Collections.Generic.SortedList{`0,`1})">
            <summary>
            Replaces the innerlist with the specified innerlist and returns a reference to the original innerlist, as an atomic operation.
            </summary>
            <param name="newList">The variable to set to the specified value.</param>
            <returns>The original value of location.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.OnCollectionChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value if key exists in collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Contains(`1)">
            <summary>
            Returns whether the collection containst the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, 
            starting at a particular Array index. 
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`1)">
            <summary>
            Removes the given item from the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CollectionChanged">
            <summary>
            The collection changed Event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Item(`0)">
            <summary>
            Gets the object associated with the specified key in the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Comparer">
            <summary>
            Gets the System.Collections.Generic.IComparer for the sorted list.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.InnerList">
            <summary>
            Gets the inner System.Collections.Generic.SortedList structure of the WebstoreKeyedCollection. This property does not guarantee repeating reads. Under no condition, the returned structure should be used other than read purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Keys">
            <summary>
            Gets a collection containing the keys in the System.Collections.Generic.SortedList. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Values">
            <summary>
            Gets a collection containing the values in the System.Collections.Generic.SortedList.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Count">
            <summary>
            Gets the count of items in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IsReadOnly">
            <summary>
            Tells whether the collection is readonly
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.CollectionChangedEventHandler">
            <summary>
            Delegate for CollectionChangedEventHandler
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfigCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection">
            <summary>
            The collection of WebstoreDatabases.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1">
            <summary>
            Forms the base class for Resource collections.
            The WmoDatabaseCollection and the WmoFileshareCollection derive from this.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1.Item(System.String,System.String)">
            <summary>
            Property - serverName:resourceName
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatencyCollection">
            <summary>
            Each database has a collection of WebstoreDatabaseLatencyCollection.
            Generally this is used for multimaster topology where each db replicated to 
            each of the fss partners.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionCollection">
            <summary>
            Collection of dataPartitions.
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDep_ClusterSettingsCollection">
            <summary>
            WebstoreDep_ClusterSettingsCollection 
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection">
            <summary>
            This class holds collection of deployments represented in the WstConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.Guid)">
            <summary>
            Returns the deployment associated with the given GUID.
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.String)">
            <summary>
            Returns the deployment object.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareCollection">
            <summary>
            The collection of Fileshares in a FileFailsafeset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFssCollection">
            <summary>
            The collection of Fileshare Failsafesets.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFssCollection`1">
            <summary>
            WebstoreResourceFssCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection">
            <summary>
            The WebstoreGeoPartnerCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection.Add(Microsoft.Webstore.MetaData.WebstoreGeoPartner)">
            <summary>
            Adds item to collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection.Contains(System.String)">
            <summary>
            Returns whether a GeoPartner exists in the given data center.
            </summary>
            <param name="dataCenterName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection.Item(System.String)">
            <summary>
            Returns the WebstoreGeopartner associated with the DataCenter
            </summary>
            <param name="dataCenterName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGuidCollection">
            <summary>
            The WebstoreGuidCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifestCollection">
            <summary>
            The WebstoreManifestCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreServerCollection.Contains(System.Guid)">
            <summary>
            Does the server collection contain server corrosponding to the given GUID.
            </summary>
            <param name="svrUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerCollection.Item(System.String)">
            <summary>
            Gets the server object of the given name.
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRoleCollection">
            <summary>
            The WebstoreServerRoleCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettingsCollection">
            <summary>
            WebstoreSettingsCollection
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFssCollection">
            <summary>
            The collection of SQL Failsafesets.
            </summary>s
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreStringCollection">
            <summary>
            The WebstoreStringCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreStringCollection.Contains(System.String)">
            <summary>
            Whether the server belongs to the given role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WmoEnumerator`2">
            <summary>
            This class implements the IEnumerator over a WebstoreKeyedCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Dispose">
            <summary>
            The dispose method
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.MoveNext">
            <summary>
            Moves to the next element in the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Reset">
            <summary>
            Moves to the start of the enumerator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WmoEnumerator`2.Current">
            <summary>
            Returns the current element of the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfig">
            <summary>
            Summary description for WebstoreConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnConfigCacheChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.SetPollingSucceeded">
            <summary>
            Each background thread informs it passed polling.
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GenerateConfigExpiredEvent">
            <summary>
            Generates the cached configuration expired event if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnUserSettingsChanged(System.Object[])">
            <summary>
            called to fire the UserSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnWebstoreSettingsChanged(System.Object[])">
            <summary>
            called to fire the WebstoreSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnEnvironmentChanged(System.Object[])">
            <summary>
            called to fire the EnvironmentChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsUserSettingPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether 
            polling is required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationUserSettings(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsEnvSvrPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationEnvSvr(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationNewDeps(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.DeepInitializeAllDeployments">
            <summary>
            Initializes the deployment including the collections.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.InternalInitialize">
            <summary>
            Initializes this config instance (singleton).
            Things that it does:
            1.  Shallow initialize all the registered servers
            2.  Start background thread to look for new servers
            3.  Shallow initialize all the registered deployments
            4.  Start background thread to poll for deployment changes
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.Initialize">
            <summary>
            Call this method to initialize the instance. 
            This should be called before accessing any properties/methods of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.Refresh(System.Boolean)">
            <summary>
            Force all internal classes to refresh themselves
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetManifestCollection(System.Boolean)">
            <summary>
            returns a Collection of WmoManifest objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetServerRoleCollection(System.Boolean)">
            <summary>
            returns a Collection of ServerRole objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDistributionDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentChanged">
            <summary>
            The event that gets fired when environment is updated
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigCacheChanged">
            <summary>
            The event that gets fired when cached configuration either gets expired
            or gets renewed after expiration.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettingsChanged">
            <summary>
            The event that gets fired when the userSettings
            are changed
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.WebstoreSettingsChanged">
            <summary>
            The event that gets fired when the webstoreSettings
            are changed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigConnectionString">
            <summary>
            Gets the connectin string to be used
            to query the config db.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EventsToGenerateList">
            <summary>
            returns the object that stores the list
            of events that need to be generated by the 
            background event generation thread.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Deployments">
            <summary>
            Gets a collection of all deployments that the Configuration database monitors. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Servers">
            <summary>
            Gets the Server collection. Depending on the WmoViewType hint,
            the server collection might contain one, subset or all of the servers that
            the WstConfig database has.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SiteName">
            <summary>
            The site Name for this instance of the WmoConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SQLDatabases">
            <summary>
            Gets the list of SQLDatabases that represent the physical sql server databases for this site.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SelfAdminInfo">
            <summary>
            Gets the Information that the self healing agent and 
            the Monitoring agents require. Polling for changes on 
            that information only starts after the first call to 
            this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentSettings">
            <summary>
            Gets the Environment settings for the Site
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettings">
            <summary>
            Gets the UserSettings object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Settings">
            <summary>
            Gets the settings object from which all the 
            centralized settings stored in config can be queried
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.IsInitialized">
            <summary>
            Has the Initialize method been called.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ClientDataCenter">
            <summary>
            Gets this client's datacenter
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.EnvironmentChangedEventHandler">
            <summary>
            Delegate for the EnvironmentChanged event
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventHandler">
            <summary>
            Delegate for the Webstore Config cache changed event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.SettingsChangedEventHandler">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedAction">
            <summary>
            This action defines, what happened to the config cache
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Expired">
            <summary>
            The cached configuration has expired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Renewed">
            <summary>
            The cached configuration has been renewed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs">
            <summary>
            The event arguments for the WebstoreConfigCacheChanged event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.Action">
            <summary>
            What was the action - expired/renewed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.TimeSpan">
            <summary>
            What time elapsed since the last action.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllUserSettings(System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            WspGetAllUserSettings
            </summary>
            <param name="Ticket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentsShallowInitInfo(System.DateTime)">
            <summary>
            execute WspGetDeploymentsShallowInitInfo
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV6_0(System.DateTime,System.DateTime,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV6_0
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="returnVal"></param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV6_0(System.DateTime,System.DateTime,System.String,System.Boolean,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV6_0
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="site"></param>
            <param name="useFileData"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentInfoByUid_V6_0(System.Guid,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            Execute WspGetDeploymentInfoByUid_V6_0
            </summary>
            <param name="depUid"></param>
            <param name="ticket"></param>
            <param name="fssLatencyTicket"></param>
            <param name="settingTicket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetMonitoringInfo_V6_0(System.DateTime)">
            <summary>
            Execute WspGetMonitoringInfo_V6_0
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllManifests">
            <summary>
            Gets the Manifest related Information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllSecurityRoles(System.Guid)">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <param name="manifestUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllServerRoles">
            <summary>
            Returns all of the server roles for in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllDatabaseTemplate">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigurationInfo.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceStatus">
            <summary>
            Enumerates the different Statuses a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Online">
            <summary>
            The WmoResource (database/Fileshare) is Online
            This means clients can access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Offline">
            <summary>
            The WmoResource (database/Fileshare) is Offline
            This means clients cannot access it
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NoWriteAll">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            This means clients cannot access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NeedsRepair">
            <summary>
            The WmoResource(database/Fileshare) is marked
            as needs repair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NotDeployed">
            <summary>
            The WmoResource(database/Fileshare) is 
            not yet Deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Standby">
            <summary>
            The WmoResource(database only) is 
            in Standby state. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceRole">
            <summary>
            Enumerates the different Roles a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Primary">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Secondary">
            <summary>
            The WmoResource (database/Fileshare) is Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringPrincipal">
            <summary>
            The WmoResource (database only) is Mirroring Principal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringMirror">
            <summary>
            The WmoResource (database only) is Mirror database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceType">
            <summary>
            The type of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.Database">
            <summary>
            The resource is of type SQL
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.FileShare">
            <summary>
            The resource is of type File
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabase">
            <summary>
            Gives all the information needed to identify this database.
            Information includes - DeploymentUID, FailsafesetNumber, Status, Role etc.
            It also publishes events which get generated after a Status or Role change of the database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResource">
            <summary>
            Represents a Webstore resource. 
            Forms the base class for WMODatabase and WMOFileshare classes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.CompareTo(System.Object)">
            <summary>
            Compares two resources. It compares on the key.
            </summary>
            <param name="compareWith"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.Equals(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            The IEquatable::Equals method
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Name">
            <summary>
            Gets the Name of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerUid">
            <summary>
            Gets the Server UID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Server">
            <summary>
            Gets the Server on which this Resource resides
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerName">
            <summary>
            Gets the name of the server on which this resource is.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.FssId">
            <summary>
            Gets the Failsafeset ID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Uid">
            <summary>
            Gets the associated Resource Guid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.DeploymentUid">
            <summary>
            Gets the Guid associated with the deployment
            of which this Resource is a part of.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceFailSafeSet">
            <summary>
            Gets the corrosponding resource FailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Status">
            <summary>
            Gets the Status of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.IsOnline">
            <summary>
            Whether the database is online. Most required 
            by all users and thus a property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStale">
            <summary>
            Is this database's latency higher than stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStaleRemote">
            <summary>
            Is this database's latency higher than DataCenter stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsPrimary">
            <summary>
            Returns true if this database is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsGeoPartner">
            <summary>
            Returns true if this database is GeoPartner database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsDefaultGeoPartner">
            <summary>
            Returns true if this database is Default GeoPartner database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.Latency">
            <summary>
            Gets the highest latency for this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.LatencyBucket">
            <summary>
            Gets the latency bucket under which the 
            database falls.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.DefaultStatus">
            <summary>
            The default status for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency">
            <summary>
            Latency object for the database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Key">
            <summary>
            Objects Unique key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.SourceDatabase">
            <summary>
            Gets the Source database object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Latency">
            <summary>
            Gets the latency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Bucket">
            <summary>
            Gets the latency bucket for the given latency.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDbSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and randomMax
            </summary>
            <param name="randomMax">0..randomMax random number</param>
            <returns>0...randomMax</returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartition">
            <summary>
            Stores information about a single Data Partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Number">
            <summary>
            Gets the partition number.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.SQLFssId">
            <summary>
            Gets the SQL Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.FileFssId">
            <summary>
            Gets the File Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Status">
            <summary>
            Gets the status of the datapartition.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDenylistMgr.HandleError(System.Exception,Microsoft.Webstore.MetaData.WebstoreResource,System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Handle the error that was received from executing the summary.
            This will also denylist if needed.
            </summary>
            <param name="ex"></param>
            <param name="res"></param>
            <param name="conn"></param>
            <param name="isRegistryResource"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDenylistMgr.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.DeploymentPropertiesChangedEventHandler">
            <summary>
            Delegate for DeploymentPropertiesUpdated
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeployment">
            <summary>
            This class represents a Wmo deployment and its associated properties.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.Refresh(System.Boolean)">
            <summary>
            refreshes this deployment with latest changes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsDepConfigurationExpired">
            <summary>
            Gives the state of polling for this deployment.
            </summary>
            <returns>true if expired, false if not</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.GetCachedFirstSqlFssForWstConfig">
            <summary>
            Gets the first Sql Fss in the deployment and caches it
            </summary>
            <returns>WebstoreSQLFss First cached FSS in the list</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.RenewExpiration(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ShallowInitializeDeployment(System.Data.IDataReader)">
            <summary>
            Shallow initializes from the data reader. Does not initialize the collections.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ForceReInitialize">
            <summary>
            Reinitialize deep, by reading from the config directly. 
            Null tickets are passed so that the whole configuration 
            is re-read.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.OnDeploymentSettingsChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ParsePolledDepInfoAndUpdateCache(System.Data.IDataReader)">
            <summary>
            Updates the present cache with what was just polled.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.MergeResultsIntoCache(Microsoft.Webstore.MetaData.WebstoreDeployment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Merge the results from TempDep into the internal cache of this deployment
            </summary>
            <param name="tempDep"></param>
            <param name="IsMaxTicketChanged"></param>
            <param name="IsMaxDeleteTicketChanged"></param>
            <param name="fEnvironmentSettingsChanged"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.MergeGeoPartnerResultsIntoCache(Microsoft.Webstore.MetaData.WebstoreDeployment,System.Boolean)">
            <summary>
            Merges geo specific information into the cache.
            </summary>
            <param name="temporaryGeoDeployment"></param>
            <param name="isMaxDeleteTicketChanged"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.FillInGeoPartner(Microsoft.Webstore.MetaData.WebstoreGeoPartner)">
            <summary>
            When the GeoPartner data is first collected from the result set, we only have the
            databases UIDs. This method will gather the actual database object to "fill in"
            the missing DB objects in the GeoPartner.
            </summary>
            <param name="sparseGeoPartner"></param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreDeployment.DeploymentPropertiesChanged">
            <summary>
            The deployment properties changed event.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Name">
            <summary>
            Gets the name of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Uid">
            <summary>
            Gets the Guid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.ManifestUid">
            <summary>
            Gets the manifest Uid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxTicket">
            <summary>
            Gets the max ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxPartitionTicket">
            <summary>
            Gets the max partition ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxDeleteTicket">
            <summary>
            Gets the max delete ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxFssLatencyTicket">
            <summary>
            Gets the max Failsafeset latency ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxWebstoreSettingsTicket">
            <summary>
            Gets the max WebstoreSettings ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Description">
            <summary>
            Description of the Deployment 
            as registered in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.PartitionType">
            <summary>
            Gets the type of partitioning for this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryType">
            <summary>
            Secondary type of this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultWriteFailoverMode">
            <summary>
            Gets the default write failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultWriteFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleThreshold">
            <summary>
            Gets the Secondary Stale Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleDCThreshold">
            <summary>
            Gets the Secondary Stale Data Center Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SiteConfigurationDeployment">
            <summary>
            Gets whether the current deployment is a site configuration deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLFailSafeSets">
            <summary>
            Get the collection of SQL Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileFailSafeSets">
            <summary>
            Get the collection of File Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Partitions">
            <summary>
            Get the collection of logical partitions for the deployment
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsGeoEnabled">
            <summary>
            Gets the status of GeoAwareness.
            /// </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsInitialized">
            <summary>
            Call this property to find out if this deployment
            has been initialized.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsShallowInitialize">
            <summary>
            Returns true if deployment has been shallow initialized.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings">
            <summary>
            This class holds the environmen settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Name">
            <summary>
            Name of the Environment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetService">
            <summary>
            PollingOffsetService
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket0">
            <summary>
            LatencyBucket0
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket1">
            <summary>
            LatencyBucket1
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket2">
            <summary>
            LatencyBucket2
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket3">
            <summary>
            LatencyBucket3
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalClient">
            <summary>
            Gets client polling interval.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetClient">
            <summary>
            Gets the amount of time before the TicketExpirationInterval
            that the client should start polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalService">
            <summary>
            Gets the interval of time after which the service should repoll.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreErrorHelper">
            <summary>
            Error Helper for getting string resources, IDs and names.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.SettingNotExistsErrorNumber">
            <summary>
            error number for SettingNotExists error
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Number">
            <summary>
            The ID Number associated with this error resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Format">
            <summary>
            The Format string before the parameters are inserted.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreErrorHelper.#ctor(System.String)">
            <summary>
            The constructor for the class requires the Short name.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventsToGenerateList">
            <summary>
            Stores global list of events to be generated.
            The event generation thread comes and collects
            the list and fires the events synchronously.
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshare">
            <summary>
            Represents file share information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreFileshare.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.IsPrimary">
            <summary>
            Returns true if this fileshare is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFss">
            <summary>
            Represents a Fileshare Failsafeset.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFss">
            <summary>
            Represents a Webstore resource Failsafeset. 
            Forms the base class for WMOSQLFss and WMOFileshareFss classes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss">
            <summary>
            Represents a basic Webstore FailSafeSet resource. Simply the FSS and the Primary and
            the DefaultPrimary.
            Forms the base class for WebstoreResourceFss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss.Deployment">
            <summary>
            The deployment to which this ResourceFailsafeset belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss.FssId">
            <summary>
            Gets the Failsafeset ID associated with this Failsafeset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResourceFss.Equals(System.Object)">
            <summary>
            The equals method compares the WebstoreResourceBasicFss by checking their ID and Deployment.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResourceFss.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Status">
            <summary>
            Gets the status of this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.SecondaryType">
            <summary>
            Gets the type of secondry for this failsafeset.
            During upgrade different Failsafesets of the 
            same deployment might have different WmoSecondaryType's
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.Fileshares">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.PrimaryFileshare">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.DefaultPrimaryFileshare">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGeoPartner">
            <summary>
            Gives information about the SQLFSS in the deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartner.Equals(System.Object)">
            <summary>
            The equals method compares the WebstoreResourceFss by checking their ID and Deployment.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartner.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartner.DataCenterName">
            <summary>
            The Name of the DataCenter for this GeoPartner
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartner.GeoPartnerDatabase">
            <summary>
            Gets the current GeoPartner for this FSS and DC
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartner.DefaultGeoPartnerDatabase">
            <summary>
            Gets the default GeoPartner for this FSS and DC
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreIPAddress">
            <summary>
            Stores information about server IP address.
            Wmo supports 2 IPs per server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IpAddress">
            <summary>
            Gets the ip address string.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Switch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.NetworkSwitch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IsPreferred">
            <summary>
            Is this IP Preferred by the clients.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Server">
            <summary>
            Gets the server to which this IP address belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstorePartitionType">
            <summary>
            What type of partition.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifest">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreManifest.GetSecurityRoles">
            <summary>
            Returns a list of security roles associated with this manifest
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Uid">
            <summary>
            Manifest Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Name">
            <summary>
            Manifest Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Version">
            <summary>
            Manifest Version.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Description">
            <summary>
            User defined description of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Topology">
            <summary>
            Topology of the manifest (SingleMaster, Multimaster, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionType">
            <summary>
            Type of partitioning scheme
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionCount">
            <summary>
            Count of number of partitions.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetaData">
            <summary>
            The class that exposes all the the Webstore MetaData.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetaData.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get centralized setting by name from default site
            </summary>
            <param name="settingName"></param>
            <param name="deployment"></param>
            <param name="clusterName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetaData.AddSettingsChangedEventHandler(Microsoft.Webstore.MetaData.SettingsChangedEventHandler)">
            <summary>
            Add SettingsChangedEventHandler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Instance">
            <summary>
            Gets the Class singleton instance
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.DefaultConfig">
            <summary>
            Gets the default config instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Sites">
            <summary>
            Gets the list of sites.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Item(System.String)">
            <summary>
            Gets the config instance for the given site
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAction">
            <summary>
            Gives information about the action in the WstConfig database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase">
            <summary>
            Guid Keyed item base class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Uid">
            <summary>
            Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreActionCollection">
            <summary>
            Collection of Actions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreActionCollection.Contains(System.Guid)">
            <summary>
            Does the action collection contain action corresponding to the given GUID.
            </summary>
            <param name="healingActionUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessAction">
            <summary>
            ProcessAction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.Action">
            <summary>
            Safeguard
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcess">
            <summary>
            Gives information about the alert process in the WstConfig database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection">
            <summary>
            Collection of alert process in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection.Contains(System.Guid)">
            <summary>
            Does the alert process collection contain alert process corresponding to the given GUID.
            </summary>
            <param name="alertProcessUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection">
            <summary>
            Collection of process actions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Contains(System.Guid)">
            <summary>
            Does the process action collection contain process actions corresponding to the given GUID.
            </summary>
            <param name="processActionUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Item(System.String)">
            <summary>
            Gets the processaction object of the given name.
            </summary>
            <param name="processActionName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertCondition">
            <summary>
            Gives information about the conditions for the alert rule
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.MonitoredDatumName">
            <summary>
            MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.ComparisonOperator">
            <summary>
            Comparison
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.Threshold">
            <summary>
            Threshold
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertRule">
            <summary>
            Gives information about the rule for an Alert generation.
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertAt">
            <summary>
            GenerateAlertAt
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.ResolveAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.Severity">
            <summary>
            Severity
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcess">
            <summary>
            AlertProcess
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryCount">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryPeriod">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection">
            <summary>
            Collection of alert rule conditions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection.Contains(System.Guid)">
            <summary>
            Does the alert rule condition collection contain condition corresponding to the given GUID.
            </summary>
            <param name="alertConditionUid"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.UpdateServerRoles">
            <summary>
            Specifies if we should update the server roles of the destination server.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.ServerPoolServerRole">
            <summary>
            Server role for the server pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.FailedServerServerRole">
            <summary>
            Server Role for failed servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstAlert">
            <summary>
            Container for alert information
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstMonData">
            <summary>
            Container for alert monitored data polled from the PerfDB
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty">
            <summary>
            WebstoreMonitoringProperty
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum">
            <summary>
            Information about the MonitoredDatum. This is used by the 
            monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Type">
            <summary>
            AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.SamplingFrequency">
            <summary>
            SamplingFrequency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationType">
            <summary>
            AggregationType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationInterval">
            <summary>
            AggrInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.StaleTime">
            <summary>
            StaleTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.RatePrecision">
            <summary>
            RatePrecision
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.ServerRoleUid">
            <summary>
            ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.CollectAt">
            <summary>
            CollectAt
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo">
            <summary>
            The instance of this class provides all information that is
            needed by the Monitoring agent and the self healing agent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Refresh(System.Boolean)">
            <summary>
            refreshes this deployment with latest changes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.RenewExpiration(System.DateTime)">
            <summary>
            Renews configuration expiration interval.
            </summary>
            <param name="dtConfigExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollSelfAdminInfo(System.Boolean)">
            <summary>
            Poll for self Admin Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.StartMonitoringInfoThread">
            <summary>
            Starts polling for monitoring information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.BackgroundPollSelfAdminInfo(System.Object)">
            <summary>
            Polls for monitoring information changes. This includes all the tables that are used by the monitoring and the healing agent.
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsInitialized">
            <summary>
            Set to true after first call to get the SelfAdminInfo is made.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1">
            <summary>
            WebstoreSelfAdminInfoObjectsCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1.Item(System.String)">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollectionCollection`1">
            <summary>
            The collection for the Metadata KeyedCollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServer">
            <summary>
            Gives information about the server in the WstConfig database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Config">
            <summary>
            Gets the config database for this server
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.IPAddresses">
            <summary>
            Gets the collection of IPAddresses for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Cluster">
            <summary>
            Gets the cluster information for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Databases">
            <summary>
            Gets a collection of WmoDatabase on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Fileshares">
            <summary>
            Gets the collection of Fileshares on this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ReplicationDistributionServer">
            <summary>
            Gets the replication distribution server for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Uid">
            <summary>
            Gets the Guid associated with this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Name">
            <summary>
            Gets the name of the server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DataCenterName">
            <summary>
            Gets the datacenter the server belongs to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Description">
            <summary>
            Gets the description for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DistributionDatabaseTemplateName">
            <summary>
            Gets the Distribution Database Template Name for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointName">
            <summary>
            Gets the name of the registered mirroring endpoint name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointPort">
            <summary>
            Gets the port number associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringCompleteDomainName">
            <summary>
            Gets the complete domain name associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ServerRoles">
            <summary>
            Server roles for this server.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRole">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Uid">
            <summary>
            ServerRole Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Name">
            <summary>
            ServerRole Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Description">
            <summary>
            ServerRole Description.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Name">
            <summary>
            Name of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Uid">
            <summary>
            Uid of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase._server">
            <summary>
            The SQL server of the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Deployment">
            <summary>
            Gets the deployment which SQLDatabase belongs to. Our design in Throttling limits to have only one deployment on each database and this limitation will be reflected to Metadata as well. The limitation from throttling is because of the coupling between throttling and SQLConnection pooling. They both need to be per database. For clouddb, there can be multiple deployments per database but our throttling layer cannot support this. The affects will be limited to the centralized settings aspect of the throttling. Settings at deployment will be applied randomly. Other level of settings should work fine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.DatabaseName">
            <summary>
            Gets the name that represent the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Key">
            <summary>
            Gets the SQLDatabaseName key for the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Name">
            <summary>
            Gets the SQLDatabaseName that represent the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Replicas">
            <summary>
            Gets the list of all the replicas that are hosted by the current SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Server">
            <summary>
            Gets the SQL server of the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.ServerName">
            <summary>
            Gets the SQL server name of the SQLDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName._serverName">
            <summary>
            The SQL server name of the SQLDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName._databaseName">
            <summary>
            The name of the SQLDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName._hashCode">
            <summary>
            Computed hash code for the SqlDatabase. MaxValue is chosen as initial value because hash code calculation can never lead to MaxValue.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName.Name">
            <summary>
            Gets the name of the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName.ServerName">
            <summary>
            Gets the SQL server name of the SQLDatabase.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFailoverMode">
            <summary>
            Enumerates the different failover modes the client library uses.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOnly">
            <summary>
            Only try to primary resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryThenPrimary">
            <summary>
            First try secondary resource and then primary.
            </summary>         
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryOnly">
            <summary>
            Only try secondary resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryThenSecondary">
            <summary>
            First try primary resource and then secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOrSecondary">
            <summary>
            Try either primary or secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultRead">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultWrite">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.WriteAllCopies">
            <summary>
            Used for WriteAllCopies topology.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus">
            <summary>
            The enumerator for datapartition status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadWrite">
            <summary>
            The datapartition can be written to and read from.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadOnly">
            <summary>
            The datapartition can only be read from cannot be written to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFssStatus">
            <summary>
            The Status of a Resource FSS.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.NotDeployed">
            <summary>
            The fail safe set (SQL or File) is not deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.Deployed">
            <summary>
            The fail safe set (SQL or File) is deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.UpOrDowngrading">
            <summary>
            The SQL fail safe set is in progress of being upgraded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFssStatus.MovingData">
            <summary>
            Data is being moved to or from this fail safe set.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSecondaryType">
            <summary>
            Enumeration of different types of secondaries Wmo supports
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.NoSecondaries">
            <summary>
            No Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.WriteAllCopies">
            <summary>
            Write to all copies. No replication between copies provided
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.SingleMaster">
            <summary>
            Push Replication from Primary to Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.MultiMaster">
            <summary>
            Push replication from Primary to Secondary and from Secondary to primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.WARA">
            <summary>
            Write All Read Any 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreSecondaryType.Mirroring">
            <summary>
            Mirroring Replication
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFss">
            <summary>
            Gives information about the SQLFSS in the deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSQLFss.GetDataCenterDatabases(System.String)">
            <summary>
            Returns a collection of WebstoreDatabase that exist in the passed in DataCenter
            </summary>
            <param name="dataCenterName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.Databases">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.PrimaryDB">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.DefaultPrimaryDB">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.GeoPartners">
            <summary>
            Gets the GeoPartner information for this Failsafeset. Note, the Deployment must have GeoEnabled
            set to true for these values to be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.ManifestUid">
            <summary>
            Gets the manifest UID for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.WitnessServer">
            <summary>
            Gets the WitnessServer for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.MirroringTimeoutValue">
            <summary>
            Gets the MirroringTimeoutValue for this SQLFSS.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSQLFss.DatabaseTemplate">
            <summary>
            Gets the DatabaseTemplate for this SQLFSS.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreUserSettings">
            <summary>
            The user settings class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreUserSettings.#ctor(Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreUserSettings.GetSettingValue(System.String,System.String,System.String)">
            <summary>
            Gets the specified user setting
            </summary>
            <param name="settingName">The Setting name</param>
            <param name="deploymentName">The deployment name for which the setting is requested</param>
            <param name="clusterName">The cluster name for which the setting is requested</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreUserSettings.Key">
            <summary>
            Key for the object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreConfigUnreachable">
            <summary>
            The Webstore configuration server is unreachable. Please look event viewer for more information.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstorePolledInformationInconsistent">
            <summary>
            The Polled information from the Webstore config is inconsistent. This might be due to configuration changes.Plese retry.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstorePolledInformationInconsistent(System.String)">
            <summary>
            The Polled information from the Webstore config is inconsistent. This might be due to configuration changes.Plese retry.
            </summary>
            <param name="message"></param>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreApplicationNotExist(System.String)">
            <summary>
            -3001;The Webstore application ({0}) does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreApplicationTicketBad(System.String)">
            <summary>
            -3010;The Webstore application ({0}) has a bad ticket.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.SettingNotExist(System.String)">
            <summary>
            -3050;The Webstore setting ({0}) does not exist.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreUnknownException(System.Exception)">
            <summary>
            3; An unknown exception occured. Please look at inner exception for more details.
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreError.WebstoreUnexpectedError(System.String)">
            <summary>
            4;Unexpected Error - {0}
            </summary>
            <returns>WmoException</returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreChangeAction">
            <summary>
            The Action enum that forms part of WebstoreEventArgs 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Add">
            <summary>
            Object added 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Update">
            <summary>
            Object refreshed. Some properties might have changed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreChangeAction.Remove">
            <summary>
            Object removed 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventArgs">
            <summary>
            An object of this type is passed to the CollectionChangedEventHandler
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreEventArgs.#ctor(Microsoft.Webstore.MetaData.WebstoreChangeAction,System.Object)">
            <summary>
            WebstoreEventArgs constructor 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEventArgs.Action">
            <summary>
            Type of action.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEventArgs.Element">
            <summary>
            The element that got changed.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreException">
            <summary>
            class for WebstoreException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Int32,System.String)">
             <summary>
            
             </summary>
             <param name="number"></param>
             <param name="message"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="number"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreException.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreException.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreException.Number">
            <summary>
            The number of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettings">
            <summary>
            Stores the Webstore settings for a given object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.#ctor(Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbConnectionTimeoutSecs(System.String,System.String)">
            <summary>
            The Connection timeout value
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbConnectAttemptMax(System.String,System.String)">
            <summary>
            Max number of connection attempts for a database
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetResourceValidatePeriod">
            <summary>
            Time to wait in sec's before attempt to undenylist a resource
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDbCommandTimeoutSecs(System.String,System.String)">
            <summary>
            The command timeout for database queries
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWebstoreConfigCommandTimeout">
            <summary>
            The config timeout value for a command operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWebstoreConfigConnectionTimeout">
            <summary>
            The config timeout value for a connection operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCollectPeriod">
            <summary>
            Timeperiod for counter collection
            </summary>        
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyExcellent(System.String)">
            <summary>
            LatencyExcellent bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyGood(System.String)">
            <summary>
            LatencyGood bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyOK(System.String)">
            <summary>
            LatencyOk bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetCounterCommandLatencyPoor(System.String)">
            <summary>
            LatencyPoor bucket boundary
            </summary>
            <param name="deploymentName">The name of the deployment
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDenylistStaleTimeoutSecs(System.String,System.String)">
            <summary>
            Timeperiod after which a server gets removed from 
            the denylist even if it is not denylisted yet
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetBlackListStaleTimeoutSecs(System.String,System.String)">
            <summary>
            Timeperiod after which a server gets removed from 
            the denylist even if it is not denylisted yet
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetPersistentFailureLogPeriod(System.String,System.String)">
            <summary>
            PersistentFailureLogPeriod
            </summary>
            <param name="deploymentName">The name of the deployment
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMinGrowthPeriod(System.String)">
            <summary>
            What is the minimum time before the MCRL can be grown
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxGrowthPeriodOffset(System.String)">
            <summary>
            Max Offset from MinGrowthPeriod that 
            MCRL growth can be delayed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxPoolSize(System.String,System.String)">
            <summary>
            The maximum SQL pool size
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetLevelToResetConnectionPool(System.String,System.String)">
            <summary>
            The error level to reset the SQL connection pool. If error class is greater than or equal to the level, the connection pool will be cleaned.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableResetConnection(System.String,System.String)">
            <summary>
            Is reset connection on SqlConnection enabled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitStart(System.String)">
            <summary>
            The start value of MCRL, when app first starts up.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitDelta(System.String)">
            <summary>
            The delta to be kept between MCRS and MCRL when 
            background thread reduces MCRL because of inactivity
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetConcurrencyLimitMinumum(System.String)">
            <summary>
            The minumum value for MCRL 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottling(System.String)">
            <summary>
            Is throttling of requests enabled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableRampedGrowth(System.String)">
            <summary>
            Is ramped growth of MCRL enabled?
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottledCmdFailover(System.String)">
            <summary>
            Should command execution failover if it is throtteled
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableLatencyBasedScaleback(System.String)">
            <summary>
            Should the latency based scaleback thread be enabled?
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableThrottlingOnCmdTimeout(System.String)">
            <summary>
            Should MCRL be reduced if webstore encounters 
            timeout errors
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetPercentBadRequestsThreshold(System.String)">
            <summary>
            The percent number of bad requests before webstore
            logic reduces MCRL.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueCapacity(System.String)">
            <summary>
            The number of requests of the throttling queue can accommodate.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueWarningRatio(System.String)">
            <summary>
            The threshold to give a warning if the queue exceeds the limits.
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetThrottlingQueueStaleDuration(System.String)">
            <summary>
            The duration in the queue when the request will became stale
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetDataCenterName">
            <summary>
            The current client's datacenter name
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetSqlFailoverErrors(System.String,System.String)">
            <summary>
            The current client's SqlFailoverErrors 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetFileFailoverErrors(System.String,System.String)">
            <summary>
            The current client's FileFailoverErrors 
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetEnableImmediatePollingOnFailure(System.String,System.String)">
            <summary>
            Returns whether Metadata should poll immediately after failure that indicates the client metadata cache is stale.
            </summary>
            <param name="deploymentName">The name of the deployment for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get the setting</param>
            <returns>True if Metadata should poll immediately after failure that indicates the client metadata cache is stale, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetFailoverOnCommandTimeout(System.String,System.String)">
            <summary>
            FailoverOnCommandTimeout
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <param name="clusterName">The cluster Id for which to get
            the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetLogCommandError(System.String)">
            <summary>
            GetLogCommandError
            </summary>
            <param name="deploymentName">The name of the deployment 
            for which to get the setting</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetUserSettingPollingInterval">
            <summary>
            Gets the user settings polling interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetUserSettingPollingOffset">
            <summary>
            Gets the offset of polling of user settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerHeartBeatInterval">
            <summary>
            Gets the MasterController Heartbeat Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerObjectPollingInterval">
            <summary>
            Gets the MasterController Object Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMonDataPollingInterval">
            <summary>
            Gets the MasterController Monitored Data Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertPollingInterval">
            <summary>
            Gets the MasterController Alert Polling Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertGenerateInterval">
            <summary>
            Gets the MasterController Alert Generate Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerAlertResolveInterval">
            <summary>
            Gets the MasterController Alert Resolve Interval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMaxAlertProcessThreads">
            <summary>
            Gets the MasterController Max Alert Process Threads
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerMaxWaitBeforeResolve">
            <summary>
            Gets the MasterController Max Wait Before Resolve
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringAgentRecordHistoricalInformation">
            <summary>
            Gets the flag for the MonitoringAgent to Record Historical Information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMasterControllerLatencyUpdateInterval">
            <summary>
            Gets the interval that the Master Controller will use for updating the WstConfig with Latency information.  Set to 0 to disable updating latency data in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoMaxBGThreads">
            <summary>
            Gets maximum allowed back ground threads for the Wmo. Used in the WmoConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDeploymentMaxThreads">
            <summary>
            Maximum allowed threads for setting up a deployment. This is an override setting.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringWorkThreads">
            <summary>
            Max Monitoring threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMonitoringAgentWorkThreads">
            <summary>
            Max Monitoring agent threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoOnlineDbsNoPrimarySM">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoOnlineDbs">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoPrimariesSM">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolSomeDbsNotOnline">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolSomeDbsNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolPrimDbNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolNoSecondaries">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyHigherThanBucket">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolManVerDiffDepVer">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerNoOnlineDbs">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerNonOnlinePrimary">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerDBNotOnline">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerSomeDbsNotDefault">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerDBLatencyTooHigh">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityWarning">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityError">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyBucketDeployment">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolLatencyBucketServer">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityWarningNum">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerAlertSeverityErrorNum">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolFont">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAllowWstCommandsToPopupInNewWindow">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolShouldPollAlertData">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolShouldPollMonitoredData">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAlertThreadPollInterval">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolAlertLoadDataRecentHours">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolMonitoredDataThreadPollInterval">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolServerStatusToSupressAlerts">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusHtmlFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusXmlFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolStatusXslFile">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetAdminToolJobFrameworkStatusLastNDays">
            <summary>
            Gets the Admin tool setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoWaitActivePrimaryProcessTimeout">
            <summary>
            Gets the timeout to wait on Active Primary processes in the WMO.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDefaultSqlCommandTimeout">
            <summary>
            Gets the timeout to wait for sql commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoDefaultBackupRestoreSqlCmdTimeout">
            <summary>
            Gets the timeout to wait for backup/restore commands.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWmoServerOperationMaxThreads">
            <summary>
            Max number of threads active during server level operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetWstMonitorMaxBGThreads">
            <summary>
            Max number of threads used for the Admin tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobStatusDeploymentName">
            <summary>
            Name of the JobStatus Deployment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerLeaseExpirationInterval">
             <summary>
            GetJobManagerLeaseExpirationInterval
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerLeaseExpirationIntervalDelta">
             <summary>
            GetJobManagerLeaseExpirationIntervalDelta
             </summary>
             <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobPollingInterval">
            <summary>
            GetJobPollingInterval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobHeartBeatInterval">
            <summary>
            GetJobHeartBeatInterval
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobHeartBeatIntervalDelta">
            <summary>
            GetJobHeartBeatIntervalDelta
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetMaxJobAgentWorkers(System.String)">
            <summary>
            GetMaxJobAgentWorkers
            </summary>
            <param name="cluster"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobWorkersDirectory">
            <summary>
            Gets the directory from where the job framework jobs are located
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobFrameworkAgentPort">
            <summary>
            Gets the JobFrameworkAgentPort. This is the port that the WstJobFrameworkAgent will listen on
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobManagerMaxGraceTimeForJobTermination">
            <summary>
            JobManagerMaxGraceTimeForJobTermination
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobConsecutiveHeartbeatFailureThreshold">
            <summary>
            JobConsecutiveHeartbeatFailure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetJobCoordinatorServerRole">
            <summary>
            JobCoordinatorServerRole
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingBackupSiteAndDeployment">
            <summary>
            Name of the backup site and deployment to use for WstBackup.  Can be empty, in which case
            DefaultConfig\WstBackup should be used.
            Used by Backup job, Collector job, and Restore job.
            </summary>
            <returns>name of the backup site and deployment to use, can be empty</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingUseRobocopy">
            <summary>
            Controls whether or not Collector job will attempt to use robocopy.exe for copying backups
            to local disk.  If set to true it will try robocopy first, then fail to internal methods.  If
            set to false it will go directly to internal methods and skip the robocopy.exe phase.
            </summary>
            <returns>true if collector should attempt using robocopy first for transfers</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingUseSqlLiteSpeed(System.String)">
            <summary>
            Controls whether or not the backup job will attempt to use SQLLiteSpeed to make its
            backups.  If set to true the backup job will use Sql LiteSpeed for backups if it is
            installed on the local host, otherwise will use T-SQL backup command.
            </summary>
            <param name="deploymentName">name of the deployment to check value for</param>
            <returns>true if backup job should check for and use Sql LiteSpeed</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingBackupJobSleepTimeInSeconds">
            <summary>
            The amount of time (in seconds) the backup job will sleep between runs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingCollectorJobSleepTimeInSeconds">
            <summary>
            The amount of time (in seconds) the collector job will sleep between runs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingRestoreJobSleepTimeInSeconds">
            <summary>
            The amount of time (in seconds) the restore job will sleep between runs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingCollectorMaxBackupsWaiting">
            <summary>
            The maximum number of backups any collector job will store at a single time
            on local disk in the "waiting for restore" state before refusing to copy any more.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingHeartbeatIntervalInMinutes">
            <summary>
            The approximate interval (in minutes) between heartbeats on active queue items.  
            Used by the collector job and the restore job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingMinMissedHeartbeats">
            <summary>
            The maximum number of heartbeats that can be missed on an active queue item before it
            can be reset by a collector job.  Used by the collector job.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSettings.GetOfflineProcessingBackupPartition(System.String)">
            <summary>
            The partition number of the WstBackup database to use for Offline Processing.
            </summary>
            <param name="clusterName">name of the cluster this server is in</param>
            <returns>partition number</returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSettings.Key">
            <summary>
            Gets the key for this object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSettings.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.CategoryHelp">
            <summary>
            Gets the current display help for the category.
            </summary>
            <value>The display help for the category.</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.PrimaryDatabaseDenylisted">
            <summary>
            Number of primary databases that are denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.SecondaryDatabaseDenylisted">
            <summary>
            Number of secondary databases that are denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.PrimaryFileshareDenylisted">
            <summary>
            Number of primary file shares that are denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationInterfaceCounters.SecondaryFileshareDenylisted">
            <summary>
            Number of secondary file shares that are denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.CounterResetTimeMultiplier">
            <summary>
            Time period multiplier for the counter reset. This will be a multiplier for the scaleBackThreadSleepTime.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.database">
            <summary>
            The database which this DatabaseThrottleCounters belongs to.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.serverCounters">
            <summary>
            This is a reference to the ServerInterfaceCounters related to the WebstoreDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.maxConcurrentRequestsLimit">
            <summary>
            Maximimum number of concurrent connections are allowed for this server.
            Initally the value is 1 which means no request can pass. This value cannot be 0.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.concurrentRequests">
            <summary>
            Current number of active (StartRequest called but not RequestResourceReleased) concurrent connections. Should be always less than maxConcurrentConnections.
            A request will be only complete when the resources (sql connections) are released
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.totalRequests">
            <summary>
            Total number of execution requests indicated by the start request during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.acceptableRequests">
            <summary>
            Total number of requests whose latencies are below the acceptable range during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.maxConcurrentRequestSeen">
            <summary>
            Maximum concurrent request was seen during the last interval (1*scaleBackThreadSleepTime to 5*scaleBackThreadSleepTime).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.nextGrowth">
            <summary>
            The earliest time for the next growth attempt.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.growthLock">
            <summary>
            The lock for synchronizing the section attempting to increase the max concurrent request limit.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.nextCounterReset">
            <summary>
            The time for resetting counters. Background scaleback thread will clear it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequest(System.Int32)">
            <summary>
            Updates internal structures given that a request is finished.
            FinishRequest does not indicate that resources (sql connections) are released hence concurrent request seen will not be decreased.
            </summary>
            <param name="duration">The duration to complete the request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequestWithError(System.Int32)">
            <summary>
            Updates internal structures given that a request is finished with an error. 
            FinishRequestWithError does not indicate that resources (sql connections) are released hence concurrent request seen will not be decreased.
            </summary>
            <param name="duration">The duration to complete the request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.FinishRequestThrottled">
            <summary>
            Updates internal structures given that a request is finished abruptly because it is throttled.
            FinishRequestThrottled will not change concurrent request seen because a throttled request means.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.RequestResourcesReleased">
            <summary>
            Updates internal structures given that resources (sql connection) for the request are released and available for other threads.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitStart">
            <summary>
            The inital value for the max concurrent request limit. It is also the minimal value while max concurrent request limit is scaling back.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitDelta">
            <summary>
            The delta that needs to be preserved while max concurrent request limit is scaling back.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ConcurrencyLimitMinumum">
            <summary>
            The minumum value for the max concurrent request limit under all circumstances.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxConcurrentRequestsLimit">
            <summary>
            Maximimum number of concurrent connections are allowed for this server.
            Initally the value is 1 which means no request can pass. This value cannot be 0.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxGrowthPeriodOffset">
            <summary>
            The maximum value for the offset of the duration when the next increase of max concurrent request limit is possible. The offset will be a random number between 0 and MaxGrowthPeriodOffset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MaxPoolSize">
            <summary>
            The highest number that max concurrent request limit is reached which implies that highest possible number of concurrent requests.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.MinumumGrowthPeriod">
            <summary>
            The minumum value for the duration when the next increase of max concurrent request limit is possible. A random offset will be added to MinumumGrowthPeriod to determine the exact duration of the next increase of max concurrent request limit is possible. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.PercentBadRequestsThreshold">
            <summary>
            The threshold of the bad requests percentage to indicate if the server status is healthy. If the server status is not healthy, increase of max concurrent request limit will not be allowed and scale back will happen.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.RampedGrowthEnabled">
            <summary>
            Indicates whether the time delayed increase of max concurrent request limit is enabled. If not, max concurrent request limit will be set to max pool size automatically without any condition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueCapacity">
            <summary>
            The maximum number of requests that can be queued before executing or throttling them.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueSize">
            <summary>
            The number of requests that are queued for execution.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueuingEnabled">
            <summary>
            Indicates whether the queueing requests that would have been throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueStaleDuration">
            <summary>
            The duration before a request in the queue gets stale and throttled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.QueueWarningPercentage">
            <summary>
            The threshold for the fullness percentage of the queue to log a warning in they system event log.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseThrottleCounters.ThrottlingEnabled">
            <summary>
            Indicates whether the control for maximum number of concurrent requests is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.CategoryHelp">
            <summary>
            Gets the current display help for the category.
            </summary>
            <value>The display help for the category.</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.ConvergedThrottlingQueuedRequests">
            <summary>
            Gets the number of requests that queue for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.QueuedRequestsPerSec">
            <summary>
            Gets the number of requests that gets queued per second for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.QueuedRequestsTotal">
            <summary>
            Gets the number of requests that have been queued for all the databases of the server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.PercentSqlIpDenylisted">
            <summary>
            Gets the percent of the NIC's that are denylisted as a part of Sql resources.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ServerInterfaceCounters.PercentFileIpDenylisted">
            <summary>
            Gets the percent of the NIC's that are denylisted as a part of fileshare resources.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstClientPerformanceCounterInstaller">
            <summary>
             An installer for Webstore Client Library Performance Counters.
             </summary>
             <remarks>This class can only be invoked by a caller with unrestricted
             RegistryPermission.
             </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstClientPerformanceCounterInstaller.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._processName">
            <summary>
            The name of the process that is host the wstclient.dll.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._application">
            <summary>
            The owner ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._applicationCounter">
            <summary>
            The ApplicationInterfaceCounters for the ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._totalApplicationCounters">
            <summary>
            The ApplicationInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._totalServerCounters">
            <summary>
            The ServerInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._serverCounters">
            <summary>
            Global dictionary for all the server counters. This dictionary will not be updated if a new server gets added or removed. We will basically add a new server counter to the dictionary, if we encounter a new server. We will not remove the old ones. This is an optimization
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._syncThrottleCounters">
            <summary>
            The dictionary for the DatabaseThrottleCounters of this ApplicationContext. 
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context. This set of counters are for synchronous executions.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PerformanceCountersManager._asyncThrottleCounters">
            <summary>
            The dictionary for the DatabaseThrottleCounters of this ApplicationContext. 
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context. This set of counters are for asynchronous executions.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.#ctor(Microsoft.Webstore.WstClient.ApplicationContext)">
            <summary>
            Constructs an instance of PerformanceCountersManager.
            </summary>
            <param name="application">The owner ApplicationContext of the  PerformanceCountersManager to construct.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.DecrementMaxConcurrentRequestLimit(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Decreases the max concurrent limit by 1 unless it is equal to the ConcurrencyLimitMinumum value for both asynchronous and synchronous requests to the given WebstoreDatabase.
            </summary>
            <param name="database">The WebstoreDatabase whose max concurrent request limit will be decreased by 1.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.MinimizeMaxConcurrentRequestLimit(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Reduces the max concurrent limit to the specified ConcurrencyLimitMinumum value for both asynchronous and synchronous requests to the given WebstoreDatabase.
            </summary>
            <param name="database">The WebstoreDatabase whose max concurrent request limit will be minimized.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.PerformanceCountersManager.ReleaseRequestResources(Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.WstClient.RequestType)">
            <summary>
            Reduces the concurrent synchronous request count for the WebstoreDatabase since all the resources used are released.
            </summary>
            <param name="database"></param>
            <param name="requestType"></param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.Application">
            <summary>
            The owner ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.ApplicationCounter">
            <summary>
            The ApplicationInterfaceCounters for the ApplicationContext of this PerformanceCountersManager.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.AsyncDatabaseThrottlingCounters">
            <summary>
            The dictionary for the DatabaseThrottleCounters of this ApplicationContext. 
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context. This set of counters are for synchronous executions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.SyncDatabaseThrottlingCounters">
            <summary>
            The dictionary for the DatabaseThrottleCounters of this ApplicationContext. 
            Similar to server counter dictionary, database throttling counter dictionary is not going to be updated if a new database is added or removed. This dictionary is created per application context. This set of counters are for asynchronous executions.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.ServerCounters">
            <summary>
            Global dictionary for all the ServerInterfaceCounters.
            This dictionary will not be updated if a new server gets added or removed. We will basically add a new server counter to the dictionary, if we encounter a new server. We will not remove the old ones. This is an optimization
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.PerformanceCountersManager.TotalServerCounters">
            <summary>
            The ServerInterfaceCounters that stands for the "_Total" instance.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.PerformanceCountersManager.DatabaseThrottleCountersFactory">
            <summary>
            A factory class to instantiate DatabaseThrottleCounters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.PerformanceCountersManager.ServerInterfaceCountersFactory">
            <summary>
            A factory class to instantiate ServerInterfaceCounters.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstCommand">
             <summary>
             WstCommand is Webstore's version of SqlCommand object.  Uses the WstConnection "virtual" connection to a Webstore Application.  A SqlConnection is not obtained until one of the  ExecuteXXX() methods are called.
             </summary> 
             <remarks> The WstCommand class is used to issue commands against a specific Webstore application. The WstCommand can be configured to identify the partition and failover mode for the execution.  At execution time, the WstCommand selects an appropriate WstConnection from the WstConnection pool of connections and executes using the SqlCommand object.  The result from the WstCommand.ExecuteReader() method is a WstDataReader.</remarks>  
             <example>
             <code source="..\..\..\private\src\managed\wstclient\executionenginetests\SampleCode.cs" region="ReadSample" lang="C#" title="WstCommand, WstConnection, WstDataReader" />
             <code source="..\..\..\private\src\managed\wstclient\executionenginetests\SampleCode.cs" region="TransactionScope" lang="C#" title="Transaction and Commit" />
             </example>
            
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.AnyPartition">
            <summary>
            Use this constant for the WstCommand.Partition property to randomly select the partition to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.UnsetCommandTimeoutValue">
            <summary>
            The value for command time out which indicates that no value has been set for command time out.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.connection">
            <summary>
            WstConnection to execute the command on (cannot be changed while command is executing or resultset is still being consumed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.sqlCommand">
            <summary>
            Actual SqlCommand object to execute command with.  This object is used to hold parameters, commandtext, and other command properties (type, etc).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.commandTimeOut">
            <summary>
            Member variable in case caller wants to override the site default command timeout for this instance of WstCommand class.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.userSetFailoverMode">
            <summary>
            WstCommandType.  Default = WstCommandType.DefaultWrite
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.overrideStandby">
            <summary>
            Override standby db status when command type is WstCommandType.SpecificDatabase
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.database">
            <summary>
            Keep track of last partition/database we executed against
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.partitionNumber">
            <summary>
            Partition number to execute on.  Default = WstCommand.AnyPartition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.partitionType">
            <summary>
            Type of partition that m_partition refers to (logical vs. physical).  
            Default = logical.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.transaction">
            <summary>
            WstTransaction - used to encapsulate a SqlTransaction.  Since a SqlConnection is not
            determined until first WstCommand.ExecuteXXX() call is made, we cannot really start a
            SqlTransaction until then either.  Once we do... we can't allow any other WstCommand's
            refering to same WstTransaction to execute on a different server/db (they will get the
            SqlConnection from the WstTransaction object).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.inProgress">
            <summary>
            Flag indicating if a command execution is in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.dataReader">
            <summary>
            Keep track of resultsets opened from this WstCommand
            (Don't allow one of the ExecuteXXX() methods to be called if there
            is still an open WstDataReader or WstXmlReader that was returned from
            this WstCommand object).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstCommand.xmlReader">
            <summary>
            Keep track of resultsets opened from this WstCommand
            (Don't allow one of the ExecuteXXX() methods to be called if there
            is still an open WstDataReader or WstXmlReader that was returned from
            this WstCommand object).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor">
            <summary>
            Default constructor, initializes new instance of the WstCommand.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String)">
            <summary>
            Overloaded constructor... inits CommandText.
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            Overloaded constructor (cmdtext and connection)
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection,System.Int32)">
            <summary>
            Overloaded constructor.
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
            <param name="partition">WstCommand.Partition value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.#ctor(System.String,Microsoft.Webstore.WstClient.WstConnection,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Overloaded constructor
            </summary>
            <param name="strCmdText">WstCommand.CommandText value</param>
            <param name="wstConn">WstCommand.Connection value</param>
            <param name="partition">WstCommand.Partition value</param>
            <param name="failoverMode">WstCommand.WstFailoverMode value</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteNonQuery">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this System.Data.SqlClient.SqlCommand.
            </summary>
            <returns> An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking Microsoft.Webstore.WstClient.WstCommand.EndExecuteNonQuery(System.IAsyncResult), which returns the number of affected rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, given a callback procedure and state information.
            </summary>
            <param name="callback">An System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required.</param>
            <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns> An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking Microsoft.Webstore.WstClient.WstCommand.EndExecuteNonQuery(System.IAsyncResult), which returns the number of affected rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteReader">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, and retrieves one or more result sets from the server.
            </summary>
            <returns>An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking Microsoft.Webstore.WstClient.WstCommand.EndExecuteReader(System.IAsyncResult), which returns a WstDataReader instance that can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, using one of the CommandBehavior values.
            </summary>
            <param name="behavior">One of the System.Data.CommandBehavior values, indicating options for statement execution and data retrieval.</param>
            <returns>An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking Microsoft.Webstore.WstClient.WstCommand.EndExecuteReader(System.IAsyncResult), which returns a Microsoft.Webstore.WstClient.WstDataReader instance that can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteReader(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, and retrieves one or more result sets from the server, given a callback procedure and state information.
            </summary>
            <param name="callback">An System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required.</param>
            <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns>An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking Microsoft.Webstore.WstClient.WstCommand.EndExecuteReader(System.IAsyncResult), which returns a Microsoft.Webstore.WstClient.WstDataReader instance that can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteReader(System.AsyncCallback,System.Object,System.Data.CommandBehavior)">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, using one of the CommandBehavior values, and retrieving one or more result sets from the server, given a callback procedure and state information.
            </summary>
            <param name="callback">An System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required.</param>
            <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property.</param>
            <param name="behavior">One of the System.Data.CommandBehavior values, indicating options for statement execution and data retrieval.</param>
            <returns>An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking Microsoft.Webstore.WstClient.WstCommand.EndExecuteReader(System.IAsyncResult), which returns a Microsoft.Webstore.WstClient.WstDataReader instance that can be used to retrieve the returned rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteXmlReader">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, and retrieves one or more result sets from the server. 
            </summary>
            <returns> An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult), which returns a single XML value.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.BeginExecuteXmlReader(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the Transact-SQL statement or stored procedure that is described by this Microsoft.Webstore.WstClient.WstCommand, and retrieves one or more result sets from the server. 
            </summary>
            <param name="callback">An System.AsyncCallback delegate that is invoked when the command's execution has completed. Pass null (Nothing in Microsoft Visual Basic) to indicate that no callback is required.</param>
            <param name="stateObject">A user-defined state object that is passed to the callback procedure. Retrieve this object from within the callback procedure using the System.IAsyncResult.AsyncState property.</param>
            <returns> An System.IAsyncResult that can be used to poll or wait for results, or both; this value is also needed when invoking System.Data.SqlClient.SqlCommand.EndExecuteXmlReader(System.IAsyncResult), which returns a single XML value.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Cancel">
            <summary>
            Cancel command (from another thread when WstCommand.ExecuteXXX() is in progress).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.CreateParameter">
            <summary>
            Create a SqlParameter.
            </summary>
            <returns>new SqlParameter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Callback from WstDataReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstDataReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            Callback from WstXmlReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstXmlReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.DetachTransaction(Microsoft.Webstore.WstClient.WstTransaction)">
            <summary>
            Callback from WstTransaction on dispose, rollback, commit.
            </summary>
            <param name="trans">WstTransaction</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to Microsoft.Webstore.WstClient.WstCommand.BeginExecuteNonQuery().</param>
            <returns>The number of rows affected (the same behavior as Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQuery()).</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.EndExecuteReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement, returning the requested Microsoft.Webstore.WstClient.WstDataReader.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to Microsoft.Webstore.WstClient.WstCommand.BeginExecuteReader().</param>
            <returns>A Microsoft.Webstore.WstClient.WstDataReader object that can be used to retrieve the requested rows.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.EndExecuteXmlReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a Transact-SQL statement, returning the requested Microsoft.Webstore.WstClient.WstXmlReader.
            </summary>
            <param name="asyncResult">The System.IAsyncResult returned by the call to Microsoft.Webstore.WstClient.WstCommand.BeginExecuteXmlReader().</param>
            <returns>A Microsoft.Webstore.WstClient.WstXmlReader that can be used to fetch the resulting XML data.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQuery">
            <summary>
            Implements IDbCommand.ExecuteNonQuery()
            </summary>
            <remarks>
            ExecuteNonQuery is intended for commands that do not return results,
            instead only the number of records affected.
            </remarks>
            <returns>
            Number of records affected (aggregate if executed on multiple partitions or replicas).
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteNonQueryWithSync(Microsoft.Webstore.WstClient.CommandExecutor)">
            <summary>
            Implements ExecuteNonQuery with sync api
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteReader">
            <summary>
            ExecuteReader() overload.
            Calls ExecuteReader(CommandBehavior.Default);
            </summary>
            <returns>WstDataReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            ExecuteReader().  This overload does all the real work.
            </summary>
            <param name="behavior">CommandBehavior (default = CommandBehavior.Default)</param>
            <returns>WstDataReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset 
            returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>First column as first row as object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ExecuteXmlReader">
            <summary>
            ExecuteXmlReader().  (This method is implemented to be as close as possible
            to the SqlCommand object.  This is not needed for IDbCommand).
            </summary>
            <returns>WstXmlReader</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.Prepare">
            <summary>
            No-Op... not implemented
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ResetCommandTimeout">
            <summary>
            Resets this WstCommand.CommandTimeout back to default value.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.ValidateCommand(Microsoft.Webstore.WstClient.ExecuteType)">
            <summary>
            Validates that this WstCommand object is in valid state to start Execution
            </summary>
            <param name="executeType">The execute method being called</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#CreateParameter">
            <summary>
            Create a SqlParameter
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#ExecuteReader">
            <summary>
            ExecuteReader() overload... implementation of IDbCommand.ExecuteReader()
            calls ExecuteReader(CommandBehavior.Default).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Implements the IDbCommand.ExecuteReader() form.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandType">
            <summary>
            this.sqlCommand.CommandType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandTimeout">
            <summary>
            Gives caller opportunity to override site default value for CommandTimeout (secs).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.CommandText">
            <summary>
            this.sqlCommand.CommandText property
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Connection">
            <summary>
            Specific override for Connection property (WstConnection)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Database">
            <summary>
            On Get, this is the database last executed against.  Can set to explicitly control
            the replica to execute against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.InProgress">
            <summary>
            Gets whether a command execution is in progress.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Parameters">
            <summary>
            SqlParameterCollection.  Uses the contained SqlCommand to implement the parameter collection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Partition">
            <summary>
            Partition number to execute this command against (logical or physical).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PartitionKey">
            <summary>
            Partition Key to execute this command against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.LastPartitionExecuted">
            <summary>
            Used to determine which Physical Partition was last successfully executed against
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PartitionType">
            <summary>
            Type of partition specified in Partition property (logical / physical)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.PhysicalPartition">
            <summary>
            Get the physical partition to execute this command against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.Transaction">
            <summary>
            gets/sets a WstTransaction property on this command object.
            </summary>
            <remarks>
            If connection is set... then this WstTransaction must have been created
            by calling BeginTransaction() on that WstConnection object.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.OverrideStandby">
            <summary>
            OverrideStandby
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.WstFailoverMode">
            <summary>
            WstFailoverMode (PrimaryThenSecondary, etc...)
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.UpdatedRowSource">
            <summary>
            Aggregrate this down to the SqlCommand object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Connection">
            <summary>
            IDbCommand.Connection implementation (WstConnection).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Parameters">
            <summary>
            Need IDataParameterCollection version of the Parameters property to satisfy IDbCOmmand interface.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstCommand.System#Data#IDbCommand#Transaction">
            <summary>
            gets/sets WstTransaction property on this command object.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstConnection">
            <summary>
            Represents a "virtual" connection to a Webstore Application.
            
            This class abstracts over the SqlConnection class.  It represents a virtual connection to the whole set of databases that make up a Webstore application (partitions, replicas). The actual SqlConnection is established upon WstCommand.ExecuteXXX() methods by looking up the appropriate server/db from the FSS map (including honoring offline, denylisted, stale replicas, retry, etc).
            </summary>
            <remarks>
            Any public static members of this type are thread safe. Any instance members are not guaranteed to be thread safe.
            </remarks>    
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._application">
            <summary>
            When our WstConnection.Open() is called, we will get a WstApp object that contains
            the config and state information for the application (specified in the connectionString)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._applicationName">
            <summary>
            The ConnectionString (Webstore Application Name) provided by the user.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._sqlConnectionString">
            <summary>
            Pass-through to the SqlConnection.ConnectionString
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._connectionStringPrefix">
            <summary>
            Cache the connection String generated for SqlConnection (unless a connection property changes)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._connectionTimeout">
            <summary>
            Placeholder in case ConnectionTimeout is explicitly changed by caller
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._state">
            <summary>
            ConnectionState (we only support ConnectionState.Open and ConnectionState.Closed)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._userName">
            <summary>
            SQL long user id, or a windows logon or "" implies IntegratedSecurity
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._password">
            <summary>
            SQL logon password
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._isIntegratedSecurity">
            <summary>
            Flag to indicate if IntegratedSecurity (SSPI) should be used.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._dataReader">
            <summary>
            Only allow one open reader (WstXmlReader or WstDataReader) on this connection
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._xmlReader">
            <summary>
            Only allow one open reader (WstXmlReader or WstDataReader) on this connection
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._transaction">
            <summary>
            Keep track if we have began a transaction.  If so, we should Rollback() on Close() if the
            transaction is still in progress.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._sessionTracingID">
            <summary>
            A unique id that will be used to correlate traces from Sql Server engine and client code.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._databaseConnections">
            <summary>
            List of the DatabaseConnections to keep track of the ones that were created by this WstConnection. There can be more than one DatabaseConnection that are associated with a WstConnection, if it is used by a WstCommand whose failover mode is WriteAllCopies.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._commands">
            <summary>
            List of the WstCommands that are associated  to keep track of the ones that were created by this WstConnection. There can be more than one DatabaseConnection that are associated with a WstConnection, if it is used by a WstCommand whose failover mode is WriteAllCopies.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstConnection._syncLock">
            <summary>
            Locking variable to prevent seperate threads from trying to close or clear on each other
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor">
            <summary>
            Default constructor.  Database/ConnectString = "";
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor(System.String)">
            <summary>
            Initializes an instance of the WstConnection class, specifying the DeploymentName.
            </summary>
            <param name="deploymentName">The name of the Webstore Deployment.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.#ctor(System.String,System.String)">
            <summary>
            Initializes an instance of the WstConnection class, specifying the DeploymentName and SqlConnectionString.
            </summary>
            <param name="deploymentName">The name of the Webstore deployment.</param>
            <param name="sqlConnectionString">Pass through parameters to the SqlConnection.ConnectionString</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            This method allows the WstConnection to track an Open XmlReader that was
            from and execution using this connection (and close it if the connection is closed).
            </summary>
            <param name="reader">WstXmlReader opened from this connection</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            This method allows the WstConnection to track an Open XmlReader that was
            from and execution using this connection (and close it if the connection is closed).
            </summary>
            <param name="reader">WstXmlReader opened from this connection</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.BeginTransaction">
            <summary>
            Creates a WstTransaction associated with this WstConnection.
            Same as calling BeginTransaction(IsolationLevel.ReadCommitted).
            </summary>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new WstTransaction associated with this WstConnection
            </summary>
            <param name="level">IsolationLevel (default = ReadCommitted</param>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new WstTransaction associated with this WstConnection
            </summary>
            <param name="level">IsolationLevel (default = ReadCommitted</param>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            If there is an open resultset from this connection, it is also closed.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.CloseDBConnections">
            <summary>
            Closes all of the WstDBConnections in our list.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachReader(Microsoft.Webstore.WstClient.WstDataReader)">
            <summary>
            Callback from WstDataReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstDataReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachReader(Microsoft.Webstore.WstClient.WstXmlReader)">
            <summary>
            Callback from WstXmlReader when it is being closed or disposed.
            </summary>
            <param name="reader">WstXmlReader (from execution on this cmd object)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.DetachTransaction(Microsoft.Webstore.WstClient.WstTransaction)">
            <summary>
            This method allows the WstConnection to track an Open WstTransaction that is still 
            in progress (parallel transactions are not supported), and Rollback the transaction
            if the WstConnection is closed.
            </summary>
            <param name="wstTransaction">WstTransaction</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed
            Override of base Component Dispose method
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetSqlPartition(System.Int32)">
            <summary>
            Gets the physical SQL Partition that this logical partition is mapped to.
            </summary>
            <param name="logicalPartition">Logical partition number</param>
            <returns>Physical SQL Partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetFilePartition(System.Int32)">
            <summary>
            Gets the physical File Partition that this logical partition is mapped to.
            </summary>
            <param name="logicalPartition">Logical partition number</param>
            <returns>Physical File Partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetDatabase(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Gets a WstDatabase object that matches the partition and failover criteria.  Can throw exception if no available DB is found.
            </summary>
            <param name="partition">partition number</param>
            <param name="partitionType">logical or physical</param>
            <param name="failoverMode">Webstore failover mode (primary, secondary choices)</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.AttemptToCloseDatabaseConnection(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            Attempts to close the database collections if there are no active WstDataReader, WstXmlReader or WstTransaction. 
            </summary>
            <param name="dbConnection">The DatabaseConnection that will be attempted to close.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.CreateCommand">
            <summary>
            Creates a new WstCommand with the connection property set to this WstConnection.
            </summary>
            <returns>The created WstCommand object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ResetConnectionTimeout">
            <summary>
            Resets connection timeout to default value (determined by the WebstoreConfig db)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.ResetSecurity">
            <summary>
            Resets the security properties to their default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.GetConnectionStringPrefix">
            <summary>
            Return all connection String information, except for server and database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.NewConnectionNotOpenedException(System.String)">
            <summary>
            Helper to create exception when operation performed that requires the connection
            to first be opened
            </summary>
            <param name="propertyName"></param>
            <returns>WstException with the EcConnNotInitialized error code.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Clone">
            <summary>
            Support for ICloneable interface.  The System.Object.MemberwiseClone will use the
            ICloneable.Clone() method provided by the class to support "deep" copies rather than
            the default "shallow" copies.  (A shallow copy would mean that the cloned class's members
            reference the same underlying members in the original class instance).
            </summary>
            <returns>copy of this object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.FireInfoMessageEvent(System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs)">
            <summary>
            Fire InfoMessage event
            </summary>
            <param name="sender">The source of the event</param>
            <param name="eventArgs">A SqlInfoMessageEventArgs object that contains the event data</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.Open">
            <summary>
            Opens the WstConnection.  If this is first time this Application Name is
            opened, then a new WstApp() object will be created and added to the 
            WstGlobal's cache of WstApp objects.
            </summary>
            <remarks>
            An application can call Open() more than one time. If a WstConnection object is already initialized
            for this Webstore application, then Open() will simply re-use the data already read from the 
            configuration database for this application's settings (connection timeout, parition map, etc).
            Users should maintain at least one reference to a WstConnection object while their application is running
            so that the WstClient's SqlConnection pool stays intact, as well as the background tasks for verifying
            server availability and maintaining server partition maps and server status (denylisted, stale replicas,
            etc).
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#BeginTransaction">
            <summary>
            Creates a WstTransaction associated with this WstConnection.
            Same as calling BeginTransaction(IsolationLevel.ReadCommitted).
            </summary>
            <returns>new WstTransaction</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#CreateCommand">
            <summary>
            Implementation of IDbConnection.CreateCommand().  Creates a new WstCommand with
            the Connection set to this object.
            </summary>
            <returns>new WstCommand object</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConnection.System#Data#IDbConnection#ChangeDatabase(System.String)">
            <summary>
            This method is not supported.
            </summary>
            <param name="dbName"></param>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstConnection.InfoMessage">
            <summary>
            Event InfoMessage on this connection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Application">
            <summary>
            Gets the underlying singleton ApplicationContext for this Webstore application.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.ConnectionString">
            <summary>
            Gets or sets the ConnectionString (for Webstore this is the config and deployment name).
            Don't use this property internally
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.ConnectionTimeout">
            <summary>
            Timeout (in seconds) when establishing connection to SQL Server.
            </summary>
            <remarks>
            The default connection timeout is specified in the Default Settings for the site (Webstore Config DB).
            The application developer can override the default by setting this property.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Database">
            <summary>
            Same as ConnectionString ( = name of the Webstore application).
            don't use this property internally
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.DataPartitions">
            <summary>
            Collection of data Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.FilePartitions">
            <summary>
            Collection of Webstore File Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.FetchingData">
            <summary>
            Indicates if a data reader is already open on this connection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.IntegratedSecurity">
            <summary>
            Overrides default security settings to use NT Authentication (sspi).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.InUse">
            <summary>
            Indicates if a pending execution is outstanding on this WstConnection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.LogicalPartitions">
            <summary>
            Gets the number of logical partitions for this application.
            </summary>
            <remarks>
            Throws InvalidOperationException if <see cref="P:WstConnection.IsInitialzed"/> is false.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Opened">
            <summary>
            Gets whether Open() is called succefully for the WstConnection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Password">
            <summary>
            Overrides default security information (need to set username also)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Pending">
            <summary>
            Indicates if a pending transaction is outstanding on this connection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.SqlConnectionString">
            <summary>
            Gets/Sets the SqlConnectionString (pass thru to the SqlConnection.ConnectionString).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.SqlPartitions">
            <summary>
            Collection of Webstore SQL Partitions (Connection must be open). 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.State">
            <summary>
            Only ConnectionState.Open and ConnectionState.Closed are supported.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.TracingID">
            <summary>
            Gets or set the session tracing id that will be used to correlate the tracing of the client application and the sql server engine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Transaction">
            <summary>
            Gets the associated WstTransaction for the WstConnection.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstConnection.Username">
            <summary>
            Overrides default security information (need to set password also)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFailoverMode">
            <summary>
            WstFailoverMode determines which DB replica to execute the command, or FileShare to 
            work against for File operations, as well as what automatic failover options are allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryOnly">
            <summary>
            Only attempts the operation on the primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SecondaryThenPrimary">
            <summary>
            Attempts operation on secondary, but can auto-failover to primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SecondaryOnly">
            <summary>
            Attempts operation on secondaries only
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryThenSecondary">
            <summary>
            Tries operation on primary, but can auto-failover to secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PrimaryOrSecondary">
            <summary>
            Randomly selects between primary and secondaries for the operation
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.DefaultRead">
            <summary>
            Application configurable default read behavior
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.DefaultWrite">
            <summary>
            Applcation configurable default write behavior
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.SpecificDatabase">
            <summary>
            Execute using specific database/replica (WstCommand.Database)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.WriteAllCopies">
            <summary>
            Execute against all databases in the physical partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PartnerOnly">
            <summary>
            Only attempts the the primary or geopartner in the current datacenter
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstFailoverMode.PartnerThenSecondary">
            <summary>
            Tries operation on primary or GeoPartner in current datacenter, but can auto-failover to secondary in datacenter
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPartitionType">
            <summary>
            Used when specifying logical vs physical partition mode
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstPartitionType.Logical">
            <summary>
            Determines how to interpret a Partition number (logical, zero based)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstPartitionType.Physical">
            <summary>
            Determines how to interpret a Partition number (physical, zero based)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstConstants">
            <summary>
            Placeholder class for constants?
            Not sure if will really need.  Might be better to associate the constants with the classes that
            use the constants.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstConstants.#ctor">
            <summary>
            Hide constructor... just a place holder for assembly global constants
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDataAdapter">
             <summary>
             This class implements the IDbDataAdapter functionality.  Luckily, most of the
             functionality is implemented by the base class DbDataAdapter.
             </summary>
             <remarks>
             Not sure why this doesn't show up in designer view in visual studio?  
             Something about DbDataAdapter is abstract and can't be initialized.
             Maybe there are some overrides that we still need to do?
             
             Also... should do some sanity checks and enforcement on the Update/Insert/Delete
             commands to make sure they use the same partition information as the Select.
             </remarks>
             <example>
                void TestDataAdapter()
                {
                    WstDataAdapter adapter = new WstDataAdapter();
                    WstConnection conn = new WstConnection("SampleApp");
                    string cmdtext = "Select * from userinfo where si_hashbucket = 0";
                    WstCommand cmd = new WstCommand(cmdtext, conn, 0, WstCommandType.ReadOrWrite);
                    DataSet ds = new DataSet();
            
                    conn.IntegratedSecurity = true;
                    conn.Open();
            
                    adapter.SelectCommand = cmd;
                    adapter.Fill(ds);
            
                    ds.WriteXml("c:\\testapp1.xml");
                    conn.Close();
                }
             </example>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_selectCommand">
            <summary>
            Select command used by DbDataAdapter.Fill(dataset)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_insertCommand">
            <summary>
            Insert command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_updateCommand">
            <summary>
            Update command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.m_deleteCommand">
            <summary>
            Delete command (not required to be able to use DbDataAdapter.Fill())
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.EventRowUpdated">
            <summary>
            Inherited through DbDataAdapter (Component.Events)
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataAdapter.EventRowUpdating">
            <summary>
            Inherited through DbDataAdapter (Component.Events)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.#ctor">
            <summary>
            Default constructor (none of the WstCommands set yet - select/insert/update/delete)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Abstract method inherited from DbDataAdapter.
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
            <returns>RowUpdatedEventArgs</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="dataRow">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
            <returns>RowUpdatingEventArgs</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="value">RowUpdatingEventArgs</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Abstract method inherited from DbDataAdapter
            </summary>
            <param name="value">RowUpdatedEventArgs</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.SelectCommand">
            <summary>
            Gets/Sets the SelectCommand
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
            <summary>
            Gets/Sets the SelectCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.InsertCommand">
            <summary>
            Gets/Sets the InsertCommand
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
            <summary>
            Gets/Sets the InsertCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.UpdateCommand">
            <summary>
            Gets/Sets the UpdateCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
            <summary>
            Gets/Sets the UpdateCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.DeleteCommand">
            <summary>
            Gets/Sets the DeleteCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
            <summary>
            Gets/Sets the DeleteCommand (IDbDataAdapter method)
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstDataAdapter.RowUpdating">
            <summary>
            RowUpdating event
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.WstClient.WstDataAdapter.RowUpdated">
            <summary>
            RowUpdated event
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatingEventHandler">
            <summary>
            Delegate for WstRowUpdatingEvent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatedEventHandler">
            <summary>
            Delegate for WstRowUpdatedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs">
            <summary>
            Webstore specific class for RowUpdatingEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Just use the default/base constructor
            </summary>
            <param name="row">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstRowUpdatingEventArgs.Command">
            <summary>
            Hide the inherited implementation of the command property. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs">
            <summary>
            Webstore specific class for RowUpdatedEventArgs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Just use the default/base constructor
            </summary>
            <param name="row">DataRow</param>
            <param name="command">WstCommand</param>
            <param name="statementType">StatementType</param>
            <param name="tableMapping">TableMapping</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstRowUpdatedEventArgs.Command">
            <summary>
            Hide the inherited implementation of the command property. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDataReader">
            <summary>
            The WstDataReader is created by invoking the WstCommand.ExecuteReader() method.  
            The WstDataReader class is a thin wrapper over the SqlDataReader resultset.  
            The WstDataReader may contain multiple SqlDataReader resultsets if the WstCommand 
            executed on multiple partitions and/or replicas
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_sqlReader">
            <summary>
            Underlying SqlDataReader object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_wstConnection">
            <summary>
            WstConnection that was used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_wstCommand">
            <summary>
            WstCommand object that was executed to produce this resultset.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_fClosed">
            <summary>
            Tracks whether the WstDataReader.Close() method has been called yet, or not.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstDataReader.m_disposed">
            <summary>
            Tracks whether or not this object has been Dispose()'d yet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.#ctor(System.Data.SqlClient.SqlDataReader,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates instance of WstDataReader (only the WstCommand should create in response to
            a WstCommand.ExecuteReader() call).  This construc
            </summary>
            <param name="reader">Underlying SqlReader object being wrapped</param>
            <param name="wstconn">WstConnection used in command execute</param>
            <param name="wstCmd">WstCommand executed to produce this resultset</param>
            <remarks>
            User should not be able to directly create a DataReader object so the constructors are
            marked as internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#IDisposable#Dispose">
            <summary>
            Implements the IDisposable.Dispose() method.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.Close">
            <summary>
            Closes the WstDataReader object.
            </summary>
            <remarks>
            You must explicitly call the Close method when you are through using the SqlDataReader to 
            use the associated SqlConnection for any other purpose.
            The Close method fills in the values for output parameters, return values and RecordsAffected, 
            increasing the amount of time it takes to close a SqlDataReader that was used to process a large 
            or complicated query. In cases where the return values and the number of records affected by a 
            query are not significant, the amount of time it takes to close the SqlDataReader can be reduced by 
            calling the Cancel method of the associated SqlCommand object before calling the Close method.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch Transact-SQL statements.
            </summary>
            <returns>
            true if there are more result sets; otherwise, false.
            </returns>
            <remarks>
            Used to process multiple results, which can be generated by executing batch Transact-SQL statements.
            By default, the data reader is positioned on the first result.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.Read">
            <summary>
            Advances the SqlDataReader to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false</returns>
            <remarks>
            The default position of the SqlDataReader is prior to the first record. 
            Therefore, you must call Read to begin accessing any data.
            Only one SqlDataReader per associated SqlConnection may be open at a time, 
            and any attempt to open another will fail until the first one is closed. 
            Similarly, while the SqlDataReader is in use, the associated SqlConnection 
            is busy serving it until you call Close.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the SqlDataReader
            </summary>
            <returns>
            A DataTable that describes the column metadata.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetName(System.Int32)">
            <summary>
            IGets the name of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The name of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The name of the back-end data type.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type of the object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The Type that is the data type of the object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>This method returns DBNull for null database columns.</returns>
            <remarks>GetValue returns data using the .NET Framework types.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetValues(System.Object[])">
            <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
            <param name="values">An array of Object into which to copy the attribute columns.</param>
            <returns>The number of instances of Object in the array.</returns>
            <remarks>
            For most applications, this method provides an efficient means for retrieving all columns, 
            rather than retrieving each column individually.
            
            You can pass an Object array that contains fewer than the number of columns contained in 
            the resulting row. Only the amount of data the Object array holds is copied to the array. 
            You can also pass an Object array whose length is more than the number of columns contained 
            in the resulting row.
            
            This method returns DBNull for null database columns.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name">The name of the column.</param>
            <returns>The zero-based column ordinal.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the column as a Boolean.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a Byte.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the column as a Byte.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inherited from IDataRecord.  Pass through to the current SqlDataReader
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <param name="dataIndex">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to read the stream of bytes</param>
            <param name="bufferIndex">The index for buffer to begin the read operation</param>
            <param name="length">The maximum length to copy into the buffer</param>
            <returns>The actual number of bytes read</returns>
            <remarks>
            GetBytes returns the number of available bytes in the field. In most cases this is the exact length of the field. 
            However, the number returned may be less than the true length of the field if GetBytes has already been used to obtain bytes 
            from the field. This may be the case, for example, if the SqlDataReader is reading a large data structure into a buffer. 
            For more information, see the SequentialAccess setting for CommandBehavior.
            If you pass a buffer that is a null reference (Nothing in Visual Basic), GetBytes returns the length of the field in bytes.
            No conversions are performed, therefore the data retrieved must already be a byte array
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns> The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the 
            buffer as an array starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <param name="dataIndex">The index within the field from which to begin the read operation</param>
            <param name="buffer">The buffer into which to copy data.</param>
            <param name="bufferIndex">The index for buffer to begin the read operation</param>
            <param name="length">The maximum number of characters to read.</param>
            <returns>The actual number of characters read</returns>
            <remarks>
            GetChars returns the number of available characters in the field. In most cases this is 
            the exact length of the field. However, the number returned may be less than the true 
            length of the field if GetChars has already been used to obtain characters from the field. 
            This may be the case, for example, if the SqlDataReader is reading a large data structure 
            into a buffer. For more information, see the SequentialAccess setting for CommandBehavior.
            
            The actual number of characters read can be less than the requested length, if the end of 
            the field is reached. If you pass a buffer that is a null reference (Nothing in Visual Basic), 
            GetChars returns the length of the field in characters.
            
            No conversions are performed, therefore the data retrieved must already be a character array.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetGuid(System.Int32)">
            <summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetInt64(System.Int32)">
            <summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetFloat(System.Int32)">
            <summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDouble(System.Int32)">
            <summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetString(System.Int32)">
            <summary>
            Gets the value of the specified column as a string.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the value of the specified column as a Decimal object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets the value of the specified column as a DateTime object.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <param name="i">The zero-based column ordinal</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value indicating whether the column contains non-existent or missing values.
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>true if the specified column value is equivalent to DBNull; otherwise, false.</returns>
            <remarks>
            Call this method to check for null column values before calling the typed get methods 
            (for example, GetByte, GetChar, and so on) to avoid raising an error.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlBinary(System.Int32)">
            <summary>
            GetSqlBinary Gets the value of the specified column as a SqlBinary. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>A SqlBinary</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a binary structure or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlBoolean(System.Int32)">
            <summary>
            GetSqlBoolean Gets the value of the specified column as a SqlBoolean. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a Boolean or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlByte(System.Int32)">
            <summary>
            GetSqlByte Gets the value of the specified column as a SqlByte. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a byte or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDateTime(System.Int32)">
            <summary>
            GetSqlDateTime Gets the value of the specified column as a SqlDateTime. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a datetime value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDecimal(System.Int32)">
            <summary>
            GetSqlDecimal Gets the value of the specified column as a SqlDecimal. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a decimal value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlDouble(System.Int32)">
            <summary>
            GetSqlDouble Gets the value of the specified column as a SqlDouble. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a double precision floating point number or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlGuid(System.Int32)">
            <summary>
            GetSqlGuid Gets the value of the specified column as a SqlGuid. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a guid or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt16(System.Int32)">
            <summary>
            GetSqlInt16 Gets the value of the specified column as a SqlInt16. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 16 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt32(System.Int32)">
            <summary>
            GetSqlInt32 Gets the value of the specified column as a SqlInt32. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 32 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlInt64(System.Int32)">
            <summary>
            GetSqlInt64 Gets the value of the specified column as a SqlInt64. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a 64 bit signed integer or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlMoney(System.Int32)">
            <summary>
            GetSqlMoney Gets the value of the specified column as a SqlMoney. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a decimal value or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlSingle(System.Int32)">
            <summary>
            GetSqlSingle Gets the value of the specified column as a SqlSingle. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a single precision floating point number or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlString(System.Int32)">
            <summary>
            GetSqlString Gets the value of the specified column as a SqlString. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>The value of the specified column.</returns>
            <remarks>
            No conversions are performed, therefore the data retrieved must 
            already be a string or an exception is generated.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlValue(System.Int32)">
            <summary>
            GetSqlValue Gets an Object that is a representation of the underlying SqlDbType Variant. 
            </summary>
            <param name="i">The zero-based column ordinal</param>
            <returns>An Object that is a representation of the underlying SqlDbType Variant</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.GetSqlValues(System.Object[])">
            <summary>
            GetSqlValues Gets all the attribute columns in the current row. 
            </summary>
            <param name="values">An array of Object to copy the attribute columns into</param>
            <returns>The number of instances of Object in the array</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDataReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.
            </summary>
            <returns>An IEnumerator that can be used to iterate through the collection of DataRecords</returns>
            <remarks>
            Allows the use of "foreach (IDataRecord dataRecord in dataReader)" syntax with our WstDataReader
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value>The depth of nesting for the current row</value>
            <remarks>The outermost table has a depth of zero. The SQL Server .NET Data Provider does not support nesting and always returns zero</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed
            </summary>
            <value>true if the WstDataReader is closed; otherwise, false</value>
            <remarks>IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the Transact-SQL statement.
            </summary>
            <value>The number of rows changed, inserted, or deleted; 0 if no rows were affected or the statement failed; and -1 for SELECT statements.</value>
            <remarks>
            The RecordsAffected property is not set until all rows are read and you close the SqlDataReader.
            The value of this property is cumulative. For example, if two records are inserted in batch mode, 
            the value of RecordsAffected will be two.
            IsClosed and RecordsAffected are the only properties that you can call after the SqlDataReader is closed.
            </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row
            </summary>
            <value>When not positioned in a valid recordset, 0; otherwise the number of columns in the current row. The default is -1.</value>
            <remarks>After executing a query that does not return rows, FieldCount returns 0.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Item(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format given the column ordinal.
            </summary>
            <value>The value of the specified column in its native format</value>
            <remarks>In C#, this property is the indexer for the SqlDataReader class.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.Item(System.String)">
            <summary>
            Gets the value of the specified column in its native format given the column name.
            </summary>
            <value>The value of the specified column in its native format</value>
            <remarks>In C#, this property is the indexer for the SqlDataReader class.</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDataReader.HasRows">
            <summary>
            Gets a value indicating whether the SqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstError">
            <summary>
            Summary description for WstError.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnectionTimeout">
            <summary>
            Connection timeout error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcTranCountExist">
            <summary>
            When checking transaction count for connections gotten from 
            the pool before execution.  Error if transaction already exists.
            (Debugging tool).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcAdminConsoleNotExist">
            <summary>
            No admin consoles are registered.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMismatchVersion">
            <summary>
            Client library does not support either the registry version, or
            the configuration database version.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoServiceAvail">
            <summary>
            Unable to CoCreateInstance() the WSTService object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoRegistry">
            <summary>
            The webstore registry settings are missing or invalid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoFileShareAvail">
            <summary>
            No fileshare available error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcDTCError">
            <summary>
            DTC inconsistent error.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcNoConnectionAvail">
            <summary>
            No connection available error code
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMarkedOffline">
            <summary>
            The only available DB(s) is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMarkedReadOnly">
            <summary>
            There are no write DBs currently active, or logical partition 
            has been marked read only.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcCommandTimeout">
            <summary>
            Command timed out and cannot retry/failover
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMaxRetriesExceeded">
            <summary>
            Command or Connection failed and max number of attempts has been exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcMaxPoolSizeReached">
            <summary>
            Max Pool size exceeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcApplicationNotExist">
            <summary>
            The application "name" does not exist
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcAppConfigChanged">
            <summary>
            Configuration changed while in middle of a transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConfigExpired">
            <summary>
            Current cached configuration has expired before polling successfully completed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcSiteNotExist">
            <summary>
            The site "name" does not exist
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnDeniedMaxLimit">
            <summary>
            The Max Concurrent Requests limit reached. Connection Denied
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcConnNotInitialized">
            <summary>
            WstConnection needs to opened before the current operation. Operation denied.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstError.EcFail">
            <summary>
            General Failure occurred.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstError.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstError.Number">
            <summary>
            Gets the webstore error code.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstError.Message">
            <summary>
            Gets a string description of the webstore error.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstException">
            <summary>
            Webstore specific exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstException.errorInfo">
            <summary>
            Webstore error information.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstException.applicationName">
            <summary>
            Webstore Application that encountered the error.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstException.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="errorCode">Webstore specific error code</param>
            <param name="applicationName"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable.GetObjectData
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstException.Application">
            <summary>
            Name of application that encountered the exception
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstException.Error">
            <summary>
            WstError object containing specific error code information
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstHash">
            <summary>
            Implementation of Webstore's default hash algorithm.
            Application Developers can choose to use the Webstore Hashing algorithm,
            or use their own hash or lookup based method to partition their data.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_A">
            <summary>
            First of 3 prime numbers used in the hashing algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_B">
            <summary>
            Second of 3 prime numbers used in the hashing algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.PRIME_K">
            <summary>
            Third of 3 prime numbers used in the hashing algorithm
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstHash.m_maxHash">
            <summary>
            Member if using instance of object rather than calling the static methods.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.#ctor(System.Int32)">
            <summary>
            Initializes an instance of the WstHash class
            </summary>
            <param name="maxHash">MaxHash number (0..maxHash-1)</param>
            <remarks>
            It's not necessary to create instance of the class.  The static methods
            can be called directly with key and max hash.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Guid)">
            <summary>
            Calculate hash for Guid key
            </summary>
            <param name="guid">Guid key to hash</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.String)">
            <summary>
            Calculate hash for string key.
            </summary>
            <param name="strKey">string key to hash</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Int64)">
            <summary>
            Calculate hash for large integer key
            </summary>
            <param name="largeKey">large integer key</param>
            <returns>0..MaxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Guid,System.Int32)">
            <summary>
            Static method to get hash of a Guid key.
            </summary>
            <param name="guid">Guid key to hash</param>
            <param name="maxHash">Max Hash</param>
            <returns>0..maxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.String,System.Int32)">
            <summary>
            Static method to get hash of a string key.
            </summary>
            <param name="strKey">string key</param>
            <param name="maxHash">Max Hash</param>
            <returns>0..maxHash-1</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetByte(System.Int64,System.Int32)">
            <summary>
            Internal helper method to extract a byte from an Int64
            </summary>
            <param name="ival">Int64 to be hashed</param>
            <param name="ib">byte index (0..7)</param>
            <returns>byte at ib from Int64</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstHash.GetHash(System.Int64,System.Int32)">
             <summary>
             Static method to get hash value of a large integer key
             </summary>
             <param name="largeKey">large integer key</param>
             <param name="maxHash">Max Hash</param>
             <returns>0..maxHash-1</returns>
             <remarks>
             The unmanaged webstore client library implementation of HashLARGEINTEGER
             iterates through each byte of the LARGEINTEGER as follows:
             
                    LARGE_INTEGER li;
                    unsigned char rgby[sizeof(unsigned long)*2] = {0};
            
                    memcpy((addr)rgby[0], (addr)(li.HighPart), sizeof(unsigned long));
                    memcpy((addr)rgby[sizeof(unsigned long)], (addr)(li.LowPart), sizeof(unsigned long));
            
                    li.QuadPart = 0x8877665544332211
                    li.HighPart = 0x88776655
                    li.LowPart  = 0x44332211
                    rgby[0] = 0x55
                    rgby[1] = 0x66
                    rgby[2] = 0x77
                    rgby[3] = 0x88
                    rgby[4] = 0x11
                    rgby[5] = 0x22
                    rgby[6] = 0x33
                    rgby[7] = 0x44
            
             So, for us to calculate the same hash values for our int64, we will need to 
             process high dword then low dword also.
            
             </remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstHash.MaxHash">
            <summary>
            MaxHash specified when object was constructed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.LatencyInfo">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.LatencyInfo.#ctor(System.Int32,System.Guid,System.Guid,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.SourceSqlDBUid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.DestSqlDBUid">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.Latency">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.LatencyBucket">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.LatencyInfo.SqlFssNum">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstLatencyManager">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstLatencyManager.GetLatency">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstLatencyManager.GetLatency(System.Guid,System.Guid,System.Guid)">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Threading.CustomizedWorkDelegate">
            <summary>
            CustomizedWorkDelegate
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Threading.MonitoringWorkItem">
            <summary>
            MonitoringWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.#ctor(Microsoft.Webstore.Common.WstThreadPool,System.Int32,System.Object,Microsoft.Webstore.Common.Threading.CustomizedWorkDelegate)">
            <summary>
            MonitoringWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.BeginWork(System.Object,System.AsyncCallback,System.Object)">
            <summary>
            BeginWork
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.EndWork(System.IAsyncResult)">
            <summary>
            EndWork
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.Working(System.Object)">
            <summary>
            Working
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.WaitCurrentWorkDone">
            <summary>
            WaitCurrentWorkDone
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.CopyState(Microsoft.Webstore.Common.Threading.MonitoringWorkItem)">
            <summary>
            CopyState
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.WorkingInterval">
            <summary>
            WorkingInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.Threading.MonitoringWorkItem.LastSuccTime">
            <summary>
            LastSuccTime
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstWorkItem">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstWorkItem.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThread">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(System.Threading.WaitCallback,System.Object)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.#ctor(Microsoft.Webstore.Common.WstWorkItem)">
            <summary>
            WstThread
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThread.Start">
            <summary>
            Start
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.WstThreadPool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxThreads"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the state to NULL
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            Defaults the timeout to infinite.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Int32)">
            <summary>
            Queue the process. If the active processes are less then the max,
            it will be put on the system queue immediately. Otherwise it
            will wait until a thread is free.
            If millisecondsTimeout is reached, returns false, otherwise
            returns true.
            </summary>
            <param name="threadProc"></param>
            <param name="state"></param>
            <param name="millisecondsTimeout"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.WstCallback(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.Int32)">
            <summary>
            Returns a thread pool using the passed in value. If the value is less then
            1, DefaultMaximumThreads is used instead.
            </summary>
            <param name="threadCount"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String)">
            <summary>
            Uses passed in string as a call into the System Centralized settings
            for the value. If the setting is missing, uses the default.
            </summary>
            <param name="centralizedSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetThreadPool(System.String,System.Int32)">
            <summary>
            Uses passed in string to get the centralized setting for the thread count.
            If the centralized setting does not exist or is less then 1, uses the
            requestedThreads parameter.
            </summary>
            <param name="centralizedSetting"></param>
            <param name="requestedThreads"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetCentralizedSettingOverride(System.String)">
            <summary>
            Returns the Setting that matches the settingEntry name. If the settingEntry does not exist
            in the WebstoreMetaData.WebstoreSettings class, it will return the default from this class.
            </summary>
            <param name="settingEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemAvailableThreads">
            <summary>
            Retrieves the difference between the maximum number of thread pool
            threads, returned by GetMaxThreads, and the number currently active.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getavailablethreads.aspx
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.WstThreadPool.GetSystemMaxThreads">
            <summary>
            Retrieves the number of requests to the thread pool that can be active
            concurrently. All requests above that number remain queued until thread
            pool threads become available.
            http://msdn2.microsoft.com/en-us/library/system.threading.threadpool.getmaxthreads.aspx
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.MaxThreads">
            <summary>
            Property to set or get the maximum number of threads allowed
            for this pool.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.ActiveThreads">
            <summary>
            ActiveThreads are the number of threads in use.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.WstThreadPool.IsFull">
            <summary>
            Indicates if the pool can accept more processes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstTransaction">
            <summary>
            Summary description for WstTransaction.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._connection">
            <summary>
            The WstConnection which this WstTransaction is bound to. The WstConnection which created the WstTransaction.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._isolationLevel">
            <summary>
            IsolationLevel
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._transaction">
            <summary>
            Actual SqlTransaction that will control the transaction
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._completed">
            <summary>
            Keeps track of when this transaction has been Commit(), Rollback() or Dispose()
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._disposed">
            <summary>
            Tracks whether or not this object has been Dispose()'d yet.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._databaseConnection">
            <summary>
            Internal DB Connection object (SqlConnection, along with command context).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstTransaction._commandsInTransaction">
            <summary>
            List of all the WstCommands bind to this transaction.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.#ctor(Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            Constructor (created from WstConnection.BeginTransaction().
            </summary>
            <param name="conn">WstConnection parent</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.#ctor(Microsoft.Webstore.WstClient.WstConnection,System.Data.IsolationLevel)">
            <summary>
            Constructor (created from WstConnection.BeginTransaction().
            </summary>
            <param name="conn">WstConnection parent</param>
            <param name="isolevel">IsolationLevel (default = ReadCommitted)</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Commit">
            <summary>
            Commits the transaction in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.Rollback">
            <summary>
            Rolls back the transaction in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.SetDBConnection(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            Internal helper version of GetDBConnection
            </summary>
            <param name="databaseConnection">SqlConnection</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.ReportCommandCompletion(Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            
            </summary>
            <param name="dbConnection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstTransaction.ClearMembers">
            <summary>
            Shared cleanup between Dispose(), Rollback(), and Commit().
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.Connection">
            <summary>
            Gets the WstConnection that created this WstTransaction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.System#Data#IDbTransaction#Connection">
            <summary>
            Gets the WstConnection that created this WstTransaction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.IsolationLevel">
            <summary>
            IsolationLevel (default = ReadCommitted)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstTransaction.InProgress">
            <summary>
            true if actual underlying SqlTransaction has begun
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstXmlReader">
            <summary>
            The WstXmlReader is created by invoking the WstCommand.ExecuteXmlReader() method.  
            The WstXmlReader class is a thin wrapper over the XmlReader resultset.  
            The WstXmlReader may contain multiple XmlReader resultsets if the WstCommand 
            executed on multiple partitions and/or replicas, so we have additional public method
            NextResult() to move to next XmlReader result.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_xmlReader">
            <summary>
            Underlying XmlReader object.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_wstConnection">
            <summary>
            WstConnection that was used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_wstCommand">
            <summary>
            WstCommand object that was executed to produce this resultset.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstXmlReader.m_fClosed">
            <summary>
            Track whether or not the WstXmlReader.Close() method has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.#ctor(System.Xml.XmlReader,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates instance of WstDataReader (only the WstCommand should create in response to
            a WstCommand.ExecuteReader() call).  This construc
            </summary>
            <param name="reader">Underlying XmlReader object being wrapped</param>
            <param name="wstconn">WstConnection used in command execute</param>
            <param name="wstCmd">WstCommand executed to produce this resultset</param>
            <remarks>
            User should not be able to directly create a DataReader object so the constructors are
            marked as internal.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Finalize">
            <summary>
            C# type destructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.GetAttribute(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToFirstAttribute">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToNextAttribute">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.MoveToElement">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Read">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.Close">
            <summary>
            Close all the underlying XmlReader objects when we are closed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadString">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadInnerXml">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadOuterXml">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.LookupNamespace(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ResolveEntity">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstXmlReader.ReadAttributeValue">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NodeType">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Name">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.LocalName">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NamespaceURI">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Prefix">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.HasValue">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Value">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Depth">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.BaseURI">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.IsEmptyElement">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.IsDefault">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.QuoteChar">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.XmlSpace">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.XmlLang">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.AttributeCount">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.Int32)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.Item(System.String,System.String)">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.EOF">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.ReadState">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstXmlReader.NameTable">
            <summary>
            Override inherited XmlReader property/method and pass through to current XmlReader.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ICLCommonCategoryInstaller">
            <summary>
            Category installer for the ICLCommon event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.ICLCommonEvents">
            <summary>
            Events in the ICLCommon module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.MessageValue">
            <summary>
            EventDefinition for Message
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogMessage(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type Message.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogMessage(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type Message with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.UnexpectedRecoverableExceptionValue">
            <summary>
            EventDefinition for UnexpectedRecoverableException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogUnexpectedRecoverableException(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type UnexpectedRecoverableException.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogUnexpectedRecoverableException(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedRecoverableException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.UnexpectedFatalExceptionValue">
            <summary>
            EventDefinition for UnexpectedFatalException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogUnexpectedFatalException(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type UnexpectedFatalException.
            </summary>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogUnexpectedFatalException(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedFatalException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="exceptionStack">Argument exceptionStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.UnexpectedRecoverableErrorValue">
            <summary>
            EventDefinition for UnexpectedRecoverableError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogUnexpectedRecoverableError(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type UnexpectedRecoverableError.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogUnexpectedRecoverableError(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type UnexpectedRecoverableError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.RecoverableExceptionValue">
            <summary>
            EventDefinition for RecoverableException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogRecoverableException(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type RecoverableException.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogRecoverableException(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type RecoverableException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Common.ICLCommonEvents.WarningValue">
            <summary>
            EventDefinition for Warning
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogWarning(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type Warning.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Common.ICLCommonEvents.LogWarning(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type Warning with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
            <param name="errorStack">Argument errorStack for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.Message">
            <summary>
              Gets the EventDefinition for the Message.
            </summary>
            <value>The EventDefinition for the Message</value>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.UnexpectedRecoverableException">
            <summary>
              Gets the EventDefinition for the UnexpectedRecoverableException.
            </summary>
            <value>The EventDefinition for the UnexpectedRecoverableException</value>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.UnexpectedFatalException">
            <summary>
              Gets the EventDefinition for the UnexpectedFatalException.
            </summary>
            <value>The EventDefinition for the UnexpectedFatalException</value>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.UnexpectedRecoverableError">
            <summary>
              Gets the EventDefinition for the UnexpectedRecoverableError.
            </summary>
            <value>The EventDefinition for the UnexpectedRecoverableError</value>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.RecoverableException">
            <summary>
              Gets the EventDefinition for the RecoverableException.
            </summary>
            <value>The EventDefinition for the RecoverableException</value>
        </member>
        <member name="P:Microsoft.Webstore.Common.ICLCommonEvents.Warning">
            <summary>
              Gets the EventDefinition for the Warning.
            </summary>
            <value>The EventDefinition for the Warning</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ICLDataProgrammabilityCategoryInstaller">
            <summary>
            Category installer for the ICLDataProgrammability event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents">
            <summary>
            Events in the ICLDataProgrammability module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.SqlCommandErrorValue">
            <summary>
            EventDefinition for SqlCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogSqlCommandError(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type SqlCommandError.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogSqlCommandError(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type SqlCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.FileCommandErrorValue">
            <summary>
            EventDefinition for FileCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogFileCommandError(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type FileCommandError.
            </summary>
            <param name="path">Argument path for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogFileCommandError(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type FileCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="path">Argument path for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="errorInfo">Argument errorInfo for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.BadPoolCommandErrorValue">
            <summary>
            EventDefinition for BadPoolCommandError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogBadPoolCommandError(System.Guid,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type BadPoolCommandError.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="numberOfRetries">Argument numberOfRetries for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogBadPoolCommandError(System.Guid,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type BadPoolCommandError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="numberOfRetries">Argument numberOfRetries for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.CommandExecutingValue">
            <summary>
            EventDefinition for CommandExecuting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogCommandExecuting(System.Guid,System.String,System.String,System.String,System.Object,System.String,System.Data.CommandType,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type CommandExecuting.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="partitionKey">Argument partitionKey for formatting the event text.</param>
            <param name="connectionString">Argument connectionString for formatting the event text.</param>
            <param name="commandType">Argument commandType for formatting the event text.</param>
            <param name="commandText">Argument commandText for formatting the event text.</param>
            <param name="commandParameters">Argument commandParameters for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogCommandExecuting(System.Guid,System.String,System.String,System.String,System.Object,System.String,System.Data.CommandType,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type CommandExecuting with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="partitionKey">Argument partitionKey for formatting the event text.</param>
            <param name="connectionString">Argument connectionString for formatting the event text.</param>
            <param name="commandType">Argument commandType for formatting the event text.</param>
            <param name="commandText">Argument commandText for formatting the event text.</param>
            <param name="commandParameters">Argument commandParameters for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.ConnectionClosingValue">
            <summary>
            EventDefinition for ConnectionClosing
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogConnectionClosing(System.Guid,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type ConnectionClosing.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogConnectionClosing(System.Guid,System.String,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ConnectionClosing with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.BeginningTransactionValue">
            <summary>
            EventDefinition for BeginningTransaction
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogBeginningTransaction(System.Guid,System.String,System.String,System.String,System.Int32,System.Data.IsolationLevel,System.String,System.Int32)">
            <summary>
            Method to log an event of type BeginningTransaction.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="transactionID">Argument transactionID for formatting the event text.</param>
            <param name="transactionLevel">Argument transactionLevel for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogBeginningTransaction(System.Guid,System.String,System.String,System.String,System.Int32,System.Data.IsolationLevel,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type BeginningTransaction with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="transactionID">Argument transactionID for formatting the event text.</param>
            <param name="transactionLevel">Argument transactionLevel for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.CommittingTransactionValue">
            <summary>
            EventDefinition for CommittingTransaction
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogCommittingTransaction(System.Guid,System.String,System.String,System.String,System.Int32,System.Data.IsolationLevel,System.String,System.Int32)">
            <summary>
            Method to log an event of type CommittingTransaction.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="transactionID">Argument transactionID for formatting the event text.</param>
            <param name="transactionLevel">Argument transactionLevel for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogCommittingTransaction(System.Guid,System.String,System.String,System.String,System.Int32,System.Data.IsolationLevel,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type CommittingTransaction with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="transactionID">Argument transactionID for formatting the event text.</param>
            <param name="transactionLevel">Argument transactionLevel for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.RollingBackTransactionValue">
            <summary>
            EventDefinition for RollingBackTransaction
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogRollingBackTransaction(System.Guid,System.String,System.String,System.String,System.Int32,System.Data.IsolationLevel,System.String,System.Int32)">
            <summary>
            Method to log an event of type RollingBackTransaction.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="transactionID">Argument transactionID for formatting the event text.</param>
            <param name="transactionLevel">Argument transactionLevel for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.LogRollingBackTransaction(System.Guid,System.String,System.String,System.String,System.Int32,System.Data.IsolationLevel,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type RollingBackTransaction with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="clientServerName">Argument clientServerName for formatting the event text.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="deploymentName">Argument deploymentName for formatting the event text.</param>
            <param name="transactionID">Argument transactionID for formatting the event text.</param>
            <param name="transactionLevel">Argument transactionLevel for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.SqlCommandError">
            <summary>
              Gets the EventDefinition for the SqlCommandError.
            </summary>
            <value>The EventDefinition for the SqlCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.FileCommandError">
            <summary>
              Gets the EventDefinition for the FileCommandError.
            </summary>
            <value>The EventDefinition for the FileCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.BadPoolCommandError">
            <summary>
              Gets the EventDefinition for the BadPoolCommandError.
            </summary>
            <value>The EventDefinition for the BadPoolCommandError</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.CommandExecuting">
            <summary>
              Gets the EventDefinition for the CommandExecuting.
            </summary>
            <value>The EventDefinition for the CommandExecuting</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.ConnectionClosing">
            <summary>
              Gets the EventDefinition for the ConnectionClosing.
            </summary>
            <value>The EventDefinition for the ConnectionClosing</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.BeginningTransaction">
            <summary>
              Gets the EventDefinition for the BeginningTransaction.
            </summary>
            <value>The EventDefinition for the BeginningTransaction</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.CommittingTransaction">
            <summary>
              Gets the EventDefinition for the CommittingTransaction.
            </summary>
            <value>The EventDefinition for the CommittingTransaction</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDataProgrammabilityEvents.RollingBackTransaction">
            <summary>
              Gets the EventDefinition for the RollingBackTransaction.
            </summary>
            <value>The EventDefinition for the RollingBackTransaction</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ICLDenylistingCategoryInstaller">
            <summary>
            Category installer for the ICLDenylisting event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ICLDenylistingEvents">
            <summary>
            Events in the ICLDenylisting module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.ResourceDenylistedValue">
            <summary>
            EventDefinition for ResourceDenylisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogResourceDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type ResourceDenylisted.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogResourceDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ResourceDenylisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.IpUnDenylistedValue">
            <summary>
            EventDefinition for IpUnDenylisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogIpUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.String,System.Int32)">
            <summary>
            Method to log an event of type IpUnDenylisted.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogIpUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type IpUnDenylisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.ResourceUnDenylistedValue">
            <summary>
            EventDefinition for ResourceUnDenylisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogResourceUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.String,System.Int32)">
            <summary>
            Method to log an event of type ResourceUnDenylisted.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogResourceUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ResourceUnDenylisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.ResourceCannotBeUnDenylistedValue">
            <summary>
            EventDefinition for ResourceCannotBeUnDenylisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogResourceCannotBeUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type ResourceCannotBeUnDenylisted.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogResourceCannotBeUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.Double,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ResourceCannotBeUnDenylisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.UndenylistingExceptionValue">
            <summary>
            EventDefinition for UndenylistingException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogUndenylistingException(System.String,System.Int32)">
            <summary>
            Method to log an event of type UndenylistingException.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogUndenylistingException(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type UndenylistingException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.SyncingDataStructureValue">
            <summary>
            EventDefinition for SyncingDataStructure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogSyncingDataStructure(System.String,System.Int32)">
            <summary>
            Method to log an event of type SyncingDataStructure.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogSyncingDataStructure(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type SyncingDataStructure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLDenylistingEvents.IpCannotBeUnDenylistedValue">
            <summary>
            EventDefinition for IpCannotBeUnDenylisted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogIpCannotBeUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type IpCannotBeUnDenylisted.
            </summary>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLDenylistingEvents.LogIpCannotBeUnDenylisted(System.Guid,Microsoft.Webstore.MetaData.WebstoreResourceType,System.String,System.String,System.String,System.Double,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type IpCannotBeUnDenylisted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="tracingID">Argument tracingID for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="ipAddress">Argument ipAddress for formatting the event text.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.ResourceDenylisted">
            <summary>
              Gets the EventDefinition for the ResourceDenylisted.
            </summary>
            <value>The EventDefinition for the ResourceDenylisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.IpUnDenylisted">
            <summary>
              Gets the EventDefinition for the IpUnDenylisted.
            </summary>
            <value>The EventDefinition for the IpUnDenylisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.ResourceUnDenylisted">
            <summary>
              Gets the EventDefinition for the ResourceUnDenylisted.
            </summary>
            <value>The EventDefinition for the ResourceUnDenylisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.ResourceCannotBeUnDenylisted">
            <summary>
              Gets the EventDefinition for the ResourceCannotBeUnDenylisted.
            </summary>
            <value>The EventDefinition for the ResourceCannotBeUnDenylisted</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.UndenylistingException">
            <summary>
              Gets the EventDefinition for the UndenylistingException.
            </summary>
            <value>The EventDefinition for the UndenylistingException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.SyncingDataStructure">
            <summary>
              Gets the EventDefinition for the SyncingDataStructure.
            </summary>
            <value>The EventDefinition for the SyncingDataStructure</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLDenylistingEvents.IpCannotBeUnDenylisted">
            <summary>
              Gets the EventDefinition for the IpCannotBeUnDenylisted.
            </summary>
            <value>The EventDefinition for the IpCannotBeUnDenylisted</value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ICLMetadataCategoryInstaller">
            <summary>
            Category installer for the ICLMetadata event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ICLMetadataEvents">
            <summary>
            Events in the ICLMetadata module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.CachedConfigurationExpiredValue">
            <summary>
            EventDefinition for CachedConfigurationExpired
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogCachedConfigurationExpired(System.String,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Method to log an event of type CachedConfigurationExpired.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processingTime">Argument processingTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogCachedConfigurationExpired(System.String,System.Double,System.Double,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type CachedConfigurationExpired with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processingTime">Argument processingTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.ConfigurationRenewedValue">
            <summary>
            EventDefinition for ConfigurationRenewed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogConfigurationRenewed(System.String,System.Double,System.String,System.Int32)">
            <summary>
            Method to log an event of type ConfigurationRenewed.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogConfigurationRenewed(System.String,System.Double,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ConfigurationRenewed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="duration">Argument duration for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstConfigPollingErrorValue">
            <summary>
            EventDefinition for WstConfigPollingError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstConfigPollingError(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WstConfigPollingError.
            </summary>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstConfigPollingError(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstConfigPollingError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="depName">Argument depName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstConfigExecuteErrorValue">
            <summary>
            EventDefinition for WstConfigExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstConfigExecuteError(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WstConfigExecuteError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstConfigExecuteError(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstConfigExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstSkipConfigInformationValue">
            <summary>
            EventDefinition for WstSkipConfigInformation
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstSkipConfigInformation(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WstSkipConfigInformation.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstSkipConfigInformation(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstSkipConfigInformation with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstRuntimeEventsConfigFileErrorValue">
            <summary>
            EventDefinition for WstRuntimeEventsConfigFileError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstRuntimeEventsConfigFileError(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WstRuntimeEventsConfigFileError.
            </summary>
            <param name="configFileFullPath">Argument configFileFullPath for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstRuntimeEventsConfigFileError(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstRuntimeEventsConfigFileError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="configFileFullPath">Argument configFileFullPath for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstRuntimeConfigFileUpdateErrorValue">
            <summary>
            EventDefinition for WstRuntimeConfigFileUpdateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstRuntimeConfigFileUpdateError(System.String,System.Int32)">
            <summary>
            Method to log an event of type WstRuntimeConfigFileUpdateError.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstRuntimeConfigFileUpdateError(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstRuntimeConfigFileUpdateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstAppConfigurationRenewedValue">
            <summary>
            EventDefinition for WstAppConfigurationRenewed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstAppConfigurationRenewed(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WstAppConfigurationRenewed.
            </summary>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstAppConfigurationRenewed(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstAppConfigurationRenewed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="applicationName">Argument applicationName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstEventHandlerErrorValue">
            <summary>
            EventDefinition for WstEventHandlerError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstEventHandlerError(System.String,System.Int32)">
            <summary>
            Method to log an event of type WstEventHandlerError.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ICLMetadataEvents.LogWstEventHandlerError(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WstEventHandlerError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.CachedConfigurationExpired">
            <summary>
              Gets the EventDefinition for the CachedConfigurationExpired.
            </summary>
            <value>The EventDefinition for the CachedConfigurationExpired</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.ConfigurationRenewed">
            <summary>
              Gets the EventDefinition for the ConfigurationRenewed.
            </summary>
            <value>The EventDefinition for the ConfigurationRenewed</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstConfigPollingError">
            <summary>
              Gets the EventDefinition for the WstConfigPollingError.
            </summary>
            <value>The EventDefinition for the WstConfigPollingError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstConfigExecuteError">
            <summary>
              Gets the EventDefinition for the WstConfigExecuteError.
            </summary>
            <value>The EventDefinition for the WstConfigExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstSkipConfigInformation">
            <summary>
              Gets the EventDefinition for the WstSkipConfigInformation.
            </summary>
            <value>The EventDefinition for the WstSkipConfigInformation</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstRuntimeEventsConfigFileError">
            <summary>
              Gets the EventDefinition for the WstRuntimeEventsConfigFileError.
            </summary>
            <value>The EventDefinition for the WstRuntimeEventsConfigFileError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstRuntimeConfigFileUpdateError">
            <summary>
              Gets the EventDefinition for the WstRuntimeConfigFileUpdateError.
            </summary>
            <value>The EventDefinition for the WstRuntimeConfigFileUpdateError</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstAppConfigurationRenewed">
            <summary>
              Gets the EventDefinition for the WstAppConfigurationRenewed.
            </summary>
            <value>The EventDefinition for the WstAppConfigurationRenewed</value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ICLMetadataEvents.WstEventHandlerError">
            <summary>
              Gets the EventDefinition for the WstEventHandlerError.
            </summary>
            <value>The EventDefinition for the WstEventHandlerError</value>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ICLThrottlingCategoryInstaller">
            <summary>
            Category installer for the ICLThrottling event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ICLThrottlingEvents">
            <summary>
            Events in the ICLThrottling module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestIncrementAttemptValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncrementAttempt
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestIncrementAttempt(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementAttempt.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestIncrementAttempt(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementAttempt with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestIncrementedValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncremented
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestIncremented(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.TimeSpan,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncremented.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestIncremented(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.TimeSpan,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncremented with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestIncrementDeniedDueToBadLatencyValue">
            <summary>
            EventDefinition for MaxConcurrentRequestIncrementDeniedDueToBadLatency
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestIncrementDeniedDueToBadLatency(System.String,System.String,System.Int32,System.Int32,System.TimeSpan,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementDeniedDueToBadLatency.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestIncrementDeniedDueToBadLatency(System.String,System.String,System.Int32,System.Int32,System.TimeSpan,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestIncrementDeniedDueToBadLatency with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestDeniedDueToMaxPoolSizeValue">
            <summary>
            EventDefinition for MaxConcurrentRequestDeniedDueToMaxPoolSize
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMaxPoolSize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.TimeSpan,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMaxPoolSize.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="maxPoolSize">Argument maxPoolSize for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMaxPoolSize(System.String,System.String,System.Int32,System.Int32,System.Int32,System.TimeSpan,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMaxPoolSize with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="maxPoolSize">Argument maxPoolSize for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestDeniedDueToMinumumGrowthPeriodValue">
            <summary>
            EventDefinition for MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMinumumGrowthPeriod(System.String,System.String,System.Int32,System.Int32,System.TimeSpan,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestDeniedDueToMinumumGrowthPeriod(System.String,System.String,System.Int32,System.Int32,System.TimeSpan,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="newMCRL">Argument newMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.RequestDeniedDueToThrottlingValue">
            <summary>
            EventDefinition for RequestDeniedDueToThrottling
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogRequestDeniedDueToThrottling(System.String,System.String,System.Int32,System.TimeSpan,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type RequestDeniedDueToThrottling.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogRequestDeniedDueToThrottling(System.String,System.String,System.Int32,System.TimeSpan,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type RequestDeniedDueToThrottling with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMCRL">Argument oldMCRL for formatting the event text.</param>
            <param name="nextAttemptTime">Argument nextAttemptTime for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestLimitReductionAttemptValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReductionAttempt
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestLimitReductionAttempt(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionAttempt.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestLimitReductionAttempt(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionAttempt with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestLimitReductionValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReduction
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestLimitReduction(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Single,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReduction.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMaxCRL">Argument oldMaxCRL for formatting the event text.</param>
            <param name="newMaxCRL">Argument newMaxCRL for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="concurrencyLimitDelta">Argument concurrencyLimitDelta for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestLimitReduction(System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int64,System.Int64,System.Single,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReduction with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="oldMaxCRL">Argument oldMaxCRL for formatting the event text.</param>
            <param name="newMaxCRL">Argument newMaxCRL for formatting the event text.</param>
            <param name="reason">Argument reason for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="percentBadRequest">Argument percentBadRequest for formatting the event text.</param>
            <param name="concurrencyLimitDelta">Argument concurrencyLimitDelta for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestLimitReductionToMinumumValue">
            <summary>
            EventDefinition for MaxConcurrentRequestLimitReductionToMinumum
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestLimitReductionToMinumum(System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionToMinumum.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="minumumValue">Argument minumumValue for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogMaxConcurrentRequestLimitReductionToMinumum(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type MaxConcurrentRequestLimitReductionToMinumum with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="minumumValue">Argument minumumValue for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.ResettingThrottlingCountersValue">
            <summary>
            EventDefinition for ResettingThrottlingCounters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogResettingThrottlingCounters(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type ResettingThrottlingCounters.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogResettingThrottlingCounters(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ResettingThrottlingCounters with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="maxCRL">Argument maxCRL for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="maxCRSeen">Argument maxCRSeen for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="goodRequests">Argument goodRequests for formatting the event text.</param>
            <param name="backgroundThreadSleepTime">Argument backgroundThreadSleepTime for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.ScaleBackingExceptionValue">
            <summary>
            EventDefinition for ScaleBackingException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogScaleBackingException(System.String,System.Int32)">
            <summary>
            Method to log an event of type ScaleBackingException.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogScaleBackingException(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ScaleBackingException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.QueueSizeCapacityRatioLimitReachedValue">
            <summary>
            EventDefinition for QueueSizeCapacityRatioLimitReached
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogQueueSizeCapacityRatioLimitReached(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type QueueSizeCapacityRatioLimitReached.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="queueWarningRatio">Argument queueWarningRatio for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogQueueSizeCapacityRatioLimitReached(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type QueueSizeCapacityRatioLimitReached with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="queueWarningRatio">Argument queueWarningRatio for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.QueueCapacityReachedValue">
            <summary>
            EventDefinition for QueueCapacityReached
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogQueueCapacityReached(System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type QueueCapacityReached.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogQueueCapacityReached(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type QueueCapacityReached with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="resourceName">Argument resourceName for formatting the event text.</param>
            <param name="queuCapacity">Argument queuCapacity for formatting the event text.</param>
            <param name="version">Argument version for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.StartingRequestValue">
            <summary>
            EventDefinition for StartingRequest
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogStartingRequest(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type StartingRequest.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="maxConcurrentRequestsLimit">Argument maxConcurrentRequestsLimit for formatting the event text.</param>
            <param name="maxConcurrentRequestSeen">Argument maxConcurrentRequestSeen for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="acceptableRequests">Argument acceptableRequests for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogStartingRequest(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type StartingRequest with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="maxConcurrentRequestsLimit">Argument maxConcurrentRequestsLimit for formatting the event text.</param>
            <param name="maxConcurrentRequestSeen">Argument maxConcurrentRequestSeen for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="acceptableRequests">Argument acceptableRequests for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.ConcurrentRequestCountDecreasedValue">
            <summary>
            EventDefinition for ConcurrentRequestCountDecreased
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogConcurrentRequestCountDecreased(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type ConcurrentRequestCountDecreased.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="maxConcurrentRequestsLimit">Argument maxConcurrentRequestsLimit for formatting the event text.</param>
            <param name="maxConcurrentRequestSeen">Argument maxConcurrentRequestSeen for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="acceptableRequests">Argument acceptableRequests for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogConcurrentRequestCountDecreased(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ConcurrentRequestCountDecreased with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="maxConcurrentRequestsLimit">Argument maxConcurrentRequestsLimit for formatting the event text.</param>
            <param name="maxConcurrentRequestSeen">Argument maxConcurrentRequestSeen for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="acceptableRequests">Argument acceptableRequests for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ICLThrottlingEvents.RequestDequeuedValue">
            <summary>
            EventDefinition for RequestDequeued
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogRequestDequeued(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type RequestDequeued.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="maxConcurrentRequestsLimit">Argument maxConcurrentRequestsLimit for formatting the event text.</param>
            <param name="maxConcurrentRequestSeen">Argument maxConcurrentRequestSeen for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="acceptableRequests">Argument acceptableRequests for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ICLThrottlingEvents.LogRequestDequeued(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type RequestDequeued with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="maxConcurrentRequestsLimit">Argument maxConcurrentRequestsLimit for formatting the event text.</param>
            <param name="maxConcurrentRequestSeen">Argument maxConcurrentRequestSeen for formatting the event text.</param>
            <param name="concurrentRequests">Argument concurrentRequests for formatting the event text.</param>
            <param name="totalRequests">Argument totalRequests for formatting the event text.</param>
            <param name="acceptableRequests">Argument acceptableRequests for formatting the event text.</param>
            <param name="queueSize">Argument queueSize for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestIncrementAttempt">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncrementAttempt.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncrementAttempt</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestIncremented">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncremented.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncremented</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestIncrementDeniedDueToBadLatency">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestIncrementDeniedDueToBadLatency.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestIncrementDeniedDueToBadLatency</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestDeniedDueToMaxPoolSize">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestDeniedDueToMaxPoolSize.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestDeniedDueToMaxPoolSize</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestDeniedDueToMinumumGrowthPeriod</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.RequestDeniedDueToThrottling">
            <summary>
              Gets the EventDefinition for the RequestDeniedDueToThrottling.
            </summary>
            <value>The EventDefinition for the RequestDeniedDueToThrottling</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestLimitReductionAttempt">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReductionAttempt.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReductionAttempt</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestLimitReduction">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReduction.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReduction</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.MaxConcurrentRequestLimitReductionToMinumum">
            <summary>
              Gets the EventDefinition for the MaxConcurrentRequestLimitReductionToMinumum.
            </summary>
            <value>The EventDefinition for the MaxConcurrentRequestLimitReductionToMinumum</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.ResettingThrottlingCounters">
            <summary>
              Gets the EventDefinition for the ResettingThrottlingCounters.
            </summary>
            <value>The EventDefinition for the ResettingThrottlingCounters</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.ScaleBackingException">
            <summary>
              Gets the EventDefinition for the ScaleBackingException.
            </summary>
            <value>The EventDefinition for the ScaleBackingException</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.QueueSizeCapacityRatioLimitReached">
            <summary>
              Gets the EventDefinition for the QueueSizeCapacityRatioLimitReached.
            </summary>
            <value>The EventDefinition for the QueueSizeCapacityRatioLimitReached</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.QueueCapacityReached">
            <summary>
              Gets the EventDefinition for the QueueCapacityReached.
            </summary>
            <value>The EventDefinition for the QueueCapacityReached</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.StartingRequest">
            <summary>
              Gets the EventDefinition for the StartingRequest.
            </summary>
            <value>The EventDefinition for the StartingRequest</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.ConcurrentRequestCountDecreased">
            <summary>
              Gets the EventDefinition for the ConcurrentRequestCountDecreased.
            </summary>
            <value>The EventDefinition for the ConcurrentRequestCountDecreased</value>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ICLThrottlingEvents.RequestDequeued">
            <summary>
              Gets the EventDefinition for the RequestDequeued.
            </summary>
            <value>The EventDefinition for the RequestDequeued</value>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkEngineCategoryInstaller">
            <summary>
            Category installer for the WstJobFramework event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents">
            <summary>
            Events in the JobFrameworkEngine module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobStatusUpdateFailed(System.String,System.Int32)">
            <summary>
            Method to log an event of type JobStatusUpdateFailed.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobStatusUpdateFailed(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AsyncExecuteBatchErrorValue">
            <summary>
            EventDefinition for AsyncExecuteBatchError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAsyncExecuteBatchError(System.String,System.Int32)">
            <summary>
            Method to log an event of type AsyncExecuteBatchError.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAsyncExecuteBatchError(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type AsyncExecuteBatchError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AgentContactFailedValue">
            <summary>
            EventDefinition for AgentContactFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAgentContactFailed(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type AgentContactFailed.
            </summary>
            <param name="url">Argument url for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogAgentContactFailed(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type AgentContactFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="url">Argument url for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerConnectionFailedValue">
            <summary>
            EventDefinition for WorkerConnectionFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerConnectionFailed(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WorkerConnectionFailed.
            </summary>
            <param name="machine">Argument machine for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerConnectionFailed(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerConnectionFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="machine">Argument machine for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerAbortConditionRaisedValue">
            <summary>
            EventDefinition for WorkerAbortConditionRaised
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerAbortConditionRaised(System.String,System.Int32)">
            <summary>
            Method to log an event of type WorkerAbortConditionRaised.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerAbortConditionRaised(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerAbortConditionRaised with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobRunFailureValue">
            <summary>
            EventDefinition for JobRunFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobRunFailure(System.String,System.Int32)">
            <summary>
            Method to log an event of type JobRunFailure.
            </summary>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobRunFailure(System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobRunFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartBeatFailureValue">
            <summary>
            EventDefinition for WorkerHeartBeatFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartBeatFailure(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WorkerHeartBeatFailure.
            </summary>
            <param name="workerId">Argument workerId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartBeatFailure(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerHeartBeatFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workerId">Argument workerId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.NoWorkItemsSubmittedValue">
            <summary>
            EventDefinition for NoWorkItemsSubmitted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogNoWorkItemsSubmitted(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type NoWorkItemsSubmitted.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogNoWorkItemsSubmitted(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type NoWorkItemsSubmitted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.InvalidCentralizedSettingsValue">
            <summary>
            EventDefinition for InvalidCentralizedSettings
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogInvalidCentralizedSettings(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type InvalidCentralizedSettings.
            </summary>
            <param name="settingNames">Argument settingNames for formatting the event text.</param>
            <param name="settingValues">Argument settingValues for formatting the event text.</param>
            <param name="validValues">Argument validValues for formatting the event text.</param>
            <param name="additionalInformation">Argument additionalInformation for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogInvalidCentralizedSettings(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type InvalidCentralizedSettings with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="settingNames">Argument settingNames for formatting the event text.</param>
            <param name="settingValues">Argument settingValues for formatting the event text.</param>
            <param name="validValues">Argument validValues for formatting the event text.</param>
            <param name="additionalInformation">Argument additionalInformation for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartbeatFailureCountDecrementValue">
            <summary>
            EventDefinition for WorkerHeartbeatFailureCountDecrement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartbeatFailureCountDecrement(System.Int32,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type WorkerHeartbeatFailureCountDecrement.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchMachine">Argument batchMachine for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="consecutiveHeartbeatFailureRemainCount">Argument consecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartbeatFailureCountDecrement(System.Int32,System.String,System.String,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerHeartbeatFailureCountDecrement with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchMachine">Argument batchMachine for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="consecutiveHeartbeatFailureRemainCount">Argument consecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartbeatFailureCountResetValue">
            <summary>
            EventDefinition for WorkerHeartbeatFailureCountReset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartbeatFailureCountReset(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type WorkerHeartbeatFailureCountReset.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchMachine">Argument batchMachine for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogWorkerHeartbeatFailureCountReset(System.Int32,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type WorkerHeartbeatFailureCountReset with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchMachine">Argument batchMachine for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.ContinuousJobWorkerExecutionFailedValue">
            <summary>
            EventDefinition for ContinuousJobWorkerExecutionFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogContinuousJobWorkerExecutionFailed(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type ContinuousJobWorkerExecutionFailed.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="loopCount">Argument loopCount for formatting the event text.</param>
            <param name="monitorId">Argument monitorId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="statusCode">Argument statusCode for formatting the event text.</param>
            <param name="machineName">Argument machineName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogContinuousJobWorkerExecutionFailed(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type ContinuousJobWorkerExecutionFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="loopCount">Argument loopCount for formatting the event text.</param>
            <param name="monitorId">Argument monitorId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="statusCode">Argument statusCode for formatting the event text.</param>
            <param name="machineName">Argument machineName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobCycleStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobCycleStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobCycleStatusUpdateFailed(System.String,System.Int32,System.Guid,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobCycleStatusUpdateFailed.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="poolId">Argument poolId for formatting the event text.</param>
            <param name="cycleNumber">Argument cycleNumber for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobCycleStatusUpdateFailed(System.String,System.Int32,System.Guid,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobCycleStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="poolId">Argument poolId for formatting the event text.</param>
            <param name="cycleNumber">Argument cycleNumber for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobPartitionStatusUpdateFailedValue">
            <summary>
            EventDefinition for JobPartitionStatusUpdateFailed
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobPartitionStatusUpdateFailed(System.String,System.Int32,System.Guid,System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobPartitionStatusUpdateFailed.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="poolId">Argument poolId for formatting the event text.</param>
            <param name="partitionKey">Argument partitionKey for formatting the event text.</param>
            <param name="partitionMachine">Argument partitionMachine for formatting the event text.</param>
            <param name="status">Argument status for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobPartitionStatusUpdateFailed(System.String,System.Int32,System.Guid,System.String,System.String,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobPartitionStatusUpdateFailed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="poolId">Argument poolId for formatting the event text.</param>
            <param name="partitionKey">Argument partitionKey for formatting the event text.</param>
            <param name="partitionMachine">Argument partitionMachine for formatting the event text.</param>
            <param name="status">Argument status for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobSettingInvalidIntegerValueValue">
            <summary>
            EventDefinition for JobSettingInvalidIntegerValue
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobSettingInvalidIntegerValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobSettingInvalidIntegerValue.
            </summary>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="settingName">Argument settingName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogJobSettingInvalidIntegerValue(System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobSettingInvalidIntegerValue with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="settingName">Argument settingName for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.PartitionErrorValue">
            <summary>
            EventDefinition for PartitionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogPartitionError(System.Int32,System.String,System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type PartitionError.
            </summary>
            <param name="fss">Argument fss for formatting the event text.</param>
            <param name="deployment">Argument deployment for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogPartitionError(System.Int32,System.String,System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type PartitionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="fss">Argument fss for formatting the event text.</param>
            <param name="deployment">Argument deployment for formatting the event text.</param>
            <param name="resourceType">Argument resourceType for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.PoolJobInfoFailureValue">
            <summary>
            EventDefinition for PoolJobInfoFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogPoolJobInfoFailure(System.String,System.String,System.Int32)">
            <summary>
            Method to log an event of type PoolJobInfoFailure.
            </summary>
            <param name="exceptionString">Argument exceptionString for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.LogPoolJobInfoFailure(System.String,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type PoolJobInfoFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionString">Argument exceptionString for formatting the event text.</param>
            <param name="processName">Argument processName for formatting the event text.</param>
            <param name="processId">Argument processId for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AsyncExecuteBatchError">
            <summary>
              Gets the EventDefinition for the AsyncExecuteBatchError.
            </summary>
            <value>The EventDefinition for the AsyncExecuteBatchError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.AgentContactFailed">
            <summary>
              Gets the EventDefinition for the AgentContactFailed.
            </summary>
            <value>The EventDefinition for the AgentContactFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerConnectionFailed">
            <summary>
              Gets the EventDefinition for the WorkerConnectionFailed.
            </summary>
            <value>The EventDefinition for the WorkerConnectionFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerAbortConditionRaised">
            <summary>
              Gets the EventDefinition for the WorkerAbortConditionRaised.
            </summary>
            <value>The EventDefinition for the WorkerAbortConditionRaised</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobRunFailure">
            <summary>
              Gets the EventDefinition for the JobRunFailure.
            </summary>
            <value>The EventDefinition for the JobRunFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartBeatFailure">
            <summary>
              Gets the EventDefinition for the WorkerHeartBeatFailure.
            </summary>
            <value>The EventDefinition for the WorkerHeartBeatFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.NoWorkItemsSubmitted">
            <summary>
              Gets the EventDefinition for the NoWorkItemsSubmitted.
            </summary>
            <value>The EventDefinition for the NoWorkItemsSubmitted</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.InvalidCentralizedSettings">
            <summary>
              Gets the EventDefinition for the InvalidCentralizedSettings.
            </summary>
            <value>The EventDefinition for the InvalidCentralizedSettings</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartbeatFailureCountDecrement">
            <summary>
              Gets the EventDefinition for the WorkerHeartbeatFailureCountDecrement.
            </summary>
            <value>The EventDefinition for the WorkerHeartbeatFailureCountDecrement</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.WorkerHeartbeatFailureCountReset">
            <summary>
              Gets the EventDefinition for the WorkerHeartbeatFailureCountReset.
            </summary>
            <value>The EventDefinition for the WorkerHeartbeatFailureCountReset</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.ContinuousJobWorkerExecutionFailed">
            <summary>
              Gets the EventDefinition for the ContinuousJobWorkerExecutionFailed.
            </summary>
            <value>The EventDefinition for the ContinuousJobWorkerExecutionFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobCycleStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobCycleStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobCycleStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobPartitionStatusUpdateFailed">
            <summary>
              Gets the EventDefinition for the JobPartitionStatusUpdateFailed.
            </summary>
            <value>The EventDefinition for the JobPartitionStatusUpdateFailed</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.JobSettingInvalidIntegerValue">
            <summary>
              Gets the EventDefinition for the JobSettingInvalidIntegerValue.
            </summary>
            <value>The EventDefinition for the JobSettingInvalidIntegerValue</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.PartitionError">
            <summary>
              Gets the EventDefinition for the PartitionError.
            </summary>
            <value>The EventDefinition for the PartitionError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkEngineEvents.PoolJobInfoFailure">
            <summary>
              Gets the EventDefinition for the PoolJobInfoFailure.
            </summary>
            <value>The EventDefinition for the PoolJobInfoFailure</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstSqlScriptJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstSqlScriptJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Jobs.SqlScriptJobWorker">
            <summary>
            Class to execute SQL Script jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.SqlScriptJobCategoryInstaller">
            <summary>
            Category installer for the WstSqlScriptJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.SqlScriptJobEvents">
            <summary>
            Events in the SqlScriptJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.SqlExecuteErrorValue">
            <summary>
            EventDefinition for SqlExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogSqlExecuteError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlExecuteError.
            </summary>
            <param name="query">Argument query for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogSqlExecuteError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="query">Argument query for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ArgumentsErrorValue">
            <summary>
            EventDefinition for ArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogArgumentsError(System.String)">
            <summary>
            Method to log an event of type ArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type ArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.RecordExceptionValue">
            <summary>
            EventDefinition for RecordException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogRecordException(System.String)">
            <summary>
            Method to log an event of type RecordException.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogRecordException(System.String,System.Exception)">
            <summary>
            Method to log an event of type RecordException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptWasNotExecutedValue">
            <summary>
            EventDefinition for ScriptWasNotExecuted
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptWasNotExecuted(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ScriptWasNotExecuted.
            </summary>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptWasNotExecuted(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScriptWasNotExecuted with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledDbChangedValue">
            <summary>
            EventDefinition for ScriptCancelledDbChanged
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledDbChanged(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ScriptCancelledDbChanged.
            </summary>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledDbChanged(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScriptCancelledDbChanged with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledFssChangedValue">
            <summary>
            EventDefinition for ScriptCancelledFssChanged
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledFssChanged(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type ScriptCancelledFssChanged.
            </summary>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="fss">Argument fss for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
            <param name="isPrimary">Argument isPrimary for formatting the event text.</param>
            <param name="databaseType">Argument databaseType for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.SqlScriptJobEvents.LogScriptCancelledFssChanged(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ScriptCancelledFssChanged with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="script">Argument script for formatting the event text.</param>
            <param name="database">Argument database for formatting the event text.</param>
            <param name="server">Argument server for formatting the event text.</param>
            <param name="fss">Argument fss for formatting the event text.</param>
            <param name="newDbStatus">Argument newDbStatus for formatting the event text.</param>
            <param name="isPrimary">Argument isPrimary for formatting the event text.</param>
            <param name="databaseType">Argument databaseType for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.SqlExecuteError">
            <summary>
              Gets the EventDefinition for the SqlExecuteError.
            </summary>
            <value>The EventDefinition for the SqlExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ArgumentsError">
            <summary>
              Gets the EventDefinition for the ArgumentsError.
            </summary>
            <value>The EventDefinition for the ArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.RecordException">
            <summary>
              Gets the EventDefinition for the RecordException.
            </summary>
            <value>The EventDefinition for the RecordException</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptWasNotExecuted">
            <summary>
              Gets the EventDefinition for the ScriptWasNotExecuted.
            </summary>
            <value>The EventDefinition for the ScriptWasNotExecuted</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledDbChanged">
            <summary>
              Gets the EventDefinition for the ScriptCancelledDbChanged.
            </summary>
            <value>The EventDefinition for the ScriptCancelledDbChanged</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.SqlScriptJobEvents.ScriptCancelledFssChanged">
            <summary>
              Gets the EventDefinition for the ScriptCancelledFssChanged.
            </summary>
            <value>The EventDefinition for the ScriptCancelledFssChanged</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\debug\doc\WstRestoreJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstRestoreJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetQueueItemsByServer(System.String)">
            <summary>
            Gets the active queue items for a particular server.
            UT NOTE: This is tests in QueueItemSet tests.
            </summary>
            <param name="serverName">name of the server to retrieve queue items for</param>
            <returns>a set of queue items</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.HeartBeat(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Updates the heartbeat on a particular QueueItem.
            </summary>
            <param name="item">item to update heartbeat on</param>
            <returns>true if heartbeating was successful, false otherwise (means the item has been cancelled or claimed by another server)</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetDeploymentRecord(System.Guid)">
            <summary>
            Retrieves a DeploymentRecord for a given deployment GUID.
            UT NOTE: tested as part of DeploymentRecord tests
            </summary>
            <param name="deploymentUID">deployment guid to retrieve</param>
            <returns>DeploymentRecord</returns>
            <exception cref="T:System.Data.DataException">if deploymentUID does not match a deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.ArgumentNullException">if SPROCText for any sprocs are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CreateNewQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.DateTime,System.String)">
            <summary>
            Attempts to create a new queue item.  If it fails (due to constraint violations)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="expires">expiration date of this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if a new queue item could be created</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.ArgumentException">if expires is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.String)">
            <summary>
            Attempts to reclaim a reset queue item.  If it fails (due to race conditions)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if the queue item could be reclaimed</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.RestoreQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem,System.Int32,System.String)">
            <summary>
            Attempts to move a backup from the "waiting for restore" state to the "restoring" state.
            Might fail due to race condition (many restore jobs all running at same time on same
            server), in which case it will return false.
            </summary>
            <param name="itemToRestore">QueueItem to switch to restoring state</param>
            <param name="restoreJobId">id of this restore job</param>
            <param name="restoredDatabaseName">name to use for the restored database</param>
            <returns>true if the queue item was transitioned by this job to restoring state, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if itemToRestore or restoredDatabaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item fails, handles reassigning / cancelling it in the database.
            </summary>
            <param name="item">item to cancel</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItemNoThrow(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Calls FailQueueItem but logs and swallows any exceptions.
            </summary>
            <param name="item">item to cancel</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FinishQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item finishes.
            </summary>
            <param name="item">item to finish</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CleanupQueue(System.DateTime)">
            <summary>
            Performs the routine per-iteration queue cleanup.  Fails anything that has
            a stale heartbeat and cancels anything that is expired.
            </summary>
            <param name="oldestValidHeartbeat">the time of the oldest valid heartbeat, in UTC</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetNewFSSBackups">
            <summary>
            Retrieves the list of available new FSSBackups (new backups are backups are non-reset backups).
            UT NOTE: Tested in FSSBAckupRecord Tests
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentNullException">on null values from database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetResetFSSBackups">
            <summary>
            Retrieves the list of available reset FSSBackups.
            UT NOTE: Tested in FSSBAckupRecord tests.
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentNullException">if any of the database fields are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetTransferringItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String)">
            <summary>
            Retrieves the QueueItem that is being transferred for a particular backup record
            and owner server.
            </summary>
            <param name="record">record that belongs to the queue item</param>
            <param name="ownerServer">server that owns the queue item</param>
            <returns>QueueItem if found, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if record or ownerServer are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateAllHeartbeats(System.String)">
            <summary>
            Updates the heartbeats of all items belonging to this server in the 
            "waiting for restore" state.
            </summary>
            <param name="ownerServer">server the items belong to</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateQueueState(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.QueueItem.State)">
            <summary>
            Updates the state of a queue item.
            </summary>
            <param name="item">item to update</param>
            <param name="newState">new state to assign to it</param>
            <returns>true if update succeeded</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentRecord">
            <summary>
            This class represents a deployment record in the WstBackup database.
            This includes things like the deploymentname and client name, the times
            during which a database can be pulled, and the times during which a database
            can be processed.  These records live in the "Deployment" table in WstBackup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.#ctor(System.Guid,System.String,System.String,System.DateTime,System.Int32,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="deploymentUid">DeploymentUID</param>
            <param name="deploymentName">name of this deployment</param>
            <param name="clientName">name of the client (partner) this deployment belongs to</param>
            <param name="pullStartTime">start time of a pull, must be in the past</param>
            <param name="pullDurationInMinutes">max duration of a pull window in minutes, &gt;0</param>
            <param name="processingStart">start time of any processing cycle, must be in the past</param>
            <param name="processingCycleLength">length of time for a processing cycle, must be &gt;0</param>
            <param name="processingCycleLengthUnits">units for length of time of a processing cycle</param>
            <param name="requiresReportingDb">whether or not this deployment requires a reporting DB</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:System.ArgumentException">if pullStartTime or processingStart occur in future</exception>
            <exception cref="T:System.ArgumentException">if pullDurationInMinutes or processingCycleLength are .lt. 1</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsPullTimeOkay(System.DateTime)">
            <summary>
            Checks to see if a given time is within a valid pull window.
            </summary>
            <param name="timeToCheck">time to check</param>
            <returns>true if the given time is during a valid pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetPullWindowEnd">
            <summary>
            Gets the time of the end of the most recent pull window.
            </summary>
            <returns>end of the most recent pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetCycleExpirationTime(System.DateTime,System.Int32)">
            <summary>
            Calculates the cycle expiration time based on any time.  If you want the expiration time
            for the cycle that someTime is in, use cyclesAfterCurrent == 0.  If you want the expiration
            time of cycle one after someTime is in, use cyclesAfterCurrent == 1, etc.
            </summary>
            <param name="someTime">time to calculate expiration for</param>
            <param name="cyclesAfterCurrent">number of cycles after the current to add</param>
            <returns>start of next cycle - 1 minute</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsInCycles(System.DateTime,System.Int32)">
            <summary>
            Checks to see if a given time is within a processing cycle window(s).  It will check
            the current processing window plus cyclesBeforeCurrent.
            </summary>
            <param name="timeToCheck">time to check</param>
            <param name="cyclesBeforeCurrent">number of cycles before the current to check</param>
            <returns>true if the given time is during a valid cycle window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleStartTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the start time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle beginning of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>start time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleEndTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the end time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle end of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>end time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CalcCycleSpan(System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Calculates the span of a cycle, given a length and units
            </summary>
            <param name="cycleLength"></param>
            <param name="cycleLengthUnits"></param>
            <returns>timespan of the cycle</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.AddSproc(Microsoft.Webstore.OfflineProcessing.DeploymentSproc)">
            <summary>
            Adds a sproc to the internal list.
            </summary>
            <param name="sproc">sproc to add</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.DeploymentUID">
            <summary>
            The GUID that uniquely identifies this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullStartTime">
            <summary>
            The start time (for a given day) of the time window during which it is
            okay to pull a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullDurationInMinutes">
            <summary>
            The duration of the time window each day during which it is okay to pull
            a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingStart">
            <summary>
            The start of any processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLength">
            <summary>
            The magnitude of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLengthUnits">
            <summary>
            The units of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.RequiresReportingDb">
            <summary>
            Whether or not processing of backups for this deployment requires the
            reporting DB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Sprocs">
            <summary>
            The sprocs configured for this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Name">
            <summary>
            The name of this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ClientName">
            <summary>
            The name of the client (aka partner) this deployment belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentSproc">
            <summary>
            This class represents a sproc (really a script) for a deployment.  Sprocs have
            a many to one relationship with deployments and are strongly ordered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deploymentUid">UID of the deployment this belongs to</param>
            <param name="commandText">commandText, can't be null</param>
            <exception cref="T:System.ArgumentNullException">if commandText is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.DeploymentUid">
            <summary>
            The UID of the deployment this sproc belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.CommandText">
            <summary>
            The command text to dump into a SqlCommand object for this sproc.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord">
            <summary>
            This class represents a backup record from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.#ctor(System.Guid,System.Int16,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor for FSSBackupRecord.
            </summary>
            <param name="deploymentUid">guid of the deployment that this record belongs to</param>
            <param name="sqlfssNum">FSSNum that this record belongs to</param>
            <param name="serverName">name of the server that contains the backup</param>
            <param name="serverShare">share on the server that contains the backup</param>
            <param name="created">date and time this backup record was created</param>
            <param name="finished">date and time this backup record was finished</param>
            <param name="backupSizeInMB">size of the backup record in MB</param>
            <param name="deploymentManifestVersion">deployment manifest version that generated this backup</param>
            <param name="usingLiteSpeed">whether or not this backup was created using LiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if serverName, serverShare, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.QueueItem">
            <summary>
            Contains the QueueItem that represents this FSSBackupRecord.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Deployment">
            <summary>
            Contains the deployment record that belongs to this FSSBackupRecord.
            Isn't guaranteed to be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentUID">
            <summary>
            Returns the deploymentUID that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.SQLFSSNum">
            <summary>
            Returns the FSSNum that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerName">
            <summary>
            The name of the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerShare">
            <summary>
            The share on the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Created">
            <summary>
            Returns the date this backup was Created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Finished">
            <summary>
            Returns the date this backup was finished.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.BackupSizeInMB">
            <summary>
            The size of this backup record in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentManifestVersion">
            <summary>
            The deployment manifest version that generated this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.UsingLiteSpeed">
            <summary>
            Whether or not this backup was created using SqlLiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem">
            <summary>
            Represents a long-running synchronous work item.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Run">
            <summary>
            Executes the work item, throws an exception if it fails.
            </summary>
            <returns>true if the job ran to completion, false if it was aborted (due to Cancel)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Cancel">
            <summary>
            Cancels the work item.  This will be called from a different thread
            than Run so it needs to be threadsafe.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker">
            <summary>
            This class implements a worker thread that performs periodic heartbeating.  It does
            the following:
            - execute a long-running synchronous operation on a background thread
            - periodically notify the calling thread that we are still alive (so it can heartbeat)
            - return status/success
            - provide a cancel method for the synchronous operation in the background thread
            - provide a timeout for the synchronous operation in the background thread
            
            Technically since we are using events we should implement IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.#ctor(System.Int64,System.DateTime,Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate,Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem)">
            <summary>
            Constructor for the HeartbeatingWorker.
            </summary>
            <param name="heartbeatIntervalInMS">interval in MS between heartbeats, minimum 1000</param>
            <param name="endTime">the time at which to end the background operation</param>
            <param name="heartbeatDelegate">delegate to call back whenever we heartbeat</param>
            <param name="workItem">item that implements the long-running synchronous work</param>
            <exception cref="T:System.ArgumentException">if heartbeatIntervalInMS is less than 1000</exception>
            <exception cref="T:System.ArgumentException">if endTime is in the past</exception>
            <exception cref="T:System.ArgumentNullException">if heartbeatDelegate or workItem are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Finalize">
            <summary>
            Finalizer, needs to call dispose.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatTimerCallback(System.Object)">
            <summary>
            The callback used by the timer to indicate that we need to do periodic processing.
            This is called from an anonymous background threadpool thread.
            </summary>
            <param name="arg">ignored</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.CancelAbort">
            <summary>
            This is called to attempt cancelling and then aborting the thread.  Can only be
            called from the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Run">
            <summary>
            This runs the background synchronous worker and starts heartbeating.  When this
            returns the result of the operation can be determined by checking OperationResult
            and OperationException.
            
            Here are what the different status means:
             NotInitialized - something went wrong in this library, report the error to us
             Success - job ran to completion and all heartbeats occurred as expected
             Cancel - job expired or heartbeat delegate returned false and Cancel method worked correctly
             Abort - job expired or heartbeat delegate returned false and Cancel method didn't work (check OperationException)
             Exception - workItem.Run method generated an exception (check OperationException)          
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.ThreadStart">
            <summary>
            This method implements the background worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose">
            <summary>
            Tears down this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose(System.Boolean)">
            <summary>
            Tears down this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.EndTime">
            <summary>
            The time at which this copy operation should end.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatIntervalInMS">
            <summary>
            The heartbeat interval in MS to use.  When the thread is running a timer
            will be created with this interval and the HeartbeatEvent will be set
            everytime the timer goes off.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationResult">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationException">
            <summary>
            If an exception was generated, a copy of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate">
            <summary>
            This is called to perform heartbeating.  This will always be called in the context
            of the main thread.
            </summary>
            <returns>true if successful and loop should continue, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItem">
            <summary>
            This class represents a single backup record in the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItem.#ctor(System.Guid,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new QueueItem.
            </summary>
            <param name="deploymentUid">guid of the deployment this queue item belongs to</param>
            <param name="fssNum">fssNum this item belongs to</param>
            <param name="ownerServer">name of the server that owns this item</param>
            <param name="iterationNumber">FSS iteration number this item belongs to</param>
            <param name="currentState">current state of the queue item</param>
            <param name="failureCount">current failure count of the queue item</param>
            <param name="created">time this item was created in UTC</param>
            <param name="expires">time this item expires in UTC</param>
            <param name="lastHeartbeat">the last heartbeat time of this item</param>
            <param name="enqueueTime">the time this item was added to the active queue</param>
            <param name="path">path (if exists) to the backup file on OwnerServer</param>
            <param name="deploymentManifestVersion">deployment manifest version of the backup record this queue item is for</param>
            <param name="restoredDatabaseName">name of the restored database for this item</param>
            <param name="usingLiteSpeed">whether or not the backup for this queue item was made using SQLLiteSpeed</param>
            <param name="backupFinishDate">date and time the backup finished</param>
            <param name="backupServer">server the backup was created on</param>
            <param name="backupStartDate">date and time the backup started</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer, path, restoredDatabaseName, backupServer, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.RestoredDatabaseName">
            <summary>
            The name of the database once it has been restored by OP.  May be empty if it hasn't been restored
            yet.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentManifestVersion">
            <summary>
            The deployment manifest version of the backup record this queue item is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Path">
            <summary>
            The path to the backup file on the offline processing server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentUid">
            <summary>
            The DeploymentUID of the deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FSSNum">
            <summary>
            The SQLFSSNum of the FSS/deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.OwnerServer">
            <summary>
            The name of the server that currently owns this queue item, can be empty if not owned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.IterationNumber">
            <summary>
            The iteration number, within this FSS/Deployment, of this queue item.  This
            is to enforce the uniqueness constraint that only a single queue item can
            exist at any time for a given FSS/Deployment pair.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FailureCount">
            <summary>
            The number of times this queue item has been failed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.CurrentState">
            <summary>
            The current state of this QueueItem.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Created">
            <summary>
            The time this queue item was created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Expires">
            <summary>
            The time this queue item expires (can be in the past if it already expired).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.LastHeartBeat">
            <summary>
            The time this queue item was last heartbeated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.EnqueueTime">
            <summary>
            The time this queue item was last put into the queue (or bumped to the back
            if it was failed).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.UsingLiteSpeed">
            <summary>
            Whether or not the backup for this item was made using Lite Speed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupServer">
            <summary>
            The server that generated the backup belonging to this queue item.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupStartDate">
            <summary>
            The time the backup was started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupFinishDate">
            <summary>
            The time the backup for this queue item was finished.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItemSet">
            <summary>
            This class represents a set of backup records from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.QueueItem})">
            <summary>
            Constructor which takes an enumeration of records.
            </summary>
            <param name="newRecords">enumeration of records to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Constructor which takes a single record.
            </summary>
            <param name="newRecord">single record to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByServer(System.String,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the set of all backup records in WstBackup database for a given server.
            </summary>
            <param name="serverName">name of the server to retrieve QueueItems for</param>
            <param name="backupDb">backup database to use for retrieving the recordset</param>
            <returns>a set of QueueItems that are active on that server</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByPath(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular filepath.
            </summary>
            <param name="filePath">path of item to retrieve</param>
            <returns>QueueItem that belongs to that filePath, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByRestoredDatabaseName(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular restored database name.
            </summary>
            <param name="dbName">database name of the item to retrieve</param>
            <returns>QueueItem that belongs to the restored database name, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByPath">
            <summary>
            Retrieves the items in the set, indexed by path.
            </summary>
            <returns>the items in this set, indexed by path</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByRestoredDbName">
            <summary>
            Retrieves the items in the set, indexed by restored Db name.
            </summary>
            <returns>the items in this set, indexed by restored db name</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Count">
            <summary>
            Number of records in this set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Item(System.Int32)">
            <summary>
            Indexor for the set.
            </summary>
            <param name="i">0-based index into the array</param>
            <returns>requested item in the array</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.SqlBackupFile">
            <summary>
            This class represents a SQL backup file and contains methods to manipulate its contents.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SqlBackupFile object for a given filepath.
            </summary>
            <param name="filePath">path to the SqlBackupFile</param>
            <param name="useLiteSpeed">whether or not we should use LiteSpeed to process the backupfile</param>
            <exception cref="T:System.ArgumentNullException">if filePath is empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDatabaseName">
            <summary>
            Retrieves the original name of this database.
            </summary>
            <returns>original name of this database</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetServerName">
            <summary>
            Retrieves the original server name this database was on.
            </summary>
            <returns>name of the server that generated this backup</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetRestoredSizeInBytes">
            <summary>
            Retrieves the size of this backup, when restored, in bytes.
            </summary>
            <returns>size of the backup, when restored, in bytes</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupFilelist">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupHeader">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDataFiles">
            <summary>
            Returns an enumeration of all logical data file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetLogFiles">
            <summary>
            Returns an enumeration of all logical log file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.FilePath">
            <summary>
            The filepath of this backup file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller">
            <summary>
            Category installer for the CommonJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobEvents">
            <summary>
            Events in the CommonJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlErrorValue">
            <summary>
            EventDefinition for SqlError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstErrorValue">
            <summary>
            EventDefinition for WstError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String)">
            <summary>
            Method to log an event of type WstError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseErrorValue">
            <summary>
            EventDefinition for DatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatErrorValue">
            <summary>
            EventDefinition for HeartbeatError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String)">
            <summary>
            Method to log an event of type HeartbeatError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HeartbeatError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentErrorValue">
            <summary>
            EventDefinition for GetDeploymentError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String)">
            <summary>
            Method to log an event of type GetDeploymentError.
            </summary>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetDeploymentError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemErrorValue">
            <summary>
            EventDefinition for CreateNewQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type CreateNewQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CreateNewQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemErrorValue">
            <summary>
            EventDefinition for GetTransferringItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type GetTransferringItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetTransferringItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemErrorValue">
            <summary>
            EventDefinition for ReclaimQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type ReclaimQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ReclaimQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsErrorValue">
            <summary>
            EventDefinition for UpdateAllHeartbeatsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateErrorValue">
            <summary>
            EventDefinition for UpdateQueueStateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type UpdateQueueStateError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateQueueStateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemErrorValue">
            <summary>
            EventDefinition for FailQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FailQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FailQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemErrorValue">
            <summary>
            EventDefinition for RestoreQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type RestoreQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemErrorValue">
            <summary>
            EventDefinition for FinishQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FinishQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FinishQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlError">
            <summary>
              Gets the EventDefinition for the SqlError.
            </summary>
            <value>The EventDefinition for the SqlError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstError">
            <summary>
              Gets the EventDefinition for the WstError.
            </summary>
            <value>The EventDefinition for the WstError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseError">
            <summary>
              Gets the EventDefinition for the DatabaseError.
            </summary>
            <value>The EventDefinition for the DatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatError">
            <summary>
              Gets the EventDefinition for the HeartbeatError.
            </summary>
            <value>The EventDefinition for the HeartbeatError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentError">
            <summary>
              Gets the EventDefinition for the GetDeploymentError.
            </summary>
            <value>The EventDefinition for the GetDeploymentError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemError">
            <summary>
              Gets the EventDefinition for the CreateNewQueueItemError.
            </summary>
            <value>The EventDefinition for the CreateNewQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemError">
            <summary>
              Gets the EventDefinition for the GetTransferringItemError.
            </summary>
            <value>The EventDefinition for the GetTransferringItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemError">
            <summary>
              Gets the EventDefinition for the ReclaimQueueItemError.
            </summary>
            <value>The EventDefinition for the ReclaimQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsError">
            <summary>
              Gets the EventDefinition for the UpdateAllHeartbeatsError.
            </summary>
            <value>The EventDefinition for the UpdateAllHeartbeatsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateError">
            <summary>
              Gets the EventDefinition for the UpdateQueueStateError.
            </summary>
            <value>The EventDefinition for the UpdateQueueStateError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemError">
            <summary>
              Gets the EventDefinition for the FailQueueItemError.
            </summary>
            <value>The EventDefinition for the FailQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemError">
            <summary>
              Gets the EventDefinition for the RestoreQueueItemError.
            </summary>
            <value>The EventDefinition for the RestoreQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemError">
            <summary>
              Gets the EventDefinition for the FinishQueueItemError.
            </summary>
            <value>The EventDefinition for the FinishQueueItemError</value>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Heartbeater">
            <summary>
            This class performs periodic heartbeating of an item.  It's just a light wrapper around
            CommonDataAccess.HeartBeat.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Constructor
            </summary>
            <param name="itemToHeartbeat">item to heartbeat</param>
            <param name="db">database to use for heartbeating</param>
            <exception cref="T:System.ArgumentNullException">if itemToHeartbeat or db are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.DoHeartbeat">
            <summary>
            Heartbeats the item.
            </summary>
            <returns>true if heartbeat was successful</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker">
            <summary>
            This class handles the long-running synchronous work item of processing
            a restored database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker.#ctor(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.DeploymentRecord,System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.DeploymentSproc})">
            <summary>
            Constructor
            </summary>
            <param name="dbToProcess">database to process</param>
            <param name="deployment">record of the deployment</param>
            <param name="sprocsToExecute">sprocs to execute</param>
            <exception cref="T:System.ArgumentNullException">if dbToProcess, deployment, dbToProcess.Item, or sprocsToExecute are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker.Run">
            <summary>
            This performs the synchronous restore operation.  Returns true if processing
            continues to the end, false if it was cancelled midway through.  Throws exceptions
            from RestoredDatabase.Process.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ProcessDatabaseWorker.Cancel">
            <summary>
            Cancel routine.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker">
            <summary>
            This is the worker that performs the restore operation.  It's just a light wrapper
            around RestoredDatabase.Restore and RestoredDatabase.Cancel.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker.#ctor(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dbToRestore">database to be restored</param>
            <param name="backupFileLocation">location of the backup file to restore from</param>
            <param name="dataPath">path to put new data files in</param>
            <param name="logPath">path to put new log files in</param>
            <param name="usingLiteSpeed">whether or not to use SQLLiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if dbToRestore, backupFileLocatin, dataPath, or logPath are null</exception>
            <exception cref="T:System.ArgumentException">if backupFileLocation, dataPath, or logPath do not exist</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker.Run">
            <summary>
            Implements the restore functionality, called from a different thread.
            </summary>
            <returns>true always</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreDatabaseWorker.Cancel">
            <summary>
            Cancels the ongoing restore.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoredDatabase">
            <summary>
            This class represents a database that has been restored on an offline processing machine.
            This class needs to know quite a bit about the "rules" for creating database identifiers
            since it needs to create new database names.  The rules for compat level 90 in SQL for
            identifiers (database names qualify as identifiers) are as follows:
             - the first character must be [A-Za-z_@#]
             - subsequent characters must be [A-Za-z_$#@]
             - cannot be a reserved word
             - embedded spaces not allowed
             - 1 to 128 characters
             
            A note on CancelProcess and CancelRestore:
            These are only mostly threadsafe.  An extremely narrow window exists where we could have
            created the new command object and assigned it to .Command in the thread executing Process/Restore,
            but not actually have called SqlCommand.ExecuteNOnQuery, and if we task switched away
            at exactly this split second and another thread called CancelProcess or CancelRestore at
            that exact second then would end up cancelling the SqlCommand before it was executed,
            which is a no-op (I checked this with a quick test), which would mean that the operation
            would not actually get cancelled.
            
            The fact that there is the potential for race condition is mitigated by the fact that
            CancelProcess and CancelRestore are always called from within HeartbeatingWorker.CancelAbort
            which first calls Cancel, then waits 100ms, and if the thread hasn't terminated, it calls
            Thread.Abort.  So in practice even if we hit this really rare race condition it will just
            result in the thread exiting a bit late due to ThreadAbort and maybe the exception message
            looking a bit cryptic.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.namePrepend">
            <summary>
            This string will be the first part of the name of any database that was generated
            as part of offline processing.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.syncObject">
            <summary>
            This lock is used to guarantee that access to the command object
            is wrapped by checks to wasCancelled.  Used for locking short-term
            access to command.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.usingCommand">
            <summary>
            Whether or not we are currently using the command.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Drop">
            <summary>
            Attempts to drop the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Restore(Microsoft.Webstore.OfflineProcessing.SqlBackupFile,System.String,System.String,System.Boolean)">
            <summary>
            Performs a restore on the database.
            </summary>
            <param name="backupFile">name and path of the backup file to restore</param>
            <param name="dataFilePath">path to place data files in</param>
            <param name="logFilePath">path to place log files in</param>
            <param name="usingLiteSpeed">whether or not to use SQLLiteSpeed for the restore</param>
            <exception cref="T:System.ArgumentNullException">if backupFile, dataFilePath, or logFilePath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentException">if a restore command is already in progress</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Process(Microsoft.Webstore.OfflineProcessing.DeploymentSproc,System.Guid,System.Int16,System.String,System.String,System.String,System.DateTime)">
            <summary>
            Performs processing on the database.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <param name="backupDate">date the backup was finished</param>
            <param name="clientName">name of the client (product) that owns the deployment</param>
            <param name="serverName">server the backup was generated on</param>
            <param name="deploymentUid">UID of the deployment</param>
            <param name="fssNum">fssNum of the backup</param>
            <param name="sproc">sproc to execute</param>
            <exception cref="T:System.ArgumentNullException">if sproc, deploymentName, clientName, serverName, or sproc.CommandText are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentException">if processing is already in progress</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CancelRestore">
            <summary>
            Cancels an ongoing restore.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CancelProcess">
            <summary>
            Cancels an ongoing process.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CancelSql">
            <summary>
            Cancels whatever SQL is currently running.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.CreateRestoreCommand(Microsoft.Webstore.OfflineProcessing.SqlBackupFile,System.String,System.String,System.Boolean)">
            <summary>
            Creates the restore TSQL command.
            </summary>
            <param name="backupFile">backup to use for the restore</param>
            <param name="dataFilePath">path to the dataFiles</param>
            <param name="logFilePath">path to log files</param>
            <param name="usingLiteSpeed">whether or not to use LiteSpeed</param>
            <returns>TSQL restore command</returns>
            <exception cref="T:System.ArgumentNullException">if backupfile, datafilePath, or logFilePath are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GenerateName(System.String,System.String)">
            <summary>
            Generates a new database name, given its serverName and dbName.
            </summary>
            <param name="serverName">name of the server that the database originally lived on</param>
            <param name="dbName">original name of the database</param>
            <returns>a new database name, might not be unique</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or dbName are null</exception>
            <exception cref="T:System.ArgumentException">if the resulting name violates sql naming conventions</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GenerateName(System.String)">
            <summary>
            Generates a new database name, given its dbName.
            </summary>
            <param name="dbName">original name of the database</param>
            <returns>a new database name, guaranteed to be unique</returns>
            <exception cref="T:System.ArgumentNullException">if dbName is null</exception>
            <exception cref="T:System.ArgumentException">if the resulting name violates sql naming conventions</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.ValidateDatabaseName(System.String)">
            <summary>
            Validates whether or not a database name is valid.
            </summary>
            <param name="dbName">name of the database to validate</param>
            <exception cref="T:System.ArgumentException">if dbName does not validate</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.#ctor(System.String,System.String)">
            <summary>
            Constructor for internal use.
            </summary>
            <param name="dbName">name of the database, must start with _op_</param>
            <param name="serverName">name of the server this database is on</param>
            <exception cref="T:System.ArgumentNullException">if dbName or serverName are null</exception>
            <exception cref="T:System.ArgumentException">if dbName does not start with namePrepend</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetForServer(System.String)">
            <summary>
            Retrieves the list of restored database at a particular point in time on a particular
            server.  This list is generated by doing string matching for database names starting
            with RestoredDatabase.namePrepend.
            </summary>
            <param name="serverName">name of the server to retrieve RestoredDatabases for</param>
            <returns>a list (may be empty, never null) of restored databases</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.BuildMasterConnectionString(System.String)">
            <summary>
            Builds the connection string to use for the SqlConnection.
            </summary>
            <param name="serverName">name of the server to connect to</param>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.BuildConnectionString">
            <summary>
            Builds the connection string to use for a SqlConnection to the restored
            database.
            </summary>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetNewDataFileName">
            <summary>
            Generates a new data file name, unique to this database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetNewLogFileName">
            <summary>
            Generates a new log file name, unique to this database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.GetNewFileName(System.Int32,System.String)">
            <summary>
            Helper function for generating new files names, unique to this database.
            </summary>
            <param name="index"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Name">
            <summary>
            The Name of the database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.ServerName">
            <summary>
            The name of the server this database exists on.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Item">
            <summary>
            The QueueItem associated with this database.  Can be null.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.Command">
            <summary>
            Use this property for accessing the internal SqlCommand object
            for use in the process or restore command.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoredDatabase.UsingCommand">
            <summary>
            Controls whether or not we are currently using the command object.
            Attempting to use the command object twice at the same time results
            in an exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstRestoreJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing restore job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstRestoreJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing restore job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstRestoreJob.ValidateArgs(System.String)">
            <summary>
            All we do is make sure the RestoreJobArguments can be created.  We don't
            validate the path at this stage because we are the coordinator and who
            knows if the path will be valid on the worker machines?
            </summary>
            <param name="userArgs">arguments conforming to RestoreJobArgumentsSchema.xsd</param>
            <exception cref="T:System.Xml.XmlException">if userArgs cannot be validated or are missing components</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments">
            <summary>
            This class represents the arguments passed to the restore job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to RestoreJobArgumentsSchema.xsd
            and returns a new RestoreJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to RestoreJobArgumentsSchema.xsd</param>
            <returns>newly created RestoreJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml is null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.DataPath">
            <summary>
            The path where data files should be restored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.LogPath">
            <summary>
            The path where log files should be restored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobArguments.JobId">
            <summary>
            The jobId for this job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobResources.RestoreJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;CollectorJobArguments&quot;
                targetNamespace=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;CollectorJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for offline processing collector job settings.&lt;/xs:documentation&gt;
                &lt;/x [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Creates a new job worker from xml arguments.
            </summary>
            <param name="xmlArgs">arguments in xml conforming to RestoreJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobWorker</returns>
            <exception cref="T:System.Xml.XmlException">if xml fails to validate</exception>
            <exception cref="T:System.ArgumentNullException">if xmlArgs is null</exception>
            <exception cref="T:System.IO.IOException">if backup directory cannot be created</exception>
            <exception cref="T:System.NotSupportedException">if backup directory is not a recognizable path</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Internal constructor, instead use CreateFromXmlArguments since that performs validation.
            </summary>
            <param name="dataPath">path for this worker to use for storing data files, can't be null</param>
            <param name="logPath">path for this worker to use for storing log files, can't be null</param>
            <param name="jobId">unique id of the Job (not a hard requirement that its unique)</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.DoIteration(System.Boolean)">
            <summary>
            Performs one iteration of the service.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryRestoreDatabase(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs a restore (while heartbeating) of a database.
            </summary>
            <param name="dbToRestore">database to restore</param>
            <param name="backupDb">database to heartbeat</param>
            <returns>true if restoration was successful</returns>
            <exception cref="T:System.ArgumentNullException">if dbToRestore, backupDb, or dbToRestore.Item are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on heartbeat database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on heartbeat webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryProcessingDatabase(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs processing (while heartbeating) of a database.
            </summary>
            <param name="dbToProcess">database to process</param>
            <param name="backupDb">database to heartbeat</param>
            <returns>true if processing was successful</returns>
            <exception cref="T:System.ArgumentNullException">if dbToProcess, backupDb, or dbToProcess.Item are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on heartbeat database error, or exception getting DeploymentRecord</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on heartbeat webstore error, or exception getting DeploymentRecord</exception>
            <exception cref="T:System.Data.DataException">if Deployment does not exist in the database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.GetItemToRestore(Microsoft.Webstore.OfflineProcessing.QueueItemSet,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the QueueItem to restore and transitions its state in the database to
            "restoring".  Returns null if there is no item to restore.  In order for an item
            to be restorable, the following criteria must be met:
            - restore size in MB must fit on our disk
            - state of the item must be "WaitingForRestore"
            - and OwnerServer must be our server
            </summary>
            <param name="ourItems">list of all QueueItems assigned to our server</param>
            <param name="db">WstBackup database object</param>
            <returns>new RestoredDatabase object if successful, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if ourItems or db are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryClaimItemForRestore(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to claim and item for restore.  The item can only be claimed for
            restore if the following criteria are met:
            - restore size in MB must fit on our disk
            - WspQueueRestore must succeed
            </summary>
            <param name="item">item to try claiming</param>
            <param name="db">WstBackup database</param>
            <returns>new RestoredDatabase object if successful, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if item or db are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.TryCleanupRestoredDatabase(Microsoft.Webstore.OfflineProcessing.RestoredDatabase,Microsoft.Webstore.OfflineProcessing.QueueItemSet)">
            <summary>
            This function attempts to clean up a restored database on our server.  It will
            delete any database that isn't currently assigned to our server in the
            "Being restored" or "Being processed" state.
            </summary>
            <param name="db">database to try cleaning up</param>
            <param name="ourItems">set of queue items active for our server</param>
            <returns>true if the database was deleted</returns>
            <exception cref="T:System.ArgumentNullException">if db or ourItems is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the number of milliseconds that the job should sleep between iterations.
            </summary>
            <returns>number of milliseconds the job should sleep between iterations</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.DataPath">
            <summary>
            Retrieves the restore path for data files as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.LogPath">
            <summary>
            Retrieves the restore path for log files as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.HeartbeatIntervalInMinutes">
            <summary>
            Interval in minutes between heartbeating items we own.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.JobId">
            <summary>
            Unique ID of this job (with respect to this machine).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobWorker.FreeSpaceCalculator">
            <summary>
            The free space calculator to use (intended only for testing purposes).
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobCategoryInstaller">
            <summary>
            Category installer for the RestoreJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents">
            <summary>
            Events in the RestoreJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.DropDatabaseErrorValue">
            <summary>
            EventDefinition for DropDatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogDropDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DropDatabaseError.
            </summary>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogDropDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DropDatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.RestoreDatabaseErrorValue">
            <summary>
            EventDefinition for RestoreDatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogRestoreDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type RestoreDatabaseError.
            </summary>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogRestoreDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreDatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="restoredDatabase">Argument restoredDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.ProcessDatabaseErrorValue">
            <summary>
            EventDefinition for ProcessDatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogProcessDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type ProcessDatabaseError.
            </summary>
            <param name="processDatabase">Argument processDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.LogProcessDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ProcessDatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="processDatabase">Argument processDatabase for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.DropDatabaseError">
            <summary>
              Gets the EventDefinition for the DropDatabaseError.
            </summary>
            <value>The EventDefinition for the DropDatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.RestoreDatabaseError">
            <summary>
              Gets the EventDefinition for the RestoreDatabaseError.
            </summary>
            <value>The EventDefinition for the RestoreDatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.RestoreJobEvents.ProcessDatabaseError">
            <summary>
              Gets the EventDefinition for the ProcessDatabaseError.
            </summary>
            <value>The EventDefinition for the ProcessDatabaseError</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\AsyncInterface.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AsyncInterface</name>
    </assembly>
    <members>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager">
            <summary>
            methods for managing settings
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.DefaultPort">
            <summary>
            default port
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.GetInitializedConfiguration">
            <summary>
            initializes configuration if it hasn't been initialized before
            return configuration object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.SafeConfigurationChange(Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration)">
            <summary>
            attempts to replace configuration value, in case of failure doesn't throw exception
            </summary>
            <returns>false if new configuration value cannot be set, i.e. due to failed validation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheConfigurationManager.Initialize">
            <summary>
            Initializes configuration if it has not already been set. We do this rather than use
            a static initializer primarily because if the configuration setup throws an exception you
            get a rather obscure exception thrown back. This way it should be clearer whats going on
            if something throws.
            
            Three configuration options exist: 
            1) user can pass explicit object that implements ICacheConfiguration interface
            2) if no such object was found, use centralized settings
            3) if centralized settings cannot be used for any reason fallback to default configuration
            </summary>
            <returns>true if initialization has been performed in theis invocation</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheConstants">
            <summary>
            This class contains the constants used for WstCache (client and/or server).
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.WstConnectionString">
            <summary>
            Deployment name to use for the cache database.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSwitchDisplayName">
            <summary>
            Display name to use for MSNCacheManager tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSwitchDescription">
            <summary>
            Description to use for MSNCacheManager tracing.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.TraceSourceServer">
            <summary>
            Default tracing source for MSNCacheManager.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.CacheServiceName">
            <summary>
            The name of the service as we install it on a machine.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Common.CacheConstants.VeryOldDate">
            <summary>
            old date, older than any date expected to exist in DB
            used to initialize various components
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb">
            <summary>
            This class provides access to the functionality of the cache database.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.ClearStaticConfigs">
            <summary>
            Deletes all static config rows from the database.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.CleanDatabase">
            <summary>
            Invokes the proc WspCleanDatabase which deletes everything
            from the database except static configs.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.ExecuteQuery(Microsoft.MSN.MSNCache.Common.CacheDb.WstCommandCreator,Microsoft.MSN.MSNCache.Common.CacheDb.DataRowHandler)">
            <summary>
            Execute command and apply DataRowHandler processing to each row
            </summary>
            <param name="commandCreator"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.UpdateBanks(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks)">
            <summary>
            This method updates the banks from the database.  Will log the buckets that changed.
            </summary>
            <param name="previousBanks">previous version of banks, not required</param>
            <returns>newly created Banks object</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AdjustBanksAndBucketCounts(Microsoft.Webstore.WstClient.WstDataReader,Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks,System.Boolean@)">
            <summary>
            Adjust bank information in the client mapping table to match database
            </summary>
            <param name="rdr"></param>
            <param name="banks"></param>
            <param name="changeDetected"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetConnection">
            <summary>
            Retrieves the connection to use for the cache database.
            </summary>
            <returns>a WstConnection object</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetCommand(Microsoft.Webstore.WstClient.WstConnection)">
            <summary>
            create command with default characteristics
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.Data.SqlDbType,System.Object)">
            <summary>
            create parameter of given type
            </summary>
            <param name="cmd"></param>
            <param name="parameterName"></param>
            <param name="type"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.String)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.Int32)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.AddParameter(Microsoft.Webstore.WstClient.WstCommand,System.String,System.DateTime)">
            <summary>
            add parameter 
            </summary>
            <param name="command"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheDb.GetHostStatusUpdateCommand(Microsoft.Webstore.WstClient.WstConnection,System.String,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            generate command for updating host status in db (the heartbeat command)
            </summary>
            <param name="connection"></param>
            <param name="hostName"></param>
            <param name="configurationChanged"></param>
            <param name="hostVersion"></param>
            <param name="bucketVersion"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb.DataRowHandler">
            <summary>
            method that processes single data row
            </summary>
            <param name="rdr"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheDb.WstCommandCreator">
            <summary>
            method that creates WstCommand 
            </summary>
            <param name="conn"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CacheSettings">
            <summary>
            This class implements cache configuration based on centralized settings
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration">
            <summary>
            Represents the configuration options available to clients of the cache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.Port">
            <summary>
            The destination TCP port number to use when connecting to cache servers.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.PollingIntervalSeconds">
            <summary>
            The amount of time between successive polls of Cache DB, in seconds.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            The maximum amount of time to wait on an outgoing request before timing out.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DefaultBank">
            <summary>
            The default Bank to use when calling GetCache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DefaultLogicalCache">
            <summary>
            The default logical cache to use when calling GetCache.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.DenylistDurationSeconds">
            <summary>
            The duration of time (in seconds) that a host will stay on the denylist, once it
            has been denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            The maximum amount of time the mapping table (as read from Cache DB) can go between refreshes
            before it is considered invalid.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.HostHeartbeatSeconds">
            <summary>
            How frequently cache host must update its status
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ICacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.GetConfiguration">
            <summary>
            get configuration based on centralized settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.GetIntValue(System.String,System.Int32)">
            <summary>
            returns value of integer property, or default value if centralized setting doesn't exist
            throws FormatException if property is not a positive integer
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CacheSettings.ConfigurationChange(System.Object,Microsoft.Webstore.MetaData.WebstoreEventArgs)">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.RequestTimeoutMilliseconds">
            <summary>
            default timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.HostHeartbeatSeconds">
            <summary>
            interval at which 
            a) cacheserver sends heartbeat to database 
            b) retrieves master status
            c) performs master functions, when master
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.CacheSettings.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.CollectionUtils">
            <summary>
            fill gaps in .Net collections API
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CollectionUtils.ContainsAll``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            return true if source collection contains all elements of the dest collection
            not the most effcient implementation (n^2)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.CollectionUtils.HasSameElements``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            return true if both collections contain same elements, including duplicates, regardless of order
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="dest"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration">
            <summary>
            This class implements cache configuration based on centralized settings
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            default timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.HostHeartbeatSeconds">
            <summary>
            interval at which 
            a) cacheserver sends heartbeat to database 
            b) retrieves master status
            c) performs master functions, when master
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.DefaultCacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.StaticConfig">
            <summary>
            This class contains helper methods for generating static config XML.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GenerateXml(Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig)">
            <summary>
            Method for generating the static config XML for a given MSNCache configuration.
            </summary>
            <param name="config">MSNCache configuration to generate from</param>
            <returns>XML string representation of the config</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.ReadFromFile(System.String)">
            <summary>
            read configuration from static xml config file
            </summary>
            <param name="configFile"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.ReadFromXmlString(System.String)">
            <summary>
            construct config object from XML string
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.Read(System.Xml.XmlReader)">
            <summary>
            read configuration from static xml config file
            </summary>
            <param name="reader"></param>
            <returns></returns>
            <throws>XmlException on parsing error</throws>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.Write(System.String,System.String)">
            <summary>
            write static config to file
            (no validation)
            </summary>
            <param name="configFileName"></param>
            <param name="xmlContent"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetServerNode(System.String,System.Xml.XmlReader)">
            <summary>
            Haven't found a way to do string insensitive comparison in xpath, so just
            do this the hardway. 'string-upper' fn doesn't seem to exist 
            </summary>
            <param name="serverName"></param>
            <param name="reader"></param>
            <returns>Pointer to XML element under which this host lives</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetStaticConfiguration">
            <summary>
            retrieve current configuration as xml string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.StaticConfig.GetStaticConfiguration(System.DateTime,System.String@,System.Nullable{System.DateTime}@)">
            <summary>
            retrieve static configuration from database if it's more recent than lastUpdate timestamp
            otherwise return null values;
            </summary>
            <param name="lastUpdate"></param>
            <param name="config"></param>
            <param name="latestVersion"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.#ctor(Microsoft.MSN.MSNCache.Common.BanksConfig,Microsoft.MSN.MSNCache.Common.GlobalConfig)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.RemoveServer(System.String)">
            <summary>
            remove server from static config 
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.HasServer(System.String)">
            <summary>
            check if server is present in static config
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddBank(System.String,System.UInt32)">
            <summary>
            add new bank to config
            </summary>
            <param name="bankName"></param>
            <param name="bucketCount"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddLogicalCache(System.String,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            add logical cache element
            </summary>
            <param name="bankName"></param>
            <param name="cacheName"></param>
            <param name="maxMemory"></param>
            <param name="maxItems"></param>
            <param name="isDefault"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddServerClass(System.String,System.String,System.UInt32)">
            <summary>
            add new server class to config
            </summary>
            <param name="bankName"></param>
            <param name="serverClassName"></param>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.AddServer(System.String,System.String,System.String)">
            <summary>
            add new server to specified bank and class
            </summary>
            <param name="bankName"></param>
            <param name="serverClassName"></param>
            <param name="serverName"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.GetAllServers">
            <summary>
            get all servers defined in current config
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Banks">
            <summary>
            The configuration\MSNCacheConfiguration\banks element within this element.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.MSNCacheConfigurationConfig.Global">
            <summary>
            The configuration\MSNCacheConfiguration\global element within this element.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.GlobalConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\global
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.#ctor(Microsoft.MSN.MSNCache.Common.TcpConfig)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.GlobalConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.GlobalConfig.Tcp">
            <summary>
            The configuration\MSNCacheConfiguration\global\Tcp element.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.TcpConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\global\tcp
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.TcpConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.Port">
            <summary>
            The port attribute, optional.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.ConnectTimeout">
            <summary>
            The connecttimeout attribute, optional.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.TcpConfig.RequestTimeout">
            <summary>
            The requesttimeout attribute, optional.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.BanksConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BanksConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BanksConfig.Banks">
            <summary>
            A list of configuration\MSNCacheConfiguration\banks\bank elements under this node.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.BankConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.#ctor(System.String,System.UInt32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="name"></param>
            <param name="buckets"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.BankConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Name">
            <summary>
            The name attribute, required.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Buckets">
            <summary>
            The buckets attribute, required.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.LogicalCacheNames">
            <summary>
            A list of nodes that will occur under this node under configuration\MSNCacheConfiguration\banks\bank\logicalcachenames
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.BankConfig.Servers">
            <summary>
            A list of nodes that will occur under this node under configuration\MSNCacheConfiguration\banks\bank\servers
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank\logicalcachenames\logicalcache
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Name">
            <summary>
            name attribute, required
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.MaxItems">
            <summary>
            maxitems attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.MaxMemory">
            <summary>
            maxmemory attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.LogicalCacheConfig.Default">
            <summary>
            default attribute, optional
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.ServerClassConfig">
            <summary>
            Represents the element configuration\MSNCacheConfiguration\banks\bank\servers\serverclass
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.#ctor(System.UInt32)">
            <summary>
            Defualt constructor.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.GetHashCode">
            <summary>
            used to get rid of silly warning
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.XmlSerialize(System.Xml.XmlNode)">
            <summary>
            Serializes this node and all child nodes to XML
            </summary>
            <param name="parentNode">parent node to attach this node to</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.ServerClassConfig.AddServers(System.Collections.Generic.List{System.String})">
            <summary>
            add all servers to collection that passed as parameter
            </summary>
            <param name="rvalue"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Name">
            <summary>
            name attribute, optional
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Capacity">
            <summary>
            capacity attribute, required
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Common.ServerClassConfig.Servers">
            <summary>
            List of "server" nodes under this element at configuration\MSNCacheConfiguration\banks\bank\servers\serverclass\server
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XElement">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.Attribute">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XDocument">
            <summary>
            emulator of Linq class with he same name
            should be removed once 3.5 libraries are required for client installations
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Common.XmlUtil">
            <summary>
            helper methods for handling XML
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.String)">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeIntValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.Int32})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeUintValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.UInt32})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetOptionalAttributeBoolValue(Microsoft.MSN.MSNCache.Common.XElement,System.String,System.Nullable{System.Boolean})">
            <summary>
            return attribute value, if present, otherwise return defaultValue
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetRequiredAttributeValue(Microsoft.MSN.MSNCache.Common.XElement,System.String)">
            <summary>
            return value of required attribute
            throws exception if attribute is missing
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.GetRequiredAttributeUintValue(Microsoft.MSN.MSNCache.Common.XElement,System.String)">
            <summary>
            return parsed value of required attribute
            throws exception if attribute is missing
            </summary>
            <param name="xe"></param>
            <param name="attrName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.ValidateSchema(System.String,System.String)">
            <summary>
            validates xml against xsd
            throws XmlSchemaValidationException if validation fails 
            </summary>
            <param name="xml"></param>
            <param name="xsd"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Common.XmlUtil.ValidateSchema(System.IO.TextReader,System.IO.TextReader)">
            <summary>
            validates xml against xsd
            throws XmlSchemaValidationException if validation fails 
            </summary>
            <param name="xmlReader"></param>
            <param name="xsdReader"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ErrorCallback">
            <summary>
            This delegate can be used to receive callback notifications of error conditions
            in the cache library.
            </summary>
            <param name="errorText">a textual representation of the error condition</param>
            <param name="ex">the exception generated as a result of the error (if any)</param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager">
            <summary>
            This is the top-level class for accessing the cache library as a client.  This static class exposes
            methods to provide configuration for your client, retrieve cache instances, and provide an error
            callback.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.ValidateCache(System.String)">
            <summary>
            adds object to cache and verifies that it can be retrieved 
            throws exception if validation fails for any reason
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.AddErrorCallback(Microsoft.MSN.MSNCache.Asynchronous.ErrorCallback)">
            <summary>
            This callback will get called whenever the cache encounters an error.
            
            multiple clients can register several callbacks, all of them will be called
            however each unique callback delegate will be registered at most once 
            </summary>
            <param name="handler">cannot be null</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache">
            <summary>
            Retrieves the cache instance for the default bank and logical cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache(System.String,System.String)">
            <summary>
            Retrieves the cache instance for a specific bank and logical cache.
            </summary>
            <param name="bank">name of the bank to retrieve, null means default</param>
            <param name="logicalCache">name of the logical cache to retrieve, null means default</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCache(System.String)">
            <summary>
            Retrieves the cache instance for a DefaultBank and logical cache.
            </summary>
            <param name="logicalCache">name of the logical cache to retrieve, null means default</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetCacheForHost(System.String,System.String)">
            <summary>
            Retrieves the cache instance for a specific host and logical cache. 
            </summary>
            <param name="host">host name to retrieve cache for</param>
            <param name="logicalCache">logical cache to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.GetErrorString(Microsoft.MSN.MSNCache.Asynchronous.CacheError)">
            <summary>
            Converts a cache error code into a string.  Deprecated in favor of MSNCacheException.GetErrorString.
            </summary>
            <param name="error">error code to convert</param>
            <returns>string representation of that error code</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.SignalError(System.String,System.Exception)">
            <summary>
            This will get called for errors and exceptions in background threads. The idea is to allow
            the calling application decide what and how to log these events, and what action to take.
            </summary>
            <param name="errorDescription"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.EnsureInitialized">
            <summary>
            Initializes configuration if it has not already been set. We do this rather than use
            a static initializer primarily because if the configuration setup throws an exception you
            get a rather obscure exception thrown back. This way it should be clearer whats going on
            if something throws.
            
            Three configuration options exist: 
            1) user can pass explicit object that implements ICacheConfiguration interface
            2) if no such object was found, use centralized settings
            3) if centralized settings cannot be used for any reason fallback to default configuration
            </summary>
            <returns>current configuration value</returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.Configuration">
            <summary>
            Set or retrieve the configuration for your cache.  By default the MSNCache section
            will be retrieved from your app.exe.config file.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.AsynchronousCacheManager.ErrorCallback">
            <summary>
            This callback will get called whenever the cache encounters an error.
            
            multiple clients can register several callbacks, all of them will be called
            however each unique callback delegate will be registered at most once 
            
            setting callback to null has no effect
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.#ctor(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank)">
            <summary>
            copy constructor
            </summary>
            <param name="toCopy"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.GetBucketForKey(System.String,System.UInt32)">
            <summary>
            Given some number of buckets and a key, calculates which bucket the
            key belongs to by using the hash function.
            </summary>
            <param name="key">key to hash, usually groupKey</param>
            <param name="numberOfBuckets">number of buckets in the bank</param>
            <returns>bucket number the key belongs to</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.Hash(System.String)">
            <summary>
            Hash the key to a uint. This uses the same algorithm as in
            the C++ code (taken from stdext::hash_value) so an object
            should always hahs to the same server both when using this TCP client
            and the old COM client.
            </summary>
            <param name="key">key to hash</param>
            <returns>a hash value</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.GetHashCode">
            <summary>
            We don't plan on using this but you get a warning if you implement Equals and not GetHashCode.
            So we'll make something that works.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Bank.Equals(System.Object)">
            <summary>
            One bank is equal to another bank IFF the following criteria are met:
            1) the name is the same
            2) the number of hosts is the same
            3) each host is the same
            </summary>
            <param name="obj">object to compare to</param>
            <returns>true if banks are equal</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks">
            <summary>
            Represents a collection of banks from a mapping table.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.#ctor(Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks)">
            <summary>
            Copy constructor, does a deep copy of another banks object.
            </summary>
            <param name="source">source object to copy</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.#ctor">
            <summary>
            Default constructor, creates an empty bank.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.AdjustBanksAndBucketCounts(System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean@)">
            <summary>
            modify current bank information to match data retrieved from db
            </summary>
            <param name="dbBanks"></param>
            <param name="isModified"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.GetHostName(System.String,System.String)">
            <summary>
            For a given bank and group key, retrieves the host it is currently mapped to.
            </summary>
            <param name="bankName">name of the bank</param>
            <param name="groupKey">group key</param>
            <returns>hostname it is mapped to</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Update(System.Int32,System.String,System.String)">
            <summary>
            Updates the mapping of a particular bucket to a particular host.
            </summary>
            <param name="bucket"></param>
            <param name="bankName"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.GetHashCode">
            <summary>
            Hash code, we don't plan on using it but this works if we ever do and it gets rid of warnings.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Equals(System.Object)">
            <summary>
            Deep equality comparison.  Two Banks are considered equal IFF the following are all true:
            1) the same bank names exist in each object
            2) each Bank in each object is equal
            </summary>
            <param name="obj">the Banks object to check equality</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.Banks.Version">
            <summary>
            The current version of this banks.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable">
            <summary>
            This class incurs heavily multi-threaded use.  Our synchronization model is to make all of the
            parameters read-only except for mappingTableLeaseExpired.  When we need to change these values
            (like because we updated the banks mapping) we actually just create a new MappingTable object
            and InterlockedExchange out the Instance.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.GetValidHostName(System.String,System.String)">
            <summary>
            returns valid host or throws MSNCacheException if unable to do so 
            </summary>
            <param name="bankName"></param>
            <param name="groupKey"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.DetectExpiration">
            <summary>
            check expiration status of host mapping table and generate warning messages in logs
            the method is not thread safe - due to race conditions, the messages are not guarneed to be accurate to a tick 
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.UpdateTable">
            <summary>
            Called by TimerCallback and by static initializer.  Handles querying the database for the latest
            mapping and updating the Instance.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.OnTimer(System.Object)">
            <summary>
            timer callback
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.LastUpdated">
            <summary>
            The time that this table was last updated.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.BucketConfiguration.MappingTable.Instance">
            <summary>
            Retrieves the global mapping table.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration">
            <summary>
            Cache configuration manager
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.WstConnectionString">
            <summary>
            webstore deployment
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.UseExeConfig">
            <summary>
            obsolete setting
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.Port">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ConnectionString">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.PollingIntervalSeconds">
            <summary>
            how often client attempts to refresh configuration
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.MultipleSockets">
            <summary>
            reserved for future use
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ConnectionType">
            <summary>
            User supplied value is ignored,
            Keeping this setting for compatibility with existing config files
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.RequestTimeoutMilliseconds">
            <summary>
            timeout value for individual request
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.ThrottleLimit">
            <summary>
            The maximum number of requests that can pile up in the unsent queue to a particular host before
            new requests for this host are rejected.  
            This should be seen as safety valve that prevents memory overflow, when a particular 
            host can’t process requests at the rate they are generated by the client
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DenylistDurationSeconds">
            <summary>
            how long server remains denylisted after socket error is detected
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DefaultBank">
            <summary>
            default bank
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.DefaultLogicalCache">
            <summary>
            default logical cache
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.WebstoreAssemblyName">
            <summary>
            WstClient assembly name
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.MappingTableValidTimeSeconds">
            <summary>
            max time mapping table remains valid after last refresh
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.HostHeartbeatSeconds">
            <summary>
            How frequently cache host must update it's status
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheConfig.DotNetCacheConfiguration.HostHeartbeatExpirationSeconds">
            <summary>
            How long to wait after last heartbeat to declare that is host dead
            This value must be greater than HostHeartbeatSeconds
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheError">
            <summary>
            Possible error codes that can be returned in an MSNCacheException
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NoError">
            <summary>
            No error - everything is fine
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.Unknown">
            <summary>
            Unknown or unrecognized error
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.InvalidBank">
            <summary>
            The bank requested by the client application is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.InvalidLogicalCache">
            <summary>
            The logical cache requested by the client application is invalid.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.BucketFileDoesNotExist">
            <summary>
            The bucket mapping is out of date or doesn't exist.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.CannotConnectToSqlServer">
            <summary>
            Unable to connect to CacheDB
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.CannotConnectToWebstore">
            <summary>
            Unable to connect to CacheDB
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NoConfiguration">
            <summary>
            Incorrect or missing cache client configuration
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.PortNotSet">
            <summary>
            Cache server destination port not specified in configuration.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.HostConnectionFailed">
            <summary>
            Attempt to connect to cache host server failed.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.RequestTimedOut">
            <summary>
            Request timed out.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.RequestThrottled">
            <summary>
            Request was refused due to client-side throttling.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.HostDenylisted">
            <summary>
            Request was refused due to host being denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheError.NetworkError">
            <summary>
            An unspecified network error occurred.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader">
            <summary>
            This is a header prefixed to messages on the inter-cache protocol.
            We are just going to add a new message type leaving the existing
            messaging alone. So we need this prefix to keep the cache server happy.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a field object
            </summary>
            <param name="buffer">serialized blob array</param>
            <param name="offset">offset where this field lives</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.ChatHeader.Size">
            <summary>
            Size of a Field object in bytes. Note this is not the size of
            field contents (see Length below)
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType">
            <summary>
            The type of connection to use for connecting to the Cache DB.  In the future
            only Webstore will be supported.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.None">
            <summary>
            Don't use a connection - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.File">
            <summary>
            Use a file - invalid value.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.SqlServer">
            <summary>
            Use SQLServer - currently works, but is deprecated.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.ConnectionType.Webstore">
            <summary>
            Use Webstore
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize">
            <summary>
            Serialization class. All serializable objects must inherit from this.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.OnField(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Called during deserialization to deserialize one field
            </summary>
            <param name="fieldNumber">Number of the field</param>
            <param name="length">Length of payload</param>
            <param name="data">For integer fields this is the value of the field</param>
            <param name="buff">Base of the blob</param>
            <param name="bufferOffset">Location in blob relative to the base of filed payload</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SerializeFields">
            <summary>
            Serialize fields - call into subclass.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.Deserialize(System.Byte[])">
            <summary>
            Deserialize an object.
            </summary>
            <param name="serializedObjectBuffer">Buffer holding the serialized object</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.Serialize">
            <summary>
            Serialize an object
            </summary>
            <returns>serialized object as byte array</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called by derived class to get string field from blob
            </summary>
            <param name="serializedObjectBuffer">buffer containing blob</param>
            <param name="bufferOffset">start of payload relative to base of blob</param>
            <param name="length">length of payload</param>
            <returns>string</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.GetBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called by derived class to get byte array from serialized blob
            </summary>
            <param name="serializedObjectBuffer">buffer containing blob</param>
            <param name="bufferOffset">start of payload relative to base of blob</param>
            <param name="length">length of payload</param>
            <returns>data as abyte array</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.Int32)">
            <summary>
            Called by derived class during serialization to set integer data into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.String)">
            <summary>
            Called by derived class during serialization to set string into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">string data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheSerialize.SetField(System.Int32,System.Byte[])">
            <summary>
            Called by derived class during serialization to set byte array into field
            </summary>
            <param name="fieldNumber">field number</param>
            <param name="data">data</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestReader.BeginRead(System.String,Microsoft.MSN.MSNCache.Asynchronous.CacheState,Microsoft.MSN.MSNCache.Asynchronous.ReadSuccessCallback,Microsoft.MSN.MSNCache.Asynchronous.ReadErrorCallback)">
            <summary>
            initiate pending read on a socket
            </summary>
            <param name="hostName"></param>
            <param name="hostSocketHolder"></param>
            <param name="onSuccess"></param>
            <param name="onFail"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestReader.OnReadResponseDone(System.IAsyncResult)">
            <summary>
            Called when read is done. This will read whatever data is available. When the object is 
            completely read we deserialize it, send it to the singleton response queue, and hang out
            a new read request.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.Field">
            <summary>
            Represents a field in the serialized blob
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Field.#ctor(System.Byte[],System.Int32)">
            <summary>
            Construct a field object
            </summary>
            <param name="buffer">serialized blob array</param>
            <param name="offset">offset where this field lives</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Field.Increment">
            <summary>
            Move to next field in serialized blob
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Size">
            <summary>
            Size of a Field object in bytes. Note this is not the size of
            field contents (see Length below)
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Number">
            <summary>
            Field Id
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Length">
            <summary>
            Length of contents
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Field.Offset">
            <summary>
            Offset of field payload relative to start of blob
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.#ctor(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.RequestType,System.String,System.String,System.String,System.String,System.Object,System.AsyncCallback,System.Int32)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="bank"></param>
            <param name="logicalCache"></param>
            <param name="groupKey"></param>
            <param name="itemKey"></param>
            <param name="asyncState"></param>
            <param name="callback_"></param>
            <param name="requestTimeoutMillis">value less or equal zero, means no timeout</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDoneOrTimeout(System.TimeSpan)">
            <summary>
            blocks until request is completed or timeout is reached, whatever happens first
            </summary>
            <param name="timeout"> TimeSpan = -1ms means indefinite wait</param>
            <returns>return true if request is completed, false if timeout is reached</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDone(System.Int32@,System.String@)">
            <summary>
            blocks until request is completed and then sets status parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.BlockTillDone">
            <summary>
             blocks until request is completed and then sets status parameters
             throws MSNCacheException in case status indicates error
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetObject(System.Int32@,System.String@)">
            <summary>
            Blocks until request is done, than returns value.
            Also sets Status and ErrorString out parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetObject">
            <summary>
            Blocks until request is done, than returns value
            throws MSNCacheException in case status indicates error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetRawData(System.Int32@,System.String@)">
            <summary>
            blocks until request is completed and then returns data and sets status parameters
            </summary>
            <param name="resultCode"></param>
            <param name="errString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.GetRawData">
            <summary>
            blocks until request is completed and then returns data and sets status parameters
            throws MSNCacheException in case status indicates error
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.SignalCaller(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String,System.Exception,System.Byte[])">
            <summary>
               1. set status and content
               2. set waithandle
               3. fire callbacks
            </summary>
            <param name="statusCode"></param>
            <param name="errorMsg"></param>
            <param name="ex"></param>
            <param name="content"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheRequest.SignalError(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String,System.Exception)">
            <summary>
            Translate error message and call SignalCaller to complete request
            </summary>
            <param name="error"></param>
            <param name="msg"></param>
            <param name="ex"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache">
            <summary>
            Asynchronous cache
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.Add(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            Synchronously add object to cache 
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time - set to TimeSpan.Maxvalue for default value (24 hours) </param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAdd(System.String,System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously add object to cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAdd delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAdd(System.String,System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously add object to cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="obj">Object to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAdd delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAdd(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Add 
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAdd(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous add
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.AddByteArray(System.String,System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Synchronously add a byte array to the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time - set to TimeSpan.Maxvalue for default value (24 hours) </param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAddByteArray(System.String,System.String,System.Byte[],System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously add byte array to cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAddByteArray delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginAddByteArray(System.String,System.String,System.Byte[],System.TimeSpan,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously add byte array to cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="buffer">Byte array to add</param>
            <param name="expiry">Expiry time , TimeSpan.MaxValue for default value (24 hours)</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndAddByteArray delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAddByteArray(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous AddByteArray 
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndAddByteArray(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous AddByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="resultCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.Get(System.String,System.String)">
            <summary>
            Synchronously get an item from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGet(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously get object from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGet delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGet(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously get object from cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGet delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGet(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous Get
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGet(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous Get
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="resultCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetByteArray(System.String,System.String)">
            <summary>
            Synchronously get a byte array from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <returns>cached byte array, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGetByteArray(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously get byte array from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGetByteArray delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginGetByteArray(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously get byte array from cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGetByteArray delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGetByteArray(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous GetByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndGetByteArray(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous GetByteArray
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode">return code, 0 = success</param>
            <param name="exceptionString">descriptive string</param>
            <returns>cached object, or null if object not in cache</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.RemoveGroup(System.String)">
            <summary>
            Remove all items in named group
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveGroup(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously remove all items from a group
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGroupRemove delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveGroup(System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously remove all items from a group
            </summary>
            <param name="groupKey">The group key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndGroupRemove delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveGroup(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous GroupRemove
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveGroup(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous GroupRemove avoiding throwing an exception if an error occured
            </summary>
            <param name="ar">IAsyncResult objecy</param>
            <param name="returnCode">Error Code</param>
            <param name="exceptionString">Error description</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.RemoveItem(System.String,System.String)">
            <summary>
            Remove specific item from cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveItem(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Start to asynchronously remove a specific item from the cache
            (operation is aborted after default request timeout interval expires)
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndItemRemove delegate when the operation is complete.</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.BeginRemoveItem(System.String,System.String,System.AsyncCallback,System.Object,System.Int32)">
            <summary>
            Start to asynchronously remove a specific item from the cache
            </summary>
            <param name="groupKey">The group key</param>
            <param name="itemKey">The item key</param>
            <param name="callback">An AsyncCallback delegate that references the method to invoke when the operation is complete.</param>
            <param name="state">A user-defined object that contains information about the receive operation. This object is passed to the EndItemRemove delegate when the operation is complete.</param>
            <param name="requestTimeoutMillis">max time to wait before aborting operation.  Zero or negative value means no timeout</param>
            <returns>IAsyncResult object that stores state information about this operation</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveItem(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous ItemRemove
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.EndRemoveItem(System.IAsyncResult,System.Int32@,System.String@)">
            <summary>
            Ends a pending asynchronous ItemRemove and returns returnCode and exception string.
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <param name="returnCode"></param>
            <param name="exceptionString"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetResponseCode(System.IAsyncResult)">
            <summary>
            Returns the response code associated with an asynchronous cache operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>Response code</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.IAsyncCache.GetErrorString(System.IAsyncResult)">
            <summary>
            Returns the error string associated with an asynchronous cache operation
            </summary>
            <param name="ar">An IAsyncResult that stores state information about this operation</param>
            <returns>Error string</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.Logger">
            <summary>
            Wrapper around MsnTrace log
            gurantees that messages sent from different methods and classes follow same formatting rules
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Logger.LogError(System.String,System.Exception)">
            <summary>
            format exception and output it to trace
            formatting includes adding trace, and output of the "ultimate cause", the furthemost inner exception
            </summary>
            <param name="info"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.Logger.GetUltimateCause(System.Exception)">
            <summary>
            Returns input if exception doesn't contain InnerException
            otherwise drills down and return the innermost InnerException
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.Logger.TraceSource">
            <summary>
            Gets a trace source for logging 
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException">
            <summary>
            This class represents an exception generated by the cache.  To determine the type of
            exception reference the Code property.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Retrieves the underlying object data using a custom serialization info object.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.GetErrorString(Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String)">
            <summary>
            Retrieve the error string for a specific error number.
            </summary>
            <param name="errorNumber">error number, as retrieved by Code property</param>
            <param name="msg">custom user message</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.ErrorCode">
            <summary>
            Retrieve error code
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.MSNCacheException.Code">
            <summary>
            Retrieves the error code that generated the exception.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.BeginSend(Microsoft.MSN.MSNCache.Asynchronous.CacheState,Microsoft.MSN.MSNCache.Asynchronous.CacheRequest,Microsoft.MSN.MSNCache.Asynchronous.SendSuccessCallback,Microsoft.MSN.MSNCache.Asynchronous.SendErrorCallback)">
            <summary>
            initiate send request
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.OnSendRequestDone(System.IAsyncResult)">
            <summary>
            called asynchronously
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.RequestSender.IsSendComplete(System.Int32)">
            <summary>
            checks if additional bytes complete sent request
            if buffer has been completely sent, sets write complete flag
            </summary>
            <param name="moreBytesSent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.SocketCache.EndAddByteArray(System.IAsyncResult)">
            Silly redirect TODO: mark as obsolete
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy">
            <summary>
            This class is a proxy for one remote cache. The complexity here is that we are
            using tcp for communications. With TCP if you a send there is no guarantee that
            the entire buffer will be sent atomically. Its possible for the send to succeed but
            send only a partial buffer. The send returns a count of bytes sent, and the application needs
            to issue a new send request for the data that was not sent on the first try. The problem 
            arises if there are multiple threads wanting to use the same socket - if thread A sends a 
            partial buffer there is a chance that thread B will get its write in before the second part 
            of thread A's buffer. In which case you have an interleaved buffer that can't be disentangled by the sender.
            
            This class solves the problem by queing all requests and only sending one request down the socket at a time.
            
            Also: once a request has been sent everything is asynchronous, so events can occur out of order.
            There are three events that could possibly happen:
            1. send completed
            2. receive completed
            3. timout
            You can't assume that anything is going to happen in any particular order - we can get a response completed
            before the send completed, and we can get both (or either) send completed and recieve completed after 
            timeout.
            
            To deal with the recieve completed coming before the send completed I added an event to the
            request object. This gets set on creation, and reset when the write completes. The read and timeout wait on this.
            
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy.OnConnectRequestDone(System.IAsyncResult)">
            <summary>
            Called when a request completes.
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.HostCacheProxy.SignalComplete(System.String,System.Byte[],Microsoft.MSN.MSNCache.Asynchronous.CacheError,System.String)">
            <summary>
            Signal waiting clients that we have completed, and also if there is a callback
            registered call it.
            </summary>
            <param name="requestId"></param>
            <param name="data"></param>
            <param name="status"></param>
            <param name="statusString"></param>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheState">
            <summary>
            encapsulates internal state of HostCacheProxy object,
            access to all public/internal methods is synced using internal lock
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginConnect(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest,System.AsyncCallback)">
            <summary>
            starts async connect, if currenly disconnected.
            otherwise has no effect
            </summary>
            <returns>true if connect has started</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginReceive(System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Hangs out an asynchronous read request. We will only have one read request outstanding
            on each socket so that we can be sure data is correctly sequenced. In practice all objects
            require at least two reads - the first reads the 12 byte header which has the object
            length. The second will read the remainder of the object. Because data in the
            buffer is self relative we need the buffer to be the complete length of the object
            including its 12 byte header. But we don't need the initial 12 bytes after the first read. 
            CacheRequest has the logic to figure out where in the buffer we are, and how much more data needs to be loaded
            </summary>
            <param name="readBuffer"></param>
            <param name="callback"></param>
            <param name="readBytesLeft"></param>
            <param name="readBytesReceived"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.EndConnect(System.IAsyncResult,Microsoft.MSN.MSNCache.Asynchronous.CacheRequest)">
            <summary>
            Ends async Connect request
            At the end of the method the HostConnectionState==Connected and thisSocket is mapped to valid connected Socket
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.EndSend(System.IAsyncResult)">
            <summary>
            End send request
            </summary>
            <param name="ar"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.BeginSend(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,Microsoft.MSN.MSNCache.Asynchronous.RequestSender)">
            <summary>
            Send async Send request
            </summary>
            <param name="buffer"></param>
            <param name="bytesSent"></param>
            <param name="bytesLeft"></param>
            <param name="callback"></param>
            <param name="sendHelper"></param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.InternalEnqueue(Microsoft.MSN.MSNCache.Asynchronous.CacheRequest)">
            <summary>
            place request into internal queue
            if for any reason request cannot be place in a queue, an appropriate exceptuion will be thrown
            </summary>
            <param name="request"></param>
            <returns>queue size BEFORE request has been added</returns>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheState.RemoveFromPendingQueue(System.String)">
            <summary>
            removes request from internal pending queue
            </summary>
            <param name="requestId"></param>
            <returns>object that has been removed</returns>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheClientCategoryInstaller">
            <summary>
            Category installer for the WstCacheClient event source.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents">
            <summary>
            Events in the CacheClient module.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.WstCacheClientErrorValue">
            <summary>
            EventDefinition for WstCacheClientError
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogWstCacheClientError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type WstCacheClientError.
            </summary>
            <param name="description">Argument description for formatting the event text.</param>
            <param name="exceptionType">Argument exceptionType for formatting the event text.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="stackTrace">Argument stackTrace for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogWstCacheClientError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstCacheClientError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="description">Argument description for formatting the event text.</param>
            <param name="exceptionType">Argument exceptionType for formatting the event text.</param>
            <param name="exceptionMessage">Argument exceptionMessage for formatting the event text.</param>
            <param name="stackTrace">Argument stackTrace for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.HostDenyListedValue">
            <summary>
            EventDefinition for HostDenyListed
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogHostDenyListed(System.String,System.String)">
            <summary>
            Method to log an event of type HostDenyListed.
            </summary>
            <param name="hostName">Argument hostName for formatting the event text.</param>
            <param name="denyListExpiration">Argument denyListExpiration for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogHostDenyListed(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HostDenyListed with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="hostName">Argument hostName for formatting the event text.</param>
            <param name="denyListExpiration">Argument denyListExpiration for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableExpirationDetectedValue">
            <summary>
            EventDefinition for MappingTableExpirationDetected
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableExpirationDetected(System.String)">
            <summary>
            Method to log an event of type MappingTableExpirationDetected.
            </summary>
            <param name="lastRefreshTimestamp">Argument lastRefreshTimestamp for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableExpirationDetected(System.String,System.Exception)">
            <summary>
            Method to log an event of type MappingTableExpirationDetected with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="lastRefreshTimestamp">Argument lastRefreshTimestamp for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableUpdateValue">
            <summary>
            EventDefinition for MappingTableUpdate
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableUpdate">
            <summary>
            Method to log an event of type MappingTableUpdate.
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogMappingTableUpdate(System.Exception)">
            <summary>
            Method to log an event of type MappingTableUpdate with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.ConfigurationChangeValue">
            <summary>
            EventDefinition for ConfigurationChange
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogConfigurationChange(System.String)">
            <summary>
            Method to log an event of type ConfigurationChange.
            </summary>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogConfigurationChange(System.String,System.Exception)">
            <summary>
            Method to log an event of type ConfigurationChange with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.FailedToChangeConfigurationValue">
            <summary>
            EventDefinition for FailedToChangeConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogFailedToChangeConfiguration(System.String)">
            <summary>
            Method to log an event of type FailedToChangeConfiguration.
            </summary>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogFailedToChangeConfiguration(System.String,System.Exception)">
            <summary>
            Method to log an event of type FailedToChangeConfiguration with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="config">Argument config for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.CentralizedSettingFoundValue">
            <summary>
            EventDefinition for CentralizedSettingFound
            </summary>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogCentralizedSettingFound(System.String,System.String)">
            <summary>
            Method to log an event of type CentralizedSettingFound.
            </summary>
            <param name="name">Argument name for formatting the event text.</param>
            <param name="value">Argument value for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.LogCentralizedSettingFound(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CentralizedSettingFound with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="name">Argument name for formatting the event text.</param>
            <param name="value">Argument value for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.WstCacheClientError">
            <summary>
              Gets the EventDefinition for the WstCacheClientError.
            </summary>
            <value>The EventDefinition for the WstCacheClientError</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.HostDenyListed">
            <summary>
              Gets the EventDefinition for the HostDenyListed.
            </summary>
            <value>The EventDefinition for the HostDenyListed</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableExpirationDetected">
            <summary>
              Gets the EventDefinition for the MappingTableExpirationDetected.
            </summary>
            <value>The EventDefinition for the MappingTableExpirationDetected</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.MappingTableUpdate">
            <summary>
              Gets the EventDefinition for the MappingTableUpdate.
            </summary>
            <value>The EventDefinition for the MappingTableUpdate</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.ConfigurationChange">
            <summary>
              Gets the EventDefinition for the ConfigurationChange.
            </summary>
            <value>The EventDefinition for the ConfigurationChange</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.FailedToChangeConfiguration">
            <summary>
              Gets the EventDefinition for the FailedToChangeConfiguration.
            </summary>
            <value>The EventDefinition for the FailedToChangeConfiguration</value>
        </member>
        <member name="P:Microsoft.MSN.MSNCache.Asynchronous.CacheClientEvents.CentralizedSettingFound">
            <summary>
              Gets the EventDefinition for the CentralizedSettingFound.
            </summary>
            <value>The EventDefinition for the CentralizedSettingFound</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstJobFrameworkCoordinator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkCoordinator</name>
    </assembly>
    <members>
        <member name="M:JobCoordinator.JobCoordinator.SpawnJob(System.String,System.Boolean)">
            <summary>
            Tells the coordinator whether it can spawn jobs or not
            </summary>
            <param name="jobName">Name of job</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstJobFrameworkGenericCoordinator.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkGenericCoordinator</name>
    </assembly>
    <members>
        <member name="M:GenericJobCoordinator.GenericJobCoordinator.SpawnJob(System.String,System.Boolean)">
            <summary>
            Tells the coordinator whether it can spawn jobs or not
            </summary>
            <param name="jobName">Name of job</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstJobFrameworkAgent.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstJobFrameworkAgent</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProxy">
            <summary>
            The JobStepProxy is the jobstep from the agent app domain that we can return to the client through
            remoting. It forwards all call to the JobStep from the job appdomain. This allows us to have a single
            network sink.
            </summary>    
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProxy.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Allows the Job Agent to add new partitions if it notices that there is
            currently a worker running of the same type.
            It is a performance optimization.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProxy.AcceptAdd">
            <summary>
            If true, the Job Agent is allowed to pass in new partitions
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Create the ASyncExecuteBatch that will host the worker in the Job Agent machine
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.SendMessage(System.String,System.String)">
            <summary>
            A message was sent to us via the WstJobFrameworkManager.  We need to store it, so that workers
            can utilize it.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.InitializeLifetimeService">
            <summary>
            Make the JobAgent lease eternal so that JobAgent doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgent.AddWorkItemToExpiredList(Microsoft.Webstore.JobEngine.JobAgentWorkItem)">
            <summary>
            This puts the work item into one of the expired list and writes info to the event log.
            </summary>
            <param name="jaWorkItem">the item to be expired.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgent.IsListenerInitialized">
            <summary>
            Has the listner for commands been initialized?
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentService.OnStart(System.String[])">
            <summary>
            Set things in motion so your service can do its work.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentService.OnStop">
            <summary>
            Stop this service.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkAgentCategoryInstaller">
            <summary>
            Category installer for the WstJobFrameworkAgent event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents">
            <summary>
            Events in the JobFrameworkAgent module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobFrameworkStartupFailureValue">
            <summary>
            EventDefinition for JobFrameworkStartupFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobFrameworkStartupFailure(System.String)">
            <summary>
            Method to log an event of type JobFrameworkStartupFailure.
            </summary>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobFrameworkStartupFailure(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobFrameworkStartupFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="errorMessage">Argument errorMessage for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobEngineHeartBeatFailureValue">
            <summary>
            EventDefinition for JobEngineHeartBeatFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobEngineHeartBeatFailure(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobEngineHeartBeatFailure.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobEngineHeartBeatFailure(System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobEngineHeartBeatFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.CreateNewJobStepFailureValue">
            <summary>
            EventDefinition for CreateNewJobStepFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogCreateNewJobStepFailure(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Method to log an event of type CreateNewJobStepFailure.
            </summary>
            <param name="assemblyName">Argument assemblyName for formatting the event text.</param>
            <param name="Version">Argument Version for formatting the event text.</param>
            <param name="jobStepFullName">Argument jobStepFullName for formatting the event text.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogCreateNewJobStepFailure(System.String,System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Method to log an event of type CreateNewJobStepFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="assemblyName">Argument assemblyName for formatting the event text.</param>
            <param name="Version">Argument Version for formatting the event text.</param>
            <param name="jobStepFullName">Argument jobStepFullName for formatting the event text.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.HeartBeatThreadFailureValue">
            <summary>
            EventDefinition for HeartBeatThreadFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogHeartBeatThreadFailure">
            <summary>
            Method to log an event of type HeartBeatThreadFailure.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogHeartBeatThreadFailure(System.Exception)">
            <summary>
            Method to log an event of type HeartBeatThreadFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.AppDomainUnloadErrorValue">
            <summary>
            EventDefinition for AppDomainUnloadError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogAppDomainUnloadError(System.Boolean)">
            <summary>
            Method to log an event of type AppDomainUnloadError.
            </summary>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogAppDomainUnloadError(System.Boolean,System.Exception)">
            <summary>
            Method to log an event of type AppDomainUnloadError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="isSafeMode">Argument isSafeMode for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountDecrementValue">
            <summary>
            EventDefinition for JobAgentHeartbeatFailureCountDecrement
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountDecrement(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountDecrement.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountDecrement(System.Int32,System.Int32,System.String,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountDecrement with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="jobConsecutiveHeartbeatFailureRemainCount">Argument jobConsecutiveHeartbeatFailureRemainCount for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountResetValue">
            <summary>
            EventDefinition for JobAgentHeartbeatFailureCountReset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountReset(System.Int32,System.Int32,System.String)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountReset.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentHeartbeatFailureCountReset(System.Int32,System.Int32,System.String,System.Exception)">
            <summary>
            Method to log an event of type JobAgentHeartbeatFailureCountReset with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentExpiredWorkItemValue">
            <summary>
            EventDefinition for JobAgentExpiredWorkItem
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentExpiredWorkItem(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Method to log an event of type JobAgentExpiredWorkItem.
            </summary>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="safeMode">Argument safeMode for formatting the event text.</param>
            <param name="numberHBFailures">Argument numberHBFailures for formatting the event text.</param>
            <param name="numberHBFailuresMax">Argument numberHBFailuresMax for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.LogJobAgentExpiredWorkItem(System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type JobAgentExpiredWorkItem with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="workItemId">Argument workItemId for formatting the event text.</param>
            <param name="batchId">Argument batchId for formatting the event text.</param>
            <param name="jobName">Argument jobName for formatting the event text.</param>
            <param name="safeMode">Argument safeMode for formatting the event text.</param>
            <param name="numberHBFailures">Argument numberHBFailures for formatting the event text.</param>
            <param name="numberHBFailuresMax">Argument numberHBFailuresMax for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobFrameworkStartupFailure">
            <summary>
              Gets the EventDefinition for the JobFrameworkStartupFailure.
            </summary>
            <value>The EventDefinition for the JobFrameworkStartupFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobEngineHeartBeatFailure">
            <summary>
              Gets the EventDefinition for the JobEngineHeartBeatFailure.
            </summary>
            <value>The EventDefinition for the JobEngineHeartBeatFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.CreateNewJobStepFailure">
            <summary>
              Gets the EventDefinition for the CreateNewJobStepFailure.
            </summary>
            <value>The EventDefinition for the CreateNewJobStepFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.HeartBeatThreadFailure">
            <summary>
              Gets the EventDefinition for the HeartBeatThreadFailure.
            </summary>
            <value>The EventDefinition for the HeartBeatThreadFailure</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.AppDomainUnloadError">
            <summary>
              Gets the EventDefinition for the AppDomainUnloadError.
            </summary>
            <value>The EventDefinition for the AppDomainUnloadError</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountDecrement">
            <summary>
              Gets the EventDefinition for the JobAgentHeartbeatFailureCountDecrement.
            </summary>
            <value>The EventDefinition for the JobAgentHeartbeatFailureCountDecrement</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentHeartbeatFailureCountReset">
            <summary>
              Gets the EventDefinition for the JobAgentHeartbeatFailureCountReset.
            </summary>
            <value>The EventDefinition for the JobAgentHeartbeatFailureCountReset</value>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobFrameworkAgentEvents.JobAgentExpiredWorkItem">
            <summary>
              Gets the EventDefinition for the JobAgentExpiredWorkItem.
            </summary>
            <value>The EventDefinition for the JobAgentExpiredWorkItem</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstCustomScriptJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstCustomScriptJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobWorker">
            <summary>
            Class to execute Custom Script jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobCategoryInstaller">
            <summary>
            Category installer for the WstCustomScriptJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Jobs.CustomScriptJobEvents">
            <summary>
            Events in the CustomScriptJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecuteErrorValue">
            <summary>
            EventDefinition for CustomScriptExecuteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecuteError(System.String)">
            <summary>
            Method to log an event of type CustomScriptExecuteError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecuteError(System.String,System.Exception)">
            <summary>
            Method to log an event of type CustomScriptExecuteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.ArgumentsErrorValue">
            <summary>
            EventDefinition for ArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogArgumentsError(System.String)">
            <summary>
            Method to log an event of type ArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type ArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.RecordExceptionValue">
            <summary>
            EventDefinition for RecordException
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogRecordException(System.String)">
            <summary>
            Method to log an event of type RecordException.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogRecordException(System.String,System.Exception)">
            <summary>
            Method to log an event of type RecordException with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecutionFailureValue">
            <summary>
            EventDefinition for CustomScriptExecutionFailure
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecutionFailure(System.Int32,System.Int32)">
            <summary>
            Method to log an event of type CustomScriptExecutionFailure.
            </summary>
            <param name="exitCode">Argument exitCode for formatting the event text.</param>
            <param name="successCode">Argument successCode for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.Jobs.CustomScriptJobEvents.LogCustomScriptExecutionFailure(System.Int32,System.Int32,System.Exception)">
            <summary>
            Method to log an event of type CustomScriptExecutionFailure with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exitCode">Argument exitCode for formatting the event text.</param>
            <param name="successCode">Argument successCode for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecuteError">
            <summary>
              Gets the EventDefinition for the CustomScriptExecuteError.
            </summary>
            <value>The EventDefinition for the CustomScriptExecuteError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.ArgumentsError">
            <summary>
              Gets the EventDefinition for the ArgumentsError.
            </summary>
            <value>The EventDefinition for the ArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.RecordException">
            <summary>
              Gets the EventDefinition for the RecordException.
            </summary>
            <value>The EventDefinition for the RecordException</value>
        </member>
        <member name="P:Microsoft.Webstore.Jobs.CustomScriptJobEvents.CustomScriptExecutionFailure">
            <summary>
              Gets the EventDefinition for the CustomScriptExecutionFailure.
            </summary>
            <value>The EventDefinition for the CustomScriptExecutionFailure</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstCollectorJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstCollectorJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetQueueItemsByServer(System.String)">
            <summary>
            Gets the active queue items for a particular server.
            UT NOTE: This is tests in QueueItemSet tests.
            </summary>
            <param name="serverName">name of the server to retrieve queue items for</param>
            <returns>a set of queue items</returns>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.HeartBeat(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Updates the heartbeat on a particular QueueItem.
            </summary>
            <param name="item">item to update heartbeat on</param>
            <returns>true if heartbeating was successful, false otherwise (means the item has been cancelled or claimed by another server)</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetDeploymentRecord(System.Guid)">
            <summary>
            Retrieves a DeploymentRecord for a given deployment GUID.
            UT NOTE: tested as part of DeploymentRecord tests
            </summary>
            <param name="deploymentUID">deployment guid to retrieve</param>
            <returns>DeploymentRecord</returns>
            <exception cref="T:System.Data.DataException">if deploymentUID does not match a deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.ArgumentNullException">if SPROCText for any sprocs are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CreateNewQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.DateTime,System.String)">
            <summary>
            Attempts to create a new queue item.  If it fails (due to constraint violations)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="expires">expiration date of this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if a new queue item could be created</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.ArgumentException">if expires is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String,System.String)">
            <summary>
            Attempts to reclaim a reset queue item.  If it fails (due to race conditions)
            it returns false, otherwise returns true.
            </summary>
            <param name="record">record containing deployment guid and SQLFSSNum</param>
            <param name="ownerServer">server that should own this queue item</param>
            <param name="offlineBackupPath">full path to the backup file when copied</param>
            <returns>true if the queue item could be reclaimed</returns>
            <exception cref="T:System.ArgumentNullException">if record, ownerServer, or offlineBackupPath are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.RestoreQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem,System.Int32,System.String)">
            <summary>
            Attempts to move a backup from the "waiting for restore" state to the "restoring" state.
            Might fail due to race condition (many restore jobs all running at same time on same
            server), in which case it will return false.
            </summary>
            <param name="itemToRestore">QueueItem to switch to restoring state</param>
            <param name="restoreJobId">id of this restore job</param>
            <param name="restoredDatabaseName">name to use for the restored database</param>
            <returns>true if the queue item was transitioned by this job to restoring state, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if itemToRestore or restoredDatabaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item fails, handles reassigning / cancelling it in the database.
            </summary>
            <param name="item">item to cancel</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FailQueueItemNoThrow(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Calls FailQueueItem but logs and swallows any exceptions.
            </summary>
            <param name="item">item to cancel</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.FinishQueueItem(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Called when processing of a queue item finishes.
            </summary>
            <param name="item">item to finish</param>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentException">if item is not a valid, active queue item</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.CleanupQueue(System.DateTime)">
            <summary>
            Performs the routine per-iteration queue cleanup.  Fails anything that has
            a stale heartbeat and cancels anything that is expired.
            </summary>
            <param name="oldestValidHeartbeat">the time of the oldest valid heartbeat, in UTC</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetNewFSSBackups">
            <summary>
            Retrieves the list of available new FSSBackups (new backups are backups are non-reset backups).
            UT NOTE: Tested in FSSBAckupRecord Tests
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentNullException">on null values from database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetResetFSSBackups">
            <summary>
            Retrieves the list of available reset FSSBackups.
            UT NOTE: Tested in FSSBAckupRecord tests.
            </summary>
            <returns>list of new backups</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.ArgumentNullException">if any of the database fields are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.GetTransferringItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,System.String)">
            <summary>
            Retrieves the QueueItem that is being transferred for a particular backup record
            and owner server.
            </summary>
            <param name="record">record that belongs to the queue item</param>
            <param name="ownerServer">server that owns the queue item</param>
            <returns>QueueItem if found, null otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if record or ownerServer are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateAllHeartbeats(System.String)">
            <summary>
            Updates the heartbeats of all items belonging to this server in the 
            "waiting for restore" state.
            </summary>
            <param name="ownerServer">server the items belong to</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonDataAccess.UpdateQueueState(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.QueueItem.State)">
            <summary>
            Updates the state of a queue item.
            </summary>
            <param name="item">item to update</param>
            <param name="newState">new state to assign to it</param>
            <returns>true if update succeeded</returns>
            <exception cref="T:System.ArgumentNullException">if item is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentRecord">
            <summary>
            This class represents a deployment record in the WstBackup database.
            This includes things like the deploymentname and client name, the times
            during which a database can be pulled, and the times during which a database
            can be processed.  These records live in the "Deployment" table in WstBackup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.#ctor(System.Guid,System.String,System.String,System.DateTime,System.Int32,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="deploymentUid">DeploymentUID</param>
            <param name="deploymentName">name of this deployment</param>
            <param name="clientName">name of the client (partner) this deployment belongs to</param>
            <param name="pullStartTime">start time of a pull, must be in the past</param>
            <param name="pullDurationInMinutes">max duration of a pull window in minutes, &gt;0</param>
            <param name="processingStart">start time of any processing cycle, must be in the past</param>
            <param name="processingCycleLength">length of time for a processing cycle, must be &gt;0</param>
            <param name="processingCycleLengthUnits">units for length of time of a processing cycle</param>
            <param name="requiresReportingDb">whether or not this deployment requires a reporting DB</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:System.ArgumentException">if pullStartTime or processingStart occur in future</exception>
            <exception cref="T:System.ArgumentException">if pullDurationInMinutes or processingCycleLength are .lt. 1</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsPullTimeOkay(System.DateTime)">
            <summary>
            Checks to see if a given time is within a valid pull window.
            </summary>
            <param name="timeToCheck">time to check</param>
            <returns>true if the given time is during a valid pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetPullWindowEnd">
            <summary>
            Gets the time of the end of the most recent pull window.
            </summary>
            <returns>end of the most recent pull window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.GetCycleExpirationTime(System.DateTime,System.Int32)">
            <summary>
            Calculates the cycle expiration time based on any time.  If you want the expiration time
            for the cycle that someTime is in, use cyclesAfterCurrent == 0.  If you want the expiration
            time of cycle one after someTime is in, use cyclesAfterCurrent == 1, etc.
            </summary>
            <param name="someTime">time to calculate expiration for</param>
            <param name="cyclesAfterCurrent">number of cycles after the current to add</param>
            <returns>start of next cycle - 1 minute</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.IsInCycles(System.DateTime,System.Int32)">
            <summary>
            Checks to see if a given time is within a processing cycle window(s).  It will check
            the current processing window plus cyclesBeforeCurrent.
            </summary>
            <param name="timeToCheck">time to check</param>
            <param name="cyclesBeforeCurrent">number of cycles before the current to check</param>
            <returns>true if the given time is during a valid cycle window</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleStartTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the start time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle beginning of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>start time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.FindCycleEndTime(System.DateTime,System.DateTime,System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Finds the end time of the cycle that contains a given time.
            </summary>
            <param name="forTime">time to find the cycle end of</param>
            <param name="cycleStart">start time of any cycle</param>
            <param name="cycleLength">length of a cycle</param>
            <param name="cycleLengthUnits">units of length of the cycle</param>
            <returns>end time of the cycle forTime belongs to</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CalcCycleSpan(System.Int32,Microsoft.Webstore.OfflineProcessing.DeploymentRecord.CycleLengthUnits)">
            <summary>
            Calculates the span of a cycle, given a length and units
            </summary>
            <param name="cycleLength"></param>
            <param name="cycleLengthUnits"></param>
            <returns>timespan of the cycle</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.AddSproc(Microsoft.Webstore.OfflineProcessing.DeploymentSproc)">
            <summary>
            Adds a sproc to the internal list.
            </summary>
            <param name="sproc">sproc to add</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.DeploymentUID">
            <summary>
            The GUID that uniquely identifies this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullStartTime">
            <summary>
            The start time (for a given day) of the time window during which it is
            okay to pull a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.PullDurationInMinutes">
            <summary>
            The duration of the time window each day during which it is okay to pull
            a backup record for hosts in this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingStart">
            <summary>
            The start of any processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLength">
            <summary>
            The magnitude of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ProcessingCycleLengthUnits">
            <summary>
            The units of the length of a single processing cycle.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.RequiresReportingDb">
            <summary>
            Whether or not processing of backups for this deployment requires the
            reporting DB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Sprocs">
            <summary>
            The sprocs configured for this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.Name">
            <summary>
            The name of this deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentRecord.ClientName">
            <summary>
            The name of the client (aka partner) this deployment belongs to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DeploymentSproc">
            <summary>
            This class represents a sproc (really a script) for a deployment.  Sprocs have
            a many to one relationship with deployments and are strongly ordered.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.#ctor(System.Guid,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="deploymentUid">UID of the deployment this belongs to</param>
            <param name="commandText">commandText, can't be null</param>
            <exception cref="T:System.ArgumentNullException">if commandText is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.DeploymentUid">
            <summary>
            The UID of the deployment this sproc belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.DeploymentSproc.CommandText">
            <summary>
            The command text to dump into a SqlCommand object for this sproc.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord">
            <summary>
            This class represents a backup record from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.#ctor(System.Guid,System.Int16,System.String,System.String,System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean)">
            <summary>
            Default constructor for FSSBackupRecord.
            </summary>
            <param name="deploymentUid">guid of the deployment that this record belongs to</param>
            <param name="sqlfssNum">FSSNum that this record belongs to</param>
            <param name="serverName">name of the server that contains the backup</param>
            <param name="serverShare">share on the server that contains the backup</param>
            <param name="created">date and time this backup record was created</param>
            <param name="finished">date and time this backup record was finished</param>
            <param name="backupSizeInMB">size of the backup record in MB</param>
            <param name="deploymentManifestVersion">deployment manifest version that generated this backup</param>
            <param name="usingLiteSpeed">whether or not this backup was created using LiteSpeed</param>
            <exception cref="T:System.ArgumentNullException">if serverName, serverShare, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.QueueItem">
            <summary>
            Contains the QueueItem that represents this FSSBackupRecord.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Deployment">
            <summary>
            Contains the deployment record that belongs to this FSSBackupRecord.
            Isn't guaranteed to be populated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentUID">
            <summary>
            Returns the deploymentUID that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.SQLFSSNum">
            <summary>
            Returns the FSSNum that this backup record belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerName">
            <summary>
            The name of the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.ServerShare">
            <summary>
            The share on the server that contains this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Created">
            <summary>
            Returns the date this backup was Created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.Finished">
            <summary>
            Returns the date this backup was finished.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.BackupSizeInMB">
            <summary>
            The size of this backup record in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.DeploymentManifestVersion">
            <summary>
            The deployment manifest version that generated this backup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FSSBackupRecord.UsingLiteSpeed">
            <summary>
            Whether or not this backup was created using SqlLiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem">
            <summary>
            Represents a long-running synchronous work item.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Run">
            <summary>
            Executes the work item, throws an exception if it fails.
            </summary>
            <returns>true if the job ran to completion, false if it was aborted (due to Cancel)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem.Cancel">
            <summary>
            Cancels the work item.  This will be called from a different thread
            than Run so it needs to be threadsafe.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker">
            <summary>
            This class implements a worker thread that performs periodic heartbeating.  It does
            the following:
            - execute a long-running synchronous operation on a background thread
            - periodically notify the calling thread that we are still alive (so it can heartbeat)
            - return status/success
            - provide a cancel method for the synchronous operation in the background thread
            - provide a timeout for the synchronous operation in the background thread
            
            Technically since we are using events we should implement IDisposable.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.#ctor(System.Int64,System.DateTime,Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate,Microsoft.Webstore.OfflineProcessing.ISynchronousWorkItem)">
            <summary>
            Constructor for the HeartbeatingWorker.
            </summary>
            <param name="heartbeatIntervalInMS">interval in MS between heartbeats, minimum 1000</param>
            <param name="endTime">the time at which to end the background operation</param>
            <param name="heartbeatDelegate">delegate to call back whenever we heartbeat</param>
            <param name="workItem">item that implements the long-running synchronous work</param>
            <exception cref="T:System.ArgumentException">if heartbeatIntervalInMS is less than 1000</exception>
            <exception cref="T:System.ArgumentException">if endTime is in the past</exception>
            <exception cref="T:System.ArgumentNullException">if heartbeatDelegate or workItem are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Finalize">
            <summary>
            Finalizer, needs to call dispose.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatTimerCallback(System.Object)">
            <summary>
            The callback used by the timer to indicate that we need to do periodic processing.
            This is called from an anonymous background threadpool thread.
            </summary>
            <param name="arg">ignored</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.CancelAbort">
            <summary>
            This is called to attempt cancelling and then aborting the thread.  Can only be
            called from the main thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Run">
            <summary>
            This runs the background synchronous worker and starts heartbeating.  When this
            returns the result of the operation can be determined by checking OperationResult
            and OperationException.
            
            Here are what the different status means:
             NotInitialized - something went wrong in this library, report the error to us
             Success - job ran to completion and all heartbeats occurred as expected
             Cancel - job expired or heartbeat delegate returned false and Cancel method worked correctly
             Abort - job expired or heartbeat delegate returned false and Cancel method didn't work (check OperationException)
             Exception - workItem.Run method generated an exception (check OperationException)          
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.ThreadStart">
            <summary>
            This method implements the background worker thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose">
            <summary>
            Tears down this object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.Dispose(System.Boolean)">
            <summary>
            Tears down this object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.EndTime">
            <summary>
            The time at which this copy operation should end.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatIntervalInMS">
            <summary>
            The heartbeat interval in MS to use.  When the thread is running a timer
            will be created with this interval and the HeartbeatEvent will be set
            everytime the timer goes off.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationResult">
            <summary>
            The result of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.OperationException">
            <summary>
            If an exception was generated, a copy of the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.HeartbeatingWorker.HeartbeatDelegate">
            <summary>
            This is called to perform heartbeating.  This will always be called in the context
            of the main thread.
            </summary>
            <returns>true if successful and loop should continue, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItem">
            <summary>
            This class represents a single backup record in the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItem.#ctor(System.Guid,System.Int16,System.String,System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.String,System.Boolean,System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates a new QueueItem.
            </summary>
            <param name="deploymentUid">guid of the deployment this queue item belongs to</param>
            <param name="fssNum">fssNum this item belongs to</param>
            <param name="ownerServer">name of the server that owns this item</param>
            <param name="iterationNumber">FSS iteration number this item belongs to</param>
            <param name="currentState">current state of the queue item</param>
            <param name="failureCount">current failure count of the queue item</param>
            <param name="created">time this item was created in UTC</param>
            <param name="expires">time this item expires in UTC</param>
            <param name="lastHeartbeat">the last heartbeat time of this item</param>
            <param name="enqueueTime">the time this item was added to the active queue</param>
            <param name="path">path (if exists) to the backup file on OwnerServer</param>
            <param name="deploymentManifestVersion">deployment manifest version of the backup record this queue item is for</param>
            <param name="restoredDatabaseName">name of the restored database for this item</param>
            <param name="usingLiteSpeed">whether or not the backup for this queue item was made using SQLLiteSpeed</param>
            <param name="backupFinishDate">date and time the backup finished</param>
            <param name="backupServer">server the backup was created on</param>
            <param name="backupStartDate">date and time the backup started</param>
            <exception cref="T:System.ArgumentNullException">if ownerServer, path, restoredDatabaseName, backupServer, or deploymentManifestVersion are null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.RestoredDatabaseName">
            <summary>
            The name of the database once it has been restored by OP.  May be empty if it hasn't been restored
            yet.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentManifestVersion">
            <summary>
            The deployment manifest version of the backup record this queue item is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Path">
            <summary>
            The path to the backup file on the offline processing server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.DeploymentUid">
            <summary>
            The DeploymentUID of the deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FSSNum">
            <summary>
            The SQLFSSNum of the FSS/deployment that this queue item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.OwnerServer">
            <summary>
            The name of the server that currently owns this queue item, can be empty if not owned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.IterationNumber">
            <summary>
            The iteration number, within this FSS/Deployment, of this queue item.  This
            is to enforce the uniqueness constraint that only a single queue item can
            exist at any time for a given FSS/Deployment pair.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.FailureCount">
            <summary>
            The number of times this queue item has been failed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.CurrentState">
            <summary>
            The current state of this QueueItem.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Created">
            <summary>
            The time this queue item was created.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.Expires">
            <summary>
            The time this queue item expires (can be in the past if it already expired).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.LastHeartBeat">
            <summary>
            The time this queue item was last heartbeated.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.EnqueueTime">
            <summary>
            The time this queue item was last put into the queue (or bumped to the back
            if it was failed).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.UsingLiteSpeed">
            <summary>
            Whether or not the backup for this item was made using Lite Speed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupServer">
            <summary>
            The server that generated the backup belonging to this queue item.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupStartDate">
            <summary>
            The time the backup was started.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItem.BackupFinishDate">
            <summary>
            The time the backup for this queue item was finished.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.QueueItemSet">
            <summary>
            This class represents a set of backup records from the WstBackup database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.QueueItem})">
            <summary>
            Constructor which takes an enumeration of records.
            </summary>
            <param name="newRecords">enumeration of records to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem)">
            <summary>
            Constructor which takes a single record.
            </summary>
            <param name="newRecord">single record to initialize the set with</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByServer(System.String,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the set of all backup records in WstBackup database for a given server.
            </summary>
            <param name="serverName">name of the server to retrieve QueueItems for</param>
            <param name="backupDb">backup database to use for retrieving the recordset</param>
            <returns>a set of QueueItems that are active on that server</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on WSTClient exception</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByPath(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular filepath.
            </summary>
            <param name="filePath">path of item to retrieve</param>
            <returns>QueueItem that belongs to that filePath, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetByRestoredDatabaseName(System.String)">
            <summary>
            Retrieves the QueueItem that has a particular restored database name.
            </summary>
            <param name="dbName">database name of the item to retrieve</param>
            <returns>QueueItem that belongs to the restored database name, null if not found</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByPath">
            <summary>
            Retrieves the items in the set, indexed by path.
            </summary>
            <returns>the items in this set, indexed by path</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.QueueItemSet.GetItemsByRestoredDbName">
            <summary>
            Retrieves the items in the set, indexed by restored Db name.
            </summary>
            <returns>the items in this set, indexed by restored db name</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Count">
            <summary>
            Number of records in this set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.QueueItemSet.Item(System.Int32)">
            <summary>
            Indexor for the set.
            </summary>
            <param name="i">0-based index into the array</param>
            <returns>requested item in the array</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml">
            <summary>
            This class implements round-tripping to and from XML for collector job arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.#ctor">
            <summary>
            Creates a new object with default arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.CreateFromXML(System.String,System.String)">
            <summary>
            This method parses a string containing xml conforming to CollectorJobArgumentsSchema.xsd
            and returns a new CollectorJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <param name="schema">string containing the XSD schema</param>
            <returns>newly created CollectorJobArgumentsXml from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or schema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.BackupPath">
            <summary>
            The path where pulled backups should be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArgumentsXml.Xml">
            <summary>
            Converts the current arguments into valid XML.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller">
            <summary>
            Category installer for the CommonJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CommonJobEvents">
            <summary>
            Events in the CommonJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlErrorValue">
            <summary>
            EventDefinition for SqlError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String)">
            <summary>
            Method to log an event of type SqlError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogSqlError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SqlError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstErrorValue">
            <summary>
            EventDefinition for WstError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String)">
            <summary>
            Method to log an event of type WstError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogWstError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type WstError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseErrorValue">
            <summary>
            EventDefinition for DatabaseError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseError.
            </summary>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogDatabaseError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="sqlStr">Argument sqlStr for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatErrorValue">
            <summary>
            EventDefinition for HeartbeatError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String)">
            <summary>
            Method to log an event of type HeartbeatError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogHeartbeatError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type HeartbeatError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentErrorValue">
            <summary>
            EventDefinition for GetDeploymentError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String)">
            <summary>
            Method to log an event of type GetDeploymentError.
            </summary>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetDeploymentError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetDeploymentError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="deploymentGuid">Argument deploymentGuid for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemErrorValue">
            <summary>
            EventDefinition for CreateNewQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type CreateNewQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogCreateNewQueueItemError(System.String,System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type CreateNewQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="expires">Argument expires for formatting the event text.</param>
            <param name="backupPath">Argument backupPath for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemErrorValue">
            <summary>
            EventDefinition for GetTransferringItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type GetTransferringItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogGetTransferringItemError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type GetTransferringItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="ownerServer">Argument ownerServer for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemErrorValue">
            <summary>
            EventDefinition for ReclaimQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type ReclaimQueueItemError.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogReclaimQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type ReclaimQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsErrorValue">
            <summary>
            EventDefinition for UpdateAllHeartbeatsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError.
            </summary>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateAllHeartbeatsError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateAllHeartbeatsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="serverName">Argument serverName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateErrorValue">
            <summary>
            EventDefinition for UpdateQueueStateError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String)">
            <summary>
            Method to log an event of type UpdateQueueStateError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogUpdateQueueStateError(System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type UpdateQueueStateError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemErrorValue">
            <summary>
            EventDefinition for FailQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FailQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFailQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FailQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemErrorValue">
            <summary>
            EventDefinition for RestoreQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String)">
            <summary>
            Method to log an event of type RestoreQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogRestoreQueueItemError(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type RestoreQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="restoreJobId">Argument restoreJobId for formatting the event text.</param>
            <param name="restoredDatabaseName">Argument restoredDatabaseName for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemErrorValue">
            <summary>
            EventDefinition for FinishQueueItemError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String)">
            <summary>
            Method to log an event of type FinishQueueItemError.
            </summary>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.LogFinishQueueItemError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FinishQueueItemError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="item">Argument item for formatting the event text.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.SqlError">
            <summary>
              Gets the EventDefinition for the SqlError.
            </summary>
            <value>The EventDefinition for the SqlError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.WstError">
            <summary>
              Gets the EventDefinition for the WstError.
            </summary>
            <value>The EventDefinition for the WstError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.DatabaseError">
            <summary>
              Gets the EventDefinition for the DatabaseError.
            </summary>
            <value>The EventDefinition for the DatabaseError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.HeartbeatError">
            <summary>
              Gets the EventDefinition for the HeartbeatError.
            </summary>
            <value>The EventDefinition for the HeartbeatError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetDeploymentError">
            <summary>
              Gets the EventDefinition for the GetDeploymentError.
            </summary>
            <value>The EventDefinition for the GetDeploymentError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.CreateNewQueueItemError">
            <summary>
              Gets the EventDefinition for the CreateNewQueueItemError.
            </summary>
            <value>The EventDefinition for the CreateNewQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.GetTransferringItemError">
            <summary>
              Gets the EventDefinition for the GetTransferringItemError.
            </summary>
            <value>The EventDefinition for the GetTransferringItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.ReclaimQueueItemError">
            <summary>
              Gets the EventDefinition for the ReclaimQueueItemError.
            </summary>
            <value>The EventDefinition for the ReclaimQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateAllHeartbeatsError">
            <summary>
              Gets the EventDefinition for the UpdateAllHeartbeatsError.
            </summary>
            <value>The EventDefinition for the UpdateAllHeartbeatsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.UpdateQueueStateError">
            <summary>
              Gets the EventDefinition for the UpdateQueueStateError.
            </summary>
            <value>The EventDefinition for the UpdateQueueStateError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FailQueueItemError">
            <summary>
              Gets the EventDefinition for the FailQueueItemError.
            </summary>
            <value>The EventDefinition for the FailQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.RestoreQueueItemError">
            <summary>
              Gets the EventDefinition for the RestoreQueueItemError.
            </summary>
            <value>The EventDefinition for the RestoreQueueItemError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CommonJobEvents.FinishQueueItemError">
            <summary>
              Gets the EventDefinition for the FinishQueueItemError.
            </summary>
            <value>The EventDefinition for the FinishQueueItemError</value>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FileCopyWorker">
            <summary>
            This class implements the file copy worker.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.#ctor(System.String,System.String)">
            <summary>
            Constructor for the FileCopyWorker.
            </summary>
            <param name="copySource">source file and path</param>
            <param name="copyTarget">target file and path</param>
            <exception cref="T:System.ArgumentNullException">if copySource or copyTarget are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.Run">
            <summary>
            Performs the file copy.
            </summary>
            <returns>true, always</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.Cancel">
            <summary>
            doesn't do anything, we can't cancel a copy
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.CopySource">
            <summary>
            The source path of the file to copy.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.FileCopyWorker.CopyTarget">
            <summary>
            The target path to copy the file to.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstCollectorJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing collector job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstCollectorJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing collector job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstCollectorJob.ValidateArgs(System.String)">
            <summary>
            All we do is make sure the CollectorJobArguments can be created.  We don't
            validate the path at this stage because we are the coordinator and who
            knows if the path will be valid on the worker machines?
            </summary>
            <param name="userArgs">arguments conforming to CollectorJobArgumentsSchema.xsd</param>
            <exception cref="T:System.Xml.XmlException">if userArgs cannot be validated or are missing components</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments">
            <summary>
            This class represents the arguments passed to the collector job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to CollectorJobArgumentsSchema.xsd
            and returns a new CollectorJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml is null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobArguments.BackupPath">
            <summary>
            The path where pulled backups should be stored.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobResources.CollectorJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;CollectorJobArguments&quot;
                targetNamespace=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:CollectorJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;BackupJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for backup job settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:co [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Creates a new job worker from xml arguments.
            </summary>
            <param name="xmlArgs">arguments in xml conforming to CollectorJobArgumentsSchema.xsd</param>
            <returns>newly created CollectorJobWorker</returns>
            <exception cref="T:System.Xml.XmlException">if xml fails to validate</exception>
            <exception cref="T:System.ArgumentNullException">if xmlArgs is null</exception>
            <exception cref="T:System.IO.IOException">if backup directory cannot be created</exception>
            <exception cref="T:System.NotSupportedException">if backup directory is not a recognizable path</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.#ctor(System.String)">
            <summary>
            Internal constructor, instead use CreateFromXmlArguments since that performs validation.
            </summary>
            <param name="backupPath">path for this worker to use, can't be null</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.DoIteration(System.Boolean)">
            <summary>
            Performs one iteration of the service.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the number of milliseconds that the job should sleep between iterations.
            </summary>
            <returns>number of milliseconds the job should sleep between iterations</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateCopyWorker(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Creates a FileCopyWorker and populates it with all the appropriate values.
            </summary>
            <param name="record">record to use for creating the copy worker</param>
            <returns>newly created FileCopyWorker</returns>
            <exception cref="T:System.ArgumentNullException">if record or record.Deployment are null</exception>
            <exception cref="T:System.ArgumentException">if heartbeat interval is less than 1</exception>
            <exception cref="T:System.ArgumentException">if calculated pull window enddTime is in the past</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ClaimNewBackup(Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the next available backup record that a queue item can
            be created for, creates the queue item, and returns success/failure.
            If successful stores the backup record to pull in backupToPull and stores
            the deployment it belongs to in deploymentToPull.
            </summary>
            <param name="db">database to use</param>
            <returns>null if couldn't be claimed, FSSBackupRecord otherwise</returns>
            <exception cref="T:System.ArgumentNullException">if db is null</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
            <exception cref="T:System.Data.DataException">if record does not have a matching deployment in the database</exception>
            <exception cref="T:System.Data.DataException">if newly created queue item cannot immediately be requeried</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.HaveEnoughDiskSpace(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates whether or not we have enough disk space to pull a backup record.
            </summary>
            <param name="record">record to use for disk space calculations</param>
            <returns>true if we probably have enough disk space for this record</returns>
            <exception cref="T:System.ArgumentNullException">if record is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetAndValidateDeployment(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to retrieve the DeploymentRecord for a backup, and validates that it is
            appropriate to pull the backup (the backup is within the current cycle and the current
            time is within the deployment pulling window).  If success it stores the
            deployment record in record.Deployment and returns true.
            </summary>
            <param name="record">record to check</param>
            <param name="db">db to use for retrieving deployment info</param>
            <returns>true if it was possible to get and validate the deployment record</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null</exception>
            <exception cref="T:System.Data.DataException">if record does not have a matching deployment in the database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database problem</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on Wst problem</exception>
            <exception cref="T:System.ArgumentException">if any of the database values are incorrect</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CalculateQueueItemExpiration(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates the expiration time for a new queue item based on a backup record.
            The reason this is tricky is because we accept backup records from the current
            cycle or the previous cycle.  So what we need to first try taking the end time
            of the previous cycle and see if that is in the past, and if so try taking
            the end time of the current cycle.
            </summary>
            <param name="record">backup record to try creating queue item for</param>
            <returns>expiration time for the new queue item</returns>
            <exception cref="T:System.ArgumentNullException">if record is null, or record.Deployment</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.CreateQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to create a new QueueItem for a backup record.  Might fail
            if some other collector beat us to it.
            </summary>
            <param name="record">backup record to try creating queue item for</param>
            <param name="db">db to use for creating the new queue item</param>
            <returns>null if someone beat us to it</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null, or record.Deployment</exception>
            <exception cref="T:System.ArgumentException">if calculated expiration date is in the past</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
            <exception cref="T:System.Data.DataException">if the newly created queueitem can't be immediately queried</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ReclaimQueueItem(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Attempts to reclaim an existing reset QueueItem for a backup record.  Might fail
            if some other collector beat us to it.
            </summary>
            <param name="record">backup record to reclaiming queue item for</param>
            <param name="db">db to use for reclaiming the new queue item</param>
            <returns>null if someone beat us to it</returns>
            <exception cref="T:System.ArgumentNullException">if record or db are null, or record.Deployment</exception>
            <exception cref="T:System.Data.DataException">if we are not able to query the newly reclaimed queue item</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.GetPathFromRecord(Microsoft.Webstore.OfflineProcessing.FSSBackupRecord)">
            <summary>
            Calculates the path on local disk for a file that a given backup record
            will be copied to.
            </summary>
            <param name="record">record</param>
            <returns>full path on local disk</returns>
            <exception cref="T:System.ArgumentNullException">if record is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.ClaimResetBackup(Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Retrieves the next available reset backup record that a queue item can
            be created for, claims the queue item, and returns a result code.
            </summary>
            <param name="db">database to use</param>
            <returns>a backup record if one could be claimed, null otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.UpdateOnDiskBackup(System.String,Microsoft.Webstore.OfflineProcessing.QueueItemSet,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Performs the once-per-iteration processing on an on-disk backup.  This consists of checking
            to see if the backup should still be around (if it exists in the queue in a non-restored state)
            and heartbeating it if necessary.  Increments restoreWaitingCount for each backup that is
            valid and waiting for restore.
            </summary>
            <param name="backupItem">path to the backup to update</param>
            <param name="ourItems">collection of all active queue items for our service</param>
            <param name="backupDb">backup database to use for heartbeating, if needed</param>
            <exception cref="T:System.ArgumentNullException">if backupItem, ourItems, or backupDb are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on wst error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.FindBackupsForPath(System.String)">
            <summary>
            Finds all of the backup files in a particular path.
            We don't use nested sub-directories, to keep things simple.  So
            this really only searches the path name passed in and none of its
            sub-paths.  Additionally, we only look for *.bak as backup files.
            </summary>
            <param name="backupPath">path to find files in</param>
            <returns>list of discovered backup files</returns>
            <exception cref="T:System.ArgumentNullException">if backupPath is null</exception>
            <exception cref="T:System.ArgumentException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.Security.SecurityException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.IO.PathTooLongException">from DirectoryInfo ctor</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">from DirectoryInfo.GetFiles</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.IsReportingDbInstalled">
            <summary>
            Determines whether or not the reporting DB infrastructure is installed and working
            on this server.
            </summary>
            <returns>true if reporting DB is installed, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.BackupPath">
            <summary>
            Retrieves the backup path as defined by the user arguments.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.MaxWaitingForRestore">
            <summary>
            Maximum number of backups on disk that can be in the state "waiting for restore".
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.HeartbeatIntervalInMinutes">
            <summary>
            Interval in minutes between heartbeating items we own.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.MaxMissedHeartbeats">
            <summary>
            Maximum number of missed heartbeats before an item gets cancelled.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.WaitingForRestoreCount">
            <summary>
            After an iteration, the number of backups on disk waiting for restore.
            Only exposed for testing purposes, otherwise its an internal.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobWorker.FreeSpaceCalc">
            <summary>
            The FreeSpaceCalculator used for calculating free space.  The only reason
            we expose this as a property is to allow us to provide a mock for it in
            the unit tests, because it is notoriously difficult to create low-space conditions
            for unit tests and have everything work correctly.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Heartbeater">
            <summary>
            This class is used for heartbeating during a long synchronous copy operation.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.#ctor(Microsoft.Webstore.OfflineProcessing.QueueItem,Microsoft.Webstore.OfflineProcessing.CommonDataAccess)">
            <summary>
            Constructor
            </summary>
            <param name="itemToHeartbeat">queue item we are copying that needs to be heartbeated</param>
            <param name="backupDb">database to heartbeat</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.Heartbeater.DoHeartbeat">
            <summary>
            This method performs the heartbeat.
            </summary>
            <returns>true if heartbeating succeeded</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobCategoryInstaller">
            <summary>
            Category installer for the CollectorJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents">
            <summary>
            Events in the CollectorJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LiteSpeedBackupSkippedValue">
            <summary>
            EventDefinition for LiteSpeedBackupSkipped
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogLiteSpeedBackupSkipped(System.String)">
            <summary>
            Method to log an event of type LiteSpeedBackupSkipped.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogLiteSpeedBackupSkipped(System.String,System.Exception)">
            <summary>
            Method to log an event of type LiteSpeedBackupSkipped with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ReportingBackupSkippedValue">
            <summary>
            EventDefinition for ReportingBackupSkipped
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogReportingBackupSkipped(System.String)">
            <summary>
            Method to log an event of type ReportingBackupSkipped.
            </summary>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogReportingBackupSkipped(System.String,System.Exception)">
            <summary>
            Method to log an event of type ReportingBackupSkipped with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="backupRecord">Argument backupRecord for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ServerNotInMetaDataValue">
            <summary>
            EventDefinition for ServerNotInMetaData
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogServerNotInMetaData(System.String)">
            <summary>
            Method to log an event of type ServerNotInMetaData.
            </summary>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogServerNotInMetaData(System.String,System.Exception)">
            <summary>
            Method to log an event of type ServerNotInMetaData with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="server">Argument server for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.FileDeleteErrorValue">
            <summary>
            EventDefinition for FileDeleteError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogFileDeleteError(System.String,System.String)">
            <summary>
            Method to log an event of type FileDeleteError.
            </summary>
            <param name="file">Argument file for formatting the event text.</param>
            <param name="ex">Argument ex for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LogFileDeleteError(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type FileDeleteError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="file">Argument file for formatting the event text.</param>
            <param name="ex">Argument ex for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.LiteSpeedBackupSkipped">
            <summary>
              Gets the EventDefinition for the LiteSpeedBackupSkipped.
            </summary>
            <value>The EventDefinition for the LiteSpeedBackupSkipped</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ReportingBackupSkipped">
            <summary>
              Gets the EventDefinition for the ReportingBackupSkipped.
            </summary>
            <value>The EventDefinition for the ReportingBackupSkipped</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.ServerNotInMetaData">
            <summary>
              Gets the EventDefinition for the ServerNotInMetaData.
            </summary>
            <value>The EventDefinition for the ServerNotInMetaData</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.CollectorJobEvents.FileDeleteError">
            <summary>
              Gets the EventDefinition for the FileDeleteError.
            </summary>
            <value>The EventDefinition for the FileDeleteError</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstAggregationJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstAggregationJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstAggregationJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobArgumentsXml.#ctor">
            <summary>
            Creates a new object with default values.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.AggregationJobWorker">
            <summary>
            This class contains the implementation of the actual work we do in this job.  
            The goal is that all policy and decision making logic stays in this job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobWorker.DoIteration(System.Boolean)">
            <summary>
            Copies all new data from the WstStaging servers to the WstReporting servers
            </summary>
            <param name="asConsole">This parameter is not currently used.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobWorker.GetSleepTimeInMS">
            <summary>
            Amount of time Aggregation Job should wait in between runs.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.Properties.AggregationJobResources.AggregationJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
              &lt;xs:element name=&quot;WstAggregationJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for the WstAggregationJob settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:complexType&gt;
                  &lt;xs:sequence&gt;
                    &lt;xs:element name=&quot;SsisAggregationPackage&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;1&quot;&gt;
                      &lt;xs:annotation&gt;
                     [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.AggregationJobCategoryInstaller">
            <summary>
            Category installer for the WstAggregationJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents">
            <summary>
            Events in the AggregationJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionDataCenterWarningValue">
            <summary>
            EventDefinition for JobExecutionDataCenterWarning
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionDataCenterWarning(System.String)">
            <summary>
            Method to log an event of type JobExecutionDataCenterWarning.
            </summary>
            <param name="message">Argument message for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.LogJobExecutionDataCenterWarning(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionDataCenterWarning with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="message">Argument message for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.AggregationJobEvents.JobExecutionDataCenterWarning">
            <summary>
              Gets the EventDefinition for the JobExecutionDataCenterWarning.
            </summary>
            <value>The EventDefinition for the JobExecutionDataCenterWarning</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstSampleJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstSampleJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.SampleJob.EventLogHelper">
            <summary>
            This class is used to log events over given period of time.  Call StartListening
            to begin listening to the specified event log.  If a file name is provided, then 
            the events will be saved to a file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.SampleJob.EventLog_Reader">
            <summary>
            This is a helper class that is used to read
            the EventLog for webstore related events.
            The events are read form the ApplicationLog, 
            and are filtered on webstore.
            All the members of this class are static.
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Testing.SampleJob.SampleJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            
            </summary>
            <param name="inputSet"></param>
            <param name="outputSet"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstBackupJob.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstBackupJob</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Webstore.OfflineProcessing.NeedFullException">
            <summary>
            This exception is what we throw when we are trying to do a log backup but a full is required.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupMaker">
            <summary>
            This class handles creating a backup and performing any backup
            calculations (like how much space on disk it will take, etc).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupMaker.BackupSetName">
            <summary>
            Use this to describe the backups so that they can be differentiated
            from other backups.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.BuildBackupCommand(System.String)">
            <summary>
            Creates the backup command string to use for a given backup file.
            </summary>
            <param name="backupFile">path to the backup file to create</param>
            <returns>SQL command string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database resides on</param>
            <param name="databaseName">name of the database to backup</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.DoBackup(System.String)">
            <summary>
            Performs a backup.
            </summary>
            <param name="newBackupPath">path and name of the backup file to create</param>
            <exception cref="T:System.ArgumentNullException">if called with null newBackupPath</exception>
            <exception cref="T:System.IO.FileNotFoundException">if the backup file does not exist after backup succeeds</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on any database errors</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.BuildMasterConnectionString">
            <summary>
            Builds the connection string to use for the SqlConnection.
            </summary>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.BuildConnectionString">
            <summary>
            Returns the connection string to use for this SQL server.
            </summary>
            <returns>connection string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.GetFreeSpaceRequired">
            <summary>
            Retrieves the approximate amount of free space required for the backup.
            </summary>
            <returns>approximate size of the backup, in bytes</returns>
            <exception cref="T:System.Data.DataException">if expected results are not returned from the database query</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on SQL error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupMaker.SpaceUsedStringToInt64(System.String)">
            <summary>
            This helper function converts the output of the sp_spaceused SPROC to an actual number,
            since it is normally a string something like "553 KB".
            </summary>
            <param name="spaceUsed">string back from sp_spaceused</param>
            <returns>Int64 in bytes</returns>
            <exception cref="T:System.Data.DataException">if spaceUsed is not in KB</exception>
            <exception cref="T:System.ArgumentNullException">if spaceUsed is null</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupMaker.FreeSpaceRequired">
            <summary>
            The amount of free space required on disk for the backup file this will create.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DataAccess">
            <summary>
            This class is a common base class for WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetBackupPartition">
            <summary>
            When we get to supporting partitions, this will be used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DataAccess.GetConnection">
            <summary>
            The connection comes out of centralized settings.  If there is no site\deployment
            name specified then we default to "WstBackup".
            </summary>
            <returns>a newly created WstConnection object</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet">
            <summary>
            This class contains the logic to read and retrieve database template information.
            We only really need to know stripe path and share, and we only need to retrieve
            them by template name.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.#ctor">
            <summary>
            Default constructor, yields a new template set.  Template contents
            will be populated on demand or when Refresh is called.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.Refresh">
            <summary>
            Called to refresh the set of templates from the database.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.GetShare(System.String)">
            <summary>
            Retrieves the stripe share for a given template.  Null if not found.
            </summary>
            <param name="templateName">name of the template to retrieve stripe info for</param>
            <returns>stripe share (doesn't include server name), null if templateName not found</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.GetPath(System.String)">
            <summary>
            Retrieves the stripe path for a given template.  Null if not found.
            </summary>
            <param name="templateName">name of the template to retrieve stripe info for</param>
            <returns>stripe path (doesn't include server name), null if templateName not found</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.DatabaseTemplateSet.DatabaseTemplateInfo">
            <summary>
            Represents all of the info we store about a single database template.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator">
            <summary>
            This interface represents a free space calculator.  It is here strictly for
            the purposes of enabling testability.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IFreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the amount of free space left in a directory.
            </summary>
            <param name="dir">path to the directory</param>
            <returns>amount of free space left in directory, in bytes</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator">
            <summary>
            This class is for convenience sake only, to enable unit testing,
            because it is notoriously hard to simulate low free space conditions
            in unit tests.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FreeSpaceCalculator.GetFromDir(System.String)">
            <summary>
            Calculates the free space from a directory.
            </summary>
            <param name="dir">directory to use for free space calculation</param>
            <returns>number of bytes free space</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.FullBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IBackupConfig">
            <summary>
            This interface exists only to assist with testing.  There is really only one
            production code implementation of it.  See BackupConfig for the real
            definitive implementation and description of the properties.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedFullBackupMaker">
            <summary>
            This class implements the SqlLiteSpeed backup maker.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedFullBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedLogBackupMaker">
            <summary>
            This class implements the SqlLiteSpeed backup maker for log files.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedLogBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils">
            <summary>
            This class contains some utilities for performing basic checks on SQLLiteSpeed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsInstalled(System.String)">
            <summary>
            Determines whether or not SQLLiteSpeed is installed on a given server.
            </summary>
            <param name="serverName">name of the server to check</param>
            <returns>true if SQLLiteSpeed is installed, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
            <exception cref="T:System.ArgumentNullException">if serverName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.String)">
            <summary>
            Determines whether or not SqlLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentName">name of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LiteSpeedUtils.IsEnabled(System.Guid)">
            <summary>
            Determines whether or not SQLLiteSpeed is enabled for a particular deployment.
            </summary>
            <param name="deploymentUID">Guid of the deployment</param>
            <returns>true if LiteSpeed is enabled for this deployment</returns>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on webstore error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.LogBackupMaker.#ctor(System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <param name="databaseName">name of the database to back up</param>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName is null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.IOPJobWorker">
            <summary>
            This is the minimal interface for a worker class to implement.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.DoIteration(System.Boolean)">
            <summary>
            Executes an iteration of the job.
            </summary>
            <param name="asConsole">boolean indicating whether or not this job is being run as console</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.IOPJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieves the amount of time that the job should sleep between iterations.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            This is a trivial init method which simply populates arguments in the base class and stores user args.
            </summary>
            <param name="ja"></param>
            <param name="localMachine"></param>
            <param name="location"></param>
            <param name="userArgs"></param>
            <param name="batchId"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            This job runs as a continuous loop for ever (well at least until someone kills it or it dies of natural
            causes).  The basic idea is:
             - do some stuff
             - wait awhile
             - loop back
            This method implements that basic logic.  All of the real logic of the job is contained in the class
            IOPJobWorker.
            </summary>
            <param name="inputSet">not used, the job figures out its own PartitionSet based on the machine it is running on</param>
            <param name="outputSet">not used</param>
            <param name="statusCode">return value</param>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJobWorker.CreateWorkerFromXmlArguments(System.String)">
            <summary>
            Override this method in your subclass to create the worker.
            </summary>
            <param name="userArgs">arguments as xml passed in from the job framework</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstOPJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            This is the Job Coordinator starting point routine for an OfflineProcessing job.
            </summary>
            <param name="jobName">name of the job, defined by the job description XML</param>
            <param name="dop">degree of parallelism, needs to be something really high</param>
            <param name="batchOption">doesn't matter since location must be ServerRole</param>
            <param name="location">must be ServerRole</param>
            <param name="userArguments">user arguments, should be XML conforming to schema and defined by the job description XML</param>
            <returns>return code, 0 indicates success</returns>
            <exception cref="T:System.Xml.XmlException">if userArguments is not a valid Xml document</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if location type is not ServerRole</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.ValidateArgs(System.String)">
            <summary>
            This method performs validation of the user arguments at the JobCoordinator level.
            </summary>
            <param name="userArgs">arguments passed in from the user</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.GetWorkerType">
            <summary>
            Returns a type object for the worker to instantiate.
            </summary>
            <returns>type object describing the IJobStep worker</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.RunAsConsole(System.String[])">
            <summary>
            Call this to see if the application should run at the console.  It so it will see
            the first arg as "-console", the second arg as "-argfile", and the third arg will be
            the XML file to read for user args.
            </summary>
            <param name="args">commandline arguments</param>
            <returns>true if it was run as console, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.WstOPJob.LogException(System.Exception)">
            <summary>
            This is called if an exception occurs from calling job.Run.  You can provide
            your own implementation in a subclass if you want to log any errors.
            </summary>
            <param name="ex">exception that was generatd, will be rethrown</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.SqlBackupFile">
            <summary>
            This class represents a SQL backup file and contains methods to manipulate its contents.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SqlBackupFile object for a given filepath.
            </summary>
            <param name="filePath">path to the SqlBackupFile</param>
            <param name="useLiteSpeed">whether or not we should use LiteSpeed to process the backupfile</param>
            <exception cref="T:System.ArgumentNullException">if filePath is empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDatabaseName">
            <summary>
            Retrieves the original name of this database.
            </summary>
            <returns>original name of this database</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetServerName">
            <summary>
            Retrieves the original server name this database was on.
            </summary>
            <returns>name of the server that generated this backup</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetRestoredSizeInBytes">
            <summary>
            Retrieves the size of this backup, when restored, in bytes.
            </summary>
            <returns>size of the backup, when restored, in bytes</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupFilelist">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.ReadBackupHeader">
            <summary>
            Reads in all the interesting contents from the backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetDataFiles">
            <summary>
            Returns an enumeration of all logical data file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.GetLogFiles">
            <summary>
            Returns an enumeration of all logical log file names in the backup.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupFile.FilePath">
            <summary>
            The filepath of this backup file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupConfig">
            <summary>
            This class represents the backup job configuration for a single
            database on a server.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.#cctor">
            <summary>
            Static constructor, creates a new DatabaseTemplateSet.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.#ctor(Microsoft.Webstore.OfflineProcessing.BackupJobArguments,Microsoft.Webstore.MetaData.WebstoreDatabase,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Default constructor
            </summary>
            <param name="args">arguments to the job, used for determining schedule etc</param>
            <param name="db">database this configuration is for</param>
            <param name="shouldBackup">whether or not this database should be backed up,should be determined from job config</param>
            <param name="shouldManageRetention">whether or not we should manage retention of backups for this database</param>
            <param name="shouldOfflineProcess">whether or not this database should be offline processed, should be determined from job config and backup policy</param>
            <exception cref="T:System.ArgumentNullException">if args or db is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if shouldBackup is false but shouldOfflineProcess is true</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.FigureOutStripePath(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining the stripe path for a given database.
            </summary>
            <param name="db"></param>
            <returns>the path on local machine for the stripe</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfig.FigureOutStripeShare(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining the stripe share for a given database.
            </summary>
            <param name="db"></param>
            <returns>the path on network for the stripe</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">if a stripe UID was found without a name</exception>
            <exception cref="T:Microsoft.Webstore.WstClient.WstException">on error reaching WstConfig database</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on error reaching WstConfig database</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.TemplateSet">
            <summary>
            Static instance of DatabaseTemplateSet for use in determining stripe info.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.NextFullStart">
            <summary>
            The next time this database should be backed up with a full, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.LastFullStart">
            <summary>
            The last time this database should have been backed up with a full, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.NextLogStart">
            <summary>
            The next time this database should be backed up with a log, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.LastLogStart">
            <summary>
            The last time this database should have been backed up with a log, according to the schedule.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.Database">
            <summary>
            The database that this backup configuration is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldBackup">
            <summary>
            Whether or not this database should be backed up.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldOfflineProcess">
            <summary>
            Whether or not this database should be sent for offline processing after
            being backed up.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldManageRecoveryMode">
            <summary>
            Whether or not we should be managing the recovery mode of this database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ShouldManageRetention">
            <summary>
            Whether or not we should be managing the backup retention for this database.  We might want to manage
            retention policy but not actually back up a database - for instance in the case of a secondary.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ForceFullBackup">
            <summary>
            Whether or not a full backup needs to be triggered regardless of timing.
            Defaults to false but gets set to true whenever we toggle recovery mode
            from simple to full.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.StripeShare">
            <summary>
            The stripe share/path where this database should store its backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.StripePath">
            <summary>
            The strip path (local) where this database should store its backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.DatabaseName">
            <summary>
            The name of the database this backup config is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.DeploymentUID">
            <summary>
            The UID of the deployment this database belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.FSSNum">
            <summary>
            The FSSId of the FSS this database belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.DatabaseStatus">
            <summary>
            The status of the database this backup config is for.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.BackupsToRetain">
            <summary>
            The maximum number of backups to retain, described in job args.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupConfig.ServerName">
            <summary>
            Returns the name of the server that this database is on.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfigSet.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.IBackupConfig})">
            <summary>
            Creates a new BackupConfigSet from a set of configs.
            </summary>
            <param name="configs">configs to use for this set</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfigSet.GetConfigsForBackup">
            <summary>
            Retrieves the subset of backup configs in this set that are
            enabled for backup.
            </summary>
            <returns>all BackupConfigs in this set with ShouldBackup == true</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupConfigSet.ContentsAreEqual(Microsoft.Webstore.OfflineProcessing.BackupConfigSet,Microsoft.Webstore.OfflineProcessing.BackupConfigSet)">
            <summary>
            Convenience member added to do a comparison of two BackupConfigSets to see
            if their contents are equal.  This means they have the same BackupConfig
            items but they could be in different orders.
            </summary>
            <param name="s1">first BackupConfigSet to compare</param>
            <param name="s2">second BackupConfigSet to compare</param>
            <returns>true if the sets have the same contents</returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupDataAccess">
            <summary>
            This class represents the WstBackup database.
            
            In broad strokes, how does a client connect to the WstDatabase?  There are two dimensions:
            1) the client looks for the centralized setting WstBackupSiteAndDeployment to look for the
               name of the site and deployment to use for WstBackup.  If that centralized setting isn't
               present, the client uses the default site and deployment name 'WstBackup'
            2) the client also looks at its cluster for a setting "OfflineProcessingDataPartitionNumber"
               which it uses as its variable partition number when sending requests
            
            Neither of these methods are supported at the moment.  We will always use PartitionNumber 0
            and default site WstBackup.
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupDataAccess.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupDataAccess.UpdateBackupRecords(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            This function makes sure that there are entries for all of the files in
            the WstBackup database and makes sure that entries for this database / server
            set that are older than the oldest in this fileSet get deleted.
            </summary>
            <param name="fileSet">set of files to update records in the WstBackup database</param>
            <exception cref="T:System.ArgumentNullException">if fileSet is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupDataAccess.DeleteBackupRecords(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            Deletes all backup records older than the oldest full in fileset.
            </summary>
            <param name="fileset">set of files that are still valid</param>
            <exception cref="T:System.ArgumentNullException">if fileset is null</exception>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupFileInfo">
            <summary>
            This class represents a backup file and contains the static methods needed to perform various
            transforms (like retrieving the path, etc).
            The system basically saves backups like this:
            rootDir\OfflineProcessing\Type\yyyy-MM-ddTHH-mm-ss_DatabaseName.ext
            An example would be:
            c:\stripe\OfflineProcessing\Full\2008-01-23T12-22-23_UtAppFss0.bak
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetSharePath(System.String)">
            <summary>
            Retrieves the share path to the backup.  By prepending servername\
            a client would have the full UNC to this backup file.
            </summary>
            <param name="rootShareDir">share location (no preceding \, no preceding server name)</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">if rootShareDir is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.#ctor">
            <summary>
            Internal use only constructor.  Instead call ConvertFromFileInfo.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetFullBackupLocation(System.String)">
            <summary>
            Returns the directory location that full backups will be created in for a particular
            root dir.
            </summary>
            <param name="rootDir">root directory, typically stripe path</param>
            <returns>string representation of the path to the full backup location</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetLogBackupLocation(System.String)">
            <summary>
            Retrieves the directory that will contain log backups for a particular root dir.
            </summary>
            <param name="rootDir">root directory, typically stripe path</param>
            <returns>string representation of the path to the log backup location</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.ConvertFromFileInfo(System.IO.FileInfo)">
            <summary>
            Creates a new BackupFileInfo object from a FileInfo.
            </summary>
            <param name="fi">object to create the BackupFileInfo from</param>
            <returns>newly created and populated BackupFileInfo</returns>
            <exception cref="T:System.ArgumentNullException">if fi is null</exception>
            <exception cref="T:System.IO.InvalidDataException">if fi describes a file that is not in backup format</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.GetAllByDatabase(System.String,System.String)">
            <summary>
            This helper function creates a list of all BackupFileInfo objects for a given
            root directory, and database name.
            </summary>
            <param name="rootDir">root directory (normally stripe share)</param>
            <param name="databaseName">database name to look for</param>
            <returns>list of results (possibly empty, never null)</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateRootDirStructure(System.String)">
            <summary>
            Given the root dir, create the Full directory if it does not exist
            </summary>
            <param name="rootDir">root directory to use, normally the stripe</param>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateFullBackupName(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            Helper method that returns the full backup name to use
            </summary>
            <param name="rootDir">root dir (generally stripe path)</param>
            <param name="databaseName">name of the database to backup</param>
            <param name="backupUtcTime">The utcTime of backup</param>
            <param name="usingLiteSpeed">true if this backup is using litespeed</param>
            <returns>The file name to use</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateLogBackupName(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            Helper method that returns the log backup name to use
            </summary>
            <param name="rootDir">root dir (generally stripe path)</param>
            <param name="databaseName">name of the database to backup</param>
            <param name="backupUtcTime">The utcTime of backup</param>
            <param name="usingLiteSpeed">true if this backup is using litespeed</param>
            <returns>The file name to use</returns>
            <exception cref="T:System.ArgumentNullException">if rootDir or databaseName are empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateBackupName(System.DateTime,System.Boolean,System.String,System.String)">
            <summary>
            Internal helper method for creating backup names.
            </summary>
            <param name="databaseName">name of the database to create a backup name for</param>
            <param name="backupUtcTime">time of the backup</param>
            <param name="liteSpeed">true if this backup should be named for litespeed</param>
            <param name="extension">extension for the backup</param>
            <returns>database file backup name</returns>
            <exception cref="T:System.ArgumentNullException">if databaseName or extension are null/empty</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateFullBackup(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            This function creates a new BackupFileInfo that represents a full backup.  IT DOES NOT
            ACTUALLY CREATE THE BACKUP FILE, so check .Exists whenever you need to use it.
            </summary>
            <param name="rootDir">root directory for backups</param>
            <param name="databaseName">database name</param>
            <param name="backupUtcTime">time to create the backup for</param>
            <param name="usingLiteSpeed">true if the backup is using litespeed</param>
            <returns>BackupFileInfo object</returns>
            <exception cref="T:System.ArgumentNullException">if rootdir or databasename are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateLogBackup(System.String,System.DateTime,System.Boolean,System.String)">
            <summary>
            This function creates a new BackupFileInfo that represents a log backup.  IT DOES NOT
            ACTUALLY CREATE THE BACKUP FILE, so check .Exists whenever you need to use it.
            </summary>
            <param name="rootDir">root directory for backups</param>
            <param name="databaseName">database name</param>
            <param name="backupUtcTime">time to create the backup for</param>
            <param name="usingLiteSpeed">true if this back was made using litespeed</param>
            <returns>BackupFileInfo object</returns>
            <exception cref="T:System.ArgumentNullException">if rootdir or databasename are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.CreateBackup(System.String,System.DateTime,System.Boolean,System.String,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.BackupType)">
            <summary>
            Internal method which implements CreateLogBackup and CreateFullBackup.
            </summary>
            <param name="rootDir"></param>
            <param name="databaseName"></param>
            <param name="backupUtcTime"></param>
            <param name="usingLiteSpeed"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.ParseFileName(System.String,System.DateTime@,Microsoft.Webstore.OfflineProcessing.BackupFileInfo.BackupMakerType@)">
            <summary>
            Parse the file name to extract the utcTime, suffix and extension
            We do the inverse of what was done in "GenerateXXXFileName"
            </summary>
            <param name="fileName"></param>
            <param name="utcTime">The utcTime embedded in the name</param>
            <param name="makerType">contains the backup maker type</param>
            <exception cref="T:System.FormatException">if the filename is not in the expected format</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.Name">
            <summary>
            The name of the backup file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.FullName">
            <summary>
            The full name of the backup file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.Exists">
            <summary>
            Whether or not the backup file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.FileInfo">
            <summary>
            The underlying FileInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.BackupFileCreationDate">
            <summary>
            The creation date of the backup file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.BackupType">
            <summary>
            Retrieves the type of backup represented by this file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.FileSizeInMB">
            <summary>
            Size of the file in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.RestoreSizeInMB">
            <summary>
            Size of the file when restored in MB.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.DeploymentManifestVersion">
            <summary>
            This doesn't work, don't use it.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileInfo.UsingLiteSpeed">
            <summary>
            Whether or not this backup file was made using Sql LiteSpeed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupFileSet">
            <summary>
            This class represents a set of backup files, along with a backup configuration.
            It is instantiated from an IBackupConfig and is responsible for discovering all
            of the files that belong to the backup set.
            
            There are only two fields in the IBackupConfig that we use:
            - stripe path
            - databasename
            
            There are two very different access patterns for files in a backupset:
            - full backups
            - log backups
            
            Full backups have a filecount-based retention policy applied to them.  That is
            the user specifies the maximum number of backups to keep and we always delete the
            oldest first until we achieve that number.  So mainly the access pattern for full
            backups is:
            - how many full backups are there?
            - delete the oldest
            
            For log backups we have an archivebit-based retention policy applied to them.
            That is the user doesn't specify anything and we always just delete any log
            backup that has the archive bit set.  So the pattern of access for log backups
            is:
            - delete anything with archive bit set, regardless of age
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.CreateFromConfig(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Instantiates a new BackupFileSet by searching config stripe path for backups.
            </summary>
            <param name="config">config to use to get stripe path and database name from</param>
            <returns>a newly created BackupFileSet object</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.#ctor(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Private constructor used by CreateFromConfig.
            </summary>
            <param name="config">config to store</param>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.SearchForBackups">
            <summary>
            This method is called once by the static instantiator CreateFromConfig
            and builds the initial list of BackupFileInfo objects by searching the
            backup directories.
            </summary>
            <exception cref="T:System.ArgumentNullException">if StripePath or DatabaseName are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.AddNewFile(Microsoft.Webstore.OfflineProcessing.BackupFileInfo)">
            <summary>
            Method to add a newly create file to the set.  Its called when we successfully create
            a new backup file.
            </summary>
            <param name="newFile">backup file to add to the set</param>
            <exception cref="T:System.ArgumentNullException">if newFile is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteOldest">
            <summary>
            Deletes the oldest full backup, and all log backups that are in its sequence or older.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">if no full files exist</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteOldLogs">
            <summary>
            Deletes all logs older than the oldest backup.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteLogs(System.Boolean)">
            <summary>
            This function deletes log files.  If checkArchiveBit is set to true, it will
            only delete log files with the archive bit set.  Otherwise it deletes all log
            files in a set.
            </summary>
            <param name="checkArchiveBit">set to true if you want to preserve log files without archive bit set</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.KillFileLocks(System.String)">
            <summary>
            This function attempts to kill the file locks on files in a particular path.
            </summary>
            <param name="path">path to kill filelocks in</param>
            <exception cref="T:System.ArgumentNullException">if path is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupFileSet.DeleteFile(Microsoft.Webstore.OfflineProcessing.BackupFileInfo)">
            <summary>
            This function deletes a file from disk and from this backup set.  The file must have come from
            this backup set.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">if the file isn't in this set</exception>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FullFileCount">
            <summary>
            The number of files in this backup set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FullOldestDate">
            <summary>
            Retrieves the date of the oldest backup in the set, or DateTime.MinValue if
            no backups exist in the set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.Config">
            <summary>
            The config for this backup file set.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FreeSpaceCalculator">
            <summary>
            Used only for testability purposes, defaults to FreeSpaceCalculator.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupFileSet.FreeSpace">
            <summary>
            The free space left on the drive this file set is on.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArguments">
            <summary>
            This class represents the arguments passed to the backup job.  It also contains the logic
            for parsing the arguments from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CreateFromXML(System.String)">
            <summary>
            This method parses a string containing xml conforming to BackupJobArgumentsSchema.xsd
            and returns a new BackupJobArguments object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to BackupJobArgumentsSchema.xsd</param>
            <returns>newly created BackupJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or backupJobSchema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">if argumentsAsXml cannot be validated against the schema</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcNextStartFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculates the next start time from any point in time (assumed UTC).
            </summary>
            <param name="someTime">time to calculate next start time from</param>
            <returns>next start time</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcNextLogFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculate the next log backup start time.
            </summary>
            <param name="sometime">time to calculate next log backup from</param>
            <returns>time of the next log backup, or MinValue if log backups aren't enabled</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcLastStartFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculates the previous start time from any point in time (assumed UTC).
            </summary>
            <param name="someTime">time to calculate previous start time from</param>
            <returns>previous start time</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.CalcLastLogFrom(System.DateTime)">
            <summary>
            Using the schedule on this item, calculate the start time of the previous log backup.
            </summary>
            <param name="sometime">time to calculate last log backup from</param>
            <returns>time of the last log backup, or MinValue if log backups aren't enabled</returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.NextFullStart">
            <summary>
            The time to start the next full backup, according to the schedule set in these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.LastFullStart">
            <summary>
            The time that the last full backup should have started, according to the schedule set in
            these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.NextLogStart">
            <summary>
            The time to start the next log backup, according to the schedule set in these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.LastLogStart">
            <summary>
            The time that the last log backup should have started, according to the schedule set in
            these settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.TypeOfBackup">
            <summary>
            The type of backup to perform at each scheduled interval.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.MaximumBackupsToRetain">
            <summary>
            The minimum number of backups to retain.  -1 means retain as many as possible.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.MinutesBetweenLogBackups">
            <summary>
            If log backups are enabled, the number of minutes between successive log backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArguments.DeploymentsToBackup">
            <summary>
            The list of deployments that should be backed up.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml">
            <summary>
            This class is used to serialize / deserialize backup job arguments to/from XML.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.#ctor">
            <summary>
            Creates a BackupJobArgumentsXml object with default values.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.CreateFromXML(System.String,System.String)">
            <summary>
            This method parses a string containing xml conforming to BackupJobArgumentsSchema.xsd
            and returns a new BackupJobArgumentsXml object populated with the parsed values.
            </summary>
            <param name="argumentsAsXml">string containing xml conforming to BackupJobArgumentsSchema.xsd</param>
            <param name="backupJobSchema">string containing the BackupJobArgumentsSchema.xsd</param>
            <returns>newly created BackupJobArguments from the xml</returns>
            <exception cref="T:System.ArgumentNullException">if argumentsAsXml or backupJobSchema are null</exception>
            <exception cref="T:System.Xml.XmlException">if argumentsAsXml is not a valid Xml document, if any required nodes cannot be found in the XML, or if any arguments are out of range</exception>
            <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">if argumentsAsXml cannot be validated against the schema</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ProcessScheduleXml(Microsoft.Webstore.Common.XmlProcessor,System.Xml.XmlNode,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml)">
            <summary>
            Pulls/parses the individual arguments and values out of the XML for BackupSettings.Schedule xml item.
            This method is broken out from CreateFromXML simply to make things more readable.
            </summary>
            <param name="xmlProc"></param>
            <param name="schedule"></param>
            <param name="retval">object to store processed settings on</param>
            <exception cref="T:System.Xml.XmlException">if any of the arguments are out of range, or if any required nodes can't be found</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ProcessBackupInfoXml(Microsoft.Webstore.Common.XmlProcessor,System.Xml.XmlNode,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml)">
            <summary>
            Pulls/parses the individual arguments and values out of the XML for BackupSettings.BackupInfo xml item.
            This method is broken out from CreateFromXML simply to make things more readable.
            </summary>
            <param name="xmlProc"></param>
            <param name="backupInfo"></param>
            <param name="retval"></param>
            <exception cref="T:System.Xml.XmlException">if any required nodes cannot be found</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ProcessDeploymentsXml(Microsoft.Webstore.Common.XmlProcessor,System.Xml.XmlNode,Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml)">
            <summary>
            Pulls/parses the individual arguments and values out of the XML for BackupSettings.Deployments xml item.
            This method is broken out from CreateFromXML simply to make things more readable.
            </summary>
            <param name="xmlProc"></param>
            <param name="deployments"></param>
            <param name="retval"></param>
            <exception cref="T:System.Xml.XmlException">if any required nodes cannot be found</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.AddDeploymentToBackup(System.String)">
            <summary>
            Adds a deployment to the list to be backed up.
            </summary>
            <param name="deploymentName">name of deployment</param>
            <exception cref="T:System.ArgumentNullException">if deploymentName is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.ToString">
            <summary>
            Returns an XML serialized string version of these arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.Period">
            <summary>
            The scheduling period of the backup: daily, weekly, or hourly.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.MinuteOccursOn">
            <summary>
            The minute of the hour the backup occurs on.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.HourOccursOn">
            <summary>
            The hour of the day the backup occurs on (UTC).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.DayOccursOn">
            <summary>
            The day of the week the backup occurs on (UTC).
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.TypeOfBackup">
            <summary>
            The type of backup to perform at each scheduled interval.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.MaximumBackupsToRetain">
            <summary>
            The maximum number of backups to retain.  -1 means retain as many as possible.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.MinutesBetweenLogBackups">
            <summary>
            If log backups are enabled, the number of minutes between successive log backups.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.DeploymentsToBackup">
            <summary>
            The list of deployments that should be backed up.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.Xml">
            <summary>
            Returns the XML representation of these arguments.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.BackupType">
            <summary>
            The type of backup to be performed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobArgumentsXml.SchedulingPeriod">
            <summary>
            The schedule for the backup.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobResources.BackupJobArgumentsSchema">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;xs:schema id=&quot;BackupJobArguments&quot;
                targetNamespace=&quot;urn:BackupJobArgumentsSchema.xsd&quot;
                elementFormDefault=&quot;qualified&quot;
                xmlns=&quot;urn:BackupJobArgumentsSchema.xsd&quot;
                xmlns:mstns=&quot;urn:BackupJobArgumentsSchema.xsd&quot;
                xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;
            &gt;
              &lt;xs:element name=&quot;BackupJobSettings&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;The parent element for backup job settings.&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
                &lt;xs:complexType&gt;
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobWorker">
            <summary>
            This class contains the implementation of the actual work we do in this job.  It essentially has a single
            method, ExecuteIteration, which gets called repeatedly.  The idea is that you execute an iteration, then
            you wait some duration of time, then you execute another iteration.  The job is designed to run continually
            so on error it throws an exception rather than returning a status code.
            
            The goal is that all policy and decision making logic stays in this job.  That is any time we need to make
            a decision, like "should we back up this database?" or "is it time to back up a database?" the decision gets
            made in this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.CreateFromXmlArguments(System.String)">
            <summary>
            Method used to create a worker, requires xml arguments.
            </summary>
            <param name="xmlArgs">XML arguments, in string form, conforming to BackupJobArgumentsSchema.xsd</param>
            <returns>a new instance of BackupJobWorker with the passed in args</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoIteration(System.Boolean)">
            <summary>
            This executes a single round (or iteration) of processing for the job.  You can
            consider this the "main" method on this class.
            The asConsole flag changes the behavior of the job in the following way:
            - it makes the job ignore the scheduling information in the args
              and think it is always time for a backup.  This is to facilitate testing mainly.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoFullBackup(Microsoft.Webstore.OfflineProcessing.BackupFileSet,System.Collections.Generic.List{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            Performs a full backup on a given backup fileset.
            </summary>
            <param name="fileset">BackupFileSet that contains the config to use and will contain the newly created backup</param>
            <param name="backups">set of all backups on our server, used for making space</param>
            <exception cref="T:System.ArgumentNullException">if fileset or backups are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoLogBackup(Microsoft.Webstore.OfflineProcessing.BackupFileSet,System.Collections.Generic.List{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            Performs a log backup on a given backup fileset.
            </summary>
            <param name="fileset">BackupFileSet that contains the config to use and will contain the newly created backup</param>
            <param name="backups">set of all backups on our server, used for making space</param>
            <exception cref="T:System.ArgumentNullException">if fileset or backups are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.DoBackup(Microsoft.Webstore.OfflineProcessing.BackupMaker,Microsoft.Webstore.OfflineProcessing.BackupFileSet,Microsoft.Webstore.OfflineProcessing.BackupFileInfo)">
            <summary>
            Performs a backup on a given backup fileset.
            </summary>
            <param name="maker">BackupMaker to use for creating the backup</param>
            <param name="fileset">BackupFileSet that contains the config to use and will contain the newly created backup</param>
            <param name="newBackup">BackupFileInfo containig the name of the new file</param>
            <exception cref="T:System.ArgumentNullException">if maker, fileset, or newBackup are null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ManageRecoveryMode(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Performs recovery mode management on a database.  For any database
            that we should backup, the recovery mode should be set to full.  For
            any database that we shouldn't backup, the recovery mode should be set
            to simple.
            </summary>
            <param name="config">config describing the database</param>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.GetSleepTimeInMS">
            <summary>
            Retrieve the time to sleep between iterations.
            </summary>
            <returns>the time to sleep between iterations</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsTimeForFullBackup(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Determines if it is time to make a full backup.  The criteria for this are:
            1. if config.ForceFull is set, yes
            2. if no record of a previous full can be found, and we are less than 25% of the way into the backup window
            3. if the previous full was before config.LastFull
            </summary>
            <param name="config">config describing the database</param>
            <returns>true if a full backup should be performed</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsTimeForLogBackup(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Determines if it is time to perform a log backup.  The criteria is:
            - log backups are enabled; AND
            - last backup (of any sort) was before config.LastLogStart
            </summary>
            <param name="config">config that describes the database being checked</param>
            <returns>true if we should perform a log backup</returns>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsDbStateOkayForBackup(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Helper function for deciding if a database state is okay for backing up.
            </summary>
            <param name="config">config describing the database</param>
            <returns>true if database state is okay for backup</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.MakeSpaceForBackup(Microsoft.Webstore.OfflineProcessing.BackupMaker,Microsoft.Webstore.OfflineProcessing.BackupFileSet,System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            This method is responsible for making appropriate space for the backup.
            It figures out how much space is required to perform the backup, then checks
            the stripe path to make sure at least that much space is available.  If not,
            it enters an aggressive cleanup phase where it first:
            - deletes as many backups from the database being backed up as it can
            and if that isn't enough
            - deletes backups from all other databases oldest to youngest
            </summary>
            <param name="maker">BackupMaker object to use for making the backup (used to determine how much space)</param>
            <param name="dbFileSet">BackupFileSet for the database we need to make space for</param>
            <param name="allFileSets">set of all BackupFileSet on our machine (might need for aggressive space cleanup)</param>
            <exception cref="T:System.ApplicationException">if enough free space cannot be made</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.AggressiveCleanup(System.Collections.Generic.IEnumerable{Microsoft.Webstore.OfflineProcessing.BackupFileSet})">
            <summary>
            This method performs an aggressive cleanup.  It will find the oldest backup
            in a set and delete it.  If no backups exist in any of the sets it throws an exception.
            </summary>
            <param name="allFileSets">BackupFileSet container to search for oldest backup</param>
            <exception cref="T:System.ApplicationException">if no sets have any backups to delete</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.GetBackupConfigSet">
            <summary>
            Creates a list of all WebstoreDatabases that are on this server along with their
            configuration with respect to backup.
            </summary>
            <returns>list of configs for all databases on this server, never null (but might be empty)</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.GetBackupFileSets(Microsoft.Webstore.OfflineProcessing.BackupConfigSet)">
            <summary>
            This method retrieves the list of currently existing backup files made by
            the backup job, on disk, for each BackupConfig in the configs set.
            </summary>
            <param name="configs">set of BackupConfig objects to retrieve on-disk backup info for</param>
            <returns>list of BackupFileSet objects, one for each BackupConfigSet in the configs</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ShouldOfflineProcess(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining if we should offline process a database.  The point
            of this method is to keep the logic of "should we offline process a database" in a
            single, easy to modify place because there is a lot of ongoing discussion about this.
            </summary>
            <param name="db">database to check</param>
            <returns>true if we should offline process it</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ShouldBackup(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Helper method for determining if we should backup a database (really to see
            if backups are configured).
            </summary>
            <param name="db">database to check</param>
            <returns>true if backups are configured for this database</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.ShouldManageRetention(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Determines whether or not we should manage the retention policy of a given database.
            </summary>
            <param name="db">database to test</param>
            <returns>true if we should manage retention policy of the database</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsDbInDeployments(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Tests whether or not a given database is in the list of deployments we are supposed to (potentially) back up.
            </summary>
            <param name="db">database to test</param>
            <returns>true if it is in the deployment list</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsDefaultPrimary(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Tests whether or not a given database is the default primary.
            </summary>
            <param name="db">database to test</param>
            <returns>true if it is</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.IsPrimary(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Tests whether or not a given database is the primary.
            </summary>
            <param name="db">database to test</param>
            <returns>true if it is</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.CleanupByRetention(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            Method to cleanup a backup file set based on its retention policy,
            as describe in its config.
            </summary>
            <param name="set"></param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobWorker.CleanupAll(Microsoft.Webstore.OfflineProcessing.BackupFileSet)">
            <summary>
            Method to clean up all members of a backup file set.
            </summary>
            <param name="set">file set to delete</param>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstBackupJobWorker">
            <summary>
            This class implements the job worker for the Offline Processing backup job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.WstBackupJob">
            <summary>
            This class implements the Job Coordinator for the Offline Processing backup job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord">
            <summary>
            This class represents all of the information we consider interesting
            for a backup, whether one we are in the process of creating or one
            that was historical (from msdb.backupset).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.GetLastRecordForDatabase(System.String,System.String)">
            <summary>
            This method retrieves the last backup record for a given database name and
            server.
            </summary>
            <param name="serverName">name of the server to retrieve the last backup record for</param>
            <param name="databaseName">name of the database to retrieve last backup record for</param>
            <returns>SqlBackupRecord describing the last completed backup, possibly null if non found</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.GetLastFullRecordForDatabase(System.String,System.String)">
            <summary>
            This method retrieves the last full backup record for a given database name and
            server.
            </summary>
            <param name="serverName">name of the server to retrieve the last backup record for</param>
            <param name="databaseName">name of the database to retrieve last backup record for</param>
            <returns>SqlBackupRecord describing the last completed backup, possibly null if non found</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.GetForDatabase(System.String,System.String,System.Boolean)">
            <summary>
            Internal helper method for connecting to master on a server and executing a command that
            returns a SqlBackupRecord object..
            </summary>
            <param name="serverName">name of the server</param>
            <param name="databaseName">name of the database to retrieve records for</param>
            <param name="fullOnly">true if only full records are wanted</param>
            <returns>SqlBackupRecord</returns>
            <exception cref="T:System.ArgumentNullException">if serverName or databaseName are null</exception>
            <exception cref="T:System.Data.SqlClient.SqlException">on sql error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.BuildGetLastRecordConnectString(System.String)">
            <summary>
            Creates the connect string for the GetLastRecordForDatabase command.
            </summary>
            <param name="serverName">name of the server the database lives on</param>
            <returns>connect string</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.BuildGetLastRecordCommand(System.Data.SqlClient.SqlCommand,System.String,System.Boolean)">
            <summary>
            Builds the SqlCommand object to do GetLastRecordForDatabase.
            </summary>
            <param name="cmd">command object to populate</param>
            <param name="databaseName">databaseName</param>
            <param name="fullOnly">true if only full records are wanted</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor for making a new SqlBackupRecord.
            </summary>
            <param name="startTime">time the backup started</param>
            <param name="finishTime">time the backup finished</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.AdjustTimes(System.Int32)">
            <summary>
            So the times are stored wierd in backupset.  The times are stored in
            database time and there is a time_zone field which is the number
            of 15 minute offsets from UTC that the local database time is in.  So
            this function attempts to set the times to UTC.  A - value means you
            have to add 15 minute increments until get to zero, while a + value
            means you have to subtrace 15 minute increments.
            </summary>
            <param name="timeZoneOffset">see summary</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.Start">
            <summary>
            The time at which this backup started, in UTC.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.SqlBackupRecord.Finish">
            <summary>
            The time at which this backup finished, in UTC.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl">
            <summary>
            This class handles retrieving and setting the recovery mode for a database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.#ctor(Microsoft.Webstore.OfflineProcessing.IBackupConfig)">
            <summary>
            Default constructor.
            </summary>
            <param name="config">config that describes the database to set recovery mode for</param>
            <exception cref="T:System.ArgumentNullException">if config is null</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.IsInFullRecoveryMode">
            <summary>
            Determine whether or not a database is currently in full recovery mode.
            </summary>
            <returns>true if a database is in full recovery mode, false otherwise</returns>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.SetRecoveryMode(System.Boolean)">
            <summary>
            Called to set the recovery mode on a database.
            </summary>
            <param name="setToFull">true if you want to set recovery mode to full, false sets to simple</param>
            <exception cref="T:System.Data.SqlClient.SqlException">on database error</exception>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.MasterConnectionString">
            <summary>
            Generates a connection string for master database.
            </summary>
            <returns>connection string for master</returns>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.RecoveryModeControl.AlterDatabaseCommand(System.Boolean)">
            <summary>
            Generates the AlterDatabase command string.
            </summary>
            <param name="setToFull"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobCategoryInstaller">
            <summary>
            Category installer for the BackupJob event source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobCategoryInstaller.EventSource">
            <summary>
            The event source for which to install the category strings.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.OfflineProcessing.BackupJobEvents">
            <summary>
            Events in the BackupJob module.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.log">
            <summary>
            MSN Runtime's event logger 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.#ctor">
            <summary>
            Private constructor prevents instantiation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobCoordinatorErrorValue">
            <summary>
            EventDefinition for JobCoordinatorError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobCoordinatorError(System.String)">
            <summary>
            Method to log an event of type JobCoordinatorError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobCoordinatorError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobCoordinatorError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.UserArgumentsErrorValue">
            <summary>
            EventDefinition for UserArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogUserArgumentsError(System.String)">
            <summary>
            Method to log an event of type UserArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogUserArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type UserArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobArgumentsErrorValue">
            <summary>
            EventDefinition for JobArgumentsError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobArgumentsError(System.String)">
            <summary>
            Method to log an event of type JobArgumentsError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobArgumentsError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobArgumentsError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobExecutionErrorValue">
            <summary>
            EventDefinition for JobExecutionError
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobExecutionError(System.String)">
            <summary>
            Method to log an event of type JobExecutionError.
            </summary>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogJobExecutionError(System.String,System.Exception)">
            <summary>
            Method to log an event of type JobExecutionError with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="exceptionStr">Argument exceptionStr for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DatabaseInBadStateValue">
            <summary>
            EventDefinition for DatabaseInBadState
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDatabaseInBadState(System.String,System.String)">
            <summary>
            Method to log an event of type DatabaseInBadState.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDatabaseInBadState(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type DatabaseInBadState with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="state">Argument state for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.AggressiveCleanupInProgressValue">
            <summary>
            EventDefinition for AggressiveCleanupInProgress
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogAggressiveCleanupInProgress(System.String,System.String)">
            <summary>
            Method to log an event of type AggressiveCleanupInProgress.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogAggressiveCleanupInProgress(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type AggressiveCleanupInProgress with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SuperAggressiveCleanupInProgressValue">
            <summary>
            EventDefinition for SuperAggressiveCleanupInProgress
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSuperAggressiveCleanupInProgress(System.String,System.String)">
            <summary>
            Method to log an event of type SuperAggressiveCleanupInProgress.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSuperAggressiveCleanupInProgress(System.String,System.String,System.Exception)">
            <summary>
            Method to log an event of type SuperAggressiveCleanupInProgress with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
            <param name="backupLocation">Argument backupLocation for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DeleteBackupValue">
            <summary>
            EventDefinition for DeleteBackup
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDeleteBackup(System.String)">
            <summary>
            Method to log an event of type DeleteBackup.
            </summary>
            <param name="filename">Argument filename for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogDeleteBackup(System.String,System.Exception)">
            <summary>
            Method to log an event of type DeleteBackup with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="filename">Argument filename for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToFullValue">
            <summary>
            EventDefinition for SwitchedRecoveryModeToFull
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToFull(System.String)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToFull.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToFull(System.String,System.Exception)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToFull with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="F:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToSimpleValue">
            <summary>
            EventDefinition for SwitchedRecoveryModeToSimple
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToSimple(System.String)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToSimple.
            </summary>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="M:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.LogSwitchedRecoveryModeToSimple(System.String,System.Exception)">
            <summary>
            Method to log an event of type SwitchedRecoveryModeToSimple with Exception information.
            </summary>
            <param name="exception">The exception corresponding to this event.</param>
            <param name="databaseName">Argument databaseName for formatting the event text.</param>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.EventLogger">
            <summary>
            Gets the EventLogger used to report events from this source.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.EventSource">
            <summary>
            Gets the event source for events defined in this module.
            </summary>
            <value>
            The event source for events defined in this module.
            </value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobCoordinatorError">
            <summary>
              Gets the EventDefinition for the JobCoordinatorError.
            </summary>
            <value>The EventDefinition for the JobCoordinatorError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.UserArgumentsError">
            <summary>
              Gets the EventDefinition for the UserArgumentsError.
            </summary>
            <value>The EventDefinition for the UserArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobArgumentsError">
            <summary>
              Gets the EventDefinition for the JobArgumentsError.
            </summary>
            <value>The EventDefinition for the JobArgumentsError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.JobExecutionError">
            <summary>
              Gets the EventDefinition for the JobExecutionError.
            </summary>
            <value>The EventDefinition for the JobExecutionError</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DatabaseInBadState">
            <summary>
              Gets the EventDefinition for the DatabaseInBadState.
            </summary>
            <value>The EventDefinition for the DatabaseInBadState</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.AggressiveCleanupInProgress">
            <summary>
              Gets the EventDefinition for the AggressiveCleanupInProgress.
            </summary>
            <value>The EventDefinition for the AggressiveCleanupInProgress</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SuperAggressiveCleanupInProgress">
            <summary>
              Gets the EventDefinition for the SuperAggressiveCleanupInProgress.
            </summary>
            <value>The EventDefinition for the SuperAggressiveCleanupInProgress</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.DeleteBackup">
            <summary>
              Gets the EventDefinition for the DeleteBackup.
            </summary>
            <value>The EventDefinition for the DeleteBackup</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToFull">
            <summary>
              Gets the EventDefinition for the SwitchedRecoveryModeToFull.
            </summary>
            <value>The EventDefinition for the SwitchedRecoveryModeToFull</value>
        </member>
        <member name="P:Microsoft.Webstore.OfflineProcessing.BackupJobEvents.SwitchedRecoveryModeToSimple">
            <summary>
              Gets the EventDefinition for the SwitchedRecoveryModeToSimple.
            </summary>
            <value>The EventDefinition for the SwitchedRecoveryModeToSimple</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\xonline-ext\webstore\6.0.1217.0001\SDK64\release\doc\WstClient.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WstClient</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspBulkUpdateBatchExpirationInterval(System.Guid,System.String,System.Int32)">
            <summary>
            WspBulkUpdateBatchExpirationInterval
            </summary>
            <param name="statusId"></param>
            <param name="csvBatchIdsStr"></param>
            <param name="heartbeatInterval"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspUpdateJobBatchPartitionStatus(System.Guid,System.Int32,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Add any failed partition info to the job batch status
            </summary>
            <param name="statusId"></param>
            <param name="batchId"></param>
            <param name="partitionKey"></param>
            <param name="partitionMachine"></param>
            <param name="alertResolved"></param>
            <param name="partitionStatus"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobFramework.Common.QueryExecute.WspUpdateJobBatchCycleStatus(System.Guid,System.Int32,System.DateTime,System.Int32)">
            <summary>
            
            </summary>
            <param name="statusId"></param>
            <param name="batchId"></param>
            <param name="statusExpiresOn"></param>
            <param name="cycleNumber"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartition">
            <summary>
            An IPartition is located on a single machine. If it is a dynamic partition and it has split
            Machine should throw a PartitionException and the JE will call Repartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartition.Repartition">
            <summary>
            Repartition should return a new list of partitions in case of a split
            </summary>
            <returns>IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Machine">
            <summary>
            Get the machine where this partition is. May throw PartitionException if the partition is no
            longer on a single machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartition.Key">
            <summary>
            The key that uniquely identifies this partition
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IPartitionSet">
            <summary>
            An enumerable set of Ipartition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            add partition the the partition Set
            </summary>
            <param name="partition">The partition to add</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            This is called by the JobEngine at regular intervals,to
            get a list of changes since it was called the last time.        
            </summary>
            <param name="addedPartitions">List of added partitions. Null if nothing was added</param>
            <param name="droppedPartitions">List of dropped partitions. Null if nothing was dropped</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IPartitionSet.Count">
            <summary>
            Gets count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStep">
            <summary>
            One step of a job - executed sequentially
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            For a job worker, called by the JobAgent.
            This is called by the agent prior to calling the Run function for the worker.
            This gives worker a chance to setup heartbeating thread, and to do other
            initialization activites that might be needed
            </summary>
            <param name="ja">The MBR jobAgent object, to hearbeat with</param>
            <param name="localMachine">this machine</param>
            <param name="location">Location where the worker will run</param>
            <param name="userArgs">The arguments that the user passed</param>
            <param name="batchId">worker identifier. Required for heart beating with JobAgent</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            For a job worker, called by the JobAgent.
            This is the function where the worker writes to job code.
            </summary>
            <param name="inputSet">Set of Input partitions that the worker should work on</param>
            <param name="outputSet">Set of Output partition. This is for future use</param>
            <param name="statusCode">[out] The job run status. 0 = Pass, anything else = job failure. 
            The JobEngine will use this status code to determine if it needs to reschedule this 
            batch of work again.
            </param>
            <returns>IPartitionSet of the remaining partitions</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Add a partitionset to an existing Job Step
            </summary>
            <param name="inputSet">Input IPartitionSet to operate on</param>
            <param name="outputSet">Output IPartitionSet that has been operated on</param>
            <returns>Boolean value indicating success</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobStep.Finish">
            <summary>
            Job step finish. Called by the JobEngine on the worker.
            This gives the worker the opportunity to stop the Heart beat 
            thread and do other cleanup.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.Alive">
            <summary>
            Returns if this Job Step is alive
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.CanJobCoordinatorSpawnJob">
            <summary>
            Returns if the job step's coordinator can actually be spwaned.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStep.AcceptAdd">
            <summary>
            Returns whether this job step will accept adding of new partitionset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobCoordinator">
            <summary>
            IJobCoordinator interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobCoordinator.SpawnJob(System.String,System.Boolean)">
            <summary>
            Tells the coordinator whether it can spawn jobs or not
            </summary>
            <param name="jobName">Name of job</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobMain">
            <summary>
            IJobMain interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobMain.Start(System.String,System.Int32,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.String)">
            <summary>
            Implemented by the job implementor (JobCoordinator side)
            JobEngine transfers control by calling Start, where the 
            code creates instance of the Job class and add job steps.
            Also this lets users create their own implementation of
            the IPartitionSet and IPartition and pass to the JobEngine.
            Then the user code on the worker side can typecast to the correct
            type and get a much richer partitionset/partition class, with 
            functionality required for a particular job.
            </summary>
            <param name="jobName">Name of the Job</param>
            <param name="dop">Degree of Parallelism</param>
            <param name="batchOption">Batching option of partition set</param>
            <param name="location">Location where the worker should run</param>
            <param name="userArgs">Arguments passed by the user</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.BatchOption">
            <summary>
            Do we batch the work based on the input partitions, the output partitions or not at all?
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.DontBatch">
            <summary>
            DontBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByInput">
            <summary>
            BatchByInput
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.BatchOption.BatchByOutput">
            <summary>
            BatchByOutput 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IMachineSelector">
            <summary>
            Returns an iterator of machines through a machine class - Machines do not have to be returned only once
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.GetNextMachine">
            <summary>
            Get the next machine name in line for the selection process.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.FailMachine(System.String)">
            <summary>
            This gives a way for user to explicitly fail a machine
            Once an machine is failed, user has to explicitly enable
            the machine again.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IMachineSelector.EnableMachine(System.String)">
            <summary>
            This gives a way for user to explicitly enable a machine.
            Note that enabling a machine does not make it selectable.
            It is up to the implementation to determine if the machine is
            fit to be selected.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.LocationType">
            <summary>
            Determines where the workers are spawned
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Void">
            <summary>
            Not used
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.ServerRole">
            <summary>
            ServerRole
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.LocationType.Local">
            <summary>
            Use Local
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobPartitionStatus">
            <summary>
            Enum used to indicate the status of a partition within the job's running batch.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobPartitionStatus.Running">
            <summary>
            The partition is being executed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobPartitionStatus.Pass">
            <summary>
            The partition has passed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobPartitionStatus.Fail">
            <summary>
            The partition has failed
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobExecutionStatus">
            <summary>
            Enum used to update job status in db
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Running">
            <summary>
            Job is running
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Pass">
            <summary>
            Job Passed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Fail">
            <summary>
            Job Failed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobExecutionStatus.Abort">
            <summary>
            Job Aborted
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobMessages">
            <summary>
            Message that can be sent to clients
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobMessages.Separator">
            <summary>
            Separator for job messages
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobMessages.DeleteJob">
            <summary>
            When a job is to be deleted
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobMessages.AllowJob">
            <summary>
            When a job can be spawned
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Location">
            <summary>
            A location for the worker
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.CreateLocationWithRandomMachineInClass(System.String,System.Int32)">
            <summary>
            Creates a location for a given machine class
            </summary>
            <param name="machineClass">Machine Class</param>
            <param name="machineCount">Machine count</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Location.GetNextMachineInClass">
            <summary>
            Next machine in class
            </summary>
            <returns>Machine Name</returns>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.SameAsBatch">
            <summary>
            SameAsBatch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.Location.Local">
            <summary>
            Local
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.LocationType">
            <summary>
            The location type indicates where we should run the worker
                Void - not used
                Machine Class - run in a pool of machine named by a class
                Same as batch - run "where the data is" - if we batched by input, run on the machines holding the input partitions
                Local - run in proc
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Location.ServerRole">
            <summary>
            Gets the server role 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.StepType">
            <summary>
            Type of job step
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.MapStep">
            <summary>
            MapStep
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StepType.XProductStep">
            <summary>
            ProductStep
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RetrySettings">
            <summary>
            Max number of retries and delay between retries
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RetrySettings.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.FailoverRetry">
            <summary>
            FailoverRetry
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RetrySettings.InfiniteRetry">
            <summary>
            InfiniteRetry
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryCount">
            <summary>
            Get or set the RetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.RetrySettings.RetryDelay">
            <summary>
            Get or set the RetryDelay
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionMapping">
            <summary>
            PartitionMapping
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.AssemblyInformation">
            <summary>
            Information about worker assembly
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AssemblyInformation.#ctor(System.String,System.String)">
            <summary>
            Constructs an AssemblyInformation object
            </summary>
            <param name="assemblyName">Name of the assembly</param>
            <param name="version">Version of the assmebly</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.AssemblyName">
            <summary>
            Gets the assembly name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.AssemblyInformation.Version">
            <summary>
            Gets the Version
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobStepProperties">
            <summary>
            IJobStepProperties interface
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.JobStepType">
            <summary>
            Gets the JobType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.BatchOption">
            <summary>
            Gets the BatchOption
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.Location">
            <summary>
            Gets the Location 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.DOP">
            <summary>
            Gets the Degree Of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.PartitionMapping">
            <summary>
            Gets the PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.StepType">
            <summary>
            Gets the StepType 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.InputSet">
            <summary>
            Gets the IPartitionSet - Input
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.OutputSet">
            <summary>
            Gets the IPartitionSet - output
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.RetrySettings">
            <summary>
            Gets the RetrySettings 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.UserArgs">
            <summary>
            Gets the User given arguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.AssemblyInfo">
            <summary>
            Gets the AssemblyInformation 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.IsSafeMode">
            <summary>
            Gets if this job is running in SafeMode 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJobStepProperties.IsContinuousStep">
            <summary>
            Indicate if the step is part of a continuous job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJob">
            <summary>
            IJob interface to be implemented by all jobs
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            Add job step
            </summary>
            <param name="jobStepProperties">IJobStepProperties object containing the jobs steps to run</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Run">
            <summary>
            Executes the job
            </summary>
            <returns>Status of the job</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submits a job to be run
            </summary>
            <param name="callback">Callback method to be called for status updates</param>
            <param name="state">Passed in state</param>
            <returns>IAsyncResult indicating the status of the async operation</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJob.SendMessage(System.String)">
            <summary>
            Sends a message to the Job
            </summary>
            <param name="message">Message to send</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJob.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IJob.IsContinuous">
            <summary>
            Indicate if this job should repeat itself.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobEngine">
            <summary>
            IJobEngine interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            Execute a specific job
            </summary>
            <param name="job">IJob interface containing the job</param>
            <returns>error code as to wether the job ran correctly</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.IsAlive(System.Int32,System.String,System.Boolean@)">
            <summary>
            Gets whether the JobAgent is alive or not
            </summary>
            <param name="batchId">Batch Id</param>
            <param name="jobName">Name of the job</param>
            <param name="shouldTerminateJob">Flag passed back to determine whether the job shoudl be terminated</param>
            <returns>Gets whether the JobAgent is alive or not</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status">Status of the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobEngine.CanSpawnJob(System.String)">
            <summary>
            For a given job, return true if the job is allowed to be spwaned and started.
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IJobAgent">
            <summary>
            IJobAgent interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.CreateNewAsyncExecuteBatch(Microsoft.Webstore.JobEngine.IJobEngine,System.String,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32,System.String,System.String,System.Version,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates a job to run within the job agent
            </summary>
            <param name="je">IJobEngine object</param>
            <param name="jobName">Name of the job name</param>
            <param name="machine">Machine name</param>
            <param name="location">Location </param>
            <param name="batchId">Id of the batch</param>
            <param name="jobStepTypeFullName">The full name of the job step</param>
            <param name="assemblyName">Name of the assembly containing the job</param>
            <param name="version">Version of the assambly</param>
            <param name="userArgs">Additional user arguments</param>
            <param name="isSafeMode">Whether the job is run in safe mode or not</param>
            <param name="isContinuous">indicates if the async execution belongs to a continuous job</param>
            <returns>IAsyncResult indicating the status of the async operation</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.IsAlive(System.Int32,System.Boolean@)">
            <summary>
            Gets whether the JobAgent is alive or not
            </summary>
            <param name="batchId">Batch Id</param>
            <param name="shouldTerminateJob">Flag passed back to determine whether the job shoudl be terminated</param>
            <returns>Gets whether the JobAgent is alive or not</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.CanJobCoordinatorSpawnJob(System.Int32)">
            <summary>
            Gets whether a coordinator can spwan jobs or not.
            </summary>
            <param name="batchId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            </summary>
            <param name="batchId">JobAgent issued batchId</param>
            <param name="status">Status of the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IJobAgent.SendMessage(System.String,System.String)">
            <summary>
            Send a message to a job
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="message">Message to send to job</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor">
            <summary>
            IASyncExecuteBatchMonitor interface for monitoring work items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Finish(System.Int32,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32)">
            <summary>
            Finishes the batch from executing
            </summary>
            <param name="batchId">Batch Id being executed</param>
            <param name="failedSet">Set of failed partitions</param>
            <param name="statusCode">Status code of execution</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.CheckPartitionStatusChange(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Check if the partition has changes in its composition, if so
            then handle it accordingly.
            </summary>
            <param name="originalPartitionSet">the partition set that needs to be checked.</param>
            <returns>true if method find that there are changes to the input partition set. Else false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.UpdateBatchCycleStatus(System.Int32,System.Int32)">
            <summary>
            This updates the cycle number of a batch within a job.
            </summary>
            <param name="batchId">the batch id that we want to update</param>
            <param name="cycleNumber">the loop (i.e. cycle) number that is just completed</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.UpdateJobBatchPartitionStatus(System.Int32,Microsoft.Webstore.JobEngine.IPartition,Microsoft.Webstore.JobEngine.JobPartitionStatus)">
            <summary>
            Add the partion information to JobStatus as failed partition information.
            </summary>
            <param name="batchId">the batch id that this partition relays to</param>
            <param name="partition">the partition itself</param>
            <param name="status">the status to be updated with</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.RenewLease(System.Int32)">
            <summary>
            Renews the lease on a particular work item
            </summary>
            <param name="workItemId">Id of the work item to renew</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatchMonitor.JobName">
            <summary>
            Gets the JobName
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.IASyncExecuteBatch">
            <summary>
            IASyncExecuteBatch interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Starts the batch to execute
            </summary>
            <param name="partitionSet">IPartition set to operate upon</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.Monitor">
            <summary>
            Sets the IASyncExecuteBatchMonitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.ExecuteDelegate">
            <summary>
            Sets the ExecuteBatchDelegate 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsAlive">
            <summary>
            Returns whether the batch is alive
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsCoordinator">
            <summary>
            Indicate if this Async execution is coming from job coordinator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.IASyncExecuteBatch.IsContinuous">
            <summary>
            Indicate if this Async execution is meant to be running continuously (from a continuous job)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JEException">
            <summary>
            Exception class for Job Engine 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor">
            <summary>
            Creates a JEException object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String)">
            <summary>
            Creates a JEException object
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a JEException object
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JEException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a JEException object
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobAgentException">
            <summary>
            Exception class for JobAgent
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="errorCode">Error code</param>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="errorCode">Error code</param>
            <param name="message">Message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobAgentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a JobAgentException object
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobAgentException.ErrorCode">
            <summary>
            Returns the ErrorCode
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionException">
            <summary>
            Exception class for Partition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor">
            <summary>
            Creates a PartitionException object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String)">
            <summary>
            Creates a PartitionException object
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a PartitionException object
            </summary>
            <param name="message">Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a PartitionException object
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="context">StreamingContext object</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JCArguments">
            <summary>
            Container class for Job Coordinator Arguments
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.PrefixArg">
            <summary>
            PrefixArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.StartArg">
            <summary>
            StartArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.DopArg">
            <summary>
            DopArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.BatchArg">
            <summary>
            BatchArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.LocationArg">
            <summary>
            LocationArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.ClassArg">
            <summary>
            ClassArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.NumberOfMachinesArg">
            <summary>
            NumberOfMachinesArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.JobNameArg">
            <summary>
            JobNameArg
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JCArguments.UserArgumentsArg">
            <summary>
            UserArgumentsArg
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JCArguments.#ctor">
            <summary>
            Constructor for class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.Dop">
            <summary>
            Gets and sets the Degree of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobBatchOption">
            <summary>
            Gets and sets the Batch Option of job
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobLocation">
            <summary>
            Gets and sets the Location of job
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.PartitionSetType">
            <summary>
            Gets and sets the PartitionSet Type
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.PartitionSetTarget">
            <summary>
            Gets and sets the Coordinator Target
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.UserArguments">
            <summary>
            Gets and sets the User Arguments
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobAssemblyName">
            <summary>
            Gets and sets the Job Assembly Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.MachineClass">
            <summary>
            Gets and sets the Machine Class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.NumberOfMachines">
            <summary>
            Gets and sets Number of Machines
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.JobName">
            <summary>
            Gets and sets the Job Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryCount">
            <summary>
            Gets and sets the Retry Count
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.RetryInterval">
            <summary>
            Gets and sets Retry Interval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JCArguments.IsContinuous">
            <summary>
            Indicate if this is a continuous job
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JETrackingHandler">
            <summary>
            This class is required for workaround on how .net remoting works.
            When we move to WCF, we should not require it.
            Right now are making sure that if we are trying to create an 
            ObjRef for the JE object, we only pass the tcp channel data across.
            We found this bug when WstAgent used JE. WstAgent registers a custom
            channel and was causing issues, as creating of objRef was putting 
            the custom channel data, and that data was not present on the JobAgent
            side, thus resulting in an Exception on the JobAgent side.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.LocalJobAgent.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the worker to update status (human readable)
            This status ultimately gets logged to the jobDetails table
            in the jobStatus deployment
            </summary>
            <param name="batchId">JobAgent issues batchId</param>
            <param name="status">Status of the job</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE">
            <summary>
            JobEngine class
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JE.ObjectURI">
            <summary>
            To determine the name of the file used for remoting
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns>Null</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunJob(Microsoft.Webstore.JobEngine.IJob)">
            <summary>
            RunJob
            </summary>
            <param name="job">Object that implements IJob interface</param>
            <returns>Integer value whether the job succeeded.</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.SpawnJob(System.String,System.Boolean)">
            <summary>
            Updates the internal list as to whether this job can be spawned or not
            </summary>
            <param name="jobName">name of the job that is being told to stop spawning jobs</param>
            <param name="spawnJob">Boolean value determining whether or job can be spawned</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CanSpawnJob(System.String)">
            <summary>
            
            </summary>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.SendMessage(Microsoft.Webstore.JobEngine.IJob,System.String)">
            <summary>
            Sends a message to the job
            </summary>
            <param name="job">Job for which we are sending this message to</param>
            <param name="message">Message to be sent to the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.IsAlive(System.Int32,System.String,System.Boolean@)">
            <summary>
            Returns whether this Job Engine is alive
            </summary>
            <param name="batchId">Batch Id to check</param>
            <param name="jobName">Name of the job</param>
            <param name="shouldTerminateJob">Flag passed back to determine whether the job shoudl be terminated</param>
            <returns>Returns whether this Job Engine is alive</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.UpdateStatus(System.Int32,System.String)">
            <summary>
            Called by the JobAgent to update status (human readable) for
            workers. JobAgent passes the status given to it by workers.
            This status ultimately gets logged to the jobDetails table
            in the JobStatus deployment
            </summary>
            <param name="batchId">JobEngine issued batchId</param>
            <param name="status">Status to record to the JobStatus</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateNewAsyncExecuteBatch(System.String,System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,System.Int32,System.String@)">
            <summary>
            Creates new asyncexecute batch
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="machine">Machine to execute on</param>
            <param name="jobStepProperties">Properties for the Job Step</param>
            <param name="batchId">Back ID</param>
            <param name="workerMachine">Worker machine</param>
            <returns>Object that implements IASyncExecuteBatch</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.CreateRunner(Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Create a runner based on the batching option. The runner knows how to execute a step
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.RunProduct(System.String,Microsoft.Webstore.JobEngine.IJobStepProperties,Microsoft.Webstore.JobEngine.JobPartitionMapping)">
            <summary>
            Run the step - basically compose a Retry policy with a Batching policy. 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JE.ParseArgsAndStart(System.String[],Microsoft.Webstore.JobEngine.JE.Start)">
            <summary>
            Parse the command line arguments that were passed by the Job Service then call the Start function
            </summary>
            <param name="args">JC Arguments</param>
            <param name="startFunc">Function to get called</param>
            <returns>Value indicating the success of the call</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JE.Singleton">
            <summary>
            Job Engine singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JE.Start">
            <summary>
            The start function delegate
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="dop">Degree of Parallelism</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="userArgs">User arguments</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunParams">
            <summary>
            RunParams struct
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.inputSet">
            <summary>
            InputSet
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.outputSet">
            <summary>
            Output set
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.RunParams.Null">
            <summary>
            Null run param
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RunOneStep.ExecuteStepForBatch(System.String,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Get a worker - Initialize it, call Run() on it and finalize it.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RunOneStepByInput">
            <summary>
            The difference between the two RunOneStep is whether we batch by input or by output. 
            If we batch by input, we slice the input partition sets by machine and we send the output partition set unchanged
            set as is to the workers. If we batch by output, it is the other way round.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionSetType">
            <summary>
            Enum for the kinds of partition sets
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.UserDefined">
            <summary>
            If the user defines their own PartitionSet and Coordinator
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.SqlDeployment">
            <summary>
            If the PartitionSet is a SQL Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.FileDeployment">
            <summary>
            If the PartitionSet is a File Deployment
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.ServerRole">
            <summary>
            If the PartitionSet is the servers within a server role
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.PartitionSetType.Servers">
            <summary>
            If the PartitionSet is a semi-colon list delimited list of servers
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobCoordinatorHelper">
            <summary>
            Helper functions for Job Coordinator
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.JobCoordinatorHelper.PartitionSetTypeDelimiter">
            <summary>
            The delimiting character to be used for separating servers in PartitionSetType.Servers
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobCoordinatorHelper.RunJob(Microsoft.Webstore.JobEngine.JCArguments)">
            <summary>
            Code that actually runs the job, based on the JCArguments
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepProperties">
            <summary>
            Impelements the IJobStepProperties
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Creates a JobStepProperties object
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.AssemblyInformation)">
            <summary>
            Creates a JobStepProperties object
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
            <param name="assemblyInformation">Assembly information</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Boolean)">
            <summary>
            Creates a JobStepProperties object. This constructor is mainly for user defined coordinator. Normally
            This constructor is not needed.
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
            <param name="isContinuousStep">Indicate if the step is part of a continuous job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.#ctor(System.Type,Microsoft.Webstore.JobEngine.BatchOption,Microsoft.Webstore.JobEngine.Location,System.Int32,Microsoft.Webstore.JobEngine.StepType,Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Boolean,Microsoft.Webstore.JobEngine.AssemblyInformation)">
            <summary>
            Creates a JobStepProperties object
            </summary>
            <param name="jobStepType">Type for JobStep</param>
            <param name="batchOption">Batch Option</param>
            <param name="location">Location</param>
            <param name="DOP">Degree of Parallelism</param>
            <param name="stepType">Job StepType</param>
            <param name="inputSet">Input set of Partitions</param>
            <param name="outputSet">Output set of Partitions</param>
            <param name="isContinuousStep">Indicate if the step is part of a continuous job</param>
            <param name="assemblyInformation">Assembly information</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetRetryCount(Microsoft.Webstore.JobEngine.RetrySettings)">
            <summary>
            Sets retry count
            </summary>
            <param name="retrySettings">RetrySettings object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepProperties.SetPartitionMapping(Microsoft.Webstore.JobEngine.PartitionMapping)">
            <summary>
            Sets PartitionMapping
            </summary>
            <param name="partitionMappingFunc">PartitionMapping object</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.JobStepType">
            <summary>
            Gets JobStepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.BatchOption">
            <summary>
            Gets BatchOption
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.Location">
            <summary>
            Gets Location
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.DOP">
            <summary>
            Gets Degree of Parallelism
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.PartitionMapping">
            <summary>
            Gets PartitionMapping 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.StepType">
            <summary>
            Gets StepType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.InputSet">
            <summary>
            Gets InputSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.OutputSet">
            <summary>
            Get/Set output set
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.RetrySettings">
            <summary>
            Get/Set retry settings
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.UserArgs">
            <summary>
            Get/Set user args
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.AssemblyInfo">
            <summary>
            Gets worker assembly information
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.IsSafeMode">
            <summary>
            IsSafeMode: Should the worker be started in seperate app domain
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepProperties.IsContinuousStep">
            <summary>
            Indicate if the step is part of a continuous job.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Job">
            <summary>
            Implements the IJob interface
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.#ctor(System.String)">
            <summary>
            Creates a Job object
            </summary>
            <param name="jobName">Name of the job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a Job object. This constructor is mainly for user defined coordinator. Normally
            This constructor is not needed.
            </summary>
            <param name="jobName">Name of the job</param>
            <param name="isContinuous">indicate if this is a continuous job</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.GetEnumerator">
            <summary>
            Returns the enumerator
            </summary>
            <returns>Enumerator for the IJobStepProperties objects</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.AddStep(Microsoft.Webstore.JobEngine.IJobStepProperties)">
            <summary>
            Adds a step to the job
            </summary>
            <param name="jobStepProperties">IJobStepProperties object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Run">
            <summary>
            Run job
            </summary>
            <returns>An integer value indicating the status of the job</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.SendMessage(System.String)">
            <summary>
            Sends a message to the Job
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Job.Submit(System.AsyncCallback,System.Object)">
            <summary>
            Submit async job
            </summary>
            <param name="callback">Callback method</param>
            <param name="state">State to be passed to the callback method</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Job.IsContinuous">
            <summary>
            Indicate if this is a continuous job.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Job.JobName">
            <summary>
            Gets the job name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobStepWorker">
            <summary>
            JobStepWorker is the base class from which a worker should derive from.
            It has the implementation of the keep alive timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.#ctor">
            <summary>
            Creates a JobStepWorker object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.InitWorker(Microsoft.Webstore.JobEngine.IJobAgent,System.String)">
            <summary>
            Start the timer which pings the JE
            </summary>
            <param name="jaIn">IJobAgent Object</param>
            <param name="localMachine">Name of the machine</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.StopWorker">
            <summary>
            Stop the timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.TerminateJob">
            <summary>
            Is called when the job should be terminated
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.UpdateStatus(System.String)">
            <summary>
            Updates the worker status with the JobAgent
            </summary>
            <param name="workerStatus">Status of the worker</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Int32)">
            <summary>
            Initialize the job step worker
            </summary>
            <param name="jaIn">IJobAgent object</param>
            <param name="localMachine">Name of the machine</param>
            <param name="location">Location</param>
            <param name="batchId">Batch Id</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Finish">
            <summary>
            Finish the work
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobStepWorker.Add(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Add partition set
            </summary>
            <param name="inputSet">Input IPartitionSet object</param>
            <param name="outputSet">Output IPartitionSet object</param>
            <returns>False</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Aborted">
            <summary>
            Gets the aborted status
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.LocalMachine">
            <summary>
            Returns Local Machine name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.BatchId">
            <summary>
            Returns the Batch Id
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.Alive">
            <summary>
            Alive
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.CanJobCoordinatorSpawnJob">
            <summary>
            CanJobCoordinatorSpawnJob
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.JobStepWorker.AcceptAdd">
            <summary>
            Returns whether it accepts 'Add' partition or not
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.JobWorker">
            <summary>
            JobStepWorker is the base class from which a worker should derive from.
            It has the implementation of the keep alive timer
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.#ctor">
            <summary>
            Creates a JobWorker object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.Initialize(System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.RunJob(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Runs the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.Init(Microsoft.Webstore.JobEngine.IJobAgent,System.String,Microsoft.Webstore.JobEngine.Location,System.Object,System.Int32)">
            <summary>
            Performs and JobWorker initialization
            </summary>
            <param name="ja">JobAgent reference</param>
            <param name="localMachine">Name of the local machine</param>
            <param name="location">location</param>
            <param name="userArgs">User Arguments</param>
            <param name="batchId">Batch ID</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.JobWorker.Run(Microsoft.Webstore.JobEngine.IPartitionSet,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32@)">
            <summary>
            Executes the job
            </summary>
            <param name="inputSet">Input partition set to work upon</param>
            <param name="outputSet">Output partition set that was worked upon</param>
            <param name="statusCode">Status code to return</param>       
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineInfo">
            <summary>
            Represents a machine in the Autopilot environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.#ctor(System.String,System.Net.IPAddress,System.String)">
            <summary>
            Creates a MachineInfo object
            </summary>
            <param name="name">Name of the machine</param>
            <param name="IP">IP Address of the machine</param>
            <param name="type">Type of the machine</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Name">
            <summary>
            Gets or sets the name of the machine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.IP">
             <summary>
            Gets or sets the IP of the machine. 
             </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineInfo.Type">
            <summary>
            Gets or sets the Type of the machine. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineSet">
            <summary>
            Adding twice the same machine to the set does not make a new entry.
            Note that the hash table is not serialized - so this guarantee does not stand once the
            set is sent across the wire
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionSet`1">
            <summary>
            PartitionSet class
            </summary>
            <typeparam name="Partition"></typeparam>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.#ctor">
            <summary>
            Create a PartitionSet object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetEnumerator">
            <summary>
            GetEnumerator
            </summary>
            <returns>IEnumerator for IPartition objects</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add an IPartition
            </summary>
            <param name="partition">IPartition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Refresh partition set
            </summary>
            <param name="addedPartitions">Added IPartitions</param>
            <param name="droppedPartitions">Dropped IPartitions</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionSet`1.Contains(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Equality based on IPartition.Key
            </summary>
            <param name="partition">IPartition</param>
            <returns>Boolean value if the partition was found</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Count">
            <summary>
            Get the Count of IParitions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.PartitionSet`1.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
            <param name="index">Index</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.#ctor">
            <summary>
            Creates a MachineSet object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IPartition to add</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachinePartition">
            <summary>
            Represents a machine based on machine name 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.#ctor(System.String)">
            <summary>
            Creates a MachinePartition object
            </summary>
            <param name="machine">Machine Name</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.ToString">
            <summary>
            Returns a String representation of the MachinePartition
            </summary>
            <returns>A String representation of the MachinePartition</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Machine">
            <summary>
            Get the Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachinePartition.Key">
            <summary>
            Gets the Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition">
            <summary>
            Represents a machine based on the IP address 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.#ctor(Microsoft.Webstore.JobEngine.Partitions.MachineInfo)">
            <summary>
            Creates a MachineIPPartition object
            </summary>
            <param name="mi">MachineInfo object</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.IP">
            <summary>
            Gets the IP
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.MachineIPPartition.Type">
            <summary>
            Gets the Type
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet">
            <summary>
            MachinePartitionSet based upon a specific server role 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.#ctor(System.String)">
            <summary>
            Creates a RoleBasedMachinePartitionSet object
            </summary>
            <param name="serverRoleName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Init">
            <summary>
            Inititializes the Partition Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IParition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Returns the status changes for the partitions
            </summary>
            <param name="addedPartitions">[out] the partitions that were added</param>
            <param name="droppedPartitions">[out] the partitions that were dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.GetEnumerator">
            <summary>
            Gets the Enumerator for the collection
            </summary>
            <returns>An enumerator for iterating over IPartition objects</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartitionSet.Count">
            <summary>
            Gets the count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition">
            <summary>
            MachinePartition based on a specific Server Role 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.#ctor(System.String,System.String)">
            <summary>
            RoleBasedMachinePartition
            </summary>
            <param name="machine"></param>
            <param name="serverRole"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ToString">
            <summary>
            ToString
            </summary>
            <returns>A String representation of the RoleBasedMachinePartition</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Machine">
            <summary>
            Gets the Machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.ServerRole">
            <summary>
            Gets the ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.RoleBasedMachinePartition.Key">
            <summary>
            Gets the Key
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteDelegate">
            <summary>
            Execute delegate
            </summary>
            <param name="partitionSet">IPartitionSet to execute</param>
            <param name="statusCode">Integer indicating status of execution</param>
            <returns>IPartitionSet object</returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ExecuteBatchDelegate">
            <summary>
            Execute batch delegate
            </summary>
            <param name="machine">Machine Name</param>
            <param name="partitionSet">IPartitionSet to execute</param>
            <returns>RunParams object</returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ASyncExecuteBatch">
            <summary>
            Executes a batch asychronously
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.#ctor(System.String,Microsoft.Webstore.JobEngine.IJobStep,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            ASyncExecuteBatch ()
            </summary>
            <param name="machine">Machine to run on</param>
            <param name="jobStep">IJobStep to execute</param>
            <param name="batchId">Batch Id to run on</param>
            <param name="isContinuous">Indicates if this execution batch is a continous run</param>
            <param name="isCoordinator">Indicates if this exectuion batch is assoicated with the coordinator</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Start(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Instantiates the thread to run
            </summary>
            <param name="partitionSetIn">IPartitionSet to operate upon</param>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.Monitor">
            <summary>
            Sets the IASyncExecuteBatchMonitor
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.ExecuteDelegate">
            <summary>
            Gets the ExecuteBatchDelegate
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsAlive">
            <summary>
            Get the IsAlive status
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsCoordinator">
            <summary>
            Indicate if this Async execution is coming from job coordinator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.ASyncExecuteBatch.IsContinuous">
            <summary>
            Indicate if this Async execution is meant to be running continuously (from a continuous job)
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.PartitionQueue">
            <summary>
            PartitionQueue
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Webstore.JobEngine.IPartition})">
            <summary>
            Creates a PartitionQueue object
            </summary>
            <param name="partitionSet">An enumerated set of IPartitions objects</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.PartitionQueue.GetNext">
            <summary>
            Returns the next IPartition object
            </summary>
            <returns>IPartition object</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.WorkDescription.RenewLease">
            <summary>
            RenewLease
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.WorkDescription.IsAlive">
            <summary>
            IsAlive
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.InitializeLifetimeService">
            <summary>
            Make the JE lease eternal so that the remoting server doesn't get GCed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.Finish(System.Int32,Microsoft.Webstore.JobEngine.IPartitionSet,System.Int32)">
            <summary>
            Stop and log the ending progress of the batch.
            </summary>
            <param name="batchId"></param>
            <param name="failedSet"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.UpdateBatchCycleStatus(System.Int32,System.Int32)">
            <summary>
            Updates the cycle number of a continuous job.
            </summary>
            <param name="batchId"></param>
            <param name="cycleNumber"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.UpdateJobBatchPartitionStatus(System.Int32,Microsoft.Webstore.JobEngine.IPartition,Microsoft.Webstore.JobEngine.JobPartitionStatus)">
            <summary>
            Add the partion information to JobStatus as failed partition information.
            </summary>
            <param name="batchId"></param>
            <param name="partition"></param>
            <param name="status"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.BatchExecuteMonitor.CheckPartitionStatusChange(Microsoft.Webstore.JobEngine.IPartitionSet)">
            <summary>
            Check if the partition has changes in its composition, if so
            then handle it accordingly.
            </summary>
            <param name="originalPartitionSet"></param>
            <returns>true if method find that there are changes to the input partition set. Else false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ExecutionPool.StartWork">
            <summary>
            After workitems have been submitted, this fn
            is responsible to start the job workers and
            wait till they all finish. In the mean time if
            there are failures, this function reschedules the failed
            items.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.StatusCodes">
            <summary>
            These define the error status codes for jobs
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.Success">
            <summary>
            When a job succeeds.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.CannotCreateRemoteBatch">
            <summary>
            The AsyncExecuteBatch returned null. It could not be created on remote machine
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.UnknownJobRunFailure">
            <summary>
            The jobStep.Run() threw exception. 
            Enable tracing to get more details. Also check NT events
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AsyncExecuteBatchFailed">
            <summary>
            Failure in AsyncExecuteBatch::ThreadStart function. 
            Look at NT events for details
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.HeartBeatFailure">
            <summary>
            Heartbeat failure for this batchID
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsRetryExceeded">
            <summary>
            Aborting workItem as retry count exceeded
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsToAddPartitions">
            <summary>
            Aborting workItems to add partition to existing batch
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.AbortActiveWorkItemsPartitionDropped">
            <summary>
            Aborting work item as partition has been dropped
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.JobEngine.StatusCodes.NoWorkItemsSubmitted">
            <summary>
            Job could not complete as no work items were submitted.
            This can be caused because jobworkers were being tried 
            to be scheduled on machines that are in different DataCenter
            from that of the JobCoordinator.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.ThreadPoolThrottle">
            <summary>
            A wrapper around the System Thread Pool. We place a semaphore so that we can limit the number of
            work items
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.#ctor(System.Int32)">
            <summary>
            ThreadPoolThrottle
            </summary>
            <param name="maximumAllowed">Maximum number of allowed threads</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback)">
            <summary>
            QueueUserWorkItem
            </summary>
            <param name="callback">Callback method</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
            <summary>
            Queue the work item
            </summary>
            <param name="callback">Callback method</param>
            <param name="state">State to pass to the callback method</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.ThreadPoolThrottle.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet">
            <summary>
            Represents a collection of sql partitions sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.#ctor(System.String)">
            <summary>
            Creates a WebstoreSqlPartitionSet object
            </summary>
            <param name="deploymentName"></param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Init">
            <summary>
            Inititializes the Partition Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IParition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Returns the status changes for the partitions
            </summary>
            <param name="addedPartitions">[out] the partitions that were added</param>
            <param name="droppedPartitions">[out] the partitions that were dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.GetEnumerator">
            <summary>
            Gets the Enumerator for the collection
            </summary>
            <returns>An enumerator for iterating over IPartition objects</returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartitionSet.Count">
            <summary>
            Gets the count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition">
            <summary>
            Represents a collection of Sql Fail Safe Sets 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a WebstoreSqlPartition object
            </summary>
            <param name="deploymentName">Name of the deployment</param>
            <param name="fssId">Fail Safe Set ID</param>
            <param name="machine">Machine Name</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Machine">
            <summary>
            Gets the machine
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.SqlFss">
            <summary>
            Gets the WebstoreSQLFss
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreSqlPartition.Database">
            <summary>
            Gets the WebstoreDatabase
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet">
            <summary>
            Represents a collection of file partitions sets
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.#ctor(System.String)">
            <summary>
            Creats as WebstoreFileSharePartitionSet object
            </summary>
            <param name="deploymentName">Name of the deployment</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Init">
            <summary>
            Inititializes the Partition Set
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Add(Microsoft.Webstore.JobEngine.IPartition)">
            <summary>
            Add a partition to the collection
            </summary>
            <param name="partition">IParition object</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetStatusChanges(Microsoft.Webstore.JobEngine.IPartitionSet@,Microsoft.Webstore.JobEngine.IPartitionSet@)">
            <summary>
            Returns the status changes for the partitions
            </summary>
            <param name="addedPartitions">[out] the partitions that were added</param>
            <param name="droppedPartitions">[out] the partitions that were dropped</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.GetEnumerator">
            <summary>
            Gets the Enumerator for the collection
            </summary>
            <returns>An enumerator for iterating over IPartition objects</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFileSharePartitionSet.Count">
            <summary>
            Get the count of partitions
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition">
            <summary>
            Represents a Collection of File Fail Safe Sets 
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a WebstoreFilePartition object
            </summary>
            <param name="deploymentName">Name of the deployment</param>
            <param name="fssId">Fail Safe Set ID</param>
            <param name="machine">Machine Name</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Repartition">
            <summary>
            Repartitions the data
            </summary>
            <returns>An IPartitionSet containing the repartitioned partitions</returns>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Machine">
            <summary>
            Gets the machine name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Key">
            <summary>
            Gets the key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.JobEngine.Partitions.WebstoreFilePartition.Share">
            <summary>
            Gets the WebstoreFileshare
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.AverageBasedRoundRobinMachineSelector">
            <summary>
            This machine selector will select machines based on the average batch load
            - average is calculated at the begining of the round or when machines are added/removed.
            - a machine is selected based on a round robin fashion if it has 0 load, or if load is 
              less than average.
            - If all machine is on or above average load, then a normal round robin selection take place.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AverageBasedRoundRobinMachineSelector.FailMachine(System.String)">
            <summary>
            This gives a way for user to explicitly fail a machine
            Once an machine is failed, user has to explicitly enable
            the machine again.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.AverageBasedRoundRobinMachineSelector.EnableMachine(System.String)">
            <summary>
            This gives a way for user to explicitly enable a machine.
            Note that enabling a machine does not make it selectable.
            The machine will still be ignored if it does not have the
            required role defined.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="T:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector">
            <summary>
            Round robin machine selector class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.#ctor(System.String,System.Int32)">
            <summary>
            Creates a RoundRobinMachineSelector object
            </summary>
            <param name="machineClass">Machine class (server role) to look at</param>
            <param name="machineCount">Number of machines to allow</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.FailMachine(System.String)">
            <summary>
            This gives a way for user to explicitly fail a machine
            Once an machine is failed, user has to explicitly enable
            the machine again.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="M:Microsoft.Webstore.JobEngine.RoundRobinMachineSelector.EnableMachine(System.String)">
            <summary>
            This gives a way for user to explicitly enable a machine.
            Note that enabling a machine does not make it selectable.
            The machine will still be ignored if it does not have the
            required role defined.
            </summary>
            <param name="name">name of the machine.</param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.ApplicationContext">
            <summary>
            There is one ApplicationContext instance per Webstore application to act as a single point of control for status and configuration.
            </summary>
            <remarks>
            The WstConnection class used by the application developer will have reference to the single ApplicationContext that controls that specific Application (e.g. "Sample").
            
            (We should try to use "WebstoreConfig" as a special case application, where we populate information on num replicas, etc, from config info (registry or webstore.ini).
            </remarks>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.applications">
            <summary>
            Static collection of all the applications that are referred by the WstConnection. It is basically a cache for ApplicationContext.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.fullName">
            <summary>
            Name of the application.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.ApplicationContext.deployment">
            <summary>
            Webstore deployment that is encapsulated by this application context.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.#ctor(System.String)">
            <summary>
            Constructs and initializes an instance of the ApplicationContext.
            </summary>
            <param name="applicationName">The full application name that is passed to identify the application.</param>
            <remarks>
            Each WstConnection contains reference to underlying ApplicationContext object that encapsulates the WebstoreDeployment.  There is  a global static collection of ApplicationContext objects. There should be only one ApplicationContext object per WebstoreDeployment.
            The global cache (ApplicationContextDictionary) should keep them cached, even if no WstConnection object still refers to the application. This object acts as a single point of configuration and state information for the application.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetApplication(System.String)">
            <summary>
            Global collection of applications (used to make sure we have single
            point of config and state mgmt for each app).
            </summary>
            <param name="connectionStringName">Name given as the connection string.</param>
            <returns>WstApp singleton for that app</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetFilePartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for fileshare partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ApplicationContext.GetSqlPartition(System.Int32)">
            <summary>
            Maps a logical partition to a physical partition for sql partitions.
            </summary>
            <param name="logicalPartitionNumber">index of logical partition to lookup</param>
            <returns>index of physical partition mapped to this logical partition</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationExpired">
            <summary>
            Gets whether the WebstoreDeployment that is associated with the ApplicationContext is expired.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.ApplicationRemoved">
            <summary>
            Gets whether the WebstoreDeployment that is associated with the ApplicationContext is removed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverRead">
            <summary>
            Default file read failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.FileFailoverWrite">
            <summary>
            Default file write failover behavior
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.Name">
            <summary>
            Full name of the application which is config and deployment name seperated with backslash "\"
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.ApplicationContext.SecondaryType">
            <summary>
            The secondary type for this application.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ColumnAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ColumnAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ColumnAttribute.PartitionKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ColumnAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.FailSafeSetKey">
            <summary>
              Partition key
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.FailSafeSetKey.MinKey">
            <summary>
            Represents the minumum key for a cloud partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.FailSafeSetKey.MaxKey">
            <summary>
            Represents the maximum key for a cloud partition
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Int64)">
            <summary>
            Constructs a key from a Int64 value.
            </summary>
            <param name="value">The Int64 value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Int32)">
            <summary>
            Constructs a key from a Int32 value.
            </summary>
            <param name="value">The Int32 value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Guid)">
            <summary>
            Constructs a key from a Guid value.
            </summary>
            <param name="guid">The Guid value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Byte[])">
            <summary>
            Constructs a key from a Byte Array value.
            </summary>
            <param name="bytes">The Byte Array value for the Key generation.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor(System.Byte[],System.Int64)">
            <summary>
              Constructs a partition from a byte array and a length
            </summary>
            <param name="bytes"></param>
            <param name="length"></param>
               len has to be lesser or equal to key.Length
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.#ctor">
            <summary>
            Special constructor for the maximum key, required
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.CreateKey(System.Object)">
            <summary>
            Creates a new Key for the given object as the seed.
            </summary>
            <param name="keySeed">The seed that will be used to create the new Key.</param>
            <returns>The new Key.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_Equality(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Checks two keys for equality
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs and rhs are equal</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_Inequality(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Checks two keys for inequality
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs and rhs are not equal</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_LessThan(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Lesser than comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &lt; rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_GreaterThan(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Greater than comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &gt; rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_LessThanOrEqual(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Lesser or equal comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &lt;= rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.op_GreaterThanOrEqual(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Greater or equal comparison. Follows the lexicographic order
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>true if lhs &gt;= rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.Min(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Returns the smaller of two keys
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>lhs if lhs &lt; rhs otherwise rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.Max(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Returns the bigger of two keys
            </summary>
            <param name="lhs"></param>
              left hand side
            <param name="rhs"></param>
              right hand side
            <returns>lhs if lhs &gt; rhs otherwise rhs</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToString">
            <summary>
              Converts a key to a string representation
            </summary>
            <remarks>The string representation is a hex string of 2 hex characters per byte</remarks>
            <returns>String representation of the key</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToBytes">
            <summary>
              Returns the key as a byte array
            </summary>
            <returns>Key as byte array</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToInt32">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetKey.ToInt64">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetKey.IsMaxKey">
            <summary>
            Gets whether the Key is a maximum key value.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetKey.Length">
            <summary>
              Returns the length of a key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetKey.Item(System.Int64)">
            <summary>
              Returns the byte value at position 'idx'
            </summary>
            <param name="idx"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.FailSafeSetRange">
            <summary>
              A range of keys between a low key and a high key
            </summary>
            <remarks>The low key is inclusive (part of the range) while the high key is exclusive
            (not part of the range)</remarks>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.FailSafeSetRange.FullRange">
            <summary>
            The singleton that denotes the full range that starts from the min value for a key to the max value.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.#ctor(Microsoft.Webstore.MetaData.FailSafeSetKey,Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Constructor from [low, high)
            </summary>
            <param name="low"></param>
              Low boundary (inclusive)
            <param name="high"></param>
              High boundary (exclusive)
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.Intersect(Microsoft.Webstore.MetaData.FailSafeSetRange)">
            <summary>
              Returns the intersection of two ranges
            </summary>
            <param name="rhs">Range to intersect with</param>
            <returns>The intersection of the current range and the rhs range. If empty, the
            returned range will have its low boundary equal to its high boundary</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.Contains(Microsoft.Webstore.MetaData.FailSafeSetKey)">
            <summary>
              Checks whether the key is inside the range
            </summary>
            <param name="key">The key to check</param>
            <returns>True if inside, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.Contains(Microsoft.Webstore.MetaData.FailSafeSetRange)">
            <summary>
              Checks whether the range is inside the range
            </summary>
            <param name="range">The range to check</param>
            <returns>True if inside, False otherwise</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.FailSafeSetRange.IsEmpty">
            <summary>
              Checks if the range contains any element
            </summary>
            <returns>true if the range is empty</returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetRange.Low">
            <summary>
              Accessor for low boundary
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.FailSafeSetRange.High">
            <summary>
              Accessor for high boundary
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.CommandExecutor">
            <summary>
            CommandExecutor is the class responsible for executing the queries that are specified by the users through WstCommand against the partitioned system.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._totalServerInteraction">
            <summary>
            Duration of the command preparation and execution againt one single database (including open time, validation etc). This timer will be used to determine if there is a bad pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._serverExecution">
            <summary>
            Duration of the command execution againt one single database (excluding open time, validation etc). This timer will be used to report server execution quality( aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._totalApplicationExecution">
            <summary>
            Duration of the overall command execution including the failover for the application. This timer will be used to determine application execution quality (aka latency).
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._serverExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor._application">
            <summary>
            Local copy stored so that performance counters can finish even if connections are closed or exceptions are thrown
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CreateWstDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Creates a WstDataReader from the given SqlDataReader.
            </summary>
            <param name="sqlDataReader">The SqlDataReader that will be wrapped by the WstDataReader to create.</param>
            <returns>The newly created WstDataReader which is wrapping the input SqlDataReader/</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CreateWstXmlReader(System.Xml.XmlReader)">
            <summary>
            Creates a WstXmlReader from the given XmlReader.
            </summary>
            <param name="xmlReader">The XmlReader that will be wrapped by the WstXmlReader to create.</param>
            <returns>The newly created WstXmlReader which is wrapping the input XmlReader/</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.PrologueForExecution(System.Data.SqlClient.SqlCommand@)">
            <summary>
            Performs final steps before the execution such as performing the associations for SqlCommand, final validation, calling sp_setPartition for CloudDB, setting command time out for SqlCommand and starting the server execution timer.
            </summary>
            <param name="sqlCommand">The SqlCommand that will be used for execution.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.OpenConnection">
            <summary>
            Opens the current DatabaseConnection for synchronous execution.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.PrologueForOpenConnection">
            <summary>
            Performs to the final steps before openning connection such as checking for throttling layer for the resource availability, starting timers, tracing and updating the performance counters.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.StartTotalServerInteractionTimer">
            <summary>
            Starts the WstTimer which keeps track the total server interaction which included openning connection to the SqlServer and execution the command request. This function should ensure that it calls ReleaseRequestResources on PerformanceCounterManager in case of an exception to make sure that there are no leaking resources.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.AttemptToCloseDatabaseConnections">
            <summary>
            Attempts to close all that connections to the databases if possible. In case of an active DataReader, XmlReader or Transaction; connections will not be closed. Connections will be closed when the readers are closed.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ReportException(System.Exception)">
            <summary>
            Reports that an exception which is encountered during the command execution for processing to determine the necessary actions to take.
            </summary>
            <param name="executeException">The exception which is encountered during command execution to report.</param>
            <returns>True whether failover was established and command execution should be retried otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CheckFailOverPossible(System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Determines whether the failover to other replicas is possible based on the errors encountered, failOver mode and the status of replicas.
            </summary>
            <param name="executeException">The Exception that was thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
            <returns>True whether the failover is possible based on the errors encountered, failOver mode and the status of replicas, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.CheckFailOverAllowed(Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Determines whether the failover to other replicas are allowed based on the errors encountered and failOver mode.
            </summary>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
            <returns>True whether the failover is allowed based on the errors encountered and failover mode, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ThrowSpecificException(System.Exception)">
            <summary>
            Throws a specific WstException if the errors encountered and exception match with the criteria.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessException(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.Common.WstTimer,System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the Exception thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called to take the necessary steps.
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server when the given Exception is encountered.</param>
            <param name="replica">The metadata on the replica that the given Exception is encountered during the exection agains.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given Exception is encountered.</param>
            <param name="executeException">The Exception that was thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.HandleException(System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Takes the necessary steps such as logging it and denylisting the replica for the given exception based on the error types.
            </summary>
            <param name="executeException">The Exception that was thrown by one of the WstCommand.ExecuteXXX() methods when the SqlConnection.Open() or SqlCommand.ExecuteXXX() gets called.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.DetermineErrorTypes(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.Common.WstTimer,System.Exception,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the given Exception to determine the type of the errors that were encountered.
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server when the given Exception is encountered.</param>
            <param name="replica">The metadata on the replica that the given Exception is encountered during the exection agains.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given Exception is encountered.</param>
            <param name="exception">The Exception to process for determining the type of the errors that were encountered.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessOperationException(Microsoft.Webstore.MetaData.WebstoreDatabase,System.InvalidOperationException,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the given InvalidOperationException to determine the type of the errors that were encountered.
            </summary>
            <param name="replica">The metadata on the replica that the given Exception is encountered during the exection agains.</param>
            <param name="operationException">The InvalidOperationException to process for determining the type of the errors that were encountered.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing Exception.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.ProcessSqlException(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.Common.WstTimer,System.Data.SqlClient.SqlException,Microsoft.Webstore.WstClient.CommandExecutor.ErrorTypes@)">
            <summary>
            Processes the given SqlException to determine the type of the errors that were encountered.
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server when the given SqlException is encountered.</param>
            <param name="replica">The metadata on the replica that the given SqlException is encountered during the exection agains.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given SqlException is encountered.</param>
            <param name="sqlException">The SqlException to process for determining the type of the errors that were encountered.</param>
            <param name="errorsEncountered">The types of the error encountered based on the results of the processing SqlException.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.CommandExecutor.IsBadPoolError(Microsoft.Webstore.WstClient.DatabaseConnection,Microsoft.Webstore.Common.WstTimer,System.Data.SqlClient.SqlError)">
            <summary>
            Checks to see if this SqlException looks like it is a bad connection left over in the SqlClient connection pool. 
            </summary>
            <param name="connection">The DatabaseConnection that wraps the actual SqlConnection to the SQL Server for the given SqlError is encountered.</param>
            <param name="totalServerInteraction">The timer that captures the total server interaction (connection open and command execution) duration for the given SqlError is encountered.</param>
            <param name="error">The error to determine if it is a bad pool error.</param>
            <returns>True if bad pooled connection is suspected, otherwise false.</returns>
            <remarks>The total server interaction period before exception. If this time is too short, that will be an indication for bad pool error</remarks>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.CurrentReplica">
            <summary>
            Gets the current WebstoreDatabase that the command execution is performed against.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.DatabaseConnection">
            <summary>
            Gets the current DatabaseConnection that is used for the command execution.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.ServerExecutionSucceeded">
            <summary>
            Indicates whether the last execution attempt to the selected database is succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.CommandExecutor.TheRequestType">
            <summary>
            Gets the request type of the current CommandExecutor.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.GeneralNetworkError">
            <summary>
            20-11-General network error.  Check your network documentation.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.TransportLevelError">
            <summary>
            10054-20-A transport-level error has occurred when sending the request to the server.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPartPrimaryInTransition">
            <summary>
            The primary partition is in transition and no new transactions can start.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplNotEnoughSecondaries">
            <summary>
            This partition does not have enough valid secondaries to start a DML transaction. The needed count is %ld, the current count is %ld.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPrimaryLostQuorum">
            <summary>
            The primary partition has lost the quorum. New transactions can not start.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbUserQueriesAbortedDuringClouddbReconfiguration">
            <summary>
            A CloudDB reconfiguration is going on and all new user transactions are aborted. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbDatabaseShutdownDueToPairingFailure">
            <summary>
             A paired CloudDB fabric node failed and database %d must be shutdown. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartInDeleteState">
            <summary>
            This requested operation can not performed as this partition is in delete process.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartInTransition">
            <summary>
            The partition is in transition to Nothing state. Please run your query later.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPartInvalidAppName">
            <summary>
            The application name %s is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.SereplPartInvalidTblgrpName">
            <summary>
            The table group name %s is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartNotExist">
            <summary>
            The data node does not host a replica of the requested partition.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartNotPrimary">
            <summary>
            The replica that the data node hosts for the requested partition is not primary.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.ClouddbPartNotSecondary">
            <summary>
            The replica that the data node hosts for the requested partition is not secondary.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.CommandExecutor.SqlErrorCodes.LogNotAvail">
            <summary>
            The log for database '%.*ls' is not available. Check the event log for related error messages. Resolve any errors and restart the database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.AsyncCommandExecutor.EndExecute(System.String)">
            <summary>
            Returns the the result of the asynchronous command execution and finalize the state.
            </summary>
            <param name="methodName">The name of the EndExecuteXXX that initiates the EndExecute.</param>
            <returns>The result of the asynchronous command execution. The result could be a SqlException if the asynchronous command execution fails  </returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.AsyncCommandExecutor.TheRequestType">
            <summary>
            Gets the request type of the current AsyncCommandExecutor.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstAsyncResult">
            <summary>
            Implements IAsyncResult interface for WstClient which will be used for Asycnhronous API of WstCommand. The class is also responsible to call the user callback delegate.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.UserCallback">
            <summary>
            The AsyncCallback that is provided by the user code.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to  complete. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstAsyncResult.System#IAsyncResult#IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.DatabaseConnection">
            <summary>
            This is the class which contains the SqlConnection. It is responsible for creating, opening and maintaining the SqlConnection. There can be multiple DatabaseConnection for each WstConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.application">
            <summary>
            The application that isue using this database connection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connection">
            <summary>
            The owner WstConnection that owns this database connection. 
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.database">
            <summary>
            The database that the connection will be created.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.serverAddress">
            <summary>
            The actual address (the ip) of the server which the actual sql connection is established on. This field will be null until the actual connection is established.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.sqlConnection">
            <summary>
            The actual sql connection to the give database.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttempts">
            <summary>
            How many times trying to connection to the database
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectAttemptsOnBadPool">
            <summary>
            How many times trying to connection to the database due to bad pool error
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.databaseSelector">
            <summary>
            The DatabaseSelector that will be used to select the next available database during the AutoFailover.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.connectionOpenGranted">
            <summary>
            Indicates whether the connection open is granted for the DatabaseConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection._requestType">
            <summary>
            Indicates whether the underlying sql connection is opened as an asynchronous connection for the current DatabaseConnection.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.DatabaseConnection.timeOutDatabases">
            <summary>
            The list of the databases that has timed out for this wstdbconnection. Sometimes, timed out databases are not added to denylist and we need to maintain a seperate denylist for this DatabaseConnection.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.#ctor(Microsoft.Webstore.WstClient.ApplicationContext,Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.WstClient.DatabaseSelector)">
            <summary>
            DatabaseConnection contains the sqlConnection and associated WebstoreDatabase information
            used to execute against a specific application server/database.
            </summary>
            <param name="application"></param>
            <param name="connection"></param>
            <param name="database"></param>
            <param name="databaseSelector"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.Open(Microsoft.Webstore.WstClient.RequestType)">
            <summary>
            Opens the underlying SqlConnection to Sql Server resource which is specified by the established WebstoreDatabase.
            </summary>
            <param name="requestType">Indicates whether the connection should be opened as an asynchronous connection or synchronous.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.PrepareExecution">
            <summary>
            Reset counters
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.ClearSqlConnectionPool">
            <summary>
            Clear Sql connection pool
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.AddToTimeoutDBList">
            <summary>
            Add db to timeout db list
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsNonPooledConnection">
            <summary>
            This sql connection is not a pooled connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowed">
            <summary>
            Retry allowed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseConnection.IsRetryAllowedForBadPool">
            <summary>
            Retry allowed for badpool error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.UserWstConnection">
            <summary>
            Gets the owner WstConnection that owns this database connection. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.SqlServerConnection">
            <summary>
            Gets the current underlying SqlConnection to given Sql Server database defined by the WebstoreDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.DatabaseConnection.Database">
            <summary>
            WebstoreDatabase object
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.resource">
            <summary>
            The Webstore resource that is denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.partitionKey">
            <summary>
            The partition key that gets the resource denylisted. This property is only applicable for CloudDB scenarios and will be null for Webstore scenarios.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.lastQueryTime">
            <summary>
            The time of the last query on this resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.enlistedTime">
            <summary>
            The time when this resource is enlisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.lastPersistentFailureLogTime">
            <summary>
            The time of the last time persistent failure event is logged.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.lastUndenylistTryTime">
            <summary>
            The time when the resource was last tried to be un-denylisted.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.denylistedIps">
            <summary>
            List of all the denylisted ip's belong to this resource. If denylistedIps is null, it means that the resource has no ips but just a server name.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.denylistedIpCodeBlock">
            <summary>
            The lock that controls the access to the critical section codes related to the denylisted ips.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.tracingID">
            <summary>
            The tracing ID that will be used for undenylisting this resource.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DenylistStaleDuration">
            <summary>
            Duration in seconds to mark a given resource as denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationSinceEnlisted">
            <summary>
            Duration since this resource was denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationSinceLastQuery">
            <summary>
            Duration in seconds since the last time this resource has been queried if it is online.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationSinceLastUnDenylistAttempt">
            <summary>
            Duration since this resource was last attempted to be un-denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.DurationForPersistentFailureLog">
            <summary>
            Duration since the last time when this resource was denylisted or logged as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsPersistentFailure">
            <summary>
            Indicates whether the resource has been long enough to be reported as persistent failure.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsCloudDBPartition">
            <summary>
            Indicates whether this resource is part of CloudDB partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsDroppedFromConfig">
            <summary>
            Indicates whether this resource has been taken out from Metadata cache due to a change in the config database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsFullyDenylisted">
            <summary>
            Indicates whether all the ip's for this resource is denylisted.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.Denylisting.DenylistedResource.IsFullyReachable">
            <summary>
            Indicates whether all the ip's for this resource is reachable.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.DenylistManager.undenylistThreadSleepTime">
            <summary>
            Time interval between each attempt to undenylist servers.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.DenylistManager.denylistTableCodeLock">
            <summary>
            Critical section lock that controls to the denylist table access. Always acquire this lock before denylistQueueCodeLock.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.DenylistManager.denylistQueueCodeLock">
            <summary>
            Critical section lock that controls to the denylist queue access. Always acquire this lock after denylistTableCodeLock.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.DenylistManager.Denylist(System.Object,System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Add the input resource to the list of denylisted resources. 
            </summary>
            <param name="partitionKey">The partitionKey that leads the resource to be denylisted. It will be always null for non-clouddb scenarios.</param>
            <param name="ipAddress">The IP on the resource to denylist. IP could be the actual servername.</param>
            <param name="resource">The resource to denylist.</param>
            <Exceptions>ApplicationException if timeout expires before the lock request is granted.</Exceptions>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.DenylistManager.IsDenylisted(System.String,Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of denylisted resources.
            </summary>
            <param name="ipAddress">The IP address of the input resource to test whether it is in the list of the denylisted resources.</param>
            <param name="resource">The input resource to test whether it is in the list of the denylisted resources.</param>
            <returns>True if the given ip address of the given resource is in the list of the denylisted resources; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.DenylistManager.IsDenylisted(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Returns whether the input resource is in the list of denylisted resources.
            </summary>
            <param name="resource">The input resource to test whether it is in the list of the denylisted resources.</param>
            <returns>True if the resource is in the list of the denylisted resources and all its ip addresses are in the denylist; false otherwise.</returns>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.PrimaryDatabaseStatus.isReadOnly">
            <summary>
            true if no write db available for the partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isMarkedOffline">
            <summary>
            true if a candidate found is offline
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isTimeOut">
            <summary>
            true if candidate found in timeout array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.isSkippedDueToThrottling">
            <summary>
            true if candidate found in skip array
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.SecondaryDatabaseStatus.availableSecondaries">
            <summary>
            number of available secondary database
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.ResourceSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and maxNumber
            </summary>
            <param name="maxNumber">0..maxNumber random number</param>
            <returns>0...maxNumber</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabaseConnections(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Internal helper version of GetDBConnections
            </summary>
            <param name="connection">WstConnection</param>
            <param name="command">WstCommand object</param>
            <returns>WstDBConnections</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.ValidateSecondaryType">
            <summary>
            Validates that if given failover mode is available for the deployment type.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.CreateDatabaseConnection(Microsoft.Webstore.WstClient.WstConnection,Microsoft.Webstore.WstClient.WstCommand)">
            <summary>
            Creates a new WstDBConnection matching the partition/cmdtype/security/connectiontimeout.
            </summary>
            <remarks>
            Creates a WstDBConnection with SqlConnection that has its 
            ConnectionString initialized to match partition cmd type, 
            security, and timeout, but is NOT opened yet.
            </remarks>
            <param name="connection">SqlConnection</param>
            <param name="command">Physical Partition Number.</param>
            <returns>WstDBConnection</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase})">
            <summary>
            Internal/private helper to get a WstDatabase from the partition that would satisfy
            the specified WstCommandType.  Checks to make sure server is not denylisted, and
            DB is online.
            </summary>
            <param name="sqlFssNumber">Physical Partition Number</param>
            
            <param name="timeOutDatabases">WstDatabases that have had CommandTimeout errors</param>
            <param name="throttledDatabases">List of dbs to skip from selection</param>
            <returns>WstDatabase</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.DeterminePartitionBoundaries(System.Int32@,System.Int32@)">
            <summary>
            Determines the starting sqlFss number and how many of the sqlFss should be iterated.
            </summary>
            <param name="initialSqlFssNumber">The initialSqlFssNumber</param>
            <param name="maxSqlFssIteration"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetPrimaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.PrimaryDatabaseStatus@)">
            <summary>
            Helper to find best primary DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase matching the criteria</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetSecondaryDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.SecondaryDatabaseStatus@,System.Boolean)">
            <summary>
            Helper to find best read DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <param name="forceLocalOnly">The server must be local</param>
            <returns>WstDatabase that best matches criteria (least stale, write vs read, etc.)</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.GetGeoPartnerDatabase(System.Int32,System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},System.Collections.Generic.List{Microsoft.Webstore.MetaData.WebstoreDatabase},Microsoft.Webstore.WstClient.PrimaryDatabaseStatus@)">
            <summary>
            Helper to find best read DB match available
            </summary>
            <param name="sqlFssNumber">Physical partition</param>
            <param name="timeOutDatabases">WstDatabase array that have already had cmd timeout errors</param>
            <param name="throttledDatabases">WstDatabase array to skip from this selection</param>
            <param name="status"></param>
            <returns>WstDatabase that best matches criteria (least stale, write vs read, etc.)</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.DatabaseSelector.PrologueForExecution(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.WstClient.DatabaseConnection)">
            <summary>
            Performs the last actions before execution. 
            </summary>
            <param name="command">The command that is going to be executed.</param>
            <param name="connection">The connection that is going to be used for the command execution .</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PartnerOnlyDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PartnerThenSecondaryDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PrimaryOnlyDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.PrimaryThenSecondaryDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.SpecificDatabaseDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FailoverSupport.WriteAllCopiesDatabaseSelector.FinalDatabaseValidate(Microsoft.Webstore.WstClient.WstCommand,Microsoft.Webstore.MetaData.WebstoreDatabase@)">
            <summary>
            Validates that the WstDatabase selected for this WstCommand is still valid after the connection has been opened (state may have changed).
            </summary>
            <param name="command">The command for validating the database. The value could be null.</param>
            <param name="database">The database to validate.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.CheckFileOperationAllowed(Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            See if the command can be executed in current config state
            </summary>
            <param name="failoverIn">client specified failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.FileShareSelector.GetFileShare(System.Int32,Microsoft.Webstore.WstClient.WstPartitionType,Microsoft.Webstore.WstClient.WstFailoverMode,System.Boolean)">
            <summary>
            Helper to get the appropriate FileShare for this indexMode/access.
            </summary>
            <param name="partition">partition index</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
            <param name="failoverModeIn">failover mode</param>
            <param name="updatesAllowed">Would the Op allow updates</param>
            <returns>WstFileShare</returns>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstContext">
            <summary>
            WstContext provides the Webstore routing and failover information (Deployment Name, Partition, Failover options).
            This context is used as input to the Webstore File/Directory APIs 
            (WstFile, WstDirectory, WstFileStream, WstFileInfo, WstDirectoryInfo)
            so that Webstore can route the operations to the correct File Shares.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAny">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAny to randomly select an available partition
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.WstClient.WstContext.PartitionAllocate">
            <summary>
            Set WstContext.Partition = WstContext.PartitionAllocate to automatically select best partition to allocate new data
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor">
            <summary>
            Initializes a new instance of the WstContext class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment.
            </summary>
            <param name="deployment">Deployment name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the WstContext class for the specified Deployment and partition.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            and failover options.
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.#ctor(System.String,System.Int32,Microsoft.Webstore.WstClient.WstFailoverMode,Microsoft.Webstore.WstClient.WstPartitionType)">
            <summary>
            Initializes a new instance of the WstContext class with the specified Deployment, partition,
            failover option, and partition type (logical/physical).
            </summary>
            <param name="deployment">Deployment Name</param>
            <param name="partition">partition index</param>
            <param name="failoverMode">failover mode</param>
            <param name="partitionType">WstPartitionType.Logical or .Physical</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.Clone">
            <summary>
            Create copy of this context.
            </summary>
            <returns>Copy of this WstContext</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFullPath(Microsoft.Webstore.WstClient.WstPath,System.Boolean,System.String@,Microsoft.Webstore.MetaData.WebstoreFileshare@)">
            <summary>
            Internal helper to get full path given for this context given the relative path and access mode required.
            </summary>
            <param name="path">relative path on fileshare</param>
            <param name="updatesAllowed">Is this an operation that could update the fileshare</param>
            <param name="rootPath">output the share's root path</param>
            <param name="fileShareOut">output the WebstoreFileshare used</param>
            <returns>full path</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetFileShare(System.Boolean)">
            <summary>
            Helper on the WstContext to find a WebstoreFileshare that satisfies the context 
            </summary>
            <param name="updatesAllowed">Is this an operation that would allow udpates to the fileshare</param>
            <returns>WebstoreFileshare for context</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.HandleIOException(System.String,System.IO.IOException,System.Boolean)">
            <summary>
            HandleIOException.
            </summary>
            <param name="fullPath"></param>
            <param name="e"></param>
            <param name="fOkToRetry"></param>
            <returns>true if retry is OK</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstContext.GetPath(Microsoft.Webstore.MetaData.WebstoreFileshare)">
            <summary>
            Gets the path "\\ + ServerName + \ + SharePath" of the given Fileshare.
            </summary>
            <param name="fileshare">Fileshare whose path to get.</param>
            <returns>Path "\\ + ServerName + \ + SharePath" indicated by the input file share.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Deployment">
            <summary>
            Gets or sets the Deployment Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.Partition">
            <summary>
            Gets or sets the partition index
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.FailoverMode">
            <summary>
            Gets or sets the failover mode
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstContext.PartitionType">
            <summary>
            Gets or sets the WstPartitionType
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectory">
            <summary>
            WstDirectory exposes static methods for creating, moving, and enumerating 
            through directories and subdirectories.  (This is the Webstore equivalent 
            of the System.IO.Directory class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.#ctor">
            <summary>
            Private constructor (Static only class)
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.CreateDirectory(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory path to create.</param>
            <returns>A WstDirectoryInfo as specified by path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes an empty directory from a specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Delete(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on disk.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the creation date and time, in coordinated universal time (UTC) format, of a directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <returns>A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type String containing the names of subdirectories in path. </returns>
            <remarks>This method is identical to GetDirectories(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetDirectories(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters 
            in InvalidPathChars.</param>
            <returns>A String array of directories matching the search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
            <remarks>This method is identical to GetFiles(WstContext, String, String) 
            with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFiles(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory to search.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The parameter cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in 
            InvalidPathChars.</param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
            <remarks>This method is identical to GetFileSystemEntries(WstContext, String, String) with the asterisk (*) specified as the search pattern.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetFileSystemEntries(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to be searched.</param>
            <param name="searchPattern">The search string to match against the names of files in path. 
            The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") 
            followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of 
            the characters in InvalidPathChars.</param>
            <returns>A String array of file system entries matching the search criteria.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last accessed. 
            This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time the specified file or directory was last written to. 
            This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.GetParent(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Retrieves the parent directory of the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or a null reference (Nothing in Visual Basic) if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="context">Webstore context for source and destination</param>
            <param name="srcDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for sourceDirName.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectory.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. 
            This value is expressed in UTC time.</param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstDirectoryInfo">
            <summary>
            Exposes instance methods for creating, moving, and enumerating through 
            directories and subdirectories.  (This is the Webstore equivalent to the
            System.IO.DirectoryInfo class).
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileSystemInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
            <param name="fileInfo"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileSystemInfo.ToString">
            <summary>
            Returns the original path that was passed by the user.
            </summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Context">
            <summary>
            WstContext for this WstFileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.WstFileShare">
            <summary>
            WebstoreFileshare used for this WstFileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Attributes">
            <summary>
            Gets or sets the FileAttributes of the current FileSystemInfo
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current FileSystemInfo object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.CreationTimeUtc">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether a file or directory exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileSystemInfo.Name">
            <summary>
            Gets the name of the file or directory.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstDirectoryInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstDirectoryInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
            <remarks>If the directory already exists, this method does nothing.</remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <returns>The last directory specified in path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete">
            <summary>
            Deletes this DirectoryInfo if it is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a DirectoryInfo, specifying whether to delete subdirectories and files.
            </summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of DirectoryInfo objects.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria.
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type WstFileInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns a list of files and subdirectories from the current directory.
            </summary>
            <returns>An array of type WstFileSystemInfo</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Returns a list of files and subdirectories from the current directory matching the given searchPattern, such as "*.txt".
            </summary>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <returns>An array of type FileInfo.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a DirectoryInfo instance and its contents to a new path.
            </summary>
            <param name="destDirName">The name and path to which to move this directory. 
            The destination cannot be another disk volume or a directory with the identical name. 
            It can be an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Name">
            <summary>
            Gets the name of this DirectoryInfo instance.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstDirectoryInfo.Root">
            <summary>
            Gets the root portion of a path.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFile">
            <summary>
            Provides static methods for the creation, copying, deletion, 
            moving, and opening of files, and aids in the creation of FileStream objects.
            WstFileStream is a thin wrapper over the .NET Framework FileStream object.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.#ctor">
            <summary>
            Hide Constructor... all Static Methods
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.AppendText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a StreamWriter that appends UTF-8 encoded text to an existing file.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file to append to</param>
            <returns>A StreamWriter that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy.</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Copy(Microsoft.Webstore.WstClient.WstContext,System.String,Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="srcContext">Webstore source file context</param>
            <param name="srcPath">The file to copy (relative to Webstore context).</param>
            <param name="destContext">Webstore destination file context</param>
            <param name="destPath">The name of the destination file (relative to Webstore context). This cannot be a directory or an existing file.</param>
            <param name="overwrite">true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Create(Microsoft.Webstore.WstClient.WstContext,System.String,System.Int32)">
            <summary>
            Creates a file in the specified path.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The path and name of the file to create (relative to Webstore context)</param>
            <param name="buffersize">The number of bytes buffered for reads and writes to the file.</param>
            <returns>A WstFileStream that provides read/write access to the specified file.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.CreateText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The file to be opened for writing (relative to Webstore context).</param>
            <returns>A StreamWriter that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Delete(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="context">Webstore context</param>
            <param name="path">The name of the file to be deleted (relative to the Webstore context).</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Exists(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to check (relative to the Webstore context).</param>
            <returns>true if the caller has the required permissions and path contains the name 
            of an existing file; otherwise, false. This method also returns false if path is a 
            null reference (Nothing in Visual Basic) or a zero-length string. If the caller 
            does not have sufficient permissions to read the specified file, 
            no exception is thrown and the method returns false regardless of the existence of path.
            </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Gets the FileAttributes of the file on the path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file (relative to the Webstore context).</param>
            <returns>The FileAttributes of the file on the path, or -1 if the path or file is not found.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in local time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.GetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime structure set to the date and time that the specified file or directory 
            was last written to. This value is expressed in UTC time. </returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Move(Microsoft.Webstore.WstClient.WstContext,System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="context">Webstore context for the source and destination paths</param>
            <param name="srcPath">The name of the file to move.</param>
            <param name="destPath">The new path for the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <returns>A WstFileStream opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <returns>An unshared WstFileStream that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.Open(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, 
            write, or read/write access and the specified sharing option.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to open.</param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, 
            and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file.</param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file</param>
            <returns>A WstFileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenRead(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only WstFileStream on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenText(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for reading.</param>
            <returns>A StreamReader on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.OpenWrite(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Opens an existing file for writing.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file to be opened for writing.</param>
            <returns>A read/write, unshared FileStream object on the specified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetAttributes(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The path to the file.</param>
            <param name="fileAttributes">The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetCreationTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the creation date and time information.</param>
            <param name="time">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastAccessTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), the specified file was last accessed.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the access date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTime(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFile.SetLastWriteTimeUtc(Microsoft.Webstore.WstClient.WstContext,System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">The file for which to set the date and time information.</param>
            <param name="time">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileInfo">
            <summary>
            Provides instance methods for the creation, copying, deletion, moving, and opening of files, 
            and aids in the creation of WstFileStream objects.  (This is the Webstore equivalent of the
            System.IO.FileInfo class).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Initializes a new instance of the WstFileInfo class on the specified path/context.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A string specifying the path on which to create the WstFileInfo.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.AppendText">
            <summary>
            Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CopyTo(Microsoft.Webstore.WstClient.WstContext,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file.
            </summary>
            <param name="destContext"></param>
            <param name="destPath">The name of the new file to copy to.</param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns>A new file.</returns>
            <remarks>By default, full read/write access to new files is granted to all users.
            This method is a wrapper for the functionality provided by WstFile.Create.
            </remarks>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.CreateText">
            <summary>
            Creates a StreamWriter that writes a new text file represented by this instance of the FileInfo
            </summary>
            <returns>A new StreamWriter</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="destPath">The path to move the file to, which can specify a different file name</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A WstFileStream object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns>A WstFileStream object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenRead">
            <summary>
            Creates a read-only FileStream.
            </summary>
            <returns>A new read-only FileStream object.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenText">
            <summary>
            Creates a StreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileInfo.OpenWrite">
            <summary>
            Creates a write-only WstFileStream.
            </summary>
            <returns>A new write-only unshared WstFileStream object.</returns>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Directory">
            <summary>
            Gets a value indicating whether a file exists.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.DirectoryName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Length">
            <summary>
            Gets the size of the current file.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileInfo.Name">
            <summary>
            Overridden. Gets the name of the file.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstFileStream">
            <summary>
            Exposes a Stream around a file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path and creation mode.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, and read/write permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, and buffer size.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write and sharing permission, buffer size, and synchronous or asynchronous state.
            </summary>
            <param name="context">The Webstore context for this operation.</param>
            <param name="path">A path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode"> FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="buffersize">The desired buffer size in bytes. For bufferSize values between zero and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">Specifies whether to use asynchronous I/O or synchronous I/O. 
            However, note that the underlying operating system might not support asynchronous I/O, 
            so when specifying true, the handle might be opened synchronously depending on the platform. 
            When opened asynchronously, the BeginRead and BeginWrite methods perform better on large 
            reads or writes, but they might be much slower for small reads or writes. If the application 
            is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. 
            Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, 
            but using it without redesigning the application for asynchronous I/O can 
            decrease performance by as much as a factor of 10.
            </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.#ctor(Microsoft.Webstore.WstClient.WstContext,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.CreateNativeFileHandle(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.UInt32)">
            <summary>
            Sets the m_NativeFileHandle value.
            </summary>
            <param name="fullPath"></param>        
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <param name="buffersize"></param>        
            <param name="FileFlagsAndAttributes"></param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read. </param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous read.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Overridden. Begins an asynchronous write.
            </summary>
            <param name="array">The buffer to write data to.</param>
            <param name="offset">The zero based byte offset in array at which to begin writing.</param>
            <param name="numBytes">The maximum number of bytes to write. </param>
            <param name="userCallback">The method to be called when the asynchronous write operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous write.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Close">
            <summary>
            Overridden. Closes the file and releases any resources associated with the current file stream.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.System#IDisposable#Dispose">
            <summary>
            Clear the resources used by this object
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndRead(System.IAsyncResult)">
            <summary>
            Overridden. Waits for the pending asynchronous read to complete.
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.EndWrite(System.IAsyncResult)">
            <summary>
            Overridden. Ends an asynchronous write, blocking until the I/O operation has completed.
            </summary>
            <param name="asyncResult">The pending asynchronous I/O request.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Flush">
            <summary>
            Overridden. Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the FileStream while permitting read access.
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.ReadByte">
            <summary>
            Overridden. Reads a byte from the file and advances the read position one byte.
            </summary>
            <returns>The byte cast to an int, or -1 if reading from the end of the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Overridden. Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin. </param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.SetLength(System.Int64)">
            <summary>
            Overridden. Sets the length of this stream to the given value.
            </summary>
            <param name="length">The new length of the stream. </param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked.
            </summary>
            <param name="position">The beginning of the range to unlock. </param>
            <param name="length">The range to be unlocked.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overridden. Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="array">The array to which bytes are written.</param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstFileStream.WriteByte(System.Byte)">
            <summary>
            Overridden. Writes a byte to the current position in the file stream.
            </summary>
            <param name="bvalue">A byte to write to the stream.</param>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanRead">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanSeek">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.CanWrite">
            <summary>
            Overridden. Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Handle">
            <summary>
            Gets the operating system file handle for the file that the current WstFileStream object encapsulates.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.IsAsync">
            <summary>
            Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Length">
            <summary>
            Overridden. Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Name">
            <summary>
            Gets the name of the FileStream that was passed to the constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.Position">
            <summary>
            Overridden. Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.WstClient.WstFileStream.WstFileshare">
            <summary>
            The WstFileShare used to open this stream.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.WstClient.WstPath">
            <summary>
            Summary description for WstPath.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.WstClient.WstPath.ValidatePath(System.String,System.String)">
            <summary>
            Validates that the relative path is well formed.
            </summary>
            <param name="path"></param>
            <param name="argument">argument name of the path</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.Initialize">
            <summary>
            Initializes the MetadataHelper. This function is not thread-safe so should be called from a thread-safe environment.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCollectPeriod(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the counter collection period for the given deployment.
            </summary>
            <param name="deployment">The deployment of the counter collection period to return.</param>
            <returns>Number of seconds between resetting the request execution time counters.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyExcellent(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyGood(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "good" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "good".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyOK(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "excellent" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "excellent".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.CounterCommandLatencyPoor(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the "poor" latency duration for the given deployment.
            </summary>
            <param name="deployment">The deployment of the latency duration to return.</param>
            <returns>The maximum duration in milliseconds at which requests will be counted as "poor".</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerDataCenterName(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get data center name for a specific database's server.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetLatencyBucket(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Get the longest latency for replication to this database
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsLocal(Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if the database is in the same datacenter this client reside.
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.IsFirstDatabaseFresherThanSecondary(Microsoft.Webstore.MetaData.WebstoreDatabase,Microsoft.Webstore.MetaData.WebstoreDatabase)">
            <summary>
            Check if secondary database1 is fresher than secondary database2,
            database2 is our preference.
            </summary>
            <param name="database1"></param>
            <param name="database2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Gets the owner ApplicationContext for the matching WebstoreDeployment of WebstoreResource.
            </summary>
            <param name="resource">The WebstoreResource to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment of WebstoreResource if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetApplicationContext(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets the owner ApplicationContext for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment to get the ApplicationContext.</param>
            <returns>The ApplicationContext of the the matching WebstoreDeployment if the WebstoreDeployment is still deployed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetServerAddress(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            Get either server name or server ip address if there is one for this server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneDatabase(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets a sample WebstoreDatabase for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment that owns returned WebstoreDatabase.</param>
            <returns>One of the WebstoreDatabase which is part of the WebstoreDeployment. It may be null in case there are no Sql fail safe set for the given deployment.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreDeployment)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreDeployment.
            </summary>
            <param name="deployment">The WebstoreDeployment that owns returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is part of the WebstoreDeployment. It may be null in case there are no fail safe set for the given deployment.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.MetadataHelper.GetOneResource(Microsoft.Webstore.MetaData.WebstoreServer)">
            <summary>
            Gets a sample WebstoreResource for the given WebstoreServer.
            </summary>
            <param name="server">The WebstoreServer that is hosting the returned WebstoreResource.</param>
            <returns>One of the WebstoreResource which is hosted by the WebstoreServer. It may be null.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.Start">
            <summary>
            Starts the core metadata background threads: EventGeneration, PollDeployments, PollForNewServers, PollForNewDeployments, PollForUserSettings.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.StartBackgroundThread(System.String,Microsoft.Webstore.MetaData.ThreadManager.ThreadFunctionDelegate,System.Object,System.TimeSpan)">
            <summary>
            Starts a background thread which will be controlled by the current thread manager.
            </summary>
            <param name="functionIdentifier">The user friendly text identifier for the function to be intiated in the background thread.</param>
            <param name="threadFunction">The function to be intiated in the background thread.</param>
            <param name="functionParameter">The parameter for the function to be intiated in the background thread.</param>
            <param name="functionSleepInterval">The interval that will be taken between each execution of the function to be intiated in the background thread.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.WrapperFunctionForBackgroundThreadFunction(System.Object)">
            <summary>
            The wrapper function for the the background thread function.
            </summary>
            <param name="threadParametersHolder"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.StopAll">
            <summary>
            Stop the background thread.
            In practice, since this Thread.IsBackground = true for our thread, it will get
            automatically Thread.abort() by the runtime when the process is exiting.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.BackgroundPollDeployments(System.Object)">
            <summary>
            The background thread updates replication delay info, denylists, 
            and checks health of WSTService to make sure we will get notifications from
            the admin console if configuration changes occur (promote/demote, online/offline).
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.BackgroundPollForNewDeployments(System.Object)">
            <summary>
            Polls for addition of new deployments.
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder">
            <summary>
            Privat class that holds the information set for the function, WrapperFunctionForBackgroundThreadFunction, that will initiated in the background thread.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.#ctor(System.String,Microsoft.Webstore.MetaData.ThreadManager.ThreadFunctionDelegate,System.Object,System.TimeSpan)">
            <summary>
            Constructs a ThreadParametersHolder that will be consumed by WrapperFunctionForBackgroundThreadFunction.
            </summary>
            <param name="functionIdentifier">The user friendly text identifier for the function to be intiated in the background thread.</param>
            <param name="threadFunction">The function to be intiated in the background thread.</param>
            <param name="functionParameter">The parameter for the function to be intiated in the background thread.</param>
            <param name="functionSleepInterval">The interval that will be taken between each execution of the function to be intiated in the background thread.</param>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.PollingFunctionIdentifier">
            <summary>
            The user friendly text identifier for the function to be intiated in the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.PollingFunction">
            <summary>
            The function to be intiated in the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.pollingFunctionParameters">
            <summary>
            The parameters for the function to be intiated in the background thread.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ThreadManager.ThreadParametersHolder.pollingFunctionSleepInterval">
            <summary>
            The interval that will be taken between each execution of the function to be intiated in the background thread.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ThreadManager.ThreadFunctionDelegate">
            <summary>
            The delagate for the the function to be intiated in the background thread.
            </summary>
            <param name="parameter">The parameter for the function to be intiated in the background thread.</param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCluster">
            <summary>
            WebstoreCluster
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreObject`1">
            <summary>
            All Wmo classes derive from this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.Equals(System.Object)">
            <summary>
            The equals method comapres the keys.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.GetUserStore(System.Guid)">
            <summary>
            The consumer can use this method to store information
            related to a particular WebstoreMetaDataObject.
            E.g. the client library might store information related
            to throttling per resource
            </summary>
            <param name="userStoreKey">The key for which to get the 
            user store</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.SetUserStore(System.Guid,System.Object)">
            <summary>
            Use this method to get the stored information from the
            userStore.
            </summary>
            <param name="userStoreKey"></param>
            <param name="value">The key with which to associate the 
            user store</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreObject`1.RemoveUserStore(System.Guid)">
            <summary>
            Removes the UserStore data for the given key.
            NOTE: The return value is not a bool. So that 
            malacious code might not try to remove user stores
            trying different keys.
            </summary>
            <param name="userStoreKey">The key for which to 
            remove the user store</param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.Key">
            <summary>
            Gets the key for the WebstoreObject.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreObject`1.IsObjectExpired">
            <summary>
            Gets information about whether the given WebstoreObject
            is expired - dropped from WstConfig.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Uid">
            <summary>
            Uid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Name">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.Path">
            <summary>
            Path
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringServerUid">
            <summary>
            MonitoringServerUid
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.MonitoringDataPartitionNum">
            <summary>
            MonitoringFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCluster.JobStatusDataPartitionNum">
            <summary>
            JobStatusFailSafeSetNum
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreClusterCollection">
            <summary>
            Collection of WebstoreCluster objects
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2">
            <summary>
            WebstoreKeyedCollection represents a keyed collection based on a sorted list approach. WebstoreKeyedCollection values are dynamic and can be updated by other threads so there is no guarantee of repeating reads.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreCollectionBase">
            <summary>
            base class for all Wmo collections.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreCollectionBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2._innerList">
            <summary>
            The inner sorted list that holds the key and the values. This object might be replaced by another thread so there is no guarantee on getting the same object twice. Every access to this member should ensure that, it takes a reference to the innerlist if it will be used in the next code cycles.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.ContainsKey(`0)">
            <summary>
            Determines whether the WebstoreKeyedCollection contains a specific key.
            </summary>
            <param name="key">The key to locate in the WebstoreKeyedCollection.</param>
            <returns>true if the WebstoreKeyedCollection contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.ContainsValue(`1)">
            <summary>
            Determines whether the WebstoreKeyedCollection contains a specific value.
            </summary>
            <param name="value">The value to locate in the WebstoreKeyedCollection. The value can be null for reference types.</param>
            <returns>true if the WebstoreKeyedCollection contains an element with the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetKeyAt(System.Int32)">
            <summary>
            Gets the key at the index location of the collection.
            </summary>
            <param name="index">The index location for the key.</param>
            <returns>The key.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetValueAt(System.Int32)">
            <summary>
            Gets the value at the index location of the collection.
            </summary>
            <param name="index">The index location for the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfKey(`0)">
            <summary>
            Searches for the specified key and returns the zero-based index within the entire WebstoreKeyedCollection
            </summary>
            <param name="key">The key to locate in the WebstoreKeyedCollection.</param>
            <returns>The zero-based index of key within the entire WebstoreKeyedCollection if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IndexOfValue(`1)">
            <summary>
            Searches for the specified value and returns the zero-based index of the first occurrence within the entire WebstoreKeyedCollection
            </summary>
            <param name="value">The value to locate in the WebstoreKeyedCollection The value can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of value within the entire WebstoreKeyedCollection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.MergeWithCollection(Microsoft.Webstore.MetaData.WebstoreKeyedCollection{`0,`1},System.Boolean,Microsoft.Webstore.MetaData.WebstoreConfig)">
            <summary>
            Merges the current collection with the specifed WebstoreKeyedCollection. Merge can be based on a delete mode where missing entries in the specified WebstoreKeyedCollection indicates the items should be deleted otherwise a regular merge semantics will be applied.
            </summary>
            <param name="collectionToMerge">The WebstoreKeyedCollection that will be merged with the current collection.</param>
            <param name="isMaxDeleteTicketChanged">Indicates whether missing entries should be treated as deleted or no-op.</param>
            <param name="site">The site that the current WebstoreKeyedCollection belongs to.</param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`0,`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`0)">
            <summary>
            
            </summary>
            <param name="keyToRemove"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Replace(Microsoft.Webstore.MetaData.WebstoreKeyedCollection{`0,`1})">
            <summary>
            Replaces the innerlist with the innerlist of the specied KeyedCollection and returns a reference to the original innerlist, as an atomic operation.
            </summary>
            <param name="newKeyedCollection">The variable to set to the specified value.</param>
            <returns>The original value of location.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Replace(System.Collections.Generic.SortedList{`0,`1})">
            <summary>
            Replaces the innerlist with the specified innerlist and returns a reference to the original innerlist, as an atomic operation.
            </summary>
            <param name="newList">The variable to set to the specified value.</param>
            <returns>The original value of location.</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.OnCollectionChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            Get the value if key exists in collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Add(`1)">
            <summary>
            Adds item to collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Contains(`1)">
            <summary>
            Returns whether the collection containst the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, 
            starting at a particular Array index. 
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Remove(`1)">
            <summary>
            Removes the given item from the collection
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.GetEnumerator">
            <summary>
            Gets the enumerator for the collection
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.CollectionChanged">
            <summary>
            The collection changed Event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Item(`0)">
            <summary>
            Gets the object associated with the specified key in the collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Comparer">
            <summary>
            Gets the System.Collections.Generic.IComparer for the sorted list.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.InnerList">
            <summary>
            Gets the inner System.Collections.Generic.SortedList structure of the WebstoreKeyedCollection. This property does not guarantee repeating reads. Under no condition, the returned structure should be used other than read purposes.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Keys">
            <summary>
            Gets a collection containing the keys in the System.Collections.Generic.SortedList. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Values">
            <summary>
            Gets a collection containing the values in the System.Collections.Generic.SortedList.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.Count">
            <summary>
            Gets the count of items in the collection
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreKeyedCollection`2.IsReadOnly">
            <summary>
            Tells whether the collection is readonly
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.CollectionChangedEventHandler">
            <summary>
            Delegate for CollectionChangedEventHandler
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfigCollection">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigCollection.Item(System.String)">
            <summary>
            
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection">
            <summary>
            The collection of WebstoreDatabases.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1">
            <summary>
            Forms the base class for Resource collections.
            The WmoDatabaseCollection and the WmoFileshareCollection derive from this.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceCollectionBase`1.Item(System.String,System.String)">
            <summary>
            Property - serverName:resourceName
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatencyCollection">
            <summary>
            Each database has a collection of WebstoreDatabaseLatencyCollection.
            Generally this is used for multimaster topology where each db replicated to 
            each of the fss partners.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionCollection">
            <summary>
            Collection of dataPartitions.
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDep_ClusterSettingsCollection">
            <summary>
            WebstoreDep_ClusterSettingsCollection 
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection">
            <summary>
            This class holds collection of deployments represented in the WstConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.Guid)">
            <summary>
            Returns the deployment associated with the given GUID.
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeploymentCollection.Item(System.String)">
            <summary>
            Returns the deployment object.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareCollection">
            <summary>
            The collection of Fileshares in a FileFailsafeset.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareCollection.Item(System.String,System.String)">
            <summary>
            Gets the database identified by the server and name
            </summary>
            <param name="ServerName"></param>
            <param name="ResourceName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFssCollection">
            <summary>
            The collection of Fileshare Failsafesets.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFssCollection`1">
            <summary>
            WebstoreResourceFssCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection">
            <summary>
            The WebstoreGeoPartnerCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection.Add(Microsoft.Webstore.MetaData.WebstoreGeoPartner)">
            <summary>
            Adds item to collection
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection.Contains(System.String)">
            <summary>
            Returns whether a GeoPartner exists in the given data center.
            </summary>
            <param name="dataCenterName"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartnerCollection.Item(System.String)">
            <summary>
            Returns the WebstoreGeopartner associated with the DataCenter
            </summary>
            <param name="dataCenterName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGuidCollection">
            <summary>
            The WebstoreGuidCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifestCollection">
            <summary>
            The WebstoreManifestCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreServerCollection.Contains(System.Guid)">
            <summary>
            Does the server collection contain server corrosponding to the given GUID.
            </summary>
            <param name="svrUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerCollection.Item(System.String)">
            <summary>
            Gets the server object of the given name.
            </summary>
            <param name="serverName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRoleCollection">
            <summary>
            The WebstoreServerRoleCollection
            </summary>
            
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSettingsCollection">
            <summary>
            WebstoreSettingsCollection
            </summary>    
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSQLFssCollection">
            <summary>
            The collection of SQL Failsafesets.
            </summary>s
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreStringCollection">
            <summary>
            The WebstoreStringCollection
            </summary>
            
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreStringCollection.Contains(System.String)">
            <summary>
            Whether the server belongs to the given role
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WmoEnumerator`2">
            <summary>
            This class implements the IEnumerator over a WebstoreKeyedCollection in support
            of the "foreach" keyword
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Dispose">
            <summary>
            The dispose method
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.MoveNext">
            <summary>
            Moves to the next element in the enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WmoEnumerator`2.Reset">
            <summary>
            Moves to the start of the enumerator
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WmoEnumerator`2.Current">
            <summary>
            Returns the current element of the enumerator
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreConfig">
            <summary>
            Summary description for WebstoreConfig.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnConfigCacheChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.SetPollingSucceeded">
            <summary>
            Each background thread informs it passed polling.
            </summary>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GenerateConfigExpiredEvent">
            <summary>
            Generates the cached configuration expired event if necessary.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnUserSettingsChanged(System.Object[])">
            <summary>
            called to fire the UserSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnWebstoreSettingsChanged(System.Object[])">
            <summary>
            called to fire the WebstoreSettingsChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.OnEnvironmentChanged(System.Object[])">
            <summary>
            called to fire the EnvironmentChanged event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsUserSettingPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether 
            polling is required.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationUserSettings(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.IsEnvSvrPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationEnvSvr(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.RenewExpirationNewDeps(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.DeepInitializeAllDeployments">
            <summary>
            Initializes the deployment including the collections.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.InternalInitialize">
            <summary>
            Initializes this config instance (singleton).
            Things that it does:
            1.  Shallow initialize all the registered servers
            2.  Start background thread to look for new servers
            3.  Shallow initialize all the registered deployments
            4.  Start background thread to poll for deployment changes
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.Initialize">
            <summary>
            Call this method to initialize the instance. 
            This should be called before accessing any properties/methods of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.Refresh(System.Boolean)">
            <summary>
            Force all internal classes to refresh themselves
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetManifestCollection(System.Boolean)">
            <summary>
            returns a Collection of WmoManifest objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetServerRoleCollection(System.Boolean)">
            <summary>
            returns a Collection of ServerRole objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfig.GetDistributionDatabaseTemplateCollection(System.Boolean)">
            <summary>
            returns a Collection of Database Templates objects 
            that are registered in the WstConfig.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentChanged">
            <summary>
            The event that gets fired when environment is updated
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigCacheChanged">
            <summary>
            The event that gets fired when cached configuration either gets expired
            or gets renewed after expiration.
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettingsChanged">
            <summary>
            The event that gets fired when the userSettings
            are changed
            </summary>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreConfig.WebstoreSettingsChanged">
            <summary>
            The event that gets fired when the webstoreSettings
            are changed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ConfigConnectionString">
            <summary>
            Gets the connectin string to be used
            to query the config db.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EventsToGenerateList">
            <summary>
            returns the object that stores the list
            of events that need to be generated by the 
            background event generation thread.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Deployments">
            <summary>
            Gets a collection of all deployments that the Configuration database monitors. 
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Servers">
            <summary>
            Gets the Server collection. Depending on the WmoViewType hint,
            the server collection might contain one, subset or all of the servers that
            the WstConfig database has.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SiteName">
            <summary>
            The site Name for this instance of the WmoConfig
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SQLDatabases">
            <summary>
            Gets the list of SQLDatabases that represent the physical sql server databases for this site.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.SelfAdminInfo">
            <summary>
            Gets the Information that the self healing agent and 
            the Monitoring agents require. Polling for changes on 
            that information only starts after the first call to 
            this property.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.EnvironmentSettings">
            <summary>
            Gets the Environment settings for the Site
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.UserSettings">
            <summary>
            Gets the UserSettings object
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.Settings">
            <summary>
            Gets the settings object from which all the 
            centralized settings stored in config can be queried
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.IsInitialized">
            <summary>
            Has the Initialize method been called.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfig.ClientDataCenter">
            <summary>
            Gets this client's datacenter
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.EnvironmentChangedEventHandler">
            <summary>
            Delegate for the EnvironmentChanged event
            </summary>
            <param name="src"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventHandler">
            <summary>
            Delegate for the Webstore Config cache changed event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.SettingsChangedEventHandler">
            <summary>
            Delegate for the SettingsChanged event
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedAction">
            <summary>
            This action defines, what happened to the config cache
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Expired">
            <summary>
            The cached configuration has expired.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.ConfigCacheChangedAction.Renewed">
            <summary>
            The cached configuration has been renewed.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs">
            <summary>
            The event arguments for the WebstoreConfigCacheChanged event
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.Action">
            <summary>
            What was the action - expired/renewed
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.ConfigCacheChangedEventArgs.TimeSpan">
            <summary>
            What time elapsed since the last action.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllUserSettings(System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            WspGetAllUserSettings
            </summary>
            <param name="Ticket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentsShallowInitInfo(System.DateTime)">
            <summary>
            execute WspGetDeploymentsShallowInitInfo
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV6_0(System.DateTime,System.DateTime,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV6_0
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="returnVal"></param>
            <returns></returns>        
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetEnvironmentAndServerInfoV6_0(System.DateTime,System.DateTime,System.String,System.Boolean,System.Int32@)">
            <summary>
            Execute WspGetEnvironmentAndServerInfoV6_0
            </summary>
            <param name="EnvTicketIn"></param>
            <param name="ServerTicketIn"></param>
            <param name="site"></param>
            <param name="useFileData"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetDeploymentInfoByUid_V6_0(System.Guid,System.DateTime,System.DateTime,System.DateTime,System.String,System.String,System.Int32@)">
            <summary>
            Execute WspGetDeploymentInfoByUid_V6_0
            </summary>
            <param name="depUid"></param>
            <param name="ticket"></param>
            <param name="fssLatencyTicket"></param>
            <param name="settingTicket"></param>
            <param name="serverRole"></param>
            <param name="serverName"></param>
            <param name="returnVal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetMonitoringInfo_V6_0(System.DateTime)">
            <summary>
            Execute WspGetMonitoringInfo_V6_0
            </summary>
            <param name="Ticket"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllManifests">
            <summary>
            Gets the Manifest related Information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllSecurityRoles(System.Guid)">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <param name="manifestUid"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllServerRoles">
            <summary>
            Returns all of the server roles for in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreConfigExecute.WspGetAllDatabaseTemplate">
            <summary>
            Returns all of the security roles for a given manifest
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreConfigurationInfo.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceStatus">
            <summary>
            Enumerates the different Statuses a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Online">
            <summary>
            The WmoResource (database/Fileshare) is Online
            This means clients can access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Offline">
            <summary>
            The WmoResource (database/Fileshare) is Offline
            This means clients cannot access it
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NoWriteAll">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            This means clients cannot access it.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NeedsRepair">
            <summary>
            The WmoResource(database/Fileshare) is marked
            as needs repair.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.NotDeployed">
            <summary>
            The WmoResource(database/Fileshare) is 
            not yet Deployed.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceStatus.Standby">
            <summary>
            The WmoResource(database only) is 
            in Standby state. 
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceRole">
            <summary>
            Enumerates the different Roles a database can have
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Primary">
            <summary>
            The WmoResource (database/Fileshare) is Primary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.Secondary">
            <summary>
            The WmoResource (database/Fileshare) is Secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringPrincipal">
            <summary>
            The WmoResource (database only) is Mirroring Principal
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceRole.MirroringMirror">
            <summary>
            The WmoResource (database only) is Mirror database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceType">
            <summary>
            The type of the resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.Database">
            <summary>
            The resource is of type SQL
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreResourceType.FileShare">
            <summary>
            The resource is of type File
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabase">
            <summary>
            Gives all the information needed to identify this database.
            Information includes - DeploymentUID, FailsafesetNumber, Status, Role etc.
            It also publishes events which get generated after a Status or Role change of the database.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResource">
            <summary>
            Represents a Webstore resource. 
            Forms the base class for WMODatabase and WMOFileshare classes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.CompareTo(System.Object)">
            <summary>
            Compares two resources. It compares on the key.
            </summary>
            <param name="compareWith"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResource.Equals(Microsoft.Webstore.MetaData.WebstoreResource)">
            <summary>
            The IEquatable::Equals method
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Name">
            <summary>
            Gets the Name of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerUid">
            <summary>
            Gets the Server UID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Server">
            <summary>
            Gets the Server on which this Resource resides
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ServerName">
            <summary>
            Gets the name of the server on which this resource is.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.FssId">
            <summary>
            Gets the Failsafeset ID of this Resource
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Uid">
            <summary>
            Gets the associated Resource Guid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.DeploymentUid">
            <summary>
            Gets the Guid associated with the deployment
            of which this Resource is a part of.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.ResourceFailSafeSet">
            <summary>
            Gets the corrosponding resource FailSafeSet
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.Status">
            <summary>
            Gets the Status of this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResource.IsOnline">
            <summary>
            Whether the database is online. Most required 
            by all users and thus a property.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStale">
            <summary>
            Is this database's latency higher than stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsStaleRemote">
            <summary>
            Is this database's latency higher than DataCenter stale latency bucket?
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsPrimary">
            <summary>
            Returns true if this database is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsGeoPartner">
            <summary>
            Returns true if this database is GeoPartner database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.IsDefaultGeoPartner">
            <summary>
            Returns true if this database is Default GeoPartner database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.Latency">
            <summary>
            Gets the highest latency for this database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.LatencyBucket">
            <summary>
            Gets the latency bucket under which the 
            database falls.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.DefaultStatus">
            <summary>
            The default status for this database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabase.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency">
            <summary>
            Latency object for the database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Key">
            <summary>
            Objects Unique key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.SourceDatabase">
            <summary>
            Gets the Source database object.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Latency">
            <summary>
            Gets the latency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDatabaseLatency.Bucket">
            <summary>
            Gets the latency bucket for the given latency.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDbSelector.GetRandom(System.Int32)">
            <summary>
            Gets random number between 0 and randomMax
            </summary>
            <param name="randomMax">0..randomMax random number</param>
            <returns>0...randomMax</returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartition">
            <summary>
            Stores information about a single Data Partition.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Number">
            <summary>
            Gets the partition number.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.SQLFssId">
            <summary>
            Gets the SQL Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.FileFssId">
            <summary>
            Gets the File Failsafeset ID, to which this partition belongs
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDataPartition.Status">
            <summary>
            Gets the status of the datapartition.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDenylistMgr.HandleError(System.Exception,Microsoft.Webstore.MetaData.WebstoreResource,System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Handle the error that was received from executing the summary.
            This will also denylist if needed.
            </summary>
            <param name="ex"></param>
            <param name="res"></param>
            <param name="conn"></param>
            <param name="isRegistryResource"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDenylistMgr.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.DeploymentPropertiesChangedEventHandler">
            <summary>
            Delegate for DeploymentPropertiesUpdated
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDeployment">
            <summary>
            This class represents a Wmo deployment and its associated properties.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.Refresh(System.Boolean)">
            <summary>
            refreshes this deployment with latest changes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsDepConfigurationExpired">
            <summary>
            Gives the state of polling for this deployment.
            </summary>
            <returns>true if expired, false if not</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.GetCachedFirstSqlFssForWstConfig">
            <summary>
            Gets the first Sql Fss in the deployment and caches it
            </summary>
            <returns>WebstoreSQLFss First cached FSS in the list</returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.RenewExpiration(System.DateTime)">
            <summary>
            Renew when configuration expires.
            </summary>
            <param name="dtExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ShallowInitializeDeployment(System.Data.IDataReader)">
            <summary>
            Shallow initializes from the data reader. Does not initialize the collections.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ForceReInitialize">
            <summary>
            Reinitialize deep, by reading from the config directly. 
            Null tickets are passed so that the whole configuration 
            is re-read.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.OnDeploymentSettingsChanged(System.Object[])">
            <summary>
            This method is called to generate the event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.ParsePolledDepInfoAndUpdateCache(System.Data.IDataReader)">
            <summary>
            Updates the present cache with what was just polled.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.MergeResultsIntoCache(Microsoft.Webstore.MetaData.WebstoreDeployment,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Merge the results from TempDep into the internal cache of this deployment
            </summary>
            <param name="tempDep"></param>
            <param name="IsMaxTicketChanged"></param>
            <param name="IsMaxDeleteTicketChanged"></param>
            <param name="fEnvironmentSettingsChanged"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.MergeGeoPartnerResultsIntoCache(Microsoft.Webstore.MetaData.WebstoreDeployment,System.Boolean)">
            <summary>
            Merges geo specific information into the cache.
            </summary>
            <param name="temporaryGeoDeployment"></param>
            <param name="isMaxDeleteTicketChanged"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreDeployment.FillInGeoPartner(Microsoft.Webstore.MetaData.WebstoreGeoPartner)">
            <summary>
            When the GeoPartner data is first collected from the result set, we only have the
            databases UIDs. This method will gather the actual database object to "fill in"
            the missing DB objects in the GeoPartner.
            </summary>
            <param name="sparseGeoPartner"></param>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Webstore.MetaData.WebstoreDeployment.DeploymentPropertiesChanged">
            <summary>
            The deployment properties changed event.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Name">
            <summary>
            Gets the name of the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Uid">
            <summary>
            Gets the Guid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Config">
            <summary>
            Gets the parent config object
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.ManifestUid">
            <summary>
            Gets the manifest Uid associated with this deployment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxTicket">
            <summary>
            Gets the max ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxPartitionTicket">
            <summary>
            Gets the max partition ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxDeleteTicket">
            <summary>
            Gets the max delete ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxFssLatencyTicket">
            <summary>
            Gets the max Failsafeset latency ticket
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.MaxWebstoreSettingsTicket">
            <summary>
            Gets the max WebstoreSettings ticket
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Description">
            <summary>
            Description of the Deployment 
            as registered in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.PartitionType">
            <summary>
            Gets the type of partitioning for this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryType">
            <summary>
            Secondary type of this deployment.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultWriteFailoverMode">
            <summary>
            Gets the default write failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileshareDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments Fileshare
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultWriteFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLDefaultReadFailoverMode">
            <summary>
            Gets the default read failover mode for this deployments SQL dbs
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleThreshold">
            <summary>
            Gets the Secondary Stale Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SecondaryStaleDCThreshold">
            <summary>
            Gets the Secondary Stale Data Center Threshold time that is used by the client library.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SiteConfigurationDeployment">
            <summary>
            Gets whether the current deployment is a site configuration deployment.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.SQLFailSafeSets">
            <summary>
            Get the collection of SQL Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.FileFailSafeSets">
            <summary>
            Get the collection of File Failsafesets for the deployment
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.Partitions">
            <summary>
            Get the collection of logical partitions for the deployment
            </summary>
            
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsGeoEnabled">
            <summary>
            Gets the status of GeoAwareness.
            /// </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsInitialized">
            <summary>
            Call this property to find out if this deployment
            has been initialized.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreDeployment.IsShallowInitialize">
            <summary>
            Returns true if deployment has been shallow initialized.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings">
            <summary>
            This class holds the environmen settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.Name">
            <summary>
            Name of the Environment
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetService">
            <summary>
            PollingOffsetService
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket0">
            <summary>
            LatencyBucket0
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket1">
            <summary>
            LatencyBucket1
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket2">
            <summary>
            LatencyBucket2
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.LatencyBucket3">
            <summary>
            LatencyBucket3
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalClient">
            <summary>
            Gets client polling interval.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingOffsetClient">
            <summary>
            Gets the amount of time before the TicketExpirationInterval
            that the client should start polling.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreEnvironmentSettings.PollingIntervalService">
            <summary>
            Gets the interval of time after which the service should repoll.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreErrorHelper">
            <summary>
            Error Helper for getting string resources, IDs and names.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.SettingNotExistsErrorNumber">
            <summary>
            error number for SettingNotExists error
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Number">
            <summary>
            The ID Number associated with this error resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreErrorHelper.Format">
            <summary>
            The Format string before the parameters are inserted.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreErrorHelper.#ctor(System.String)">
            <summary>
            The constructor for the class requires the Short name.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreEventsToGenerateList">
            <summary>
            Stores global list of events to be generated.
            The event generation thread comes and collects
            the list and fires the events synchronously.
            
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshare">
            <summary>
            Represents file share information
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreFileshare.#ctor">
            <summary>
            Internal constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.IsPrimary">
            <summary>
            Returns true if this fileshare is the primary database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshare.ResourceType">
            <summary>
            Gets the type of the resource
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFileshareFss">
            <summary>
            Represents a Fileshare Failsafeset.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceFss">
            <summary>
            Represents a Webstore resource Failsafeset. 
            Forms the base class for WMOSQLFss and WMOFileshareFss classes.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss">
            <summary>
            Represents a basic Webstore FailSafeSet resource. Simply the FSS and the Primary and
            the DefaultPrimary.
            Forms the base class for WebstoreResourceFss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss.Deployment">
            <summary>
            The deployment to which this ResourceFailsafeset belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceBasicFss.FssId">
            <summary>
            Gets the Failsafeset ID associated with this Failsafeset
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResourceFss.Equals(System.Object)">
            <summary>
            The equals method compares the WebstoreResourceBasicFss by checking their ID and Deployment.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreResourceFss.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.Status">
            <summary>
            Gets the status of this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreResourceFss.SecondaryType">
            <summary>
            Gets the type of secondry for this failsafeset.
            During upgrade different Failsafesets of the 
            same deployment might have different WmoSecondaryType's
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.ClusterPath">
            <summary>
            Gets the cluster path for the given fss.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.Fileshares">
            <summary>
            Gets a collection of databases in the Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.PrimaryFileshare">
            <summary>
            Gets the current primary for this Failsafeset
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreFileshareFss.DefaultPrimaryFileshare">
            <summary>
            Gets the default primary database for this Failsafeset
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreGeoPartner">
            <summary>
            Gives information about the SQLFSS in the deployment
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartner.Equals(System.Object)">
            <summary>
            The equals method compares the WebstoreResourceFss by checking their ID and Deployment.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreGeoPartner.GetHashCode">
            <summary>
            The get hash code function
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartner.DataCenterName">
            <summary>
            The Name of the DataCenter for this GeoPartner
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartner.GeoPartnerDatabase">
            <summary>
            Gets the current GeoPartner for this FSS and DC
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreGeoPartner.DefaultGeoPartnerDatabase">
            <summary>
            Gets the default GeoPartner for this FSS and DC
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreIPAddress">
            <summary>
            Stores information about server IP address.
            Wmo supports 2 IPs per server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IpAddress">
            <summary>
            Gets the ip address string.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Switch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.NetworkSwitch">
            <summary>
            Gets the name of the switch.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.IsPreferred">
            <summary>
            Is this IP Preferred by the clients.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreIPAddress.Server">
            <summary>
            Gets the server to which this IP address belongs.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstorePartitionType">
            <summary>
            What type of partition.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.None">
            <summary>
            Manifest is not written to support partitioning
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Fixed">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstorePartitionType.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreManifest">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreManifest.GetSecurityRoles">
            <summary>
            Returns a list of security roles associated with this manifest
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Uid">
            <summary>
            Manifest Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Name">
            <summary>
            Manifest Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Version">
            <summary>
            Manifest Version.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Description">
            <summary>
            User defined description of the manifest.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.Topology">
            <summary>
            Topology of the manifest (SingleMaster, Multimaster, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionType">
            <summary>
            Type of partitioning scheme
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreManifest.PartitionCount">
            <summary>
            Count of number of partitions.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMetaData">
            <summary>
            The class that exposes all the the Webstore MetaData.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetaData.GetSetting(System.String,System.String,System.String)">
            <summary>
            Get centralized setting by name from default site
            </summary>
            <param name="settingName"></param>
            <param name="deployment"></param>
            <param name="clusterName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreMetaData.AddSettingsChangedEventHandler(Microsoft.Webstore.MetaData.SettingsChangedEventHandler)">
            <summary>
            Add SettingsChangedEventHandler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Instance">
            <summary>
            Gets the Class singleton instance
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.DefaultConfig">
            <summary>
            Gets the default config instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Sites">
            <summary>
            Gets the list of sites.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMetaData.Item(System.String)">
            <summary>
            Gets the config instance for the given site
            </summary>
            <param name="SiteName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAction">
            <summary>
            Gives information about the action in the WstConfig database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase">
            <summary>
            Guid Keyed item base class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Uid">
            <summary>
            Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectBase.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreActionCollection">
            <summary>
            Collection of Actions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreActionCollection.Contains(System.Guid)">
            <summary>
            Does the action collection contain action corresponding to the given GUID.
            </summary>
            <param name="healingActionUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessAction">
            <summary>
            ProcessAction
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessAction.Action">
            <summary>
            Safeguard
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcess">
            <summary>
            Gives information about the alert process in the WstConfig database
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection">
            <summary>
            Collection of alert process in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertProcessCollection.Contains(System.Guid)">
            <summary>
            Does the alert process collection contain alert process corresponding to the given GUID.
            </summary>
            <param name="alertProcessUid"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection">
            <summary>
            Collection of process actions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Contains(System.Guid)">
            <summary>
            Does the process action collection contain process actions corresponding to the given GUID.
            </summary>
            <param name="processActionUid"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreProcessActionCollection.Item(System.String)">
            <summary>
            Gets the processaction object of the given name.
            </summary>
            <param name="processActionName"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertCondition">
            <summary>
            Gives information about the conditions for the alert rule
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.MonitoredDatumName">
            <summary>
            MonitoredDatumName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.ComparisonOperator">
            <summary>
            Comparison
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertCondition.Threshold">
            <summary>
            Threshold
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertRule">
            <summary>
            Gives information about the rule for an Alert generation.
            This is used by the monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertAt">
            <summary>
            GenerateAlertAt
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.GenerateAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.ResolveAlertConditions">
            <summary>
            GenerateAlertConditions
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.Severity">
            <summary>
            Severity
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcess">
            <summary>
            AlertProcess
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryCount">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreAlertRule.AlertProcessRetryPeriod">
            <summary>
            AlertProcessRetryCount
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection">
            <summary>
            Collection of alert rule conditions in a WstConfig database.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreAlertConditionCollection.Contains(System.Guid)">
            <summary>
            Does the alert rule condition collection contain condition corresponding to the given GUID.
            </summary>
            <param name="alertConditionUid"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.UpdateServerRoles">
            <summary>
            Specifies if we should update the server roles of the destination server.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.ServerPoolServerRole">
            <summary>
            Server role for the server pool.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.Common.Monitoring.ActionProvisionNewServerPropertyNames.FailedServerServerRole">
            <summary>
            Server Role for failed servers.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstAlert">
            <summary>
            Container for alert information
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.Common.Monitoring.WstMonData">
            <summary>
            Container for alert monitored data polled from the PerfDB
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringProperty">
            <summary>
            WebstoreMonitoringProperty
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection">
            <summary>
            Collection of servers in a WstConfig database.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoringPropertyCollection.Item(System.String)">
            <summary>
            name indexer
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum">
            <summary>
            Information about the MonitoredDatum. This is used by the 
            monitoring agent.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Type">
            <summary>
            AssemblyName
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.Properties">
            <summary>
            Properties
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.SamplingFrequency">
            <summary>
            SamplingFrequency
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationType">
            <summary>
            AggregationType
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.AggregationInterval">
            <summary>
            AggrInterval
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.StaleTime">
            <summary>
            StaleTime
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.RatePrecision">
            <summary>
            RatePrecision
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.ServerRoleUid">
            <summary>
            ServerRole
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreMonitoredDatum.CollectAt">
            <summary>
            CollectAt
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo">
            <summary>
            The instance of this class provides all information that is
            needed by the Monitoring agent and the self healing agent.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Refresh(System.Boolean)">
            <summary>
            refreshes this deployment with latest changes.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsPollingRequired">
            <summary>
            Depending upon the Polling Interval tells wether this deployment needs to be polled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.RenewExpiration(System.DateTime)">
            <summary>
            Renews configuration expiration interval.
            </summary>
            <param name="dtConfigExpires"></param>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.PollSelfAdminInfo(System.Boolean)">
            <summary>
            Poll for self Admin Info
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.StartMonitoringInfoThread">
            <summary>
            Starts polling for monitoring information.
            </summary>
        </member>
        <member name="M:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.BackgroundPollSelfAdminInfo(System.Object)">
            <summary>
            Polls for monitoring information changes. This includes all the tables that are used by the monitoring and the healing agent.
            </summary>
            <param name="state"></param>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfo.IsInitialized">
            <summary>
            Set to true after first call to get the SelfAdminInfo is made.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1">
            <summary>
            WebstoreSelfAdminInfoObjectsCollection
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollection`1.Item(System.String)">
            <summary>
            Name
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSelfAdminInfoObjectsCollectionCollection`1">
            <summary>
            The collection for the Metadata KeyedCollection
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServer">
            <summary>
            Gives information about the server in the WstConfig database
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Config">
            <summary>
            Gets the config database for this server
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.IPAddresses">
            <summary>
            Gets the collection of IPAddresses for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Cluster">
            <summary>
            Gets the cluster information for this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Databases">
            <summary>
            Gets a collection of WmoDatabase on this server
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Fileshares">
            <summary>
            Gets the collection of Fileshares on this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ReplicationDistributionServer">
            <summary>
            Gets the replication distribution server for this server.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Uid">
            <summary>
            Gets the Guid associated with this server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Name">
            <summary>
            Gets the name of the server.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DataCenterName">
            <summary>
            Gets the datacenter the server belongs to.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.Description">
            <summary>
            Gets the description for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.DistributionDatabaseTemplateName">
            <summary>
            Gets the Distribution Database Template Name for the server as
            described in the WstConfig database.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointName">
            <summary>
            Gets the name of the registered mirroring endpoint name.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringEndPointPort">
            <summary>
            Gets the port number associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.MirroringCompleteDomainName">
            <summary>
            Gets the complete domain name associated with the registered mirroring endpoint.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServer.ServerRoles">
            <summary>
            Server roles for this server.
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreServerRole">
            <summary>
            Webstore manifest class
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Uid">
            <summary>
            ServerRole Uid
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Name">
            <summary>
            ServerRole Name
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreServerRole.Description">
            <summary>
            ServerRole Description.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreSetting">
            <summary>
            Stores an individual settings.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Name">
            <summary>
            Name of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Uid">
            <summary>
            Uid of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.WebstoreSetting.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase._server">
            <summary>
            The SQL server of the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Deployment">
            <summary>
            Gets the deployment which SQLDatabase belongs to. Our design in Throttling limits to have only one deployment on each database and this limitation will be reflected to Metadata as well. The limitation from throttling is because of the coupling between throttling and SQLConnection pooling. They both need to be per database. For clouddb, there can be multiple deployments per database but our throttling layer cannot support this. The affects will be limited to the centralized settings aspect of the throttling. Settings at deployment will be applied randomly. Other level of settings should work fine.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.DatabaseName">
            <summary>
            Gets the name that represent the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Key">
            <summary>
            Gets the SQLDatabaseName key for the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Name">
            <summary>
            Gets the SQLDatabaseName that represent the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Replicas">
            <summary>
            Gets the list of all the replicas that are hosted by the current SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.Server">
            <summary>
            Gets the SQL server of the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.ServerName">
            <summary>
            Gets the SQL server name of the SQLDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName._serverName">
            <summary>
            The SQL server name of the SQLDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName._databaseName">
            <summary>
            The name of the SQLDatabase.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName._hashCode">
            <summary>
            Computed hash code for the SqlDatabase. MaxValue is chosen as initial value because hash code calculation can never lead to MaxValue.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName.Name">
            <summary>
            Gets the name of the SQLDatabase.
            </summary>
        </member>
        <member name="P:Microsoft.Webstore.MetaData.SqlDatabase.SqlDatabaseName.ServerName">
            <summary>
            Gets the SQL server name of the SQLDatabase.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreFailoverMode">
            <summary>
            Enumerates the different failover modes the client library uses.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOnly">
            <summary>
            Only try to primary resource.
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryThenPrimary">
            <summary>
            First try secondary resource and then primary.
            </summary>         
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.SecondaryOnly">
            <summary>
            Only try secondary resource
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryThenSecondary">
            <summary>
            First try primary resource and then secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.PrimaryOrSecondary">
            <summary>
            Try either primary or secondary
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultRead">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.DefaultWrite">
            <summary>
            Maps to one of the above types
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreFailoverMode.WriteAllCopies">
            <summary>
            Used for WriteAllCopies topology.
            </summary>
        </member>
        <member name="T:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus">
            <summary>
            The enumerator for datapartition status
            </summary>
        </member>
        <member name="F:Microsoft.Webstore.MetaData.WebstoreDataPartitionStatus.ReadWrite">
            <summary>
            The datapartition can be written to and read from.
            </summary>
        </member>
        <mem